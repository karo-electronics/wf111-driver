cscope 15 $HOME/git/wf111/csr/os_linux/driver               0001033358
	@bh.c

16 
	~"c§_wifi_hù_unifi.h
"

17 
	~"unifi_¥iv.h
"

36 
uf_°¨t_thªad
(
unifi_¥iv_t
 *
¥iv
, 
uf_thªad
 *
thªad
, (*
func
)(*))

38 i‡(
thªad
->
thªad_èsk
 !
NULL
) {

39 
	`unifi_îr‹
(
¥iv
, "%†thªadáÃódy sèπed\n", 
thªad
->
«me
);

44 
thªad
->
thªad_èsk
 = 
	`kthªad_run
(
func
, 
¥iv
, "%s",Åhªad->
«me
);

45 i‡(
	`IS_ERR
(
thªad
->
thªad_èsk
)) {

46  
	`PTR_ERR
(
thªad
->
thªad_èsk
);

50 i‡(
bh_¥i‹ôy
 != -1) {

51 i‡(
bh_¥i‹ôy
 >0 && bh_¥i‹ôy <
MAX_RT_PRIO
) {

52 
sched_∑øm
 
∑øm
;

53 
¥iv
->
bh_thªad
.
¥io
 = 
bh_¥i‹ôy
;

54 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "%sÅhread (RT)Öriority = %d\n",

55 
thªad
->
«me
, 
bh_¥i‹ôy
);

56 
∑øm
.
sched_¥i‹ôy
 = 
bh_¥i‹ôy
;

57 
	`sched_£tscheduÀr
(
thªad
->
thªad_èsk
, 
SCHED_FIFO
, &
∑øm
);

58 } i‡(
bh_¥i‹ôy
 > 
MAX_RT_PRIO
 && bh_¥i‹ôy <
MAX_PRIO
) {

59 
¥iv
->
bh_thªad
.
¥io
 = 
bh_¥i‹ôy
;

60 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "%sÅhreadÖriority = %d\n",

61 
thªad
->
«me
, 
	`PRIO_TO_NICE
(
bh_¥i‹ôy
));

62 
	`£t_u£r_ni˚
(
thªad
->
thªad_èsk
, 
	`PRIO_TO_NICE
(
bh_¥i‹ôy
));

64 
¥iv
->
bh_thªad
.
¥io
 = 
DEFAULT_PRIO
;

65 
	`unifi_w¨nög
(
¥iv
, "%sÅhread unsupported (%d)Öriority\n",

66 
thªad
->
«me
, 
bh_¥i‹ôy
);

69 
¥iv
->
bh_thªad
.
¥io
 = 
DEFAULT_PRIO
;

71 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "Sèπed %†thªad\n", 
thªad
->
«me
);

74 
	}
}

92 
	$uf_°›_thªad
(
unifi_¥iv_t
 *
¥iv
, 
uf_thªad
 *
thªad
)

94 i‡(!
thªad
->
thªad_èsk
) {

95 
	`unifi_nŸi˚
(
¥iv
, "%†thªad i†Æªady st›≥d\n", 
thªad
->
«me
);

99 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "St›pög %†thªad\n", 
thªad
->
«me
);

101 
	`kthªad_°›
(
thªad
->
thªad_èsk
);

102 
thªad
->
thªad_èsk
 = 
NULL
;

104 
	}
}

122 
	$uf_waô_f‹_thªad_to_°›
(
unifi_¥iv_t
 *
¥iv
, 
uf_thªad
 *
thªad
)

129 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "%†waôög f‹Åhê°› sig«l.\n", 
thªad
->
«me
);

130 
	`£t_cuºít_°©e
(
TASK_INTERRUPTIBLE
);

131 i‡(!
	`kthªad_should_°›
()) {

132 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "%†scheduÀ....\n", 
thªad
->
«me
);

133 
	`scheduÀ
();

136 
thªad
->
thªad_èsk
 = 
NULL
;

137 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "%†exôög....\n", 
thªad
->
«me
);

138 
	}
}

159 
	$h™dÀ_bh_îr‹
(
unifi_¥iv_t
 *
¥iv
)

161 
u8
 
c⁄f_∑øm
 = 
CONFIG_IND_ERROR
;

162 
C§Uöt8
 
öãrÁ˚Tag
 = 0;

166 
¥iv
->
bh_thªad
.
block_thªad
 = 1;

169 
¥iv
->
öô_¥ogªss
 = 
UNIFI_INIT_NONE
;

172  
öãrÁ˚Tag
 =0; i¡îÁ˚Tag <
CSR_WIFI_NUM_INTERFACES
;interfaceTag ++) {

173 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

174 i‡(
öãrÁ˚Priv
->
√tdev_ªgi°îed
 == 1) {

175 
	`√tif_ˇºõr_off
(
¥iv
->
√tdev
[
öãrÁ˚Tag
]);

179 #ifde‡
CSR_NATIVE_LINUX


181 
	`uf_ab‹t_mlme
(
¥iv
);

184 
	`Êush_w‹kqueue
(
¥iv
->
unifi_w‹kqueue
);

188 
	`unifi_îr‹
(
¥iv
, "handle_bh_error: fatalÉrror isÑeportedÅoÅhe SME.\n");

190 
	`ul_log_c⁄fig_öd
(
¥iv
, &
c⁄f_∑øm
, (
u8
));

192 
	}
}

225 
	$bh_thªad_fun˘i⁄
(*
¨g
)

227 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
¨g
;

228 
C§Resu…
 
c§Resu…
;

229 
ªt
;

230 
C§Uöt32
 
timeout
, 
t
;

231 
uf_thªad
 *
this_thªad
;

233 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "bh_thread_function starting\n");

235 
this_thªad
 = &
¥iv
->
bh_thªad
;

237 
t
 = 
timeout
 = 0;

238 !
	`kthªad_should_°›
()) {

240 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "bh_thread goesÅo sleep.\n");

242 i‡(
timeout
 > 0) {

244 
t
 = 
	`m£cs_to_jiffõs
(
timeout
);

245 
ªt
 = 
	`waô_evít_öãºu±ibÀ_timeout
(
this_thªad
->
wakeup_q
,

246 (
this_thªad
->
wakeup_Êag
 && !this_thªad->
block_thªad
) ||

247 
	`kthªad_should_°›
(),

248 
t
);

249 
timeout
 = (
ªt
 > 0Ë? 
	`jiffõs_to_m£cs
(ret) : 0;

251 
ªt
 = 
	`waô_evít_öãºu±ibÀ
(
this_thªad
->
wakeup_q
,

252 (
this_thªad
->
wakeup_Êag
 && !this_thªad->
block_thªad
) ||

253 
	`kthªad_should_°›
());

256 i‡(
	`kthªad_should_°›
()) {

257 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "bh_thread: signalledÅoÉxit\n");

261 i‡(
ªt
 < 0) {

262 
	`unifi_nŸi˚
(
¥iv
,

264 
ªt
);

265 
	`uf_waô_f‹_thªad_to_°›
(
¥iv
, 
this_thªad
);

269 
this_thªad
->
wakeup_Êag
 = 0;

271 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "bh_thread calls unifi_bh().\n");

273 
	`C§SdioCœim
(
¥iv
->
sdio
);

274 
c§Resu…
 = 
	`unifi_bh
(
¥iv
->
ˇrd
, &
timeout
);

275 if(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

276 i‡(
c§Resu…
 =
CSR_WIFI_HIP_RESULT_NO_DEVICE
) {

277 
	`C§SdioRñó£
(
¥iv
->
sdio
);

278 
	`uf_waô_f‹_thªad_to_°›
(
¥iv
, 
this_thªad
);

282 
	`h™dÀ_bh_îr‹
(
¥iv
);

284 
	`C§SdioRñó£
(
¥iv
->
sdio
);

297 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "bh_threadÉxiting....\n");

299 
	}
}

317 
	$uf_öô_bh
(
unifi_¥iv_t
 *
¥iv
)

319 
r
;

322 
¥iv
->
io_ab‹ãd
 = 0;

326 
r
 = 
	`uf_°¨t_thªad
(
¥iv
, &¥iv->
bh_thªad
, 
bh_thªad_fun˘i⁄
);

327 i‡(
r
) {

328 
	`unifi_îr‹
(
¥iv
,

330  
r
;

334 
r
 = 
	`c§_sdio_löux_ö°Æl_úq
(
¥iv
->
sdio
);

335 i‡(
r
) {

336 
	`unifi_îr‹
(
¥iv
,

339 
	`uf_°›_thªad
(
¥iv
, &¥iv->
bh_thªad
);

342  
r
;

343 
	}
}

365 
C§Resu…
 
	$unifi_run_bh
(*
o•riv
)

367 
unifi_¥iv_t
 *
¥iv
 = 
o•riv
;

373 i‡(
¥iv
->
bh_thªad
.
block_thªad
 == 1) {

374 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "unifi_run_bh: discard message.\n");

382  
CSR_RESULT_FAILURE
;

385 
¥iv
->
bh_thªad
.
wakeup_Êag
 = 1;

387 
	`wake_up_öãºu±ibÀ
(&
¥iv
->
bh_thªad
.
wakeup_q
);

389  
CSR_RESULT_SUCCESS
;

390 
	}
}

	@data_tx.c

15 
	~"c§_wifi_hù_unifi.h
"

16 
	~"unifi_¥iv.h
"

19 
	$uf_vîify_m4
(
unifi_¥iv_t
 *
¥iv
, c⁄° *
∑ckë
, 
Àngth
)

21 c⁄° *
p
 = 
∑ckë
;

22 
C§Uöt16
 
keyöfo
;

25 i‡(
Àngth
 < (4 + 5 + 8 + 32 + 16 + 8 + 8 + 16 + 1 + 8)) {

29 
p
 += 8;

30 
keyöfo
 = 
p
[5] << 8 |Ö[6];

32 (
p
[0] == 1 ||Ö[0] == 2) &&

33 
p
[1] == 3 &&

35 (
p
[4] == 254 ||Ö[4] == 2) &&

36 ((
keyöfo
 & 0x0007) == 1 || (keyinfo & 0x0007) == 2) &&

37 (
keyöfo
 & ~0x0207U) == 0x0108 &&

38 (
p
[4 + 5 + 8 + 32 + 16 + 8 + 8 + 16 + 0] == 0 &&

39 
p
[4 + 5 + 8 + 32 + 16 + 8 + 8 + 16 + 1] == 0)

41 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "uf_verify_m4: M4 detected \n");

48 
	}
}

	@drv.c

35 
	~<löux/öô.h
>

36 
	~<löux/¶ab.h
>

37 
	~<löux/pﬁl.h
>

38 
	~<asm/uac˚ss.h
>

39 
	~<löux/jiffõs.h
>

41 
	~"c§_wifi_hù_unifivîsi⁄.h
"

42 
	~"unifi_¥iv.h
"

43 
	~"c§_wifi_hù_c⁄vîsi⁄s.h
"

46 
	gbuswidth
 = 0;

47 
	gsdio_˛ock
 = 50000;

48 
	gunifi_debug
 = 0;

50 
	gfw_öô
[
MAX_UNIFI_DEVS
] = {-1, -1, -1, -1};

51 
	gu£_5g
 = 0;

52 
	gÀd_mask
 = 0;

53 
	gdißbÀ_hw_ª£t
 = 0;

54 
	gdißbÀ_powî_c⁄åﬁ
 = 0;

55 
	gíabÀ_wﬁ
 = 
UNIFI_WOL_OFF
;

56 #i‡(
deföed
 
CSR_SUPPORT_SME
Ë&& (deföed 
CSR_SUPPORT_WEXT
)

57 
	gé_80211d
 = ()
CSR_WIFI_SME_80211D_TRUST_LEVEL_MIB
;

59 
	gsdio_block_size
 = -1;

60 
	gsdio_byã_mode
 = 0;

61 
	gc‹edump_max
 = 
CSR_WIFI_HIP_NUM_COREDUMP_BUFFERS
;

62 
	grun_bh_⁄˚
 = -1;

63 
	gbh_¥i‹ôy
 = -1;

64 #ifde‡
CSR_WIFI_HIP_DEBUG_OFFLINE


65 
	#UNIFI_LOG_HIP_SIGNALS_FILTER_SIGNAL
 (1 << 0)

	)

66 
	#UNIFI_LOG_HIP_SIGNALS_FILTER_BULKDATA
 (1 << 1)

	)

67 
	#UNIFI_LOG_HIP_SIGNALS_FILTER_TIMESTAMP
 (1 << 2)

	)

68 
	glog_hù_sig«ls
 = 0;

71 
MODULE_DESCRIPTION
("CSR UniFi (SDIO)");

73 
moduÀ_∑øm
(
buswidth
, , 
S_IRUGO
|
S_IWUSR
);

74 
moduÀ_∑øm
(
sdio_˛ock
, , 
S_IRUGO
|
S_IWUSR
);

75 
moduÀ_∑øm
(
unifi_debug
, , 
S_IRUGO
|
S_IWUSR
);

76 
moduÀ_∑øm_¨øy
(
fw_öô
, , 
NULL
, 
S_IRUGO
|
S_IWUSR
);

77 
moduÀ_∑øm
(
u£_5g
, , 
S_IRUGO
|
S_IWUSR
);

78 
moduÀ_∑øm
(
Àd_mask
, , 
S_IRUGO
|
S_IWUSR
);

79 
moduÀ_∑øm
(
dißbÀ_hw_ª£t
, , 
S_IRUGO
|
S_IWUSR
);

80 
moduÀ_∑øm
(
dißbÀ_powî_c⁄åﬁ
, , 
S_IRUGO
|
S_IWUSR
);

81 
moduÀ_∑øm
(
íabÀ_wﬁ
, , 
S_IRUGO
|
S_IWUSR
);

82 #i‡(
deföed
 
CSR_SUPPORT_SME
Ë&& (deföed 
CSR_SUPPORT_WEXT
)

83 
moduÀ_∑øm
(
é_80211d
, , 
S_IRUGO
|
S_IWUSR
);

85 
moduÀ_∑øm
(
sdio_block_size
, , 
S_IRUGO
|
S_IWUSR
);

86 
moduÀ_∑øm
(
sdio_byã_mode
, , 
S_IRUGO
|
S_IWUSR
);

87 
moduÀ_∑øm
(
c‹edump_max
, , 
S_IRUGO
|
S_IWUSR
);

88 
moduÀ_∑øm
(
run_bh_⁄˚
, , 
S_IRUGO
|
S_IWUSR
);

89 
moduÀ_∑øm
(
bh_¥i‹ôy
, , 
S_IRUGO
|
S_IWUSR
);

90 #ifde‡
CSR_WIFI_HIP_DEBUG_OFFLINE


91 
moduÀ_∑øm
(
log_hù_sig«ls
, , 
S_IRUGO
|
S_IWUSR
);

94 
MODULE_PARM_DESC
(
buswidth
, "SDIO bus width (0=default), set 1 for 1-bit or 4 for 4-bit mode");

95 
MODULE_PARM_DESC
(
sdio_˛ock
, "SDIO bus frequency in kHz, (default = 50 MHz)");

96 
MODULE_PARM_DESC
(
unifi_debug
, "DiagnosticÑeportingÜevel");

97 
MODULE_PARM_DESC
(
fw_öô
, "SetÅo 0ÅoÖrevent f/w initialization onÉrror");

98 
MODULE_PARM_DESC
(
u£_5g
, "UseÅhe 5G (802.11a)Ñadio band");

99 
MODULE_PARM_DESC
(
Àd_mask
, "LED mask flags");

100 
MODULE_PARM_DESC
(
dißbÀ_hw_ª£t
, "SetÅo 1Åo disable hardwareÑeset");

101 
MODULE_PARM_DESC
(
dißbÀ_powî_c⁄åﬁ
, "SetÅo 1Åo disable SDIOÖower control");

102 
MODULE_PARM_DESC
(
íabÀ_wﬁ
, "Enable wake-on-wlan function 0=off, 1=SDIO, 2=PIO");

103 #i‡(
deföed
 
CSR_SUPPORT_SME
Ë&& (deföed 
CSR_SUPPORT_WEXT
)

104 
MODULE_PARM_DESC
(
é_80211d
, "802.11d Trust Level (1-6, default = 5)");

106 
MODULE_PARM_DESC
(
sdio_block_size
, "SetÅo override SDIO block size");

107 
MODULE_PARM_DESC
(
sdio_byã_mode
, "SetÅo 1 for byte mode SDIO");

108 
MODULE_PARM_DESC
(
c‹edump_max
, "Number of chip mini-coredump buffersÅoállocate");

109 
MODULE_PARM_DESC
(
run_bh_⁄˚
, "Run BH only when firmware interrupts");

110 
MODULE_PARM_DESC
(
bh_¥i‹ôy
, "ModifyÅhe BHÅhreadÖriority");

111 #ifde‡
CSR_WIFI_HIP_DEBUG_OFFLINE


112 
MODULE_PARM_DESC
(
log_hù_sig«ls
, "SetÅo 1ÅoÉnable HIP signal offlineÜogging");

115 
	g∑tch_mode
 = 0;

116 
moduÀ_∑øm
(
∑tch_mode
, , 
S_IRUGO
 | 
S_IWUSR
);

117 
MODULE_PARM_DESC
(
∑tch_mode
, "SpecifyÖatch modeÅo beÜoaded initially");

121 
udi_log_evít
(
ul_˛õ¡_t
 *
˛õ¡
,

122 c⁄° 
u8
 *
sig«l
, 
sig«l_Àn
,

123 c⁄° 
bulk_d©a_∑øm_t
 *
bulkd©a
,

124 
dú
);

126 
udi_£t_log_fûãr
(
ul_˛õ¡_t
 *
p˛i
,

127 
unifiio_fûãr_t
 *
udi_fûãr
);

131 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 37)

132 
DEFINE_SEMAPHORE
(
udi_muãx
);

134 
DECLARE_MUTEX
(
udi_muãx
);

137 
C§I¡32
 
	$C§HùResu…ToSètus
(
C§Resu…
 
c§Resu…
)

139 
C§I¡32
 
r
 = -
EIO
;

141 
c§Resu…
)

143 
CSR_RESULT_SUCCESS
:

144 
r
 = 0;

146 
CSR_WIFI_HIP_RESULT_RANGE
:

147 
r
 = -
ERANGE
;

149 
CSR_WIFI_HIP_RESULT_NO_DEVICE
:

150 
r
 = -
ENODEV
;

152 
CSR_WIFI_HIP_RESULT_INVALID_VALUE
:

153 
r
 = -
EINVAL
;

155 
CSR_WIFI_HIP_RESULT_NOT_FOUND
:

156 
r
 = -
ENOENT
;

158 
CSR_WIFI_HIP_RESULT_NO_SPACE
:

159 
r
 = -
ENOSPC
;

161 
CSR_WIFI_HIP_RESULT_NO_MEMORY
:

162 
r
 = -
ENOMEM
;

164 
CSR_RESULT_FAILURE
:

165 
r
 = -
EIO
;

169 
r
 = -
EIO
;

171  
r
;

172 
	}
}

176 
	$åa˚_puã°_cmdid
(
unifi_puã°_comm™d_t
 
puã°_cmd
)

178 
puã°_cmd
)

180 
UNIFI_PUTEST_START
:

182 
UNIFI_PUTEST_STOP
:

184 
UNIFI_PUTEST_SET_SDIO_CLOCK
:

186 
UNIFI_PUTEST_CMD52_READ
:

188 
UNIFI_PUTEST_CMD52_BLOCK_READ
:

190 
UNIFI_PUTEST_CMD52_WRITE
:

192 
UNIFI_PUTEST_DL_FW
:

194 
UNIFI_PUTEST_DL_FW_BUFF
:

196 
UNIFI_PUTEST_COREDUMP_PREPARE
:

198 
UNIFI_PUTEST_GP_READ16
:

200 
UNIFI_PUTEST_GP_WRITE16
:

205 
	}
}

207 #ifde‡
CSR_WIFI_HIP_DEBUG_OFFLINE


208 
	$uf_ªgi°î_hù_ofÊöe_debug
(
unifi_¥iv_t
 *
¥iv
)

210 
ul_˛õ¡_t
 *
udi_˛i
;

211 
i
;

213 
udi_˛i
 = 
	`ul_ªgi°î_˛õ¡
(
¥iv
, 
CLI_USING_WIRE_FORMAT
, 
udi_log_evít
);

214 i‡(
udi_˛i
 =
NULL
) {

216 
	`unifi_îr‹
(
¥iv
, "Too many UDI clientsálready open\n");

217  -
ENOSPC
;

219 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "Offline HIP client isÑegistered\n");

221 
	`down
(&
¥iv
->
udi_loggög_muãx
);

222 
udi_˛i
->
evít_hook
 = 
udi_log_evít
;

223 
	`unifi_£t_udi_hook
(
¥iv
->
ˇrd
, 
loggög_h™dÀr
);

225 
i
 = 0; i < 
SIG_FILTER_SIZE
; i++) {

226 
udi_˛i
->
sig«l_fûãr
[
i
] = 0xFFFF;

228 
¥iv
->
loggög_˛õ¡
 = 
udi_˛i
;

229 
	`up
(&
¥iv
->
udi_loggög_muãx
);

232 
	}
}

234 
	$uf_uƒegi°î_hù_ofÊöe_debug
(
unifi_¥iv_t
 *
¥iv
)

236 
ul_˛õ¡_t
 *
udi_˛i
 = 
¥iv
->
loggög_˛õ¡
;

237 i‡(
udi_˛i
 =
NULL
)

239 
	`unifi_îr‹
(
¥iv
, "Unknown HIP client unregisterÑequest\n");

240  -
ERANGE
;

243 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "Offline HIP client is unregistered\n");

245 
	`down
(&
¥iv
->
udi_loggög_muãx
);

246 
¥iv
->
loggög_˛õ¡
 = 
NULL
;

247 
udi_˛i
->
evít_hook
 = 
NULL
;

248 
	`up
(&
¥iv
->
udi_loggög_muãx
);

250 
	`ul_dîegi°î_˛õ¡
(
udi_˛i
);

253 
	}
}

272 
	$unifi_›í
(
öode
 *öode, 
fûe
 *file)

274 
devno
;

275 
unifi_¥iv_t
 *
¥iv
;

276 
ul_˛õ¡_t
 *
udi_˛i
;

278 
	`func_íãr
();

280 
devno
 = 
	`MINOR
(
öode
->
i_rdev
) >> 1;

287 
¥iv
 = 
	`uf_gë_ö°™˚
(
devno
);

288 i‡(
¥iv
 =
NULL
) {

289 
	`unifi_îr‹
(
NULL
, "unifi_open: No deviceÖresent\n");

290 
	`func_exô
();

291  -
ENODEV
;

296 i‡(
	`MINOR
(
öode
->
i_rdev
) & 0x1) {

297 
udi_˛i
 = 
	`ul_ªgi°î_˛õ¡
(
¥iv
, 
CLI_USING_WIRE_FORMAT
, 
udi_log_evít
);

298 i‡(
udi_˛i
 =
NULL
) {

300 
	`unifi_îr‹
(
¥iv
, "Too many clientsálready open\n");

301 
	`uf_put_ö°™˚
(
devno
);

302 
	`func_exô
();

303  -
ENOSPC
;

305 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "Clõ¡ i†ªgi°îedÅÿ/dev/unifiudi%d\n", 
devno
);

313 
	`down
(&
udi_muãx
);

315 #ifde‡
CSR_SME_USERSPACE


317 i‡(
¥iv
->
sme_˛i
) {

318 
	`up
(&
udi_muãx
);

319 
	`uf_put_ö°™˚
(
devno
);

321 
	`unifi_öfo
(
¥iv
, "There isálreadyá configuration client usingÅhe character device\n");

322 
	`func_exô
();

323  -
EBUSY
;

327 #ifde‡
CSR_SUPPORT_SME


328 
udi_˛i
 = 
	`ul_ªgi°î_˛õ¡
(
¥iv
,

329 
CLI_USING_WIRE_FORMAT
 | 
CLI_SME_USERSPACE
,

330 
sme_log_evít
);

333 
udi_˛i
 = 
	`ul_ªgi°î_˛õ¡
(
¥iv
,

335 
sme_«tive_log_evít
);

337 i‡(
udi_˛i
 =
NULL
) {

339 
	`up
(&
udi_muãx
);

340 
	`uf_put_ö°™˚
(
devno
);

342 
	`unifi_îr‹
(
¥iv
, "Too many clientsálready open\n");

343 
	`func_exô
();

344  -
ENOSPC
;

352 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "SME client (id:%d s:0x%X) isÑegistered\n",

353 
udi_˛i
->
˛õ¡_id
, udi_˛i->
£ndî_id
);

355 i‡(
¥iv
->
sme_˛i
 =
NULL
) {

356 
¥iv
->
sme_˛i
 = 
udi_˛i
;

359 
	`up
(&
udi_muãx
);

367 
fûe
->
¥iv©e_d©a
 = 
udi_˛i
;

369 
	`func_exô
();

371 
	}
}

375 
	$unifi_ªÀa£
(
öode
 *öode, 
fûe
 *
fûp
)

377 
ul_˛õ¡_t
 *
udi_˛i
 = (*)
fûp
->
¥iv©e_d©a
;

378 
devno
;

379 
unifi_¥iv_t
 *
¥iv
;

381 
	`func_íãr
();

383 
¥iv
 = 
	`uf_föd_ö°™˚
(
udi_˛i
->
ö°™˚
);

384 i‡(!
¥iv
) {

385 
	`unifi_îr‹
(
¥iv
, "unifi_close: instance for deviceÇot found\n");

386  -
ENODEV
;

389 
devno
 = 
	`MINOR
(
öode
->
i_rdev
) >> 1;

392 i‡((
	`MINOR
(
öode
->
i_rdev
) & 0x1) == 0) {

394 i‡(
¥iv
->
sme_˛i
 !
udi_˛i
) {

395 
	`unifi_nŸi˚
(
¥iv
, "Surprise closing config device:ÇotÅhe sme client\n");

397 
	`unifi_nŸi˚
(
¥iv
, "SME clõ¡ clo£ (unifi%d)\n", 
devno
);

403 
	`down
(&
udi_muãx
);

404 
¥iv
->
sme_˛i
 = 
NULL
;

405 
	`up
(&
udi_muãx
);

407 #ifde‡
CSR_SME_USERSPACE


410 
C§WifiRouãrCålWifiOffReq
 
ªq
 = {{
CSR_WIFI_ROUTER_CTRL_HIP_REQ
, 0, 0, 0, 
NULL
}};

411 
	`C§WifiRouãrCålWifiOffReqH™dÀr
(
¥iv
, &
ªq
.
comm⁄
);

414 
	`uf_sme_deöô
(
¥iv
);

422 
	`uf_sme_ˇn˚l_ªque°
(
¥iv
, 0);

427 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "UDI clõ¡ clo£ (unifiudi%d)\n", 
devno
);

430 
	`down
(&
¥iv
->
udi_loggög_muãx
);

431 i‡(
udi_˛i
 =
¥iv
->
loggög_˛õ¡
) {

432 
¥iv
->
loggög_˛õ¡
 = 
NULL
;

434 
	`up
(&
¥iv
->
udi_loggög_muãx
);

436 i‡(
udi_˛i
 =
¥iv
->
amp_˛õ¡
) {

437 
¥iv
->
amp_˛õ¡
 = 
NULL
;

442 
	`ul_dîegi°î_˛õ¡
(
udi_˛i
);

444 
	`uf_put_ö°™˚
(
devno
);

447 
	}
}

467 
ssize_t


468 
	$unifi_ªad
(
fûe
 *
fûp
, *
p
, 
size_t
 
Àn
, 
loff_t
 *
poff
)

470 
ul_˛õ¡_t
 *
p˛i
 = (*)
fûp
->
¥iv©e_d©a
;

471 
unifi_¥iv_t
 *
¥iv
;

472 
udi_log_t
 *
log±r
 = 
NULL
;

473 
udi_msg_t
 *
msg±r
;

474 
li°_hód
 *
l
;

475 
msgÀn
;

477 
	`func_íãr
();

479 
¥iv
 = 
	`uf_föd_ö°™˚
(
p˛i
->
ö°™˚
);

480 i‡(!
¥iv
) {

481 
	`unifi_îr‹
(
¥iv
, "invalidÖriv\n");

482  -
ENODEV
;

485 i‡(!
p˛i
->
udi_íabÀd
) {

486 
	`unifi_îr‹
(
¥iv
, "unifi_read: unknown client.");

487  -
EINVAL
;

490 i‡(
	`li°_em±y
(&
p˛i
->
udi_log
)) {

491 i‡(
fûp
->
f_Êags
 & 
O_NONBLOCK
) {

496 i‡(
	`waô_evít_öãºu±ibÀ
(
p˛i
->
udi_wq
,

497 !
	`li°_em±y
(&
p˛i
->
udi_log
)))

499 
	`unifi_îr‹
(
¥iv
, "unifi_read: wait_event_interruptible failed.");

500  -
ERESTARTSYS
;

506 i‡(
	`down_öãºu±ibÀ
(&
p˛i
->
udi_£m
)) {

507  -
ERESTARTSYS
;

509 
l
 = 
p˛i
->
udi_log
.
√xt
;

510 
	`li°_dñ
(
l
);

511 
	`up
(&
p˛i
->
udi_£m
);

514 
log±r
 = 
	`li°_íåy
(
l
, 
udi_log_t
, 
q
);

515 i‡(
log±r
 =
NULL
) {

516 
	`unifi_îr‹
(
¥iv
, "unifi_read: failedÅo getÉvent.\n");

517  -
EINVAL
;

521 
msg±r
 = &
log±r
->
msg
;

522 
msgÀn
 = 
msg±r
->
Àngth
;

523 i‡(
msgÀn
 > 
Àn
) {

524 
	`¥ötk
(
KERN_WARNING
 "åunˇãdÑódÅÿ%dá˘uÆ msgÜí i†%lu\n", 
msgÀn
, ()
Àn
);

525 
msgÀn
 = 
Àn
;

529 i‡(
	`c›y_to_u£r
(
p
, 
msg±r
, 
msgÀn
))

531 
	`¥ötk
(
KERN_ERR
 "FailedÅo copy UDIÜogÅo user\n");

532 
	`k‰ì
(
log±r
);

533  -
EFAULT
;

537 
	`k‰ì
(
log±r
);

539 
	`func_exô_r
(
msgÀn
);

540  
msgÀn
;

542 
	}
}

566 
	$udi_£nd_sig«l_u≈acked
(
unifi_¥iv_t
 *
¥iv
, * 
d©a
, 
uöt
 
d©a_Àn
)

568 
CSR_SIGNAL
 *
sig±r
 = (CSR_SIGNAL*)
d©a
;

569 
CSR_DATAREF
 *
d©¨eÂå
;

570 
bulk_d©a_∑øm_t
 
bulk_d©a
;

571 
uöt
 
sig«l_size
, 
i
;

572 
uöt
 
bulk_d©a_off£t
 = 0;

573 
byãcou¡
, 
r
;

574 
C§Resu…
 
c§Resu…
;

577 
sig«l_size
 = 
	`SigGëSize
(
sig±r
);

578 i‡(!
sig«l_size
 || (sig«l_sizê> 
d©a_Àn
)) {

579 
	`unifi_îr‹
(
¥iv
, "unifi_sme_mlme_req - Invalid signal 0x%x size should be %d bytes\n",

580 
sig±r
->
Sig«lPrimôiveHódî
.
Sig«lId
,

581 
sig«l_size
);

582  -
EINVAL
;

584 
byãcou¡
 = 
sig«l_size
;

587 
d©¨eÂå
 = (
CSR_DATAREF
*)&
sig±r
->
u
;

590 
bulk_d©a_off£t
 = 
sig«l_size
;

593 
i
 = 0; i < 
UNIFI_MAX_DATA_REFERENCES
; i++) {

595 i‡((
d©¨eÂå
+
i
)->
D©aLígth
) {

596 *
de°
;

598 
c§Resu…
 = 
	`unifi_√t_d©a_mÆloc
(
¥iv
, &
bulk_d©a
.
d
[
i
], (
d©¨eÂå
+i)->
D©aLígth
);

599 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

600 
	`unifi_îr‹
(
¥iv
, "udi_send_signal_unpacked: failedÅoállocateÑequest_data.\n");

601  -
EIO
;

604 
de°
 = (*)
bulk_d©a
.
d
[
i
].
os_d©a_±r
;

605 
	`mem˝y
(
de°
, 
d©a
 + 
bulk_d©a_off£t
, 
bulk_d©a
.
d
[
i
].
d©a_Àngth
);

607 
bulk_d©a
.
d
[
i
].
d©a_Àngth
 = 0;

610 
byãcou¡
 +
bulk_d©a
.
d
[
i
].
d©a_Àngth
;

612 
bulk_d©a_off£t
 +
bulk_d©a
.
d
[
i
].
d©a_Àngth
;

616 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "SME Síd: sig«»0x%.4X\n", 
sig±r
->
Sig«lPrimôiveHódî
.
Sig«lId
);

619 
r
 = 
	`ul_£nd_sig«l_u≈acked
(
¥iv
, 
sig±r
, &
bulk_d©a
);

620 i‡(
r
 < 0) {

621 
	`unifi_îr‹
(
¥iv
, "udi_£nd_sig«l_u≈acked: síd faûed (%d)\n", 
r
);

622 
i
=0;i<
UNIFI_MAX_DATA_REFERENCES
;i++) {

623 if(
bulk_d©a
.
d
[
i
].
d©a_Àngth
 != 0) {

624 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulk_d©a
.
d
[
i
]);

627 
	`func_exô
();

628  -
EIO
;

631  
byãcou¡
;

632 
	}
}

656 
	$udi_£nd_sig«l_øw
(
unifi_¥iv_t
 *
¥iv
, *
buf
, 
buÊí
)

658 
sig«l_size
;

659 
sig_id
;

660 
bulk_d©a_∑øm_t
 
d©a_±rs
;

661 
i
, 
r
;

662 
num_d©a_ªfs
;

663 
byãcou¡
;

664 
C§Resu…
 
c§Resu…
;

666 
	`func_íãr
();

673 
sig_id
 = 
	`GET_SIGNAL_ID
(
buf
);

674 
sig«l_size
 = 
buÊí
;

675 
sig«l_size
 -
	`GET_PACKED_DATAREF_LEN
(
buf
, 0);

676 
sig«l_size
 -
	`GET_PACKED_DATAREF_LEN
(
buf
, 1);

677 i‡((
sig«l_size
 <0Ë|| (sig«l_sizê> 
buÊí
)) {

678 
	`unifi_îr‹
(
¥iv
, "udi_send_signal_raw - Couldn't findÜength of signal 0x%x\n",

679 
sig_id
);

680 
	`func_exô
();

681  -
EINVAL
;

683 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "udi_send_signal_raw: signal 0x%.4XÜen:%d\n",

684 
sig_id
, 
sig«l_size
);

686 
	`mem£t
(&
d©a_±rs
, 0, (data_ptrs));

693 
num_d©a_ªfs
 = 0;

694 
byãcou¡
 = 
sig«l_size
;

696 
i
 = 0; i < 
UNIFI_MAX_DATA_REFERENCES
; ++i)

698 
Àn
 = 
	`GET_PACKED_DATAREF_LEN
(
buf
, 
i
);

699 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "udi_£nd_sig«l_øw: d©a_ª‡Àngth = %d\n", 
Àn
);

701 i‡(
Àn
 != 0) {

702 *
de°
;

704 
c§Resu…
 = 
	`unifi_√t_d©a_mÆloc
(
¥iv
, &
d©a_±rs
.
d
[
i
], 
Àn
);

705 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

706 
	`unifi_îr‹
(
¥iv
, "udi_send_signal_raw: failedÅoállocateÑequest_data.\n");

707  -
EIO
;

710 
de°
 = (*)
d©a_±rs
.
d
[
i
].
os_d©a_±r
;

711 
	`mem˝y
(
de°
, 
buf
 + 
byãcou¡
, 
Àn
);

713 
byãcou¡
 +
Àn
;

714 
num_d©a_ªfs
++;

716 
d©a_±rs
.
d
[
i
].
d©a_Àngth
 = 
Àn
;

719 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "Queueing signal 0x%.4X from UDI with %u dataÑefs\n",

720 
sig_id
,

721 
num_d©a_ªfs
);

723 i‡(
byãcou¡
 > 
buÊí
) {

724 
	`unifi_îr‹
(
¥iv
, "udi_£nd_sig«l_øw: NŸÉnough d©®(%d in°ód o‡%d)\n", 
buÊí
, 
byãcou¡
);

725 
	`func_exô
();

726  -
EINVAL
;

730 
r
 = 
	`ul_£nd_sig«l_øw
(
¥iv
, 
buf
, 
sig«l_size
, &
d©a_±rs
);

731 i‡(
r
 < 0) {

732 
	`unifi_îr‹
(
¥iv
, "udi_£nd_sig«l_øw: síd faûed (%d)\n", 
r
);

733 
	`func_exô
();

734  -
EIO
;

737 #ifde‡
CSR_NATIVE_LINUX


738 i‡(
sig_id
 =
CSR_MLME_POWERMGT_REQUEST_ID
) {

739 
powî_mode
 = 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
((
buf
 +

740 
SIZEOF_SIGNAL_HEADER
 + (
UNIFI_MAX_DATA_REFERENCES
*
SIZEOF_DATAREF
)));

741 #ifde‡
CSR_SUPPORT_WEXT


743 
¥iv
->
wext_c⁄f
.
powî_mode
 =Öower_mode;

746 i‡(
powî_mode
 || (
¥iv
->
öãrÁ˚Priv
[0]->
c⁄√˘ed
 =
UnifiNŸC⁄√˘ed
)) {

747 
c§Resu…
 = 
	`unifi_c⁄figuª_low_powî_mode
(
¥iv
->
ˇrd
,

748 
UNIFI_LOW_POWER_ENABLED
,

749 
UNIFI_PERIODIC_WAKE_HOST_DISABLED
);

751 
c§Resu…
 = 
	`unifi_c⁄figuª_low_powî_mode
(
¥iv
->
ˇrd
,

752 
UNIFI_LOW_POWER_DISABLED
,

753 
UNIFI_PERIODIC_WAKE_HOST_DISABLED
);

758 
	`func_exô_r
(
byãcou¡
);

760  
byãcou¡
;

761 
	}
}

783 
ssize_t


784 
	$unifi_wrôe
(
fûe
 *
fûp
, c⁄° *
p
, 
size_t
 
Àn
, 
loff_t
 *
poff
)

786 
ul_˛õ¡_t
 *
p˛i
 = (ul_˛õ¡_t*)
fûp
->
¥iv©e_d©a
;

787 
unifi_¥iv_t
 *
¥iv
;

788 *
buf
;

789 *
buÂå
;

790 
ªmaöög
;

791 
byãs_wrôãn
;

792 
r
;

793 
bulk_d©a_∑øm_t
 
bulkd©a
;

794 
C§Resu…
 
c§Resu…
;

796 
	`func_íãr
();

798 
¥iv
 = 
	`uf_föd_ö°™˚
(
p˛i
->
ö°™˚
);

799 i‡(!
¥iv
) {

800 
	`unifi_îr‹
(
¥iv
, "invalidÖriv\n");

801  -
ENODEV
;

804 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "unifi_wrôe:Üí = %d\n", 
Àn
);

806 i‡(!
p˛i
->
udi_íabÀd
) {

807 
	`unifi_îr‹
(
¥iv
, "udi disabled\n");

808  -
EINVAL
;

815 i‡(
p˛i
 =
¥iv
->
amp_˛õ¡
) {

816 
sig«l_size
;

817 
sig_id
;

818 *
sig«l_buf
;

819 *
u£r_d©a_buf
;

821 
c§Resu…
 = 
	`unifi_√t_d©a_mÆloc
(
¥iv
, &
bulkd©a
.
d
[0], 
Àn
);

822 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

823 
	`unifi_îr‹
(
¥iv
, "unifi_write: failedÅoállocateÑequest_data.\n");

824 
	`func_exô
();

825  -
ENOMEM
;

828 
u£r_d©a_buf
 = (*)
bulkd©a
.
d
[0].
os_d©a_±r
;

831 i‡(
	`c›y_‰om_u£r
((*)
u£r_d©a_buf
, 
p
, 
Àn
)) {

832 
	`unifi_îr‹
(
¥iv
, "unifi_write: copy from user failed\n");

833 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
.
d
[0]);

834 
	`func_exô
();

835  -
EFAULT
;

838 
bulkd©a
.
d
[1].
os_d©a_±r
 = 
NULL
;

839 
bulkd©a
.
d
[1].
d©a_Àngth
 = 0;

842 
sig_id
 = 
	`GET_SIGNAL_ID
(
bulkd©a
.
d
[0].
os_d©a_±r
);

843 
sig«l_size
 = 
Àn
;

844 
sig«l_size
 -
	`GET_PACKED_DATAREF_LEN
(
bulkd©a
.
d
[0].
os_d©a_±r
, 0);

845 
sig«l_size
 -
	`GET_PACKED_DATAREF_LEN
(
bulkd©a
.
d
[0].
os_d©a_±r
, 1);

846 i‡((
sig«l_size
 <0Ë|| (sig«l_sizê> 
Àn
)) {

847 
	`unifi_îr‹
(
¥iv
, "unifi_write - Couldn't findÜength of signal 0x%x\n",

848 
sig_id
);

849 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
.
d
[0]);

850 
	`func_exô
();

851  -
EINVAL
;

854 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "unifi_write: signal 0x%.4XÜen:%d\n",

855 
sig_id
, 
sig«l_size
);

858 
sig«l_buf
 = 
	`kmÆloc
(
sig«l_size
, 
GFP_KERNEL
);

859 i‡(!
sig«l_buf
) {

860 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
.
d
[0]);

861 
	`func_exô
();

862  -
ENOMEM
;

866 
	`mem˝y
(
sig«l_buf
, 
bulkd©a
.
d
[0].
os_d©a_±r
, 
sig«l_size
);

867 
sig«l_buf
[5] = (
p˛i
->
£ndî_id
 >> 8) & 0xff;

869 i‡(
sig«l_size
 < 
Àn
) {

871 
bulkd©a
.
d
[0].
d©a_Àngth
 -
sig«l_size
;

872 
bulkd©a
.
d
[0].
os_d©a_±r
 +
sig«l_size
;

874 
bulkd©a
.
d
[0].
d©a_Àngth
 = 0;

875 
bulkd©a
.
d
[0].
os_d©a_±r
 = 
NULL
;

879 
r
 = 
	`ul_£nd_sig«l_øw
(
¥iv
, 
sig«l_buf
, 
sig«l_size
, &
bulkd©a
);

880 i‡(
r
 < 0) {

881 
	`unifi_îr‹
(
¥iv
, "unifi_wrôe: síd faûed (%d)\n", 
r
);

882 i‡(
bulkd©a
.
d
[0].
os_d©a_±r
 !
NULL
) {

883 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
.
d
[0]);

888 
	`k‰ì
(
sig«l_buf
);

889  
Àn
;

892 
buf
 = 
	`kmÆloc
(
Àn
, 
GFP_KERNEL
);

893 i‡(!
buf
) {

894  -
ENOMEM
;

898 i‡(
	`c›y_‰om_u£r
((*)
buf
, 
p
, 
Àn
)) {

899 
	`unifi_îr‹
(
¥iv
, "copy from user failed\n");

900 
	`k‰ì
(
buf
);

901  -
EFAULT
;

910 #ifde‡
CSR_SME_USERSPACE


911 i‡(
p˛i
->
c⁄figuøti⁄
 & 
CLI_SME_USERSPACE
) {

912 
	`C§WifiRouãrTøn•‹tRecv
(
¥iv
, 
buf
, 
Àn
);

913 
	`k‰ì
(
buf
);

914  
Àn
;

924 
byãs_wrôãn
 = 0;

925 
ªmaöög
 = 
Àn
;

926 
buÂå
 = 
buf
;

927 
ªmaöög
 > 0)

929 
r
;

938 
buÂå
[5] = (
p˛i
->
£ndî_id
 >> 8) & 0xff;

941 i‡(
p˛i
->
c⁄figuøti⁄
 & 
CLI_USING_WIRE_FORMAT
) {

942 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "unifi_write: call udi_send_signal().\n");

943 
r
 = 
	`udi_£nd_sig«l_øw
(
¥iv
, 
buÂå
, 
ªmaöög
);

945 
r
 = 
	`udi_£nd_sig«l_u≈acked
(
¥iv
, 
buÂå
, 
ªmaöög
);

947 i‡(
r
 < 0) {

949 
	`unifi_îr‹
(
¥iv
, "unifi_wrôe: (udò‹ sme)_£nd_sig«l(Ëªtu∫†%d\n", 
r
);

950 
byãs_wrôãn
 = 
r
;

953 
buÂå
 +
r
;

954 
ªmaöög
 -
r
;

955 
byãs_wrôãn
 +
r
;

958 
	`k‰ì
(
buf
);

960 
	`func_exô_r
(
byãs_wrôãn
);

962  
byãs_wrôãn
;

963 
	}
}

966 c⁄° * 
	$buûd_ty≥_to_°rög
(
buûd_ty≥
)

968 
buûd_ty≥
)

970 
UNIFI_BUILD_NME
:  "NME";

971 
UNIFI_BUILD_WEXT
:  "WEXT";

972 
UNIFI_BUILD_AP
:  "AP";

975 
	}
}

995 
	$unifi_io˘l
(
fûe
 *
fûp
, 
cmd
, 
¨g
)

997 
ul_˛õ¡_t
 *
p˛i
 = (ul_˛õ¡_t*)
fûp
->
¥iv©e_d©a
;

998 
unifi_¥iv_t
 *
¥iv
;

999 
√t_devi˚
 *
dev
;

1000 
r
 = 0;

1001 
öt_∑øm
, 
i
;

1002 
u8
* 
buf
;

1003 
C§Resu…
 
c§Resu…
;

1004 #i‡(
deföed
 
CSR_SUPPORT_SME
)

1005 
unifi_cfg_comm™d_t
 
cfg_cmd
;

1006 #i‡(
deföed
 
CSR_SUPPORT_WEXT
)

1007 
C§WifiSmeC€xC⁄fig
 
c€x_c⁄fig
;

1008 
uch¨_∑øm
;

1009 
v¨böd
[
MAX_VARBIND_LENGTH
];

1010 
vbÀn
;

1013 
unifi_puã°_comm™d_t
 
puã°_cmd
;

1015 
¥iv
 = 
	`uf_föd_ö°™˚
(
p˛i
->
ö°™˚
);

1016 i‡(!
¥iv
) {

1017 
	`unifi_îr‹
(
¥iv
, "io˘»îr‹: unknow¿ö°™˚=%d\n", 
p˛i
->
ö°™˚
);

1018 
r
 = -
ENODEV
;

1019 
out
;

1021 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "unifi_io˘l: cmd=0x%X,árg=0x%lX\n", 
cmd
, 
¨g
);

1023 
cmd
) {

1025 
UNIFI_GET_UDI_ENABLE
:

1026 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "UniFi Get UDI Enable\n");

1028 
	`down
(&
¥iv
->
udi_loggög_muãx
);

1029 
öt_∑øm
 = (
¥iv
->
loggög_˛õ¡
 =
NULL
) ? 0 : 1;

1030 
	`up
(&
¥iv
->
udi_loggög_muãx
);

1032 i‡(
	`put_u£r
(
öt_∑øm
, (*)
¨g
))

1034 
	`unifi_îr‹
(
¥iv
, "UNIFI_GET_UDI_ENABLE: FailedÅo copyÅo user\n");

1035 
r
 = -
EFAULT
;

1036 
out
;

1040 
UNIFI_SET_UDI_ENABLE
:

1041 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "UniFi Set UDI Enable\n");

1042 i‡(
	`gë_u£r
(
öt_∑øm
, (*)
¨g
))

1044 
	`unifi_îr‹
(
¥iv
, "UNIFI_SET_UDI_ENABLE: FailedÅo copy from user\n");

1045 
r
 = -
EFAULT
;

1046 
out
;

1049 #ifde‡
CSR_WIFI_HIP_DEBUG_OFFLINE


1050 i‡(
log_hù_sig«ls
) {

1051 
	`unifi_îr‹
(
¥iv
, "omnicli cannot be used whenÜog_hip_signals is used\n");

1052 
r
 = -
EFAULT
;

1053 
out
;

1057 
	`down
(&
¥iv
->
udi_loggög_muãx
);

1058 i‡(
öt_∑øm
) {

1059 
p˛i
->
evít_hook
 = 
udi_log_evít
;

1060 
	`unifi_£t_udi_hook
(
¥iv
->
ˇrd
, 
loggög_h™dÀr
);

1062 
i
 = 0; i < 
SIG_FILTER_SIZE
; i++) {

1063 
p˛i
->
sig«l_fûãr
[
i
] = 0xFFFF;

1065 
¥iv
->
loggög_˛õ¡
 = 
p˛i
;

1068 
¥iv
->
loggög_˛õ¡
 = 
NULL
;

1069 
p˛i
->
evít_hook
 = 
NULL
;

1071 
	`up
(&
¥iv
->
udi_loggög_muãx
);

1075 
UNIFI_SET_MIB
:

1076 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "UniFi Set MIB\n");

1077 #i‡(
deföed
 
CSR_SUPPORT_SME
Ë&& (deföed 
CSR_SUPPORT_WEXT
)

1079 i‡(
	`c›y_‰om_u£r
((*)
v¨böd
, (*)
¨g
, 2)) {

1080 
	`unifi_îr‹
(
¥iv
,

1082 
r
 = -
EFAULT
;

1083 
out
;

1085 
vbÀn
 = 
v¨böd
[1];

1086 i‡((
vbÀn
 + 2Ë> 
MAX_VARBIND_LENGTH
) {

1087 
	`unifi_îr‹
(
¥iv
,

1089 (
vbÀn
+2), 
MAX_VARBIND_LENGTH
);

1090 
r
 = -
EINVAL
;

1091 
out
;

1094 i‡(
	`c›y_‰om_u£r
((*)(
v¨böd
+2), (*)(
¨g
+2), 
vbÀn
)) {

1095 
	`unifi_îr‹
(
¥iv
, "UNIFI_SET_MIB: FailedÅo copy in varbind\n");

1096 
r
 = -
EFAULT
;

1097 
out
;

1101 
vbÀn
 += 2;

1102 
r
 = 
	`sme_mgt_mib_£t
(
¥iv
, 
v¨böd
, 
vbÀn
);

1103 i‡(
r
) {

1104 
out
;

1107 
	`unifi_nŸi˚
(
¥iv
, "UNIFI_SET_MIB: Unsupported.\n");

1111 
UNIFI_GET_MIB
:

1112 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "UniFi Get MIB\n");

1113 #i‡(
deföed
 
CSR_SUPPORT_SME
Ë&& (deföed 
CSR_SUPPORT_WEXT
)

1115 i‡(
	`c›y_‰om_u£r
((*)
v¨böd
, (*)
¨g
, 2)) {

1116 
	`unifi_îr‹
(
¥iv
, "UNIFI_GET_MIB: FailedÅo copy in varbind header\n");

1117 
r
 = -
EFAULT
;

1118 
out
;

1120 
vbÀn
 = 
v¨böd
[1];

1121 i‡((
vbÀn
+2Ë> 
MAX_VARBIND_LENGTH
) {

1122 
	`unifi_îr‹
(
¥iv
, "UNIFI_GET_MIB: VarbindÅooÜong (%d,Üimit %d)\n",

1123 (
vbÀn
+2), 
MAX_VARBIND_LENGTH
);

1124 
r
 = -
EINVAL
;

1125 
out
;

1128 i‡(
	`c›y_‰om_u£r
((*)(
v¨böd
+2), (*)(
¨g
+2), 
vbÀn
)) {

1129 
	`unifi_îr‹
(
¥iv
, "UNIFI_GET_MIB: FailedÅo copy in varbind\n");

1130 
r
 = -
EFAULT
;

1131 
out
;

1134 
vbÀn
 += 2;

1135 
r
 = 
	`sme_mgt_mib_gë
(
¥iv
, 
v¨böd
, &
vbÀn
);

1136 i‡(
r
) {

1137 
out
;

1140 i‡(
vbÀn
 > 
MAX_VARBIND_LENGTH
) {

1141 
	`unifi_îr‹
(
¥iv
,

1143 
vbÀn
, 
MAX_VARBIND_LENGTH
);

1144 
r
 = -
EINVAL
;

1145 
out
;

1147 i‡(
	`c›y_to_u£r
((*)
¨g
, 
v¨böd
, 
vbÀn
)) {

1148 
r
 = -
EFAULT
;

1149 
out
;

1152 
	`unifi_nŸi˚
(
¥iv
, "UNIFI_GET_MIB: Unsupported.\n");

1156 
UNIFI_CFG
:

1157 #i‡(
deföed
 
CSR_SUPPORT_SME
)

1158 i‡(
	`gë_u£r
(
cfg_cmd
, (
unifi_cfg_comm™d_t
*)
¨g
))

1160 
	`unifi_îr‹
(
¥iv
, "UNIFI_CFG: FailedÅo getÅhe command\n");

1161 
r
 = -
EFAULT
;

1162 
out
;

1165 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "UNIFI_CFG: Command is %d (t=%u) sz=%d\n",

1166 
cfg_cmd
, 
	`jiffõs_to_m£cs
(
jiffõs
), (
unifi_cfg_comm™d_t
));

1167 
cfg_cmd
) {

1168 
UNIFI_CFG_POWER
:

1169 
r
 = 
	`unifi_cfg_powî
(
¥iv
, (*)
¨g
);

1171 
UNIFI_CFG_POWERSAVE
:

1172 
r
 = 
	`unifi_cfg_powî_ßve
(
¥iv
, (*)
¨g
);

1174 
UNIFI_CFG_POWERSUPPLY
:

1175 
r
 = 
	`unifi_cfg_powî_suµly
(
¥iv
, (*)
¨g
);

1177 
UNIFI_CFG_FILTER
:

1178 
r
 = 
	`unifi_cfg_∑ckë_fûãrs
(
¥iv
, (*)
¨g
);

1180 
UNIFI_CFG_GET
:

1181 
r
 = 
	`unifi_cfg_gë_öfo
(
¥iv
, (*)
¨g
);

1183 
UNIFI_CFG_WMM_QOSINFO
:

1184 
r
 = 
	`unifi_cfg_wmm_qos_öfo
(
¥iv
, (*)
¨g
);

1186 
UNIFI_CFG_WMM_ADDTS
:

1187 
r
 = 
	`unifi_cfg_wmm_addts
(
¥iv
, (*)
¨g
);

1189 
UNIFI_CFG_WMM_DELTS
:

1190 
r
 = 
	`unifi_cfg_wmm_dñts
(
¥iv
, (*)
¨g
);

1192 
UNIFI_CFG_STRICT_DRAFT_N
:

1193 
r
 = 
	`unifi_cfg_°ri˘_dø·_n
(
¥iv
, (*)
¨g
);

1195 
UNIFI_CFG_ENABLE_OKC
:

1196 
r
 = 
	`unifi_cfg_íabÀ_okc
(
¥iv
, (*)
¨g
);

1198 #ifde‡
CSR_SUPPORT_SME


1199 
UNIFI_CFG_CORE_DUMP
:

1200 
	`C§WifiRouãrCålWifiOffIndSíd
(
¥iv
->
CSR_WIFI_SME_IFACEQUEUE
,0,
CSR_WIFI_SME_CONTROL_INDICATION_ERROR
);

1201 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "UNIFI_CFG_CORE_DUMP: sent wifi off indication\n");

1204 #ifde‡
CSR_SUPPORT_WEXT_AP


1205 
UNIFI_CFG_SET_AP_CONFIG
:

1206 
r

	`unifi_cfg_£t_≠_c⁄fig
(
¥iv
,(*)
¨g
);

1210 
	`unifi_îr‹
(
¥iv
, "UNIFI_CFG: Unknow¿Comm™d (%d)\n", 
cfg_cmd
);

1211 
r
 = -
EINVAL
;

1212 
out
;

1218 
UNIFI_PUTEST
:

1219 i‡(
	`gë_u£r
(
puã°_cmd
, (
unifi_puã°_comm™d_t
*)
¨g
))

1221 
	`unifi_îr‹
(
¥iv
, "UNIFI_PUTEST: FailedÅo getÅhe command\n");

1222 
r
 = -
EFAULT
;

1223 
out
;

1226 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "UNIFI_PUTEST: Command is %s\n",

1227 
	`åa˚_puã°_cmdid
(
puã°_cmd
));

1228 
puã°_cmd
) {

1229 
UNIFI_PUTEST_START
:

1230 
r
 = 
	`unifi_puã°_°¨t
(
¥iv
, (*)
¨g
);

1232 
UNIFI_PUTEST_STOP
:

1233 
r
 = 
	`unifi_puã°_°›
(
¥iv
, (*)
¨g
);

1235 
UNIFI_PUTEST_SET_SDIO_CLOCK
:

1236 
r
 = 
	`unifi_puã°_£t_sdio_˛ock
(
¥iv
, (*)
¨g
);

1238 
UNIFI_PUTEST_CMD52_READ
:

1239 
r
 = 
	`unifi_puã°_cmd52_ªad
(
¥iv
, (*)
¨g
);

1241 
UNIFI_PUTEST_CMD52_BLOCK_READ
:

1242 
r
 = 
	`unifi_puã°_cmd52_block_ªad
(
¥iv
, (*)
¨g
);

1244 
UNIFI_PUTEST_CMD52_WRITE
:

1245 
r
 = 
	`unifi_puã°_cmd52_wrôe
(
¥iv
, (*)
¨g
);

1247 
UNIFI_PUTEST_DL_FW
:

1248 
r
 = 
	`unifi_puã°_dl_fw
(
¥iv
, (*)
¨g
);

1250 
UNIFI_PUTEST_DL_FW_BUFF
:

1251 
r
 = 
	`unifi_puã°_dl_fw_buff
(
¥iv
, (*)
¨g
);

1253 
UNIFI_PUTEST_COREDUMP_PREPARE
:

1254 
r
 = 
	`unifi_puã°_c‹edump_¥ï¨e
(
¥iv
, (*)
¨g
);

1256 
UNIFI_PUTEST_GP_READ16
:

1257 
r
 = 
	`unifi_puã°_gp_ªad16
(
¥iv
, (*)
¨g
);

1259 
UNIFI_PUTEST_GP_WRITE16
:

1260 
r
 = 
	`unifi_puã°_gp_wrôe16
(
¥iv
, (*)
¨g
);

1263 
	`unifi_îr‹
(
¥iv
, "UNIFI_PUTEST: Unknow¿Comm™d (%d)\n", 
puã°_cmd
);

1264 
r
 = -
EINVAL
;

1265 
out
;

1269 
UNIFI_BUILD_TYPE
:

1270 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "UNIFI_BUILD_TYPE u£r•a˚=%s\n", 
	`buûd_ty≥_to_°rög
(*(*)
¨g
));

1271 #i‚de‡
CSR_SUPPORT_WEXT_AP


1272 i‡(
UNIFI_BUILD_AP
 =*(*)
¨g
)

1274 
	`unifi_îr‹
(
¥iv
, "Userspace has AP support, which is incompatible\n");

1278 #i‚de‡
CSR_SUPPORT_WEXT


1279 i‡(
UNIFI_BUILD_WEXT
 =*(*)
¨g
)

1281 
	`unifi_îr‹
(
¥iv
, "Userspace has WEXT support, which is incompatible\n");

1285 
UNIFI_INIT_HW
:

1286 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "UNIFI_INIT_HW.\n");

1287 
¥iv
->
öô_¥ogªss
 = 
UNIFI_INIT_NONE
;

1289 #i‡
	`deföed
(
CSR_SUPPORT_WEXT
Ë|| deföed (
CSR_NATIVE_LINUX
)

1291 
r
 = 
	`sme_mgt_wifi_⁄
(
¥iv
);

1292 i‡(
r
) {

1293 
out
;

1299 
UNIFI_INIT_NETDEV
:

1302 
C§Uöt16
 
öãrÁ˚Tag
=0;

1303 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

1305 
dev
 = 
¥iv
->
√tdev
[
öãrÁ˚Tag
];

1306 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "UNIFI_INIT_NETDEV.\n");

1308 i‡(
	`c›y_‰om_u£r
((*)
dev
->
dev_addr
, (*)
¨g
, 6)) {

1309 
r
 = -
EFAULT
;

1310 
out
;

1314 i‡(!
öãrÁ˚Priv
->
√tdev_ªgi°îed
)

1316 
r
 = 
	`uf_ªgi°î_√tdev
(
¥iv
,
öãrÁ˚Tag
);

1317 i‡(
r
) {

1318 
	`unifi_îr‹
(
¥iv
, "FailedÅoÑegisterÅheÇetwork device.\n");

1319 
out
;

1324 i‡(
run_bh_⁄˚
 != -1) {

1325 
	`unifi_£t_öãºu±_mode
(
¥iv
->
ˇrd
, (
C§Uöt32
)
run_bh_⁄˚
);

1328 
¥iv
->
öô_¥ogªss
 = 
UNIFI_INIT_COMPLETED
;

1333 
	`unifi_ªque°_max_sdio_˛ock
(
¥iv
->
ˇrd
);

1335 #ifde‡
CSR_SUPPORT_WEXT


1337 
	`wext_£nd_°¨ãd_evít
(
¥iv
);

1340 
	`unifi_öfo
(
¥iv
, "UniFiÑeady\n");

1342 #ifde‡
ANDROID_BUILD


1344 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "netdev_init:Ñelease wakeÜock\n");

1345 
	`wake_u∆ock
(&
unifi_sdio_wake_lock
);

1347 #ifde‡
CSR_NATIVE_SOFTMAC


1349 
√t_devi˚
 *
dev
 = 
¥iv
->
√tdev
[
öãrÁ˚Tag
];

1350 #ifde‡
CSR_SUPPORT_WEXT


1351 
öãrÁ˚Priv
->
waô_√tdev_ch™ge
 = 
TRUE
;

1353 
	`√tif_ˇºõr_⁄
(
dev
);

1358 
UNIFI_GET_INIT_STATUS
:

1359 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "UNIFI_GET_INIT_STATUS.\n");

1360 i‡(
	`put_u£r
(
¥iv
->
öô_¥ogªss
, (*)
¨g
))

1362 
	`¥ötk
(
KERN_ERR
 "UNIFI_GET_INIT_STATUS: FailedÅo copyÅo user\n");

1363 
r
 = -
EFAULT
;

1364 
out
;

1368 
UNIFI_KICK
:

1369 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "Kick UniFi\n");

1370 
	`unifi_sdio_öãºu±_h™dÀr
(
¥iv
->
ˇrd
);

1373 
UNIFI_SET_DEBUG
:

1374 
unifi_debug
 = 
¨g
;

1375 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "unifi_debug sëÅÿ%d\n", 
unifi_debug
);

1378 
UNIFI_SET_TRACE
:

1380 
r
 = -
EINVAL
;

1384 
UNIFI_SET_UDI_LOG_MASK
:

1386 
unifiio_fûãr_t
 
udi_fûãr
;

1387 
uöt16_t
 *
sig_ids_addr
;

1388 
	#UF_MAX_SIG_IDS
 128

	)

1390 i‡(
	`c›y_‰om_u£r
((*)(&
udi_fûãr
), (*)
¨g
, (udi_filter))) {

1391 
r
 = -
EFAULT
;

1392 
out
;

1394 i‡((
udi_fûãr
.
a˘i⁄
 < 
UfSigFû_AŒOn
) ||

1395 (
udi_fûãr
.
a˘i⁄
 > 
UfSigFû_Sñe˘Off
))

1397 
	`¥ötk
(
KERN_WARNING


1399 
udi_fûãr
.
a˘i⁄
);

1400 
r
 = -
EINVAL
;

1401 
out
;

1404 i‡((
udi_fûãr
.
a˘i⁄
 =
UfSigFû_AŒOn
) ||

1405 (
udi_fûãr
.
a˘i⁄
 =
UfSigFû_AŒOff
))

1407 
udi_fûãr
.
num_sig_ids
 = 0;

1410 i‡(
udi_fûãr
.
num_sig_ids
 > 
UF_MAX_SIG_IDS
) {

1411 
	`¥ötk
(
KERN_WARNING


1413 
udi_fûãr
.
num_sig_ids
, 
UF_MAX_SIG_IDS
);

1414 
r
 = -
EINVAL
;

1415 
out
;

1419 i‡(
udi_fûãr
.
num_sig_ids
 > 0) {

1421 
sig_ids_addr
 = 
udi_fûãr
.
sig_ids
;

1423 
udi_fûãr
.
sig_ids
 =

1424 
	`kmÆloc
(
udi_fûãr
.
num_sig_ids
 * (
uöt16_t
), 
GFP_KERNEL
);

1425 i‡(!
udi_fûãr
.
sig_ids
) {

1426 
r
 = -
ENOMEM
;

1427 
out
;

1429 i‡(
	`c›y_‰om_u£r
((*)
udi_fûãr
.
sig_ids
,

1430 (*)
sig_ids_addr
,

1431 
udi_fûãr
.
num_sig_ids
 * (
uöt16_t
)))

1433 
	`k‰ì
(
udi_fûãr
.
sig_ids
);

1434 
r
 = -
EFAULT
;

1435 
out
;

1439 
	`udi_£t_log_fûãr
(
p˛i
, &
udi_fûãr
);

1441 i‡(
udi_fûãr
.
num_sig_ids
 > 0) {

1442 
	`k‰ì
(
udi_fûãr
.
sig_ids
);

1447 
UNIFI_SET_AMP_ENABLE
:

1448 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "UniFi Set AMP Enable\n");

1449 i‡(
	`gë_u£r
(
öt_∑øm
, (*)
¨g
))

1451 
	`unifi_îr‹
(
¥iv
, "UNIFI_SET_AMP_ENABLE: FailedÅo copy from user\n");

1452 
r
 = -
EFAULT
;

1453 
out
;

1456 i‡(
öt_∑øm
) {

1457 
¥iv
->
amp_˛õ¡
 = 
p˛i
;

1459 
¥iv
->
amp_˛õ¡
 = 
NULL
;

1462 
öt_∑øm
 = 0;

1463 
buf
 = (
u8
*)&
öt_∑øm
;

1464 
buf
[0] = 
UNIFI_SOFT_COMMAND_Q_LENGTH
 - 1;

1465 
buf
[1] = 
UNIFI_SOFT_TRAFFIC_Q_LENGTH
 - 1;

1466 i‡(
	`c›y_to_u£r
((*)
¨g
, &
öt_∑øm
, ())) {

1467 
r
 = -
EFAULT
;

1468 
out
;

1472 
UNIFI_SET_UDI_SNAP_MASK
:

1474 
unifiio_¢≠_fûãr_t
 
¢≠_fûãr
;

1476 i‡(
	`c›y_‰om_u£r
((*)(&
¢≠_fûãr
), (*)
¨g
, (snap_filter))) {

1477 
r
 = -
EFAULT
;

1478 
out
;

1481 i‡(
p˛i
->
¢≠_fûãr
.
cou¡
) {

1482 
p˛i
->
¢≠_fûãr
.
cou¡
 = 0;

1483 
	`C§PmemFªe
(
p˛i
->
¢≠_fûãr
.
¥Ÿocﬁs
);

1486 i‡(
¢≠_fûãr
.
cou¡
 == 0) {

1490 
p˛i
->
¢≠_fûãr
.
¥Ÿocﬁs
 = 
	`C§PmemAŒoc
(¢≠_fûãr.
cou¡
 * (
C§Uöt16
));

1491 i‡(!
p˛i
->
¢≠_fûãr
.
¥Ÿocﬁs
) {

1492 
r
 = -
ENOMEM
;

1493 
out
;

1495 i‡(
	`c›y_‰om_u£r
((*)
p˛i
->
¢≠_fûãr
.
¥Ÿocﬁs
,

1496 (*)
¢≠_fûãr
.
¥Ÿocﬁs
,

1497 
¢≠_fûãr
.
cou¡
 * (
C§Uöt16
)))

1499 
	`C§PmemFªe
(
p˛i
->
¢≠_fûãr
.
¥Ÿocﬁs
);

1500 
r
 = -
EFAULT
;

1501 
out
;

1504 
p˛i
->
¢≠_fûãr
.
cou¡
 = snap_filter.count;

1509 
UNIFI_SME_PRESENT
:

1511 
u8
 
öd
;

1512 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "UniFi SME Present IOCTL.\n");

1513 i‡(
	`c›y_‰om_u£r
((*)(&
öt_∑øm
), (*)
¨g
, ()))

1515 
	`¥ötk
(
KERN_ERR
 "UNIFI_SME_PRESENT: FailedÅo copy from user\n");

1516 
r
 = -
EFAULT
;

1517 
out
;

1520 
¥iv
->
sme_is_¥e£¡
 = 
öt_∑øm
;

1521 i‡(
¥iv
->
sme_is_¥e£¡
 == 1) {

1522 
öd
 = 
CONFIG_SME_PRESENT
;

1524 
öd
 = 
CONFIG_SME_NOT_PRESENT
;

1527 
	`ul_log_c⁄fig_öd
(
¥iv
, &
öd
, (
u8
));

1531 
UNIFI_CFG_PERIOD_TRAFFIC
:

1533 #i‡(
deföed
 
CSR_SUPPORT_SME
Ë&& (deföed 
CSR_SUPPORT_WEXT
)

1534 
C§WifiSmeC€xC⁄fig
 
c€xC⁄fig
;

1536 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "UniFi Configure Periodic Traffic.\n");

1537 #i‡(
deföed
 
CSR_SUPPORT_SME
Ë&& (deföed 
CSR_SUPPORT_WEXT
)

1538 i‡(
	`c›y_‰om_u£r
((*)(&
uch¨_∑øm
), (*)
¨g
, ())) {

1539 
	`unifi_îr‹
(
¥iv
, "UNIFI_CFG_PERIOD_TRAFFIC: FailedÅo copy from user\n");

1540 
r
 = -
EFAULT
;

1541 
out
;

1544 i‡(
uch¨_∑øm
 == 0) {

1545 
r
 = 
	`sme_mgt_c€x_c⁄fig_gë
(
¥iv
, &
c€xC⁄fig
);

1546 i‡(
r
) {

1547 
	`unifi_îr‹
(
¥iv
, "UNIFI_CFG_PERIOD_TRAFFIC: Get unifi_CoexInfoValue failed.\n");

1548 
out
;

1550 i‡(
	`c›y_to_u£r
((*)(
¨g
 + 1),

1551 (*)&
c€xC⁄fig
,

1552 (
C§WifiSmeC€xC⁄fig
))) {

1553 
r
 = -
EFAULT
;

1554 
out
;

1556 
out
;

1559 i‡(
	`c›y_‰om_u£r
((*)(&
c€x_c⁄fig
), (*)(
¨g
 + 1), (
C§WifiSmeC€xC⁄fig
)))

1561 
	`unifi_îr‹
(
¥iv
, "UNIFI_CFG_PERIOD_TRAFFIC: FailedÅo copy from user\n");

1562 
r
 = -
EFAULT
;

1563 
out
;

1566 
c€xC⁄fig
 = 
c€x_c⁄fig
;

1567 
r
 = 
	`sme_mgt_c€x_c⁄fig_£t
(
¥iv
, &
c€xC⁄fig
);

1568 i‡(
r
) {

1569 
	`unifi_îr‹
(
¥iv
, "UNIFI_CFG_PERIOD_TRAFFIC: Set unifi_CoexInfoValue failed.\n");

1570 
out
;

1576 
UNIFI_CFG_UAPSD_TRAFFIC
:

1577 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "UniFi Configure U-APSD Mask.\n");

1578 #i‡(
deföed
 
CSR_SUPPORT_SME
Ë&& (deföed 
CSR_SUPPORT_WEXT
)

1579 i‡(
	`c›y_‰om_u£r
((*)(&
uch¨_∑øm
), (*)
¨g
, ())) {

1580 
	`unifi_îr‹
(
¥iv
, "UNIFI_CFG_UAPSD_TRAFFIC: FailedÅo copy from user\n");

1581 
r
 = -
EFAULT
;

1582 
out
;

1584 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "New U-APSD Mask: 0x%x\n", 
uch¨_∑øm
);

1588 #i‚de‡
UNIFI_DISABLE_COREDUMP


1589 
UNIFI_COREDUMP_GET_REG
:

1590 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "Mini-coredump dataÑequest\n");

1592 
unifiio_c‹edump_ªq_t
 
dump_ªq
;

1593 
unifi_c‹edump_ªq_t
 
¥iv_ªq
;

1595 i‡(
	`c›y_‰om_u£r
((*)(&
dump_ªq
), (*)
¨g
, (dump_req))) {

1596 
r
 = -
EFAULT
;

1597 
out
;

1599 
	`mem£t
(&
¥iv_ªq
, 0, (priv_req));

1600 
¥iv_ªq
.
ödex
 = 
dump_ªq
.index;

1601 
¥iv_ªq
.
off£t
 = 
dump_ªq
.offset;

1604 
dump_ªq
.
•a˚
) {

1605 
UNIFIIO_COREDUMP_MAC_REG
: 
¥iv_ªq
.
•a˚
 = 
UNIFI_COREDUMP_MAC_REG
; ;

1606 
UNIFIIO_COREDUMP_PHY_REG
: 
¥iv_ªq
.
•a˚
 = 
UNIFI_COREDUMP_PHY_REG
; ;

1607 
UNIFIIO_COREDUMP_SH_DMEM
: 
¥iv_ªq
.
•a˚
 = 
UNIFI_COREDUMP_SH_DMEM
; ;

1608 
UNIFIIO_COREDUMP_MAC_DMEM
: 
¥iv_ªq
.
•a˚
 = 
UNIFI_COREDUMP_MAC_DMEM
; ;

1609 
UNIFIIO_COREDUMP_PHY_DMEM
: 
¥iv_ªq
.
•a˚
 = 
UNIFI_COREDUMP_PHY_DMEM
; ;

1610 
UNIFIIO_COREDUMP_TRIGGER_MAGIC
: 
¥iv_ªq
.
•a˚
 = 
UNIFI_COREDUMP_TRIGGER_MAGIC
; ;

1612 
r
 = -
EINVAL
;

1613 
out
;

1616 i‡(
¥iv_ªq
.
•a˚
 =
UNIFI_COREDUMP_TRIGGER_MAGIC
) {

1618 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "UNIFI_COREDUMP_GET_REG: Force capture\n");

1619 
c§Resu…
 = 
	`unifi_c‹edump_ˇ±uª
(
¥iv
->
ˇrd
, &
¥iv_ªq
);

1620 
r
 = 
	`C§HùResu…ToSètus
(
c§Resu…
);

1621 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "UNIFI_COREDUMP_GET_REG: sètu†%d\n", 
r
);

1624 
c§Resu…
 = 
	`unifi_c‹edump_gë_vÆue
(
¥iv
->
ˇrd
, &
¥iv_ªq
);

1625 
r
 = 
	`C§HùResu…ToSètus
(
c§Resu…
);

1626 i‡(
r
) {

1627 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "UNIFI_COREDUMP_GET_REG: Sètu†%d\n", 
r
);

1628 
out
;

1631 
dump_ªq
.
vÆue
 = 
¥iv_ªq
.value;

1632 
dump_ªq
.
time°amp
 = 
¥iv_ªq
.timestamp;

1633 
dump_ªq
.
ªque°‹
 = 
¥iv_ªq
.requestor;

1634 
dump_ªq
.
£rül
 = 
¥iv_ªq
.serial;

1635 
dump_ªq
.
chù_vî
 = 
¥iv_ªq
.chip_ver;

1636 
dump_ªq
.
fw_vî
 = 
¥iv_ªq
.fw_ver;

1637 
dump_ªq
.
drv_buûd
 = 0;

1639 
	`unifi_åa˚
(
¥iv
, 
UDBG6
,

1641 
dump_ªq
.
ödex
, dump_ªq.
£rül
,

1642 
dump_ªq
.
chù_vî
, dump_ªq.
drv_buûd
,

1643 
dump_ªq
.
•a˚
, dump_ªq.
off£t
, dump_ªq.
vÆue
);

1645 i‡(
	`c›y_to_u£r
((*)
¨g
, (*)&
dump_ªq
, (dump_req))) {

1646 
r
 = -
EFAULT
;

1647 
out
;

1653 
r
 = -
EINVAL
;

1656 
out
:

1657  ()
r
;

1658 
	}
}

1663 
	$unifi_pﬁl
(
fûe
 *
fûp
, 
pﬁl_èbÀ
 *
waô
)

1665 
ul_˛õ¡_t
 *
p˛i
 = (ul_˛õ¡_t*)
fûp
->
¥iv©e_d©a
;

1666 
mask
 = 0;

1667 
ªady
;

1669 
	`func_íãr
();

1671 
ªady
 = !
	`li°_em±y
(&
p˛i
->
udi_log
);

1673 
	`pﬁl_waô
(
fûp
, &
p˛i
->
udi_wq
, 
waô
);

1675 i‡(
ªady
) {

1676 
mask
 |
POLLIN
 | 
POLLRDNORM
;

1679 
	`func_exô
();

1681  
mask
;

1682 
	}
}

1708 
	$udi_£t_log_fûãr
(
ul_˛õ¡_t
 *
p˛i
, 
unifiio_fûãr_t
 *
udi_fûãr
)

1710 
C§Uöt32
 
fûãr_pos
;

1711 
i
;

1713 i‡(
udi_fûãr
->
a˘i⁄
 =
UfSigFû_AŒOn
)

1715 
i
 = 0; i < 
SIG_FILTER_SIZE
; i++) {

1716 
p˛i
->
sig«l_fûãr
[
i
] = 0xFFFF;

1719 i‡(
udi_fûãr
->
a˘i⁄
 =
UfSigFû_AŒOff
)

1721 
i
 = 0; i < 
SIG_FILTER_SIZE
; i++) {

1722 
p˛i
->
sig«l_fûãr
[
i
] = 0;

1725 i‡(
udi_fûãr
->
a˘i⁄
 =
UfSigFû_Sñe˘On
)

1727 
i
 = 0; i < 
udi_fûãr
->
num_sig_ids
; i++) {

1728 
fûãr_pos
 = 
	`SigGëFûãrPos
(
udi_fûãr
->
sig_ids
[
i
]);

1729 i‡(
fûãr_pos
 == 0xFFFFFFFF)

1731 
	`¥ötk
(
KERN_WARNING


1733 
udi_fûãr
->
sig_ids
[
i
]);

1735 
p˛i
->
sig«l_fûãr
[
fûãr_pos
 >> 16] |= (filter_pos & 0xFFFF);

1739 i‡(
udi_fûãr
->
a˘i⁄
 =
UfSigFû_Sñe˘Off
)

1741 
i
 = 0; i < 
udi_fûãr
->
num_sig_ids
; i++) {

1742 
fûãr_pos
 = 
	`SigGëFûãrPos
(
udi_fûãr
->
sig_ids
[
i
]);

1743 i‡(
fûãr_pos
 == 0xFFFFFFFF)

1745 
	`¥ötk
(
KERN_WARNING


1747 
udi_fûãr
->
sig_ids
[
i
]);

1749 
p˛i
->
sig«l_fûãr
[
fûãr_pos
 >> 16] &= ~(filter_pos & 0xFFFF);

1754 
	}
}

1778 
	$udi_log_evít
(
ul_˛õ¡_t
 *
p˛i
,

1779 c⁄° 
u8
 *
sig«l
, 
sig«l_Àn
,

1780 c⁄° 
bulk_d©a_∑øm_t
 *
bulkd©a
,

1781 
dú
)

1783 
udi_log_t
 *
log±r
;

1784 
u8
 *
p
;

1785 
i
;

1786 
tŸÆ_Àn
;

1787 
udi_msg_t
 *
msg±r
;

1788 
C§Uöt32
 
fûãr_pos
;

1789 #ifde‡
OMNICLI_LINUX_EXTRA_LOG


1790 vﬁ©ûê
¥ötk_˝u
 = 
UINT_MAX
;

1791 
t
;

1792 
«no£c_ªm
;

1793 
n_1000
;

1796 
	`func_íãr
();

1799 i‡((
sig«l
 =
NULL
Ë|| (
sig«l_Àn
 <= 0)) {

1803 #ifde‡
CSR_WIFI_HIP_DEBUG_OFFLINE


1805 i‡(
log_hù_sig«ls
)

1808 i‡(
log_hù_sig«ls
 & 
UNIFI_LOG_HIP_SIGNALS_FILTER_TIMESTAMP
)

1810 
time°amp
 = 
	`jiffõs_to_m£cs
(
jiffõs
);

1811 
	`unifi_debug_log_to_buf
("T:");

1812 
	`unifi_debug_log_to_buf
("%04X%04X ", *(((
C§Uöt16
*)&
time°amp
) + 1),

1813 *(
C§Uöt16
*)&
time°amp
);

1817 
	`unifi_debug_log_to_buf
("S%s:%04X R:%04X D:%04X ",

1818 
dú
 ? "T" : "F",

1819 *(
C§Uöt16
*)
sig«l
,

1820 *(
C§Uöt16
*)(
sig«l
 + 2),

1821 *(
C§Uöt16
*)(
sig«l
 + 4));

1822 
	`unifi_debug_hex_to_buf
(
sig«l
 + 6, 
sig«l_Àn
 - 6);

1825 i‡((
log_hù_sig«ls
 & 
UNIFI_LOG_HIP_SIGNALS_FILTER_BULKDATA
) &&

1826 (
bulkd©a
->
d
[0].
d©a_Àngth
 > 0))

1828 
	`unifi_debug_log_to_buf
("\nD:");

1829 
	`unifi_debug_hex_to_buf
(
bulkd©a
->
d
[0].
os_d©a_±r
, bulkd©a->d[0].
d©a_Àngth
);

1831 
	`unifi_debug_log_to_buf
("\n");

1837 #ifde‡
CSR_NATIVE_LINUX


1838 
	`uf_«tive_¥o˚ss_udi_sig«l
(
p˛i
, 
sig«l
, 
sig«l_Àn
, 
bulkd©a
, 
dú
);

1845 
fûãr_pos
 = 
	`SigGëFûãrPos
(
	`GET_SIGNAL_ID
(
sig«l
));

1847 i‡((
fûãr_pos
 != 0xFFFFFFFF) &&

1848 ((
p˛i
->
sig«l_fûãr
[
fûãr_pos
 >> 16] & (filter_pos & 0xFFFF)) == 0))

1856 
tŸÆ_Àn
 = 
sig«l_Àn
;

1857 
i
 = 0; i < 
UNIFI_MAX_DATA_REFERENCES
; i++) {

1858 
tŸÆ_Àn
 +
bulkd©a
->
d
[
i
].
d©a_Àngth
;

1862 
log±r
 = (
udi_log_t
 *)
	`kmÆloc
((udi_log_tË+ 
tŸÆ_Àn
, 
GFP_KERNEL
);

1864 i‡(
log±r
 =
NULL
) {

1865 
	`¥ötk
(
KERN_ERR


1867 ()((
udi_log_t
Ë+ 
tŸÆ_Àn
));

1872 
	`INIT_LIST_HEAD
(&
log±r
->
q
);

1873 
msg±r
 = &
log±r
->
msg
;

1874 
msg±r
->
Àngth
 = (
udi_msg_t
Ë+ 
tŸÆ_Àn
;

1875 #ifde‡
OMNICLI_LINUX_EXTRA_LOG


1876 
t
 = 
	`˝u_˛ock
(
¥ötk_˝u
);

1877 
«no£c_ªm
 = 
	`do_div
(
t
, 1000000000);

1878 
n_1000
 = 
«no£c_ªm
/1000;

1879 
msg±r
->
time°amp
 = (
t
 <<10 ) | (()(
n_1000
 >> 10) & 0x3ff);

1881 
msg±r
->
time°amp
 = 
	`jiffõs_to_m£cs
(
jiffõs
);

1883 
msg±r
->
dúe˘i⁄
 = 
dú
;

1884 
msg±r
->
sig«l_Àngth
 = 
sig«l_Àn
;

1887 
p
 = (
u8
 *)(
msg±r
 + 1);

1888 
	`mem˝y
(
p
, 
sig«l
, 
sig«l_Àn
);

1889 
p
 +
sig«l_Àn
;

1892 
i
 = 0; i < 
UNIFI_MAX_DATA_REFERENCES
; i++) {

1893 
Àn
 = 
bulkd©a
->
d
[
i
].
d©a_Àngth
;

1899 i‡(
Àn
 > 0) {

1900 i‡(
bulkd©a
->
d
[
i
].
os_d©a_±r
) {

1901 
	`mem˝y
(
p
, 
bulkd©a
->
d
[
i
].
os_d©a_±r
, 
Àn
);

1903 
	`mem£t
(
p
, 0, 
Àn
);

1905 
p
 +
Àn
;

1910 i‡(
	`down_öãºu±ibÀ
(&
p˛i
->
udi_£m
)) {

1911 
	`¥ötk
(
KERN_WARNING
 "udi_log_event_q: FailedÅo get udi sem\n");

1912 
	`k‰ì
(
log±r
);

1913 
	`func_exô
();

1916 
	`li°_add_èû
(&
log±r
->
q
, &
p˛i
->
udi_log
);

1917 
	`up
(&
p˛i
->
udi_£m
);

1920 
	`wake_up_öãºu±ibÀ
(&
p˛i
->
udi_wq
);

1922 
	`func_exô
();

1923 
	}
}

1925 #ifde‡
CSR_SME_USERSPACE


1927 
	$uf_sme_queue_mesßge
(
unifi_¥iv_t
 *
¥iv
, 
u8
 *
buf„r
, 
Àngth
)

1929 
udi_log_t
 *
log±r
;

1930 
udi_msg_t
 *
msg±r
;

1931 
u8
 *
p
;

1933 
	`func_íãr
();

1936 i‡((
buf„r
 =
NULL
Ë|| (
Àngth
 <= 0)) {

1937  -
EINVAL
;

1941 
log±r
 = (
udi_log_t
 *)
	`kmÆloc
((udi_log_tË+ 
Àngth
, 
GFP_ATOMIC
);

1942 i‡(
log±r
 =
NULL
) {

1943 
	`unifi_îr‹
(
¥iv
, "FailedÅoállocate %d bytes forán SME message\n",

1944 (
udi_log_t
Ë+ 
Àngth
);

1945 
	`C§PmemFªe
(
buf„r
);

1946  -
ENOMEM
;

1950 
	`INIT_LIST_HEAD
(&
log±r
->
q
);

1951 
msg±r
 = &
log±r
->
msg
;

1952 
msg±r
->
Àngth
 = (
udi_msg_t
) +Üength;

1953 
msg±r
->
sig«l_Àngth
 = 
Àngth
;

1956 
p
 = (
u8
 *)(
msg±r
 + 1);

1957 
	`mem˝y
(
p
, 
buf„r
, 
Àngth
);

1960 
	`down
(&
udi_muãx
);

1961 i‡(
¥iv
->
sme_˛i
 =
NULL
) {

1962 
	`k‰ì
(
log±r
);

1963 
	`C§PmemFªe
(
buf„r
);

1964 
	`up
(&
udi_muãx
);

1965 
	`unifi_öfo
(
¥iv
, "Message forÅhe SME dropped, SME has goneáway\n");

1969 
	`down
(&
¥iv
->
sme_˛i
->
udi_£m
);

1970 
	`li°_add_èû
(&
log±r
->
q
, &
¥iv
->
sme_˛i
->
udi_log
);

1971 
	`up
(&
¥iv
->
sme_˛i
->
udi_£m
);

1974 
	`wake_up_öãºu±ibÀ
(&
¥iv
->
sme_˛i
->
udi_wq
);

1975 
	`up
(&
udi_muãx
);

1978 
	`C§PmemFªe
(
buf„r
);

1980 
	`func_exô
();

1984 
	}
}

1988 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,27)

1989 
	#UF_DEVICE_CREATE
(
_˛ass
, 
_∑ª¡
, 
_devno
, 
_¥iv
, 
_fmt
, 
_¨gs
) \

1990 
	`devi˚_¸óã
(
_˛ass
, 
_∑ª¡
, 
_devno
, 
_¥iv
, 
_fmt
, 
_¨gs
)

	)

1991 #ñi‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,26)

1992 
	#UF_DEVICE_CREATE
(
_˛ass
, 
_∑ª¡
, 
_devno
, 
_¥iv
, 
_fmt
, 
_¨gs
) \

1993 
	`devi˚_¸óã_drvd©a
(
_˛ass
, 
_∑ª¡
, 
_devno
, 
_¥iv
, 
_fmt
, 
_¨gs
)

	)

1995 
	#UF_DEVICE_CREATE
(
_˛ass
, 
_∑ª¡
, 
_devno
, 
_¥iv
, 
_fmt
, 
_¨gs
) \

1996 
	`devi˚_¸óã
(
_˛ass
, 
_∑ª¡
, 
_devno
, 
_fmt
, 
_¨gs
)

	)

2006 
fûe_›î©i⁄s
 
	gunifi_f›s
 = {

2007 .
ow√r
 = 
THIS_MODULE
,

2008 .
	g›í
 = 
unifi_›í
,

2009 .
	gªÀa£
 = 
unifi_ªÀa£
,

2010 .
	gªad
 = 
unifi_ªad
,

2011 .
	gwrôe
 = 
unifi_wrôe
,

2012 .
	gu∆ocked_io˘l
 = 
unifi_io˘l
,

2013 .
	gpﬁl
 = 
unifi_pﬁl
,

2016 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,27)

2017 
	#UF_DEVICE_CREATE
(
_˛ass
, 
_∑ª¡
, 
_devno
, 
_¥iv
, 
_fmt
, 
_¨gs
) \

2018 
	`devi˚_¸óã
(
_˛ass
, 
_∑ª¡
, 
_devno
, 
_¥iv
, 
_fmt
, 
_¨gs
)

	)

2019 #ñi‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,26)

2020 
	#UF_DEVICE_CREATE
(
_˛ass
, 
_∑ª¡
, 
_devno
, 
_¥iv
, 
_fmt
, 
_¨gs
) \

2021 
	`devi˚_¸óã_drvd©a
(
_˛ass
, 
_∑ª¡
, 
_devno
, 
_¥iv
, 
_fmt
, 
_¨gs
)

	)

2023 
	#UF_DEVICE_CREATE
(
_˛ass
, 
_∑ª¡
, 
_devno
, 
_¥iv
, 
_fmt
, 
_¨gs
) \

2024 
	`devi˚_¸óã
(
_˛ass
, 
_∑ª¡
, 
_devno
, 
_fmt
, 
_¨gs
)

	)

2027 
dev_t
 
	gunifi_fú°_devno
;

2028 
˛ass
 *
	gunifi_˛ass
;

2031 
	$uf_¸óã_devi˚_nodes
(
unifi_¥iv_t
 *
¥iv
, 
bus_id
)

2033 
dev_t
 
devno
;

2034 
r
;

2036 
	`cdev_öô
(&
¥iv
->
unifi_cdev
, &
unifi_f›s
);

2039 
¥iv
->
unifi_cdev
.
ow√r
 = 
THIS_MODULE
;

2041 
devno
 = 
	`MKDEV
(
	`MAJOR
(
unifi_fú°_devno
),

2042 
	`MINOR
(
unifi_fú°_devno
Ë+ (
bus_id
 * 2));

2043 
r
 = 
	`cdev_add
(&
¥iv
->
unifi_cdev
, 
devno
, 1);

2044 i‡(
r
) {

2045  
r
;

2048 #ifde‡
SDIO_EXPORTS_STRUCT_DEVICE


2049 i‡(!
	`UF_DEVICE_CREATE
(
unifi_˛ass
, 
¥iv
->
unifi_devi˚
,

2050 
devno
, 
¥iv
, "unifi%d", 
bus_id
)) {

2052 
¥iv
->
unifi_devi˚
 = 
	`UF_DEVICE_CREATE
(
unifi_˛ass
, 
NULL
,

2053 
devno
, 
¥iv
, "unifi%d", 
bus_id
);

2054 i‡(
¥iv
->
unifi_devi˚
 =
NULL
) {

2057 
	`cdev_dñ
(&
¥iv
->
unifi_cdev
);

2058  -
EINVAL
;

2061 
	`cdev_öô
(&
¥iv
->
unifiudi_cdev
, &
unifi_f›s
);

2064 
¥iv
->
unifiudi_cdev
.
ow√r
 = 
THIS_MODULE
;

2066 
devno
 = 
	`MKDEV
(
	`MAJOR
(
unifi_fú°_devno
),

2067 
	`MINOR
(
unifi_fú°_devno
Ë+ (
bus_id
 * 2) + 1);

2068 
r
 = 
	`cdev_add
(&
¥iv
->
unifiudi_cdev
, 
devno
, 1);

2069 i‡(
r
) {

2070 
	`devi˚_de°roy
(
unifi_˛ass
, 
¥iv
->
unifi_cdev
.
dev
);

2071 
	`cdev_dñ
(&
¥iv
->
unifi_cdev
);

2072  
r
;

2075 i‡(!
	`UF_DEVICE_CREATE
(
unifi_˛ass
,

2076 #ifde‡
SDIO_EXPORTS_STRUCT_DEVICE


2077 
¥iv
->
unifi_devi˚
,

2079 
NULL
,

2081 
devno
, 
¥iv
, "unifiudi%d", 
bus_id
)) {

2082 
	`devi˚_de°roy
(
unifi_˛ass
, 
¥iv
->
unifi_cdev
.
dev
);

2083 
	`cdev_dñ
(&
¥iv
->
unifiudi_cdev
);

2084 
	`cdev_dñ
(&
¥iv
->
unifi_cdev
);

2085  -
EINVAL
;

2089 
	}
}

2092 
	$uf_de°roy_devi˚_nodes
(
unifi_¥iv_t
 *
¥iv
)

2094 
	`devi˚_de°roy
(
unifi_˛ass
, 
¥iv
->
unifiudi_cdev
.
dev
);

2095 
	`devi˚_de°roy
(
unifi_˛ass
, 
¥iv
->
unifi_cdev
.
dev
);

2096 
	`cdev_dñ
(&
¥iv
->
unifiudi_cdev
);

2097 
	`cdev_dñ
(&
¥iv
->
unifi_cdev
);

2098 
	}
}

2117 
	$uf_¸óã_debug_devi˚
(
fûe_›î©i⁄s
 *
f›s
)

2119 
ªt
;

2122 
ªt
 = 
	`Æloc_chrdev_ªgi⁄
(&
unifi_fú°_devno
, 0, 
MAX_UNIFI_DEVS
*2, 
UNIFI_NAME
);

2123 i‡(
ªt
) {

2124 
	`unifi_îr‹
(
NULL
, "FaûedÅÿaddáŒo¯devÇumbîs: %d\n", 
ªt
);

2125  
ªt
;

2129 
unifi_˛ass
 = 
	`˛ass_¸óã
(
THIS_MODULE
, 
UNIFI_NAME
);

2130 i‡(
	`IS_ERR
(
unifi_˛ass
)) {

2131 
	`unifi_îr‹
(
NULL
, "FailedÅo create UniFi class\n");

2134 
	`uƒegi°î_chrdev_ªgi⁄
(
unifi_fú°_devno
, 
MAX_UNIFI_DEVS
*2);

2135 
unifi_fú°_devno
 = 0;

2136  -
EINVAL
;

2140 
	}
}

2156 
	$uf_ªmove_debug_devi˚
()

2159 
	`˛ass_de°roy
(
unifi_˛ass
);

2162 
	`uƒegi°î_chrdev_ªgi⁄
(
unifi_fú°_devno
, 
MAX_UNIFI_DEVS
*2);

2163 
unifi_fú°_devno
 = 0;

2165 
	}
}

2175 
__öô


2176 
	$unifi_lﬂd
()

2178 
r
;

2180 
	`¥ötk
("UniFi SDIO Driver: %s %s %s\n",

2181 
CSR_WIFI_VERSION
,

2182 
__DATE__
, 
__TIME__
);

2184 #ifde‡
CSR_SME_USERSPACE


2185 #ifde‡
CSR_SUPPORT_WEXT


2186 
	`¥ötk
("CSR SME with WEXT support\n");

2188 
	`¥ötk
("CSR SMEÇo WEXT support\n");

2192 #ifde‡
CSR_NATIVE_LINUX


2193 #ifde‡
CSR_SUPPORT_WEXT


2194 #îr‹ 
WEXT
 
unsuµ‹ãd
 
ö
 
the
 
«tive
 
drivî


2196 
	`¥ötk
("CSRÇativeÇo WEXT support\n");

2198 #ifde‡
CSR_WIFI_SPLIT_PATCH


2199 
	`¥ötk
("SplitÖatch support\n");

2201 
	`¥ötk
("Kernel %d.%d.%d\n",

2202 ((
LINUX_VERSION_CODE
) >> 16) & 0xff,

2203 ((
LINUX_VERSION_CODE
) >> 8) & 0xff,

2204 (
LINUX_VERSION_CODE
) & 0xff);

2211 
r
 = 
	`uf_¸óã_debug_devi˚
(&
unifi_f›s
);

2212 i‡(
r
) {

2213  
r
;

2217 
r
 = 
	`uf_sdio_lﬂd
();

2218 i‡(
r
) {

2219 
	`uf_ªmove_debug_devi˚
();

2220  
r
;

2223 i‡(
sdio_block_size
 > -1) {

2224 
	`unifi_öfo
(
NULL
, "sdio_block_sizê%d\n", 
sdio_block_size
);

2227 i‡(
sdio_byã_mode
) {

2228 
	`unifi_öfo
(
NULL
, "sdio_byte_mode\n");

2231 i‡(
dißbÀ_powî_c⁄åﬁ
) {

2232 
	`unifi_öfo
(
NULL
, "disable_power_control\n");

2235 i‡(
dißbÀ_hw_ª£t
) {

2236 
	`unifi_öfo
(
NULL
, "disable_hw_reset\n");

2239 i‡(
íabÀ_wﬁ
) {

2240 
	`unifi_öfo
(
NULL
, "íabÀ_wﬁ %d\n", 
íabÀ_wﬁ
);

2243 i‡(
run_bh_⁄˚
 != -1) {

2244 
	`unifi_öfo
(
NULL
, "run_bh_⁄˚ %d\n", 
run_bh_⁄˚
);

2248 
	}
}

2251 
__exô


2252 
	$unifi_u∆ﬂd
()

2255 
	`uf_sdio_u∆ﬂd
();

2257 
	`uf_ªmove_debug_devi˚
();

2259 
	}
}

2261 
moduÀ_öô
(
unifi_lﬂd
);

2262 
moduÀ_exô
(
unifi_u∆ﬂd
);

2264 
MODULE_DESCRIPTION
("UniFi Device driver");

2265 
MODULE_AUTHOR
("Cambridge Silicon Radio Ltd.");

2266 
MODULE_LICENSE
("GPLándádditionalÑights");

	@firmware.c

19 
	~<löux/kmod.h
>

20 
	~<löux/vmÆloc.h
>

21 
	~<löux/fúmw¨e.h
>

22 
	~<asm/uac˚ss.h
>

23 
	~"c§_wifi_hù_unifi.h
"

24 
	~"c§_wifi_hù_unifi_udi.h
"

25 
	~"unifiio.h
"

26 
	~"unifi_¥iv.h
"

59 * 
	$unifi_fw_ªad_°¨t
(*
o•riv
, 
C§I¡8
 
is_fw
, c⁄° 
ˇrd_öfo_t
 *
öfo
)

61 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
o•riv
;

62 
	`CSR_UNUSED
(
öfo
);

64 
	`func_íãr
();

66 i‡(
is_fw
 =
UNIFI_FW_STA
)

69 i‡(
¥iv
->
fw_°a
.
dl_d©a
 =
NULL
)

71 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "AttemptÑeload of sta f/w\n");

72 
	`uf_ªque°_fúmw¨e_fûes
(
¥iv
, 
UNIFI_FW_STA
);

75 i‡(
¥iv
->
fw_°a
.
dl_d©a
 !
NULL
)

77 
	`func_exô
();

78  &
¥iv
->
fw_°a
;

83 
	`unifi_îr‹
(
¥iv
, "dow∆ﬂdög fúmw¨e... unknow¿ªque°: %d\n", 
is_fw
);

86 
	`func_exô
();

87  
NULL
;

88 
	}
}

105 
	$unifi_fw_ªad_°›
(*
o•riv
, *
dÕriv
)

107 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
o•riv
;

108 
dÕriv
 *
dl_°ru˘
 = (dlpriv *)dlpriv;

109 
	`func_íãr
();

111 i‡(
dl_°ru˘
 !
NULL
)

113 i‡(
dl_°ru˘
->
dl_d©a
 !
NULL
)

115 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "Release f/w buffer %p, %d bytes\n",

116 
dl_°ru˘
->
dl_d©a
, dl_°ru˘->
dl_Àn
);

118 
	`uf_ªÀa£_fúmw¨e
(
¥iv
, 
dl_°ru˘
);

121 
	`func_exô
();

122 
	}
}

145 * 
	$unifi_fw_›í_buf„r
(*
o•riv
, *
fwbuf
, 
C§Uöt32
 
Àn
)

147 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
o•riv
;

148 
	`func_íãr
();

150 i‡(
fwbuf
 =
NULL
)

152 
	`func_exô
();

153  
NULL
;

155 
¥iv
->
fw_c⁄v
.
dl_d©a
 = 
fwbuf
;

156 
¥iv
->
fw_c⁄v
.
dl_Àn
 = 
Àn
;

157 
¥iv
->
fw_c⁄v
.
fw_desc
 = 
NULL
;

159 
	`func_exô
();

160  &
¥iv
->
fw_c⁄v
;

161 
	}
}

181 
	$unifi_fw_˛o£_buf„r
(*
o•riv
, *
fwbuf
)

183 
	}
}

204 
C§I¡32
 
	$unifi_fw_ªad
(*
o•riv
, *
¨g
, 
C§Uöt32
 
off£t
, *
buf
, C§Uöt32 
Àn
)

206 c⁄° 
dÕriv
 *dÕriv = 
¨g
;

208 i‡(
off£t
 >
dÕriv
->
dl_Àn
)

214 i‡((
off£t
 + 
Àn
Ë> 
dÕriv
->
dl_Àn
)

220 
	`mem˝y
(
buf
, 
dÕriv
->
dl_d©a
 + 
off£t
, 
Àn
);

222  
Àn
;

223 
	}
}

226 
	#UNIFIHELPER_INIT_MODE_SMEEMB
 0

	)

227 
	#UNIFIHELPER_INIT_MODE_SMEUSER
 2

	)

228 
	#UNIFIHELPER_INIT_MODE_NATIVE
 1

	)

243 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 6, 34Ë|| 
deföed
(
CSR_WIFI_DRIVER_COMPAT_OLD_USERMODEHELPER_API
)Ë&& !deföed(
CSR_WIFI_DRIVER_COMPAT_NEW_USERMODEHELPER_API
)

244 
	$uf_run_unifihñ≥r_˛ónup
(**
¨gv
, **
ívp
)

246 i‡(!
¨gv
)

248 
	`¥ötk
(
KERN_ERR
 "unifi: uf_run_unifihelper_cleanup:árgv isÇull");

252 
	`¥ötk
(
KERN_INFO
 "unifi: uf_run_unifihelper_cleanup");

253 
	`¨gv_‰ì
(
¨gv
);

254 
	}
}

257 #ñi‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3, 10, 0)

258 
	$uf_run_unifihñ≥r_˛ónup
(
sub¥o˚ss_öfo
 *
•_öfo
)

260 i‡(!
•_öfo
)

262 
	`¥ötk
(
KERN_ERR
 "unifi: uf_run_unifihelper_cleanup: sp_info isÇull");

265 i‡(!
•_öfo
->
¨gv
)

267 
	`¥ötk
(
KERN_ERR
 "unifi: uf_run_unifihelper_cleanup:árgv isÇull");

271 
	`¥ötk
(
KERN_INFO
 "unifi: uf_run_unifihelper_cleanup");

272 
	`¨gv_‰ì
(
•_öfo
->
¨gv
);

273 
	}
}

294 
	$uf_run_unifihñ≥r
(
unifi_¥iv_t
 *
¥iv
)

296 #i‡(
deföed
 
CONFIG_HOTPLUG
Ë|| (
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3, 11, 0))

297 #ifde‡
ANDROID_BUILD


298 *
¥og
 = "/system/bin/unififw";

301 *
¥og
 = "/usr/sbin/unififw";

304 *
ívp
[] = { "HOME=/", "PATH=/sbö:/bö:/u§/sbö:/u§/bö", 
NULL
 };

305 c⁄° 
exec_°rög_buf„r_Àn
 = 64;

306 **
¨gv
, 
¨gv_°r
[
exec_°rög_buf„r_Àn
];

307 c⁄° 
exec_°rög_¨gs
 = 3;

308 
¨gc
, 
r
, 
Àn
;

310 #i‡(
deföed
 
CSR_SME_USERSPACE
)

311 
u£r
 = 
UNIFIHELPER_INIT_MODE_SMEUSER
;

313 
u£r
 = 
UNIFIHELPER_INIT_MODE_NATIVE
;

316 #i‡(
deföed
 
CSR_SME_USERSPACE
Ë&& (!deföed 
CSR_SUPPORT_WEXT
)

317 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "SME userspace build:Ñun unifi_helper manually\n");

321 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "°¨tög %s\n", 
¥og
);

323 
Àn
 = 
	`¢¥ötf
(
¨gv_°r
, 
exec_°rög_buf„r_Àn
, "%†%d %d", 
¥og
, 
¥iv
->
ö°™˚
, 
u£r
);

325 i‡(
Àn
 >
exec_°rög_buf„r_Àn
)

328 
	`unifi_åa˚
(
¥iv
, 
UDBG0
, "unifi%d:Éxec string buffer insufficient (buffer size=%d,áctual string=%d)\n",

329 
¥iv
->
ö°™˚
, 
exec_°rög_buf„r_Àn
, 
Àn
);

334 
¨gc
 = 0;

335 
¨gv
 = 
	`¨gv_•lô
(
GFP_ATOMIC
, 
¨gv_°r
, &
¨gc
);

336 i‡(!
¨gv
)

338 
	`unifi_åa˚
(
¥iv
, 
UDBG0
, "unifi%d: faûedÅÿÆloˇãárgv f‹ u£r•a˚ hñ≥r\n",Öriv->
ö°™˚
);

341 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "unifi:árgváŒoˇãd 0x%p\n", 
¨gv
);

343 i‡(
¨gc
 !
exec_°rög_¨gs
)

345 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "unifi%d:Éxec string hasÅhe wrongÇumber ofárguments (has %d, should be %d)\n",

346 
¥iv
->
ö°™˚
, 
¨gc
, 
exec_°rög_¨gs
);

347 
	`¨gv_‰ì
(
¨gv
);

351 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "unifi%d:Ñu¬ög %†%†%s\n",Öriv?¥iv->
ö°™˚
 : 0, 
¨gv
[0],árgv[1],árgv[2]);

353 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(3, 5, 0)

355 
sub¥o˚ss_öfo
 *
•_öfo
;

358 
•_öfo
 = 
	`ˇŒ_u£rmodehñ≥r_£tup
(
¨gv
[0],árgv, 
ívp
, 
GFP_KERNEL
);

359 i‡(!
•_öfo
)

361 
	`unifi_îr‹
(
¥iv
, "unifi%d: cÆl_u£rmodehñ≥r_£tup(ËÁûed\n",Öriv->
ö°™˚
);

362 
	`¨gv_‰ì
(
¨gv
);

373 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 34Ë|| 
	`deföed
(
CSR_WIFI_DRIVER_COMPAT_OLD_USERMODEHELPER_API
)Ë&& !deföed(
CSR_WIFI_DRIVER_COMPAT_NEW_USERMODEHELPER_API
)

374 
	`ˇŒ_u£rmodehñ≥r_£t˛ónup
(
•_öfo
, 
uf_run_unifihñ≥r_˛ónup
);

376 
	`ˇŒ_u£rmodehñ≥r_£t‚s
(
•_öfo
, 
NULL
, 
uf_run_unifihñ≥r_˛ónup
, NULL);

388 
r
 = 
	`ˇŒ_u£rmodehñ≥r_exec
(
•_öfo
, 
UMH_WAIT_EXEC
);

389 i‡(
r
 != 0)

395 
	`unifi_îr‹
(
¥iv
, "unifi%d: cÆl_u£rmodehñ≥r(ËÁûed wôh %d\n",Öriv->
ö°™˚
, 
r
);

398 #ñi‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(3, 10, 0)

399 
r
 = 
	`ˇŒ_u£rmodehñ≥r_‚s
(
¨gv
[0],árgv, 
ívp
, 
UMH_WAIT_EXEC
, 
NULL
, 
uf_run_unifihñ≥r_˛ónup
, NULL);

401 
r
 = 
	`ˇŒ_u£rmodehñ≥r
(
¨gv
[0],árgv, 
ívp
, 
UMH_WAIT_EXEC
);

404  
r
;

406 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "Can'táutomatically download firmware because kernel doesÇot have HOTPLUG\n");

409 
	}
}

412 #ifde‡
CSR_WIFI_SPLIT_PATCH


413 
C§Boﬁ
 
	$is_≠_mode
(
unifi_¥iv_t
 *
¥iv
)

415 i‡(
¥iv
 =
NULL
 ||Öriv->
öãrÁ˚Priv
[0] == NULL)

417  
FALSE
;

421 (
	`CSR_WIFI_HIP_IS_AP_FW
(
¥iv
->
öãrÁ˚Priv
[0]->
öãrÁ˚Mode
));

422 
	}
}

441 
	$uf_ªque°_fúmw¨e_fûes
(
unifi_¥iv_t
 *
¥iv
, 
is_fw
)

444 c⁄° 
fúmw¨e
 *
fw_íåy
;

445 
po°fix
;

446 
	#UNIFI_MAX_FW_PATH_LEN
 32

	)

447 
fw_«me
[
UNIFI_MAX_FW_PATH_LEN
];

448 
r
;

450 #i‡(
deföed
 
CSR_SUPPORT_SME
Ë&& (deföed 
CSR_SUPPORT_WEXT
)

451 i‡(
¥iv
->
mib_d©a
.
Àngth
)

453 
	`v‰ì
(
¥iv
->
mib_d©a
.
d©a
);

454 
¥iv
->
mib_d©a
.
d©a
 = 
NULL
;

455 
¥iv
->
mib_d©a
.
Àngth
 = 0;

459 
po°fix
 = 
¥iv
->
ö°™˚
;

461 i‡(
is_fw
 =
UNIFI_FW_STA
)

464 
	`uf_ªÀa£_fúmw¨e
(
¥iv
, &¥iv->
fw_°a
);

465 #ifde‡
CSR_WIFI_SPLIT_PATCH


466 
	`s˙¥ötf
(
fw_«me
, 
UNIFI_MAX_FW_PATH_LEN
, "unifi-sdio/%s",

467 (
¥iv
->
öãrÁ˚Priv
[0]->
∑tchMode
)?"ap.xbv" : "staonly.xbv");

469 
	`s˙¥ötf
(
fw_«me
, 
UNIFI_MAX_FW_PATH_LEN
, "unifi-sdio/%s",

472 
r
 = 
	`ªque°_fúmw¨e
(&
fw_íåy
, 
fw_«me
, 
¥iv
->
unifi_devi˚
);

473 i‡(
r
 == 0)

475 
¥iv
->
fw_°a
.
dl_d©a
 = 
fw_íåy
->
d©a
;

476 
¥iv
->
fw_°a
.
dl_Àn
 = 
fw_íåy
->
size
;

477 
¥iv
->
fw_°a
.
fw_desc
 = (*)
fw_íåy
;

481 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "Firmware fileÇotávailable\n");

486 
	}
}

502 
	$uf_ªÀa£_fúmw¨e_fûes
(
unifi_¥iv_t
 *
¥iv
)

504 
	`uf_ªÀa£_fúmw¨e
(
¥iv
, &¥iv->
fw_°a
);

507 
	}
}

524 
	$uf_ªÀa£_fúmw¨e
(
unifi_¥iv_t
 *
¥iv
, 
dÕriv
 *
to_‰ì
)

526 i‡(
to_‰ì
 !
NULL
)

528 i‡(
to_‰ì
->
fw_desc
 !
NULL
)

530 
	`ªÀa£_fúmw¨e
((c⁄° 
fúmw¨e
 *)
to_‰ì
->
fw_desc
);

532 
to_‰ì
->
fw_desc
 = 
NULL
;

533 
to_‰ì
->
dl_d©a
 = 
NULL
;

534 
to_‰ì
->
dl_Àn
 = 0;

537 
	}
}

	@indications.c

17 
	~"c§_wifi_hù_unifi.h
"

18 
	~"unifi_¥iv.h
"

	@inet.c

18 
	~<löux/öëdevi˚.h
>

19 
	~<löux/nŸifõr.h
>

21 
	~"unifi_¥iv.h
"

22 
	~"c§_wifi_hù_c⁄vîsi⁄s.h
"

31 
©omic_t
 
	göë_nŸif_ªfs
 = 
ATOMIC_INIT
(0);

33 
	$uf_öëaddr_evít
(
nŸifõr_block
 *
nŸif
, 
evít
, *
iÁ
)

35 
√t_devi˚
 *
ndev
;

36 
unifi_¥iv_t
 *
¥iv
;

37 
ö_iÁddr
 *
if_addr
;

38 
√tI¡îÁ˚_¥iv_t
 *
I¡îÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
NULL
;

40 i‡(!
iÁ
 || !((
ö_iÁddr
 *)iÁ)->
iÁ_dev
) {

41 
	`unifi_åa˚
(
NULL
, 
UDBG1
, "uf_öëaddr_evíà(%luËiÁ=%p\n", 
evít
, 
iÁ
);

42  
NOTIFY_DONE
;

45 
ndev
 = ((
ö_iÁddr
 *)
iÁ
)->
iÁ_dev
->
dev
;

46 
I¡îÁ˚Priv
 = (
√tI¡îÁ˚_¥iv_t
*Ë
	`√tdev_¥iv
(
ndev
);

51 i‡(
	`uf_föd_√tdev_¥iv
(
I¡îÁ˚Priv
) == -1) {

52 
	`unifi_åa˚
(
NULL
, 
UDBG1
, "uf_inetaddr_event (%lu)Çdev=%p, otherÇetdev_priv=%p\n",

53 
evít
, 
ndev
, 
I¡îÁ˚Priv
);

54  
NOTIFY_DONE
;

57 i‡(!
I¡îÁ˚Priv
->
¥ivPå
) {

58 
	`unifi_îr‹
(
NULL
, "uf_inetaddr_eventÇullÖriv (%lu)Çdev=%p, InterfacePriv=%p\n",

59 
evít
, 
ndev
, 
I¡îÁ˚Priv
);

60  
NOTIFY_DONE
;

63 
¥iv
 = 
I¡îÁ˚Priv
->
¥ivPå
;

64 
if_addr
 = (
ö_iÁddr
 *)
iÁ
;

68 i‡(
	`uf_föd_¥iv
(
¥iv
) != -1) {

69 
evít
) {

70 
NETDEV_UP
:

71 
	`unifi_öfo
(
¥iv
, "IPáddªs†assig√d f‹ %s\n",Öriv->
√tdev
[
I¡îÁ˚Priv
->
I¡îÁ˚Tag
]->
«me
);

72 
¥iv
->
°a_ù_addªss
 = 
if_addr
->
iÁ_addªss
;

73 #ifde‡
CSR_SUPPORT_WEXT


74 
	`sme_mgt_∑ckë_fûãr_£t
(
¥iv
);

77 
NETDEV_DOWN
:

78 
	`unifi_öfo
(
¥iv
, "IPáddªs†ªmoved f‹ %s\n",Öriv->
√tdev
[
I¡îÁ˚Priv
->
I¡îÁ˚Tag
]->
«me
);

79 
¥iv
->
°a_ù_addªss
 = 0xFFFFFFFF;

80 #ifde‡
CSR_SUPPORT_WEXT


81 
	`sme_mgt_∑ckë_fûãr_£t
(
¥iv
);

87  
NOTIFY_DONE
;

88 
	}
}

90 
nŸifõr_block
 
	guf_öëaddr_nŸifõr
 = {

91 .
nŸifõr_ˇŒ
 = 
uf_öëaddr_evít
,

94 
	$uf_ªgi°î_öë_nŸifõr
()

96 i‡(
	`©omic_öc_ªtu∫
(&
öë_nŸif_ªfs
) == 1) {

97 
	`ªgi°î_öëaddr_nŸifõr
(&
uf_öëaddr_nŸifõr
);

99 
	}
}

101 
	$uf_uƒegi°î_öë_nŸifõr
()

103 i‡(
	`©omic_dec_ªtu∫
(&
öë_nŸif_ªfs
) == 0) {

104 
	`uƒegi°î_öëaddr_nŸifõr
(&
uf_öëaddr_nŸifõr
);

106 
	}
}

	@init_hw.c

16 
	~"c§_wifi_hù_unifi.h
"

17 
	~"unifi_¥iv.h
"

20 
	#MAX_INIT_ATTEMPTS
 4

	)

22 
Àd_mask
;

47 
	$uf_öô_hw
(
unifi_¥iv_t
 *
¥iv
)

49 
©ãm±s
 = 0;

50 
¥iv_ö°™˚
;

51 
C§Resu…
 
c§Resu…
 = 
CSR_RESULT_FAILURE
;

53 
¥iv_ö°™˚
 = 
	`uf_föd_¥iv
(
¥iv
);

54 i‡(
¥iv_ö°™˚
 == -1) {

55 
	`unifi_w¨nög
(
¥iv
, "uf_init_hw: UnknownÖriv instance, will use fw_init[0]\n");

56 
¥iv_ö°™˚
 = 0;

60 i‡(
©ãm±s
 > 
MAX_INIT_ATTEMPTS
) {

61 
	`unifi_îr‹
(
¥iv
, "FailedÅo initialise UniFiáfter %dáttempts, "

63 
©ãm±s
);

66 
©ãm±s
++;

68 
	`unifi_öfo
(
¥iv
, "Inôülisög UniFi,áâem± %d\n", 
©ãm±s
);

70 i‡(
fw_öô
[
¥iv_ö°™˚
] > 0) {

71 
	`unifi_nŸi˚
(
¥iv
, "f/w initÖrevented by moduleÖarameter\n");

73 } i‡(
fw_öô
[
¥iv_ö°™˚
] == 0) {

74 
fw_öô
[
¥iv_ö°™˚
] ++;

81 
	`C§SdioCœim
(
¥iv
->
sdio
);

82 
c§Resu…
 = 
	`unifi_öô_ˇrd
(
¥iv
->
ˇrd
, 
Àd_mask
);

83 
	`C§SdioRñó£
(
¥iv
->
sdio
);

85 i‡(
c§Resu…
 =
CSR_WIFI_HIP_RESULT_NO_DEVICE
) {

86  
	`C§HùResu…ToSètus
(
c§Resu…
);

88 i‡(
c§Resu…
 =
CSR_WIFI_HIP_RESULT_NOT_FOUND
) {

89 
	`unifi_îr‹
(
¥iv
, "Firmware fileÑequired, butÇot found.\n");

90  
	`C§HùResu…ToSètus
(
c§Resu…
);

92 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

94 
	`unifi_îr‹
(
¥iv
, "FailedÅo initialise UniFi chip.\n");

99 
	`unifi_ˇrd_öfo
(
¥iv
->
ˇrd
, &¥iv->
ˇrd_öfo
);

101  
	`C§HùResu…ToSètus
(
c§Resu…
);

104  
	`C§HùResu…ToSètus
(
c§Resu…
);

106 
	}
}

	@io.c

33 
	~<löux/¥oc_fs.h
>

34 
	~<löux/£q_fûe.h
>

36 
	~"c§_wifi_hù_unifi.h
"

37 
	~"c§_wifi_hù_unifivîsi⁄.h
"

38 
	~"c§_wifi_hù_unifi_udi.h
"

39 
	~"unifiio.h
"

40 
	~"unifi_¥iv.h
"

52 
unifi_¥iv_t
 *
	gUnifi_ö°™˚s
[
MAX_UNIFI_DEVS
];

58 
√tI¡îÁ˚_¥iv_t
 *
	gUnifi_√tdev_ö°™˚s
[
MAX_UNIFI_DEVS
 * 
CSR_WIFI_NUM_INTERFACES
];

66 
	#UNIFI_DEV_NOT_IN_USE
 0

	)

67 
	#UNIFI_DEV_IN_USE
 1

	)

68 
	#UNIFI_DEV_CLEANUP
 2

	)

69 
	gIn_u£
[
MAX_UNIFI_DEVS
];

74 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 37)

75 
DEFINE_SEMAPHORE
(
Unifi_ö°™˚_muãx
);

77 
DECLARE_MUTEX
(
Unifi_ö°™˚_muãx
);

83 
DECLARE_WAIT_QUEUE_HEAD
(
Unifi_˛ónup_wq
);

86 #ifde‡
CONFIG_PROC_FS


90 
uf_¥oc_show
(
£q_fûe
 *
m
, *
v
);

92 
	#UNIFI_DEBUG_TXT_BUFFER
 (8 * 1024)

	)

94 
	$uf_¥oc_›í
(
öode
 *öode, 
fûe
 *file)

96 
size_t
 
size
 = 
UNIFI_DEBUG_TXT_BUFFER
;

97 *
buf
 = 
	`kmÆloc
(
size
, 
GFP_KERNEL
);

98 *
pde_d©a
;

99 
ªt
;

101 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(3, 10, 0)

102 
pde_d©a
 = 
	`PDE
(
öode
)->
d©a
;

104 
pde_d©a
 = 
	`PDE_DATA
(
öode
);

107 i‡(!
buf
)

108  -
ENOMEM
;

109 
ªt
 = 
	`sögÀ_›í
(
fûe
, 
uf_¥oc_show
, 
pde_d©a
);

110 i‡(
ªt
) {

111 
	`k‰ì
(
buf
);

112  
ªt
;

114 ((
£q_fûe
 *)
fûe
->
¥iv©e_d©a
)->
buf
 = buf;

115 ((
£q_fûe
 *)
fûe
->
¥iv©e_d©a
)->
size
 = size;

117 
	}
}

119 c⁄° 
fûe_›î©i⁄s
 
	guf_¥oc_f›s
 = {

120 .
›í
 = 
uf_¥oc_›í
,

121 .
	gªad
 = 
£q_ªad
,

122 .
	gŒ£ek
 = 
£q_l£ek
,

123 .
	gªÀa£
 = 
sögÀ_ªÀa£
,

128 #ifde‡
CSR_WIFI_RX_PATH_SPLIT


130 
C§Resu…
 
	$sig«l_buf„r_öô
(
unifi_¥iv_t
 * 
¥iv
, 
size
)

132 
i
;

133 
	`func_íãr
();

135 
¥iv
->
rxSig«lBuf„r
.
wrôePoöãr
 =

136 
¥iv
->
rxSig«lBuf„r
.
ªadPoöãr
 = 0;

137 
¥iv
->
rxSig«lBuf„r
.
size
 = size;

139 
i
=0; i<
size
; i++)

141 
¥iv
->
rxSig«lBuf„r
.
rx_buff
[
i
].
sig_Àn
=0;

142 
¥iv
->
rxSig«lBuf„r
.
rx_buff
[
i
].
buÂå
 = 
	`C§MemAŒoc
(
UNIFI_PACKED_SIGBUF_SIZE
);

143 i‡(
¥iv
->
rxSig«lBuf„r
.
rx_buff
[
i
].
buÂå
 =
NULL
)

145 
j
;

146 
	`unifi_îr‹
(
¥iv
,"signal_buffer_init:FailedÅo Allocate shared memory for T-H signals \n");

147 
j
=0;j<
i
;j++)

149 
¥iv
->
rxSig«lBuf„r
.
rx_buff
[
j
].
sig_Àn
=0;

150 
	`C§MemFªe
(
¥iv
->
rxSig«lBuf„r
.
rx_buff
[
j
].
buÂå
);

151 
¥iv
->
rxSig«lBuf„r
.
rx_buff
[
j
].
buÂå
 = 
NULL
;

153 
	`func_exô
();

157 
	`func_exô
();

159 
	}
}

162 
	$sig«l_buf„r_‰ì
(
unifi_¥iv_t
 * 
¥iv
, 
size
)

164 
i
;

166 
i
=0; i<
size
; i++)

168 
¥iv
->
rxSig«lBuf„r
.
rx_buff
[
i
].
sig_Àn
=0;

169 
	`C§MemFªe
(
¥iv
->
rxSig«lBuf„r
.
rx_buff
[
i
].
buÂå
);

170 
¥iv
->
rxSig«lBuf„r
.
rx_buff
[
i
].
buÂå
 = 
NULL
;

172 
	}
}

195 
	$uf_ªgi°î_√tdev
(
unifi_¥iv_t
 *
¥iv
, 
öãrÁ˚Tag
)

197 
r
;

198 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

200 i‡(
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
) {

201 
	`unifi_îr‹
(
¥iv
, "uf_register_netdev bad interfaceTag\n");

202  -
EINVAL
;

209 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "uf_register_netdev:Çetdev %d - 0x%p\n",

210 
öãrÁ˚Tag
, 
¥iv
->
√tdev
[interfaceTag]);

211 
r
 = 
	`ªgi°î_√tdev
(
¥iv
->
√tdev
[
öãrÁ˚Tag
]);

212 i‡(
r
) {

213 
	`unifi_îr‹
(
¥iv
, "FailedÅoÑegisterÇet device\n");

214  -
EINVAL
;

218 
öãrÁ˚Priv
->
√tdev_ªgi°îed
 = 1;

220 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,28)

221 #ifde‡
CONFIG_NET_SCHED


227 
r
 = 
	`uf_ö°Æl_qdisc
(
¥iv
->
√tdev
[
öãrÁ˚Tag
]);

228 i‡(
r
) {

229 
	`unifi_îr‹
(
¥iv
, "FailedÅo install qdisc\n");

230  
r
;

235 #ifde‡
CSR_SUPPORT_SME


239 
	`uf_ªgi°î_öë_nŸifõr
();

242 
	`unifi_nŸi˚
(
¥iv
, "unifi%d is %s\n",

243 
¥iv
->
ö°™˚
,Öriv->
√tdev
[
öãrÁ˚Tag
]->
«me
);

246 
	}
}

264 
	$uf_uƒegi°î_√tdev
(
unifi_¥iv_t
 *
¥iv
)

266 
i
=0;

268 #ifde‡
CSR_SUPPORT_SME


270 
	`uf_uƒegi°î_öë_nŸifõr
();

273 
i
=0; i<
CSR_WIFI_NUM_INTERFACES
; i++) {

274 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
i
];

275 i‡(
öãrÁ˚Priv
->
√tdev_ªgi°îed
) {

276 
	`unifi_åa˚
(
¥iv
, 
UDBG5
,

278 
i
, 
¥iv
->
√tdev
[i]);

281 
	`uƒegi°î_√tdev
(
¥iv
->
√tdev
[
i
]);

282 
öãrÁ˚Priv
->
√tdev_ªgi°îed
 = 0;

285 
öãrÁ˚Priv
->
öãrÁ˚Mode
 = 0;

288 
öãrÁ˚Priv
->
queueE«bÀd
[0] = 1;

289 
öãrÁ˚Priv
->
queueE«bÀd
[1] = 1;

290 
öãrÁ˚Priv
->
queueE«bÀd
[2] = 1;

291 
öãrÁ˚Priv
->
queueE«bÀd
[3] = 1;

294 
¥iv
->
tŸÆI¡îÁ˚Cou¡
 = 0;

295 
	}
}

320 
unifi_¥iv_t
 *

321 
	$ªgi°î_unifi_sdio
(
C§SdioFun˘i⁄
 *
sdio_dev
, 
bus_id
, 
devi˚
 *
dev
)

323 
unifi_¥iv_t
 *
¥iv
 = 
NULL
;

324 
r
 = -1;

325 
C§Resu…
 
c§Resu…
;

327 
	`func_íãr
();

329 i‡((
bus_id
 < 0Ë|| (bus_id >
MAX_UNIFI_DEVS
)) {

330 
	`unifi_îr‹
(
¥iv
, "register_unifi_sdio: invalid device %d\n",

331 
bus_id
);

332  
NULL
;

335 
	`down
(&
Unifi_ö°™˚_muãx
);

337 i‡(
In_u£
[
bus_id
] !
UNIFI_DEV_NOT_IN_USE
) {

338 
	`unifi_îr‹
(
¥iv
, "register_unifi_sdio: device %d isálready in use\n",

339 
bus_id
);

340 
Áûed0
;

345 
¥iv
 = 
	`uf_Æloc_√tdevi˚
(
sdio_dev
, 
bus_id
);

346 i‡(
¥iv
 =
NULL
) {

347 
	`unifi_îr‹
(
¥iv
, "FailedÅoállocate driverÖrivate\n");

348 
Áûed0
;

351 
¥iv
->
unifi_devi˚
 = 
dev
;

353 
	`SET_NETDEV_DEV
(
¥iv
->
√tdev
[0], 
dev
);

356 
	`√tif_ˇºõr_off
(
¥iv
->
√tdev
[0]);

359 
¥iv
->
ˇrd
 = 
	`unifi_Æloc_ˇrd
’riv->
sdio
,Öriv);

360 i‡(
¥iv
->
ˇrd
 =
NULL
) {

361 
	`unifi_îr‹
(
¥iv
, "FailedÅoállocate UniFi driver card struct.\n");

362 
Áûed1
;

365 i‡(
Unifi_ö°™˚s
[
bus_id
]) {

366 
	`unifi_îr‹
(
¥iv
, "InternalÉrror: instance for slot %d isálreadyÅaken\n",

367 
bus_id
);

369 
Unifi_ö°™˚s
[
bus_id
] = 
¥iv
;

370 
In_u£
[
bus_id
] = 
UNIFI_DEV_IN_USE
;

373 
Unifi_√tdev_ö°™˚s
[
bus_id
 * 
CSR_WIFI_NUM_INTERFACES
] = 
	`√tdev_¥iv
(
¥iv
->
√tdev
[0]);

376 
c§Resu…
 = 
	`unifi_c‹edump_öô
(
¥iv
->
ˇrd
, (
C§Uöt16
)
c‹edump_max
);

377 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

378 
	`unifi_îr‹
(
¥iv
, "Couldn'tállocate mini-coredump buffers\n");

382 
r
 = 
	`uf_¸óã_devi˚_nodes
(
¥iv
, 
bus_id
);

383 i‡(
r
) {

384 
Áûed1
;

390 
	`¢¥ötf
(
¥iv
->
¥oc_íåy_«me
, 64, "drivî/unifi%d",Öriv->
ö°™˚
);

395 i‡(!
	`¥oc_¸óã_d©a
(
¥iv
->
¥oc_íåy_«me
, 0, 
NULL
,

396 &
uf_¥oc_f›s
, (*)()
¥iv
->
ö°™˚
))

398 
	`unifi_îr‹
(
¥iv
, "unifi: can't create /proc/driver/unifi\n");

403 
i
;

404 
¥iv
->
tŸÆI¡îÁ˚Cou¡
 =0;

406 
i
=1;i<
CSR_WIFI_NUM_INTERFACES
;i++)

408 if–!
	`uf_Æloc_√tdevi˚_f‹_Ÿhî_öãrÁ˚s
(
¥iv
,
i
) )

414 
	`unifi_îr‹
(
¥iv
, "FaûedÅÿÆloˇã drivîÖriv©êf‹ i¡îÁ˚[%d]\n",
i
);

415 
Áûed0
;

419 
	`SET_NETDEV_DEV
(
¥iv
->
√tdev
[
i
], 
dev
);

422 
	`√tif_ˇºõr_off
(
¥iv
->
√tdev
[
i
]);

425 
Unifi_√tdev_ö°™˚s
[
bus_id
 * 
CSR_WIFI_NUM_INTERFACES
 + 
i
] = 
	`√tdev_¥iv
(
¥iv
->
√tdev
[i]);

429 
i
=0;i<
CSR_WIFI_NUM_INTERFACES
;i++)

431 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
i
];

432 
öãrÁ˚Priv
->
√tdev_ªgi°îed
=0;

436 #ifde‡
CSR_WIFI_RX_PATH_SPLIT


437 i‡(
	`sig«l_buf„r_öô
(
¥iv
, 
CSR_WIFI_RX_SIGNAL_BUFFER_SIZE
))

439 
	`unifi_îr‹
(
¥iv
,"FailedÅoállocate shared memory for T-H signals\n");

440 
Áûed2
;

442 
¥iv
->
rx_w‹kqueue
 = 
	`¸óã_sögÀthªad_w‹kqueue
("rx_workq");

443 i‡(
¥iv
->
rx_w‹kqueue
 =
NULL
) {

444 
	`unifi_îr‹
(
¥iv
,"create_singlethread_workqueue failed \n");

445 
Áûed3
;

447 
	`INIT_WORK
(&
¥iv
->
rx_w‹k_°ru˘
, 
rx_wq_h™dÀr
);

450 #ifde‡
CSR_WIFI_HIP_DEBUG_OFFLINE


451 i‡(
log_hù_sig«ls
)

453 
	`uf_ªgi°î_hù_ofÊöe_debug
(
¥iv
);

458 
r
 = 
	`uf_sme_öô
(
¥iv
);

459 i‡(
r
) {

460 
	`unifi_îr‹
(
¥iv
, "SME initialisation failed.\n");

461 
Áûed4
;

468 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "run UniFi helperápp...\n");

469 
r
 = 
	`uf_run_unifihñ≥r
(
¥iv
);

470 i‡(
r
) {

471 
	`unifi_nŸi˚
(
¥iv
, "unableÅoÑun UniFi helperápp\n");

475 #ifde‡
CSR_WIFI_NAPI_ENABLE


477 
i
;

479 
i
 = 0; i < 
CSR_WIFI_NUM_INTERFACES
; i++)

481 
	`«pi_öô
(
¥iv
->
√tdev
[
i
], &¥iv->
öãrÁ˚Priv
[i]->
«pi
, &¥iv->öãrÁ˚Priv[i]->
«pi_skb_li°
);

486 
	`up
(&
Unifi_ö°™˚_muãx
);

488 
	`func_exô
();

489  
¥iv
;

491 
Áûed4
:

492 #ifde‡
CSR_WIFI_HIP_DEBUG_OFFLINE


493 i‡(
log_hù_sig«ls
)

495 
	`uf_uƒegi°î_hù_ofÊöe_debug
(
¥iv
);

498 #ifde‡
CSR_WIFI_RX_PATH_SPLIT


499 
	`Êush_w‹kqueue
(
¥iv
->
rx_w‹kqueue
);

500 
	`de°roy_w‹kqueue
(
¥iv
->
rx_w‹kqueue
);

501 
Áûed3
:

502 
	`sig«l_buf„r_‰ì
(
¥iv
,
CSR_WIFI_RX_SIGNAL_BUFFER_SIZE
);

503 
Áûed2
:

506 
	`uf_de°roy_devi˚_nodes
(
¥iv
);

507 
Áûed1
:

509 
	`ul_dîegi°î_˛õ¡
(
¥iv
->
√tdev_˛õ¡
);

511 
Áûed0
:

512 i‡(
¥iv
 &&Öriv->
ˇrd
) {

513 
	`unifi_c‹edump_‰ì
(
¥iv
->
ˇrd
);

514 
	`unifi_‰ì_ˇrd
(
¥iv
->
ˇrd
);

516 i‡(
¥iv
) {

517 
	`uf_‰ì_√tdevi˚
(
¥iv
);

520 
	`up
(&
Unifi_ö°™˚_muãx
);

522 
	`func_exô
();

523  
NULL
;

524 
	}
}

544 
	$ask_unifi_sdio_˛ónup
(
unifi_¥iv_t
 *
¥iv
)

546 
	`func_íãr
();

554 
In_u£
[
¥iv
->
ö°™˚
] = 
UNIFI_DEV_CLEANUP
;

556 
	`unifi_åa˚
(
NULL
, 
UDBG5
, "ask_unifi_sdio_cleanup: wake up cleanup workqueue.\n");

557 
	`wake_up
(&
Unifi_˛ónup_wq
);

559 
	`func_exô
();

561 
	}
}

578 
	$˛ónup_unifi_sdio
(
unifi_¥iv_t
 *
¥iv
)

580 
¥iv_ö°™˚
;

581 
i
;

582 c⁄° 
C§WifiMacAddªss
 
brﬂdˇ°_addªss
 = {{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}};

584 
	`func_íãr
();

587 
	`uf_de°roy_devi˚_nodes
(
¥iv
);

590 
Unifi_ö°™˚s
[
¥iv
->
ö°™˚
] = 
NULL
;

592 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "cleanup_unifi_sdio:Ñemove_proc_entry\n");

597 
	`ªmove_¥oc_íåy
(
¥iv
->
¥oc_íåy_«me
, 0);

601 i‡(
¥iv
->
√tdev_˛õ¡
) {

602 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "Netdev client (id:%d s:0x%X) is unregistered\n",

603 
¥iv
->
√tdev_˛õ¡
->
˛õ¡_id
,Öriv->√tdev_˛õ¡->
£ndî_id
);

604 
	`ul_dîegi°î_˛õ¡
(
¥iv
->
√tdev_˛õ¡
);

608 
	`uf_sme_deöô
(
¥iv
);

610 #ifde‡
CSR_SME_USERSPACE


611 
¥iv
->
smïriv
 = 
NULL
;

614 #ifde‡
CSR_WIFI_HIP_DEBUG_OFFLINE


615 i‡(
log_hù_sig«ls
)

617 
	`uf_uƒegi°î_hù_ofÊöe_debug
(
¥iv
);

622 
i
=0;i<
CSR_WIFI_NUM_INTERFACES
;i++)

624 
	`uf_‰ì_≥ndög_rx_∑ckës
(
¥iv
, 
UF_UNCONTROLLED_PORT_Q
, 
brﬂdˇ°_addªss
,
i
);

625 
	`uf_‰ì_≥ndög_rx_∑ckës
(
¥iv
, 
UF_CONTROLLED_PORT_Q
, 
brﬂdˇ°_addªss
,
i
);

631 i‡(
¥iv
->
ˇrd
) {

632 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "cleanup_unifi_sdio: free card\n");

633 
	`unifi_c‹edump_‰ì
(
¥iv
->
ˇrd
);

634 
	`unifi_‰ì_ˇrd
(
¥iv
->
ˇrd
);

635 
¥iv
->
ˇrd
 = 
NULL
;

643 
	`uf_uƒegi°î_√tdev
(
¥iv
);

644 
¥iv
->
tŸÆI¡îÁ˚Cou¡
 = 0;

647 
i
 = 0; i < 
CSR_WIFI_NUM_INTERFACES
; i++) {

648 
Unifi_√tdev_ö°™˚s
[
¥iv
->
ö°™˚
 * 
CSR_WIFI_NUM_INTERFACES
 + 
i
] = 
NULL
;

651 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "cleanup_unifi_sdio: uf_free_netdevice\n");

656 
¥iv_ö°™˚
 = 
¥iv
->
ö°™˚
;

658 #ifde‡
CSR_WIFI_RX_PATH_SPLIT


659 
	`Êush_w‹kqueue
(
¥iv
->
rx_w‹kqueue
);

660 
	`de°roy_w‹kqueue
(
¥iv
->
rx_w‹kqueue
);

661 
	`sig«l_buf„r_‰ì
(
¥iv
,
CSR_WIFI_RX_SIGNAL_BUFFER_SIZE
);

665 
	`uf_‰ì_√tdevi˚
(
¥iv
);

673 
In_u£
[
¥iv_ö°™˚
] = 
UNIFI_DEV_NOT_IN_USE
;

675 
	`unifi_åa˚
(
NULL
, 
UDBG5
, "cleanup_unifi_sdio: DONE.\n");

677 
	`func_exô
();

679 
	}
}

696 
	$uƒegi°î_unifi_sdio
(
bus_id
)

698 
unifi_¥iv_t
 *
¥iv
;

699 
öãrÁ˚Tag
=0;

700 
u8
 
ªas⁄
 = 
CONFIG_IND_EXIT
;

702 i‡((
bus_id
 < 0Ë|| (bus_id >
MAX_UNIFI_DEVS
)) {

703 
	`unifi_îr‹
(
NULL
, "unregister_unifi_sdio: invalid device %d\n",

704 
bus_id
);

708 
¥iv
 = 
Unifi_ö°™˚s
[
bus_id
];

709 i‡(
¥iv
 =
NULL
) {

710 
	`unifi_îr‹
(
¥iv
, "unregister_unifi_sdio: device %d isÇotÑegistered\n",

711 
bus_id
);

712 
	`func_exô
();

717 
öãrÁ˚Tag
=0;öãrÁ˚Tag<
¥iv
->
tŸÆI¡îÁ˚Cou¡
;interfaceTag++)

719 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

720 if(
öãrÁ˚Priv
->
√tdev_ªgi°îed
)

722 
	`√tif_ˇºõr_off
(
¥iv
->
√tdev
[
öãrÁ˚Tag
]);

723 
	`UF_NETIF_TX_STOP_ALL_QUEUES
(
¥iv
->
√tdev
[
öãrÁ˚Tag
]);

727 #ifde‡
CSR_NATIVE_LINUX


733 
	`uf_°›_thªad
(
¥iv
, &¥iv->
bh_thªad
);

736 i‡(
	`c§_sdio_löux_ªmove_úq
(
¥iv
->
sdio
)) {

737 
	`unifi_nŸi˚
(
¥iv
,

742 
	`uf_ab‹t_mlme
(
¥iv
);

745 #ifde‡
CSR_WIFI_NAPI_ENABLE


747 
i
;

749 
i
 = 0; i < 
CSR_WIFI_NUM_INTERFACES
; i++)

751 
	`«pi_deöô
(&
¥iv
->
öãrÁ˚Priv
[
i
]->
«pi
, &¥iv->öãrÁ˚Priv[i]->
«pi_skb_li°
);

756 
	`ul_log_c⁄fig_öd
(
¥iv
, &
ªas⁄
, (
u8
));

759 
	`unifi_ªmove_udi_hook
(
¥iv
->
ˇrd
, 
loggög_h™dÀr
);

761 
	`uf_put_ö°™˚
(
bus_id
);

767 
	`waô_evít
(
Unifi_˛ónup_wq
, 
In_u£
[
bus_id
] =
UNIFI_DEV_CLEANUP
);

768 
	`unifi_åa˚
(
NULL
, 
UDBG5
, "Received clean upÉvent\n");

771 
	`˛ónup_unifi_sdio
(
¥iv
);

773 
	}
}

789 
unifi_¥iv_t
 *

790 
	$uf_föd_ö°™˚
(
ö°
)

792 i‡((
ö°
 < 0Ë|| (ö° >
MAX_UNIFI_DEVS
)) {

793  
NULL
;

795  
Unifi_ö°™˚s
[
ö°
];

796 
	}
}

813 
	$uf_föd_¥iv
(
unifi_¥iv_t
 *
¥iv
)

815 
ö°
;

817 i‡(!
¥iv
) {

821 
ö°
 = 0; in° < 
MAX_UNIFI_DEVS
; inst++) {

822 i‡(
Unifi_ö°™˚s
[
ö°
] =
¥iv
) {

823  
ö°
;

828 
	}
}

844 
	$uf_föd_√tdev_¥iv
(
√tI¡îÁ˚_¥iv_t
 *
¥iv
)

846 
ö°
;

848 i‡(!
¥iv
) {

852 
ö°
 = 0; in° < 
MAX_UNIFI_DEVS
 * 
CSR_WIFI_NUM_INTERFACES
; inst++) {

853 i‡(
Unifi_√tdev_ö°™˚s
[
ö°
] =
¥iv
) {

854  
ö°
;

859 
	}
}

875 
unifi_¥iv_t
 *

876 
	$uf_gë_ö°™˚
(
ö°
)

878 
unifi_¥iv_t
 *
¥iv
;

880 
	`down
(&
Unifi_ö°™˚_muãx
);

882 
¥iv
 = 
	`uf_föd_ö°™˚
(
ö°
);

883 i‡(
¥iv
) {

884 
¥iv
->
ªf_cou¡
++;

887 
	`up
(&
Unifi_ö°™˚_muãx
);

889  
¥iv
;

890 
	}
}

907 
	$uf_put_ö°™˚
(
ö°
)

909 
unifi_¥iv_t
 *
¥iv
;

911 
	`down
(&
Unifi_ö°™˚_muãx
);

913 
¥iv
 = 
	`uf_föd_ö°™˚
(
ö°
);

914 i‡(
¥iv
) {

915 
¥iv
->
ªf_cou¡
--;

916 i‡(
¥iv
->
ªf_cou¡
 == 0) {

917 
	`ask_unifi_sdio_˛ónup
(
¥iv
);

921 
	`up
(&
Unifi_ö°™˚_muãx
);

922 
	}
}

943 #ifde‡
CONFIG_PROC_FS


945 
	$uf_¥oc_show
(
£q_fûe
 *
m
, *
v
)

947 
unifi_¥iv_t
 *
¥iv
;

948 
i
;

954 
¥iv
 = 
	`uf_föd_ö°™˚
(()()
m
->
¥iv©e
);

955 i‡(!
¥iv
) {

959 
	`£q_¥ötf
(
m
, "UniFi SDIO Driver: %s %s %s\n",

960 
CSR_WIFI_VERSION
, 
__DATE__
, 
__TIME__
);

961 #ifde‡
CSR_SME_USERSPACE


962 
	`£q_puts
(
m
, "SME: CSR userspace ");

963 #ifde‡
CSR_SUPPORT_WEXT


964 
	`£q_puts
(
m
, "with WEXT support\n");

966 
	`£q_putc
(
m
, '\n');

969 #ifde‡
CSR_NATIVE_LINUX


970 
	`£q_puts
(
m
, "SME:Çative\n");

973 #ifde‡
CSR_SUPPORT_SME


974 
	`£q_¥ötf
(
m
, "Firmware (ROM) build:%u, Patch:%u\n",

975 
¥iv
->
ˇrd_öfo
.
fw_buûd
,

976 
¥iv
->
sme_vîsi⁄s
.
fúmw¨eP©ch
);

979 
	`unifi_¥öt_°©us
(
¥iv
->
ˇrd
, 
m
);

981 
	`£q_¥ötf
(
m
, "La° dbg så: %s\n", 
¥iv
->
œ°_debug_°rög
);

983 
	`£q_puts
(
m
, "Last dbg16:");

984 
i
 = 0; i < 8; i++)

985 
	`£q_¥ötf
(
m
, " %04X", 
¥iv
->
œ°_debug_w‹d16
[
i
]);

986 
	`£q_putc
(
m
, '\n');

987 
	`£q_puts
(
m
, " ");

988 ; 
i
 < 16; i++)

989 
	`£q_¥ötf
(
m
, " %04X", 
¥iv
->
œ°_debug_w‹d16
[
i
]);

990 
	`£q_putc
(
m
, '\n');

992 
	}
}

999 
	$uf_lx_su•íd
(
C§SdioFun˘i⁄
 *
sdio_˘x
)

1001 
unifi_¥iv_t
 *
¥iv
 = 
sdio_˘x
->
drivîD©a
;

1002 
	`unifi_su•íd
(
¥iv
);

1004 
	`C§SdioSu•ídAcknowÀdge
(
sdio_˘x
, 
CSR_RESULT_SUCCESS
);

1005 
	}
}

1008 
	$uf_lx_ªsume
(
C§SdioFun˘i⁄
 *
sdio_˘x
)

1010 
unifi_¥iv_t
 *
¥iv
 = 
sdio_˘x
->
drivîD©a
;

1011 
	`unifi_ªsume
(
¥iv
);

1013 
	`C§SdioResumeAcknowÀdge
(
sdio_˘x
, 
CSR_RESULT_SUCCESS
);

1014 
	}
}

1016 
	ga˘ive_¶Ÿ
 = 
MAX_UNIFI_DEVS
;

1017 
devi˚
 *
	gos_devi˚s
[
MAX_UNIFI_DEVS
];

1020 
	$uf_add_os_devi˚
(
bus_id
, 
devi˚
 *
os_devi˚
)

1022 i‡((
bus_id
 < 0Ë|| (bus_id >
MAX_UNIFI_DEVS
)) {

1023 
	`unifi_îr‹
(
NULL
, "uf_add_os_device: invalid device %d\n",

1024 
bus_id
);

1028 
a˘ive_¶Ÿ
 = 
bus_id
;

1029 
os_devi˚s
[
bus_id
] = 
os_devi˚
;

1030 
	}
}

1033 
	$uf_ªmove_os_devi˚
(
bus_id
)

1035 i‡((
bus_id
 < 0Ë|| (bus_id >
MAX_UNIFI_DEVS
)) {

1036 
	`unifi_îr‹
(
NULL
, "uf_remove_os_device: invalid device %d\n",

1037 
bus_id
);

1041 
a˘ive_¶Ÿ
 = 
bus_id
;

1042 
os_devi˚s
[
bus_id
] = 
NULL
;

1043 
	}
}

1046 
	$uf_sdio_ö£πed
(
C§SdioFun˘i⁄
 *
sdio_˘x
)

1048 
unifi_¥iv_t
 *
¥iv
;

1050 
	`unifi_åa˚
(
NULL
, 
UDBG5
, "uf_sdio_inserted(0x%p), slot_id=%d, dev=%p\n",

1051 
sdio_˘x
, 
a˘ive_¶Ÿ
, 
os_devi˚s
[active_slot]);

1053 
¥iv
 = 
	`ªgi°î_unifi_sdio
(
sdio_˘x
, 
a˘ive_¶Ÿ
, 
os_devi˚s
[active_slot]);

1054 i‡(
¥iv
 =
NULL
) {

1055 
	`C§SdioIn£πedAcknowÀdge
(
sdio_˘x
, 
CSR_RESULT_FAILURE
);

1059 
sdio_˘x
->
drivîD©a
 = 
¥iv
;

1061 
	`C§SdioIn£πedAcknowÀdge
(
sdio_˘x
, 
CSR_RESULT_SUCCESS
);

1062 
	}
}

1066 
	$uf_sdio_ªmoved
(
C§SdioFun˘i⁄
 *
sdio_˘x
)

1068 
	`uƒegi°î_unifi_sdio
(
a˘ive_¶Ÿ
);

1069 
	`C§SdioRemovedAcknowÀdge
(
sdio_˘x
);

1070 
	}
}

1074 
	$uf_sdio_d§_h™dÀr
(
C§SdioFun˘i⁄
 *
sdio_˘x
)

1076 
unifi_¥iv_t
 *
¥iv
 = 
sdio_˘x
->
drivîD©a
;

1078 
	`unifi_sdio_öãºu±_h™dÀr
(
¥iv
->
ˇrd
);

1079 
	}
}

1097 
C§SdioI¡îru±D§CÆlback


1098 
	$uf_sdio_öt_h™dÀr
(
C§SdioFun˘i⁄
 *
sdio_˘x
)

1100  
uf_sdio_d§_h™dÀr
;

1101 
	}
}

1106 
C§SdioFun˘i⁄Id
 
	gunifi_ids
[] =

1109 .
m™fId
 = 
SDIO_MANF_ID_CSR
,

1110 .
	gˇrdId
 = 
SDIO_CARD_ID_UNIFI_3
,

1111 .
	gsdioFun˘i⁄
 = 
SDIO_WLAN_FUNC_ID_UNIFI_3
,

1112 .
	gsdioI¡îÁ˚
 = 
CSR_SDIO_ANY_SDIO_INTERFACE
,

1115 .
	gm™fId
 = 
SDIO_MANF_ID_CSR
,

1116 .
	gˇrdId
 = 
SDIO_CARD_ID_UNIFI_4
,

1117 .
	gsdioFun˘i⁄
 = 
SDIO_WLAN_FUNC_ID_UNIFI_4
,

1118 .
	gsdioI¡îÁ˚
 = 
CSR_SDIO_ANY_SDIO_INTERFACE
,

1126 
C§SdioFun˘i⁄Drivî
 
	gunifi_sdioFun˘i⁄_drv
 =

1128 .
ö£πed
 = 
uf_sdio_ö£πed
,

1129 .
	gªmoved
 = 
uf_sdio_ªmoved
,

1130 .
	göå
 = 
uf_sdio_öt_h™dÀr
,

1131 .
	gsu•íd
 = 
uf_lx_su•íd
,

1132 .
	gªsume
 = 
uf_lx_ªsume
,

1134 .
	gids
 = 
unifi_ids
,

1135 .
	gidsCou¡
 = (
unifi_ids
) / (unifi_ids[0])

1155 
__öô


1156 
	$uf_sdio_lﬂd
()

1158 
C§Resu…
 
c§Resu…
;

1160 
c§Resu…
 = 
	`C§SdioFun˘i⁄DrivîRegi°î
(&
unifi_sdioFun˘i⁄_drv
);

1161 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

1162 
	`unifi_îr‹
(
NULL
, "FaûedÅÿªgi°î UniFòSDIO drivî: c§Resu…=%d\n", 
c§Resu…
);

1163  -
EIO
;

1167 
	}
}

1171 
__exô


1172 
	$uf_sdio_u∆ﬂd
()

1174 
	`C§SdioFun˘i⁄DrivîUƒegi°î
(&
unifi_sdioFun˘i⁄_drv
);

1175 
	}
}

	@monitor.c

13 
	~"unifi_¥iv.h
"

15 #ifde‡
UNIFI_SNIFF_ARPHRD


18 #i‡(
UNIFI_SNIFF_ARPHRD
 =
ARPHRD_IEEE80211_RADIOTAP
)

19 
	~<√t/õì80211_ødiŸ≠.h
>

21 #i‚de‡
ETH_P_80211_RAW


22 
	#ETH_P_80211_RAW
 
ETH_P_ALL


	)

41 
	$uf_°¨t_¢iff
(
unifi_¥iv_t
 *
¥iv
)

43 
ul_˛õ¡_t
 *
p˛i
 = 
¥iv
->
wext_˛õ¡
;

44 
CSR_SIGNAL
 
sig«l
;

45 
CSR_MLME_SNIFFJOIN_REQUEST
 *
ªq
 = &
sig«l
.
u
.
MlmeSniffjoöReque°
;

46 
timeout
 = 1000;

47 
r
;

49 
ªq
->
Ifödex
 = 
¥iv
->
if_ödex
;

50 
ªq
->
Ch™√l
 = 
¥iv
->
wext_c⁄f
.
ch™√l
;

51 
ªq
->
Ch™√lSèπögFa˘‹
 = 0;

54 
	`¥ötk
("SniffJoin: Ifindex=%d, Channel=%d, ChannelStartingFactor=%d\n",

55 
ªq
->
Ifödex
,

56 
ªq
->
Ch™√l
,

57 
ªq
->
Ch™√lSèπögFa˘‹
);

60 
sig«l
.
Sig«lPrimôiveHódî
.
Sig«lId
 = 
CSR_MLME_SNIFFJOIN_REQUEST_ID
;

62 
r
 = 
	`unifi_mlme_blockög_ªque°
(
¥iv
, 
p˛i
, &
sig«l
, 
NULL
, 
timeout
);

63 i‡(
r
 < 0) {

64 
	`unifi_îr‹
(
¥iv
, "ÁûedÅÿ£nd SNIFFJOINÑeque°,Éº‹ %d\n", 
r
);

65  
r
;

68 
r
 = 
p˛i
->
ª∂y_sig«l
->
u
.
MlmeSniffjoöC⁄fúm
.
Resu…code
;

69 i‡(
r
) {

70 
	`unifi_nŸi˚
(
¥iv
, "SNIFFJOINÑequest wasÑejected withÑesult 0x%X (%s)\n",

71 
r
, 
	`lookup_ªsu…_code
(r));

72  -
EIO
;

76 
	}
}

96 #i‡(
UNIFI_SNIFF_ARPHRD
 =
ARPHRD_IEEE80211_RADIOTAP
)

98 
	$√åx_ødiŸ≠
(
unifi_¥iv_t
 *
¥iv
,

99 c⁄° 
CSR_MA_SNIFFDATA_INDICATION
 *
öd
,

100 
sk_buff
 *
skb_‹ig
)

102 
√t_devi˚
 *
dev
 = 
¥iv
->
√tdev
;

103 
sk_buff
 *
skb
 = 
NULL
;

104 *
±r
;

105 *
ba£
;

106 
öd_d©a_Àn
 = 
skb_‹ig
->
Àn
 - 2 - 
ETH_HLEN
;

107 
	sunifi_rx_ødiŸ≠_hódî
 {

108 
õì80211_ødiŸ≠_hódî
 
π_hdr
;

110 
u64
 
π_ts·
;

112 
u8
 
π_Êags
;

114 
u8
 
π_øã
;

116 
u16
 
π_ch™
;

117 
u16
 
π_ch™_Êags
;

119 
u8
 
π_dbm_™tsig«l
;

121 
u8
 
π_dbm_™äoi£
;

123 
u8
 
π_™ã¬a
;

126 
u8
 
∑d
[3];

127 } 
	`__©åibuã__
((
__∑cked__
));

129 
unifi_rx_ødiŸ≠_hódî
 *
unifi_π
;

130 
sig«l
, 
noi£
, 
¢r
;

132 
	`func_íãr
();

134 i‡(
öd_d©a_Àn
 <= 0) {

135 
	`unifi_îr‹
(
¥iv
, "InvalidÜength in CSR_MA_SNIFFDATA_INDICATION.\n");

143 
skb
 = 
	`dev_Æloc_skb
(
öd_d©a_Àn
 + (
unifi_rx_ødiŸ≠_hódî
) + 4);

144 i‡(! 
skb
) {

145 
	`unifi_îr‹
(
¥iv
, "alloc_skb failed.\n");

146 
¥iv
->
°©s
.
rx_îr‹s
++;

150 
ba£
 = 
skb
->
d©a
;

153 
unifi_π
 = (
unifi_rx_ødiŸ≠_hódî
 *)

154 
	`skb_put
(
skb
, (
unifi_rx_ødiŸ≠_hódî
));

157 
±r
 = 
	`skb_put
(
skb
, 
öd_d©a_Àn
);

158 
	`mem˝y
(
±r
, 
skb_‹ig
->
d©a
, 
öd_d©a_Àn
);

160 
unifi_π
->
π_hdr
.
ô_vîsi⁄
 = 
PKTHDR_RADIOTAP_VERSION
;

161 
unifi_π
->
π_hdr
.
ô_∑d
 = 0;

162 
unifi_π
->
π_hdr
.
ô_Àn
 = (
unifi_rx_ødiŸ≠_hódî
);

165 
unifi_π
->
π_hdr
.
ô_¥e£¡
 = 0

166 | (1 << 
IEEE80211_RADIOTAP_TSFT
)

167 | (1 << 
IEEE80211_RADIOTAP_FLAGS
)

168 | (1 << 
IEEE80211_RADIOTAP_RATE
)

169 | (1 << 
IEEE80211_RADIOTAP_CHANNEL
)

170 | (1 << 
IEEE80211_RADIOTAP_DBM_ANTSIGNAL
)

171 | (1 << 
IEEE80211_RADIOTAP_DBM_ANTNOISE
)

172 | (1 << 
IEEE80211_RADIOTAP_ANTENNA
)

177 
unifi_π
->
π_ts·
 = (((
u64
)
öd
->
Time°amp
.
x
[7]) | (((u64)ind->Timestamp.x[6]) << 8) |

178 (((
u64
)
öd
->
Time°amp
.
x
[5]) << 16) | (((u64)ind->Timestamp.x[4]) << 24) |

179 (((
u64
)
öd
->
Time°amp
.
x
[3]) << 32) | (((u64)ind->Timestamp.x[2]) << 40) |

180 (((
u64
)
öd
->
Time°amp
.
x
[1]) << 48) | (((u64)ind->Timestamp.x[0]) << 56));

182 
unifi_π
->
π_Êags
 = 0;

184 
unifi_π
->
π_øã
 = 
öd
->
R©e
;

186 
unifi_π
->
π_ch™
 = 
	`˝u_to_À16
(
	`õì80211ch™2mhz
(
¥iv
->
wext_c⁄f
.
ch™√l
));

187 
unifi_π
->
π_ch™_Êags
 = 0;

190 
sig«l
 = (
s16
)
	`unifi2ho°_16
(
öd
->
Rssi
);

191 
¢r
 = (
s16
)
	`unifi2ho°_16
(
öd
->
Sƒ
);

192 
noi£
 = 
sig«l
 - 
¢r
;

194 
unifi_π
->
π_dbm_™tsig«l
 = 
sig«l
;

195 
unifi_π
->
π_dbm_™äoi£
 = 
noi£
;

197 
unifi_π
->
π_™ã¬a
 = 
öd
->
A¡í«Id
;

201 
	`¥ötk
("skb d©Æí=%d\n", 
skb
->
Àn
);

202 
	`dump
(
skb
->
d©a
, 48);

205 
skb
->
dev
 = dev;

206 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,22)

207 
skb
->
mac_hódî
 = skb->
d©a
;

209 
skb
->
mac
.
øw
 = skb->
d©a
;

211 
skb
->
pkt_ty≥
 = 
PACKET_OTHERHOST
;

212 
skb
->
¥Ÿocﬁ
 = 
	`__c⁄°™t_ht⁄s
(
ETH_P_80211_RAW
);

213 
	`mem£t
(
skb
->
cb
, 0, (skb->cb));

216 
	`√tif_rx_ni
(
skb
);

218 
dev
->
œ°_rx
 = 
jiffõs
;

221 
¥iv
->
°©s
.
rx_∑ckës
++;

222 
¥iv
->
°©s
.
rx_byãs
 +
öd_d©a_Àn
;

224 
	`func_exô
();

225 
	}
}

245 #i‡(
UNIFI_SNIFF_ARPHRD
 =
ARPHRD_IEEE80211_PRISM
)

247 
	$√åx_¥ism
(
unifi_¥iv_t
 *
¥iv
,

248 c⁄° 
CSR_MA_SNIFFDATA_INDICATION
 *
öd
,

249 
sk_buff
 *
skb_‹ig
)

251 
√t_devi˚
 *
dev
 = 
¥iv
->
√tdev
;

252 
sk_buff
 *
skb
 = 
NULL
;

253 *
±r
;

254 *
ba£
;

255 
öd_d©a_Àn
 = 
skb_‹ig
->
Àn
 - 2 - 
ETH_HLEN
;

256 
	#WLANCAP_MAGIC_COOKIE_BASE
 0x80211000

	)

257 
	#WLANCAP_MAGIC_COOKIE_V1
 0x80211001

	)

258 
	#WLANCAP_MAGIC_COOKIE_V2
 0x80211002

	)

259 
	savs_hódî_v1
 {

260 
uöt32
 
vîsi⁄
;

261 
uöt32
 
Àngth
;

262 
uöt64
 
ma˘ime
;

263 
uöt64
 
ho°time
;

264 
uöt32
 
phyty≥
;

265 
uöt32
 
ch™√l
;

266 
uöt32
 
d©¨©e
;

267 
uöt32
 
™ã¬a
;

268 
uöt32
 
¥i‹ôy
;

269 
uöt32
 
ssi_ty≥
;

270 
öt32
 
ssi_sig«l
;

271 
öt32
 
ssi_noi£
;

272 
uöt32
 
¥ómbÀ
;

273 
uöt32
 
ícodög
;

274 } *
avs
;

275 
sig«l
, 
noi£
, 
¢r
;

277 
	`func_íãr
();

279 i‡(
öd_d©a_Àn
 <= 0) {

280 
	`unifi_îr‹
(
¥iv
, "InvalidÜength in CSR_MA_SNIFFDATA_INDICATION.\n");

285 
	`¥ötk
("MA-SINFFDATA.ind: DataLen=%d bytes, TSF %02X %02X %02X %02X %02X %02X %02X %02X, Rate=%d, Antenna=%d\n",

286 
öd
->
D©a
.
D©aLígth
,

287 
öd
->
Time°amp
.
x
[0],

288 
öd
->
Time°amp
.
x
[1],

289 
öd
->
Time°amp
.
x
[2],

290 
öd
->
Time°amp
.
x
[3],

291 
öd
->
Time°amp
.
x
[4],

292 
öd
->
Time°amp
.
x
[5],

293 
öd
->
Time°amp
.
x
[6],

294 
öd
->
Time°amp
.
x
[7],

295 
öd
->
R©e
,

296 
öd
->
A¡í«
);

298 
	`¥ötk
("∑ylﬂd,Üí %d\n", 
Àngth
);

299 
	`dump
((*)
∑ylﬂd
, 32);

306 
skb
 = 
	`dev_Æloc_skb
(
öd_d©a_Àn
 + (
avs_hódî_v1
) + 4);

307 i‡(! 
skb
) {

308 
	`unifi_îr‹
(
¥iv
, "alloc_skb failed.\n");

309 
¥iv
->
°©s
.
rx_îr‹s
++;

313 
ba£
 = 
skb
->
d©a
;

316 
avs
 = (
avs_hódî_v1
 *)
	`skb_put
(
skb
, (avs_header_v1));

319 
±r
 = 
	`skb_put
(
skb
, 
öd_d©a_Àn
);

320 
	`mem˝y
(
±r
, 
skb_‹ig
->
d©a
, 
öd_d©a_Àn
);

323 
sig«l
 = 0x10000 - ((
s16
)
	`unifi2ho°_16
(
öd
->
Rssi
));

324 
¢r
 = (
s16
)
	`unifi2ho°_16
(
öd
->
Sƒ
);

325 
noi£
 = 
sig«l
 - 
¢r
;

327 
avs
->
vîsi⁄
 = 
	`ht⁄l
(
WLANCAP_MAGIC_COOKIE_V1
);

328 
avs
->
Àngth
 = 
	`ht⁄l
((
avs_hódî_v1
));

329 
avs
->
ma˘ime
 = 
	`__˝u_to_be64
(
öd
->
Time°amp
);

330 
avs
->
ho°time
 = 
	`__˝u_to_be64
(
jiffõs
);

331 
avs
->
phyty≥
 = 
	`ht⁄l
(9);

332 
avs
->
ch™√l
 = 
	`ht⁄l
(
¥iv
->
wext_c⁄f
.channel);

333 
avs
->
d©¨©e
 = 
	`ht⁄l
(
öd
->
R©e
 * 5);

334 
avs
->
™ã¬a
 = 
	`ht⁄l
(
öd
->
A¡í«
);

335 
avs
->
¥i‹ôy
 = 
	`ht⁄l
(0);

336 
avs
->
ssi_ty≥
 = 
	`ht⁄l
(2);

337 
avs
->
ssi_sig«l
 = 
	`ht⁄l
(
sig«l
);

338 
avs
->
ssi_noi£
 = 
	`ht⁄l
(
noi£
);

339 
avs
->
¥ómbÀ
 = 
	`ht⁄l
(0);

340 
avs
->
ícodög
 = 
	`ht⁄l
(0);

344 
	`¥ötk
("skb d©Æí=%d\n", 
skb
->
Àn
);

345 
	`dump
(
skb
->
d©a
, 48);

348 
skb
->
dev
 = dev;

349 
skb
->
mac
.
øw
 = skb->
d©a
;

350 
skb
->
pkt_ty≥
 = 
PACKET_OTHERHOST
;

351 
skb
->
¥Ÿocﬁ
 = 
	`__c⁄°™t_ht⁄s
(
ETH_P_80211_RAW
);

352 
	`mem£t
(
skb
->
cb
, 0, (skb->cb));

355 
	`√tif_rx_ni
(
skb
);

357 
dev
->
œ°_rx
 = 
jiffõs
;

360 
¥iv
->
°©s
.
rx_∑ckës
++;

361 
¥iv
->
°©s
.
rx_byãs
 +
öd_d©a_Àn
;

363 
	`func_exô
();

364 
	}
}

387 
	$ma_¢iffd©a_öd
(*
o•riv
,

388 c⁄° 
CSR_MA_SNIFFDATA_INDICATION
 *
öd
,

389 c⁄° 
bulk_d©a_∑øm_t
 *
bulkd©a
)

391 
unifi_¥iv_t
 *
¥iv
 = 
o•riv
;

392 
√t_devi˚
 *
dev
 = 
¥iv
->
√tdev
;

393 
sk_buff
 *
skb
 = (sk_buff*)
bulkd©a
->
d
[0].
os_√t_buf_±r
;

395 
	`func_íãr
();

397 i‡(
bulkd©a
->
d
[0].
d©a_Àngth
 == 0) {

398 
	`unifi_w¨nög
(
¥iv
, "rx: MA-SNIFFDATA indication with zero bulk data\n");

399 
	`func_exô
();

403 
skb
->
Àn
 = 
bulkd©a
->
d
[0].
d©a_Àngth
;

405 
	`¥ötk
("MA-SNIFFDATA.ind: DataLen=%d bytes, TSF %02X %02X %02X %02X %02X %02X %02X %02X, Rate=%d, Antenna=%d\n",

406 
öd
->
D©a
.
D©aLígth
,

407 
öd
->
Time°amp
.
x
[0],

408 
öd
->
Time°amp
.
x
[1],

409 
öd
->
Time°amp
.
x
[2],

410 
öd
->
Time°amp
.
x
[3],

411 
öd
->
Time°amp
.
x
[4],

412 
öd
->
Time°amp
.
x
[5],

413 
öd
->
Time°amp
.
x
[6],

414 
öd
->
Time°amp
.
x
[7],

415 
öd
->
R©e
,

416 
öd
->
A¡í«Id
);

418 
	`¥ötk
("∑ylﬂd,Üí %lu\n", 
bulkd©a
->
d
[0].
d©a_Àngth
);

419 i‡(
bulkd©a
->
d
[0].
os_d©a_±r
 && (bulkd©a->d[0].
d©a_Àngth
 >= 32)) {

420 
	`dump
((*)
bulkd©a
->
d
[0].
os_d©a_±r
, 32);

425 i‡(
	`u∆ikñy
(!
	`√tif_ru¬ög
(
dev
))) {

426 
¥iv
->
°©s
.
rx_dr›≥d
++;

427 
¥iv
->
wext_c⁄f
.
wúñess_°©s
.
disˇrd
.
misc
++;

429 
	`¥ötk
("DroppingÖacket while interface isÇot up.\n");

431 
	`dev_k‰ì_skb
(
skb
);

435 i‡(
öd
->
Re˚±i⁄Sètus
) {

436 
¥iv
->
°©s
.
rx_dr›≥d
++;

437 
¥iv
->
wext_c⁄f
.
wúñess_°©s
.
disˇrd
.
misc
++;

438 
	`¥ötk
(
KERN_INFO
 "unifi: Dropping corrupt sniffÖacket\n");

439 
	`dev_k‰ì_skb
(
skb
);

443 #i‡(
UNIFI_SNIFF_ARPHRD
 =
ARPHRD_IEEE80211_PRISM
)

444 
	`√åx_¥ism
(
¥iv
, 
öd
, 
skb
);

447 #i‡(
UNIFI_SNIFF_ARPHRD
 =
ARPHRD_IEEE80211_RADIOTAP
)

448 
	`√åx_ødiŸ≠
(
¥iv
, 
öd
, 
skb
);

451 
	`dev_k‰ì_skb
(
skb
);

453 
	}
}

	@netdev.c

47 
	~<löux/ty≥s.h
>

48 
	~<löux/ëhîdevi˚.h
>

49 
	~<löux/muãx.h
>

50 
	~<löux/£m≠h‹e.h
>

52 
	~<löux/vmÆloc.h
>

53 
	~"c§_wifi_hù_unifi.h
"

54 
	~"c§_wifi_hù_c⁄vîsi⁄s.h
"

55 
	~"unifi_¥iv.h
"

56 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,13)

57 
	~<√t/iw_h™dÀr.h
>

59 
	~<√t/pkt_sched.h
>

71 
	#ALLOW_Q_PAUSE


	)

73 
	#õì2ho°16
(
n
Ë
	`__À16_to_˝u
“)

	)

74 
	#õì2ho°32
(
n
Ë
	`__À32_to_˝u
“)

	)

75 
	#ho°2õì16
(
n
Ë
	`__˝u_to_À16
“)

	)

76 
	#ho°2õì32
(
n
Ë
	`__˝u_to_À32
“)

	)

78 
	#UNIFI_NET_NAME
 "wœn"

	)

80 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,28)

81 #ifde‡
UNIFI_NET_NAME


82 
	#UF_ALLOC_NETDEV
(
_dev
, 
_size
, 
_«me
, 
_£tup
, 
_num_of_queues
) \

84 
«me
[8]; \

85 
	`•rötf
(
«me
, "%s%s", 
UNIFI_NET_NAME
, 
_«me
); \

86 
_dev
 = 
	`Æloc_√tdev_mq
(
_size
, 
«me
, 
_£tup
, 
_num_of_queues
); \

87 } 0);

	)

89 
	#UF_ALLOC_NETDEV
(
_dev
, 
_size
, 
_«me
, 
_£tup
, 
_num_of_queues
) \

91 
_dev
 = 
	`Æloc_ëhîdev_mq
(
_size
, 
_num_of_queues
); \

92 } 0);

	)

95 #ifde‡
UNIFI_NET_NAME


96 
	#UF_ALLOC_NETDEV
(
_dev
, 
_size
, 
_«me
, 
_£tup
, 
_num_of_queues
) \

98 
«me
[8]; \

99 
	`•rötf
(
«me
, "%s%s", 
UNIFI_NET_NAME
, 
_«me
); \

100 
_dev
 = 
	`Æloc_√tdev
(
_size
, 
«me
, 
_£tup
); \

101 } 0);

	)

103 
	#UF_ALLOC_NETDEV
(
_dev
, 
_size
, 
_«me
, 
_£tup
, 
_num_of_queues
) \

105 
_dev
 = 
	`Æloc_ëhîdev
(
_size
); \

106 } 0);

	)

112 #ifde‡
CSR_SUPPORT_WEXT


113 
iw_h™dÀr_def
 
unifi_iw_h™dÀr_def
;

115 
check_ba_‰ame_age_timeout
–
unifi_¥iv_t
 *
¥iv
,

116 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
,

117 
ba_£ssi⁄_rx_°ru˘
 *
ba_£ssi⁄
);

118 
¥o˚ss_ba_‰ame
(
unifi_¥iv_t
 *
¥iv
,

119 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
,

120 
ba_£ssi⁄_rx_°ru˘
 *
ba_£ssi⁄
,

121 
‰ame_desc_°ru˘
 *
‰ame_desc
);

122 
¥o˚ss_ba_com∂ëe
(
unifi_¥iv_t
 *
¥iv
, 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
);

123 
¥o˚ss_ma_∑ckë_îr‹_öd
(
unifi_¥iv_t
 *
¥iv
, 
CSR_SIGNAL
 *
sig«l
, 
bulk_d©a_∑øm_t
 *
bulkd©a
);

124 
¥o˚ss_amsdu
(
unifi_¥iv_t
 *
¥iv
, 
CSR_SIGNAL
 *
sig«l
, 
bulk_d©a_∑øm_t
 *
bulkd©a
);

125 
uf_√t_›í
(
√t_devi˚
 *
dev
);

126 
uf_√t_io˘l
(
√t_devi˚
 *
dev
, 
i‰eq
 *
rq
, 
cmd
);

127 
uf_√t_°›
(
√t_devi˚
 *
dev
);

128 
√t_devi˚_°©s
 *
uf_√t_gë_°©s
(
√t_devi˚
 *
dev
);

129 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,28)

130 
u16
 
uf_√t_£À˘_queue
(
√t_devi˚
 *
dev
, 
sk_buff
 *
skb
);

132 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,32)

133 
√tdev_tx_t
 
uf_√t_xmô
(
sk_buff
 *
skb
, 
√t_devi˚
 *
dev
);

135 
uf_√t_xmô
(
sk_buff
 *
skb
, 
√t_devi˚
 *
dev
);

136 #i‚de‡
NETDEV_TX_OK


137 
	#NETDEV_TX_OK
 0

	)

139 #i‚de‡
NETDEV_TX_BUSY


140 
	#NETDEV_TX_BUSY
 1

	)

143 
uf_£t_mu…iˇ°_li°
(
√t_devi˚
 *
dev
);

146 (*
	ttx_sig«l_h™dÀr
)(
	tunifi_¥iv_t
 *
	t¥iv
, 
	tsk_buff
 *
	tskb
, c⁄° 
	tëhhdr
 *
	tehdr
, 
	tCSR_PRIORITY
 
	t¥i‹ôy
);

148 #ifde‡
CONFIG_NET_SCHED


175 
	suf_sched_d©a


178 
tcf_¥Ÿo
 *
fûãr_li°
;

180 
Qdisc
 *
queues
[
UNIFI_TRAFFIC_Q_MAX
];

183 
	suf_tx_∑ckë_d©a
 {

185 
unifi_TøfficQueue
 
queue
;

187 
CSR_PRIORITY
 
¥i‹ôy
;

189 
ho°_èg
;

192 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,28)

193 
	`uf_qdisc›_íqueue
(
sk_buff
 *
skb
, 
Qdisc
* 
qd
);

194 
	`uf_qdisc›_ªqueue
(
sk_buff
 *
skb
, 
Qdisc
* 
qd
);

195 
sk_buff
 *
	`uf_qdisc›_dequeue
(
Qdisc
* 
qd
);

196 
	`uf_qdisc›_ª£t
(
Qdisc
* 
qd
);

197 
	`uf_qdisc›_de°roy
(
Qdisc
* 
qd
);

198 
	`uf_qdisc›_dump
(
Qdisc
 *
qd
, 
sk_buff
 *
skb
);

199 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,25)

200 
	`uf_qdisc›_tu√
(
Qdisc
 *
qd
, 
∆©å
 *
›t
);

201 
	`uf_qdisc›_öô
(
Qdisc
 *
qd
, 
∆©å
 *
›t
);

203 
	`uf_qdisc›_tu√
(
Qdisc
 *
qd
, 
π©å
 *
›t
);

204 
	`uf_qdisc›_öô
(
Qdisc
 *
qd
, 
π©å
 *
›t
);

209 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,28)

211 
Qdisc_›s
 
uf_qdisc_›s
 =

213 .
√xt
 = 
NULL
,

214 .
˛_›s
 = 
NULL
,

215 .
id
 = "UniFi Qdisc",

216 .
¥iv_size
 = (
uf_sched_d©a
),

218 .
íqueue
 = 
uf_qdisc›_íqueue
,

219 .
dequeue
 = 
uf_qdisc›_dequeue
,

220 .
ªqueue
 = 
uf_qdisc›_ªqueue
,

221 .
dr›
 = 
NULL
,

223 .
öô
 = 
uf_qdisc›_öô
,

224 .
ª£t
 = 
uf_qdisc›_ª£t
,

225 .
de°roy
 = 
uf_qdisc›_de°roy
,

226 .
ch™ge
 = 
uf_qdisc›_tu√
,

228 .
dump
 = 
uf_qdisc›_dump
,

229 
	}
};

232 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,28)

233 
	#UF_QDISC_CREATE_DFLT
(
_dev
, 
_›s
, 
_roŸ
)

	)

234 #ñi‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,27)

235 
	#UF_QDISC_CREATE_DFLT
(
_dev
, 
_›s
, 
_roŸ
) \

236 
	`qdisc_¸óã_dÊt
(
dev
, 
	`√tdev_gë_tx_queue
(
_dev
, 0), 
_›s
, 
_roŸ
)

	)

237 #ñi‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,20)

238 
	#UF_QDISC_CREATE_DFLT
(
_dev
, 
_›s
, 
_roŸ
) \

239 
	`qdisc_¸óã_dÊt
(
dev
, 
_›s
, 
_roŸ
)

	)

241 
	#UF_QDISC_CREATE_DFLT
(
_dev
, 
_›s
, 
_roŸ
) \

242 
	`qdisc_¸óã_dÊt
(
dev
, 
_›s
)

	)

247 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,29)

248 c⁄° 
√t_devi˚_›s
 
	guf_√tdev_›s
 =

250 .
ndo_›í
 = 
uf_√t_›í
,

251 .
	gndo_°›
 = 
uf_√t_°›
,

252 .
	gndo_°¨t_xmô
 = 
uf_√t_xmô
,

253 .
	gndo_do_io˘l
 = 
uf_√t_io˘l
,

254 .
	gndo_gë_°©s
 = 
uf_√t_gë_°©s
,

255 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3,2,0)

256 .
	gndo_£t_mu…iˇ°_li°
 = 
uf_£t_mu…iˇ°_li°
,

258 .
	gndo_£t_rx_mode
 = 
uf_£t_mu…iˇ°_li°
,

260 .
	gndo_£À˘_queue
 = 
uf_√t_£À˘_queue
,

264 
u8
 
	goui_rfc1042
[
P80211_OUI_LEN
] = { 0x00, 0x00, 0x00 };

265 
u8
 
	goui_8021h
[
P80211_OUI_LEN
] = { 0x00, 0x00, 0xf8 };

269 
√tdev_mlme_evít_h™dÀr
(
ul_˛õ¡_t
 *
˛õ¡
,

270 c⁄° 
u8
 *
sig_∑cked
, 
sig_Àn
,

271 c⁄° 
bulk_d©a_∑øm_t
 *
bulkd©a
,

272 
dú
);

274 #ifde‡
CSR_SUPPORT_WEXT


278 
nŸifõr_block
 
	guf_√tdev_nŸifõr
;

305 
unifi_¥iv_t
 *

306 
	$uf_Æloc_√tdevi˚
(
C§SdioFun˘i⁄
 *
sdio_dev
, 
bus_id
)

308 
√t_devi˚
 *
dev
;

309 
unifi_¥iv_t
 *
¥iv
;

310 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
;

311 #ifde‡
CSR_SUPPORT_WEXT


312 
rc
;

314 
i
;

324 
	`UF_ALLOC_NETDEV
(
dev
, (
unifi_¥iv_t
)+(
√tI¡îÁ˚_¥iv_t
), "%d", 
ëhî_£tup
, 
UNIFI_TRAFFIC_Q_MAX
);

326 i‡(
dev
 =
NULL
) {

327  
NULL
;

331 
öãrÁ˚Priv
 = (
√tI¡îÁ˚_¥iv_t
 *)
	`√tdev_¥iv
(
dev
);

332 
¥iv
 = (
unifi_¥iv_t
 *)(
öãrÁ˚Priv
 + 1);

333 
öãrÁ˚Priv
->
¥ivPå
 = 
¥iv
;

334 
öãrÁ˚Priv
->
I¡îÁ˚Tag
 = 0;

338 
i
=0; i<
CSR_WIFI_NUM_INTERFACES
; i++) {

339 
¥iv
->
√tdev
[
i
] = 
NULL
;

340 
¥iv
->
öãrÁ˚Priv
[
i
] = 
NULL
;

342 
¥iv
->
√tdev
[0] = 
dev
;

343 
¥iv
->
öãrÁ˚Priv
[0] = interfacePriv;

346 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,29)

347 
dev
->
√tdev_›s
 = &
uf_√tdev_›s
;

349 
dev
->
›í
 = 
uf_√t_›í
;

350 
dev
->
°›
 = 
uf_√t_°›
;

351 
dev
->
h¨d_°¨t_xmô
 = 
uf_√t_xmô
;

352 
dev
->
do_io˘l
 = 
uf_√t_io˘l
;

355 
dev
->
gë_°©s
 = 
uf_√t_gë_°©s
;

357 
dev
->
£t_mu…iˇ°_li°
 = 
uf_£t_mu…iˇ°_li°
;

358 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,28)

359 
dev
->
£À˘_queue
 = 
uf_√t_£À˘_queue
;

363 #ifde‡
CSR_SUPPORT_WEXT


364 
dev
->
wúñess_h™dÀrs
 = &
unifi_iw_h™dÀr_def
;

365 #i‡
IW_HANDLER_VERSION
 < 6

366 
dev
->
gë_wúñess_°©s
 = 
unifi_gë_wúñess_°©s
;

371 
dev
->
√eded_hódroom
 = 32;

374 
¥iv
->
ö°™˚
 = 
bus_id
;

376 
¥iv
->
sdio
 = 
sdio_dev
;

378 
sdio_dev
->
drivîD©a
 = (*)
¥iv
;

380 
¥iv
->
öô_¥ogªss
 = 
UNIFI_INIT_NONE
;

382 
¥iv
->
¥ev_queue
 = 0;

391 
	`ul_öô_˛õ¡s
(
¥iv
);

397 
¥iv
->
√tdev_˛õ¡
 = 
	`ul_ªgi°î_˛õ¡
(priv,

399 
√tdev_mlme_evít_h™dÀr
);

400 i‡(
¥iv
->
√tdev_˛õ¡
 =
NULL
) {

401 
	`unifi_îr‹
(
¥iv
,

403 
	`‰ì_√tdev
(
¥iv
->
√tdev
[0]);

404  
NULL
;

406 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "Netdev %p client (id:%d s:0x%X) isÑegistered\n",

407 
dev
, 
¥iv
->
√tdev_˛õ¡
->
˛õ¡_id
,Öriv->√tdev_˛õ¡->
£ndî_id
);

409 
¥iv
->
°a_wmm_ˇ∑bûôõs
 = 0;

411 #i‡(
	`deföed
(
CSR_WIFI_SECURITY_WAPI_ENABLE
Ë&& deföed(
CSR_SUPPORT_SME
))

412 
¥iv
->
w≠i_mu…iˇ°_fûãr
 = 0;

413 
¥iv
->
w≠i_uniˇ°_fûãr
 = 0;

414 
¥iv
->
w≠i_uniˇ°_queued_pkt_fûãr
 = 0;

415 #ifde‡
CSR_WIFI_SECURITY_WAPI_QOSCTRL_MIC_WORKAROUND


416 
¥iv
->
isW≠iC⁄√˘i⁄
 = 
FALSE
;

421 
öãrÁ˚Priv
->
queueE«bÀd
[0] = 1;

422 
öãrÁ˚Priv
->
queueE«bÀd
[1] = 1;

423 
öãrÁ˚Priv
->
queueE«bÀd
[2] = 1;

424 
öãrÁ˚Priv
->
queueE«bÀd
[3] = 1;

426 #ifde‡
CSR_SUPPORT_SME


427 
¥iv
->
ÆlPìrDozög
 = 0;

436 i‡(
u£_5g
) {

437 
¥iv
->
if_ödex
 = 
CSR_INDEX_5G
;

438 
	`unifi_öfo
(
¥iv
, "UsingÅhe 802.11aÑadio\n");

440 
¥iv
->
if_ödex
 = 
CSR_INDEX_2G4
;

444 
¥iv
->
bh_thªad
.
thªad_èsk
 = 
NULL
;

445 
¥iv
->
bh_thªad
.
block_thªad
 = 1;

446 
	`öô_waôqueue_hód
(&
¥iv
->
bh_thªad
.
wakeup_q
);

447 
¥iv
->
bh_thªad
.
wakeup_Êag
 = 0;

448 
	`•rötf
(
¥iv
->
bh_thªad
.
«me
, "uf_bh_thread");

451 
öãrÁ˚Priv
->
c⁄√˘ed
 = 
UnifiC⁄√˘edUnknown
;

453 #ifde‡
USE_DRIVER_LOCK


454 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 37)

455 
	`£ma_öô
(&
¥iv
->
lock
, 1);

457 
	`öô_MUTEX
(&
¥iv
->
lock
);

461 
	`•ö_lock_öô
(&
¥iv
->
£nd_sig«l_lock
);

463 
	`•ö_lock_öô
(&
¥iv
->
m4_lock
);

464 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 37)

465 
	`£ma_öô
(&
¥iv
->
ba_muãx
, 1);

467 
	`öô_MUTEX
(&
¥iv
->
ba_muãx
);

470 #i‡(
	`deföed
(
CSR_WIFI_SECURITY_WAPI_ENABLE
Ë&& deföed(
CSR_WIFI_SECURITY_WAPI_SW_ENCRYPTION
))

471 
	`•ö_lock_öô
(&
¥iv
->
w≠i_lock
);

474 #ifde‡
CSR_SUPPORT_SME


475 
	`•ö_lock_öô
(&
¥iv
->
°aRec‹d_lock
);

476 
	`•ö_lock_öô
(&
¥iv
->
tx_q_lock
);

480 
¥iv
->
unifi_w‹kqueue
 = 
	`¸óã_sögÀthªad_w‹kqueue
("unifi_workq");

481 i‡(
¥iv
->
unifi_w‹kqueue
 =
NULL
) {

483 
	`ul_dîegi°î_˛õ¡
(
¥iv
->
√tdev_˛õ¡
);

484 
	`‰ì_√tdev
(
¥iv
->
√tdev
[0]);

485  
NULL
;

488 #ifde‡
CSR_SUPPORT_SME


490 
	`INIT_WORK
(&
¥iv
->
mu…iˇ°_li°_èsk
, 
uf_mu…iˇ°_li°_wq
);

493 
	`INIT_WORK
(&
öãrÁ˚Priv
->
£nd_m4_ªady_èsk
, 
uf_£nd_m4_ªady_wq
);

495 #i‡(
	`deföed
(
CSR_WIFI_SECURITY_WAPI_ENABLE
Ë&& deföed(
CSR_WIFI_SECURITY_WAPI_SW_ENCRYPTION
))

497 
	`INIT_WORK
(&
öãrÁ˚Priv
->
£nd_pkt_to_í¸y±
, 
uf_£nd_pkt_to_í¸y±
);

501 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,28)

502 #ifde‡
CONFIG_NET_SCHED


504 
	`ªgi°î_qdisc
(&
uf_qdisc_›s
);

508 
¥iv
->
ªf_cou¡
 = 1;

511 
¥iv
->
amp_˛õ¡
 = 
NULL
;

512 
¥iv
->
c‹edump_mode
 = 0;

513 
¥iv
->
±e°_mode
 = 0;

514 
¥iv
->
wﬁ_su•íd
 = 
FALSE
;

515 
	`INIT_LIST_HEAD
(&
öãrÁ˚Priv
->
rx_unc⁄åﬁÀd_li°
);

516 
	`INIT_LIST_HEAD
(&
öãrÁ˚Priv
->
rx_c⁄åﬁÀd_li°
);

517 
	`£ma_öô
(&
¥iv
->
rx_q_£m
, 1);

519 #ifde‡
CSR_SUPPORT_WEXT


520 
öãrÁ˚Priv
->
√tdev_ˇŒback_ªgi°îed
 = 
FALSE
;

521 
öãrÁ˚Priv
->
waô_√tdev_ch™ge
 = 
FALSE
;

523 i‡((
rc
 = 
	`ªgi°î_√tdevi˚_nŸifõr
(&
uf_√tdev_nŸifõr
)) == 0) {

524 
öãrÁ˚Priv
->
√tdev_ˇŒback_ªgi°îed
 = 
TRUE
;

527 
	`unifi_w¨nög
(
¥iv
, "FaûedÅÿªgi°îÇëdevi˚ÇŸifõ∏: %d %p\n", 
rc
, 
dev
);

531 #ifde‡
CSR_WIFI_SPLIT_PATCH


533 
¥iv
->
≥ndög_mode_£t
.
comm⁄
.
de°ö©i⁄
 = 0xaaaa;

534 
öãrÁ˚Priv
->
∑tchMode
 = 
∑tch_mode
;

537  
¥iv
;

538 
	}
}

567 
C§Boﬁ


568 
	$uf_Æloc_√tdevi˚_f‹_Ÿhî_öãrÁ˚s
(
unifi_¥iv_t
 *
¥iv
, 
C§Uöt16
 
öãrÁ˚Tag
)

570 
√t_devi˚
 *
dev
;

571 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
;

581 
	`UF_ALLOC_NETDEV
(
dev
, (
√tI¡îÁ˚_¥iv_t
), "%d", 
ëhî_£tup
, 1);

582 i‡(
dev
 =
NULL
) {

583  
FALSE
;

586 i‡(
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
) {

587 
	`unifi_îr‹
(
¥iv
, "uf_alloc_netdevice_for_other_interfaces bad interfaceTag\n");

588  
FALSE
;

592 
öãrÁ˚Priv
 = (
√tI¡îÁ˚_¥iv_t
 *)
	`√tdev_¥iv
(
dev
);

593 
öãrÁ˚Priv
->
¥ivPå
 = 
¥iv
;

594 
öãrÁ˚Priv
->
I¡îÁ˚Tag
 = 
öãrÁ˚Tag
;

595 
¥iv
->
√tdev
[
öãrÁ˚Tag
] = 
dev
;

596 
¥iv
->
öãrÁ˚Priv
[öãrÁ˚Priv->
I¡îÁ˚Tag
] = interfacePriv;

599 
öãrÁ˚Priv
->
c⁄√˘ed
 = 
UnifiC⁄√˘edUnknown
;

600 
	`INIT_LIST_HEAD
(&
öãrÁ˚Priv
->
rx_unc⁄åﬁÀd_li°
);

601 
	`INIT_LIST_HEAD
(&
öãrÁ˚Priv
->
rx_c⁄åﬁÀd_li°
);

604 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,29)

605 
dev
->
√tdev_›s
 = &
uf_√tdev_›s
;

607 
dev
->
›í
 = 
uf_√t_›í
;

608 
dev
->
°›
 = 
uf_√t_°›
;

609 
dev
->
h¨d_°¨t_xmô
 = 
uf_√t_xmô
;

610 
dev
->
do_io˘l
 = 
uf_√t_io˘l
;

613 
dev
->
gë_°©s
 = 
uf_√t_gë_°©s
;

615 
dev
->
£t_mu…iˇ°_li°
 = 
uf_£t_mu…iˇ°_li°
;

618 #ifde‡
CSR_SUPPORT_WEXT


619 
dev
->
wúñess_h™dÀrs
 = &
unifi_iw_h™dÀr_def
;

620 #i‡
IW_HANDLER_VERSION
 < 6

621 
dev
->
gë_wúñess_°©s
 = 
unifi_gë_wúñess_°©s
;

624  
TRUE
;

625 
	}
}

644 
	$uf_‰ì_√tdevi˚
(
unifi_¥iv_t
 *
¥iv
)

646 
i
;

647 
Êags
;

649 
	`func_íãr
();

651 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "uf_free_netdevice\n");

653 i‡(!
¥iv
) {

654  -
EINVAL
;

660 
	`uf_ªÀa£_fúmw¨e_fûes
(
¥iv
);

662 #i‡(
deföed
 
CSR_SUPPORT_SME
Ë&& (deföed 
CSR_SUPPORT_WEXT
)

663 i‡(
¥iv
->
c⁄√˘i⁄_c⁄fig
.
mlmeAssocüãReqInf‹m©i⁄EÀmíts
) {

664 
	`k‰ì
(
¥iv
->
c⁄√˘i⁄_c⁄fig
.
mlmeAssocüãReqInf‹m©i⁄EÀmíts
);

666 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
mlmeAssocüãReqInf‹m©i⁄EÀmíts
 = 
NULL
;

667 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
mlmeAssocüãReqInf‹m©i⁄EÀmítsLígth
 = 0;

669 i‡(
¥iv
->
sˇnInf‹m©i⁄EÀmíts
) {

670 
	`k‰ì
(
¥iv
->
sˇnInf‹m©i⁄EÀmíts
);

672 
¥iv
->
sˇnInf‹m©i⁄EÀmíts
 = 
NULL
;

673 
¥iv
->
sˇnInf‹m©i⁄EÀmítsLígth
 = 0;

675 i‡(
¥iv
->
mib_d©a
.
Àngth
) {

676 
	`v‰ì
(
¥iv
->
mib_d©a
.
d©a
);

678 
¥iv
->
mib_d©a
.
d©a
 = 
NULL
;

679 
¥iv
->
mib_d©a
.
Àngth
 = 0;

684 
	`•ö_lock_úqßve
(&
¥iv
->
m4_lock
, 
Êags
);

685 
i
 = 0; i < 
CSR_WIFI_NUM_INTERFACES
; i++) {

686 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
i
];

687 i‡(
öãrÁ˚Priv
->
m4_bulk_d©a
.
d©a_Àngth
 > 0) {

688 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "uf_‰ì_√tdevi˚: fªêM4 bulkd©®%d\n", 
i
);

689 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
öãrÁ˚Priv
->
m4_bulk_d©a
);

692 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
m4_lock
, 
Êags
);

694 #i‡(
	`deföed
(
CSR_WIFI_SECURITY_WAPI_ENABLE
Ë&& deföed(
CSR_WIFI_SECURITY_WAPI_SW_ENCRYPTION
))

696 
	`•ö_lock_úqßve
(&
¥iv
->
w≠i_lock
, 
Êags
);

697 
i
 = 0; i < 
CSR_WIFI_NUM_INTERFACES
; i++) {

698 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
i
];

699 i‡(
öãrÁ˚Priv
->
w≠i_uniˇ°_bulk_d©a
.
d©a_Àngth
 > 0) {

700 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "uf_‰ì_√tdevi˚: fªêWAPI PKT bulk d©®%d\n", 
i
);

701 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
öãrÁ˚Priv
->
w≠i_uniˇ°_bulk_d©a
);

704 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
w≠i_lock
, 
Êags
);

707 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,28)

708 #ifde‡
CONFIG_NET_SCHED


710 
	`uƒegi°î_qdisc
(&
uf_qdisc_›s
);

714 #ifde‡
CSR_SUPPORT_WEXT


716 
	`uƒegi°î_√tdevi˚_nŸifõr
(&
uf_√tdev_nŸifõr
);

719 #ifde‡
CSR_SUPPORT_SME


721 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,23)

722 
	`ˇn˚l_w‹k_sync
(&
¥iv
->
mu…iˇ°_li°_èsk
);

726 
	`Êush_w‹kqueue
(
¥iv
->
unifi_w‹kqueue
);

727 
	`de°roy_w‹kqueue
(
¥iv
->
unifi_w‹kqueue
);

732 
i
=
CSR_WIFI_NUM_INTERFACES
-1; i>=0; i--) {

734 i‡(
¥iv
->
√tdev
[
i
]) {

735 
	`unifi_îr‹
(
¥iv
, "uf_‰ì_√tdevi˚:Çëdev %d %p\n", 
i
,Öriv->
√tdev
[i]);

736 
	`‰ì_√tdev
(
¥iv
->
√tdev
[
i
]);

740 
	`func_exô
();

742 
	}
}

759 
	$uf_√t_›í
(
√t_devi˚
 *
dev
)

761 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

762 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

764 
	`func_íãr
();

767 i‡(
¥iv
->
öô_¥ogªss
 !
UNIFI_INIT_COMPLETED
) {

768 
	`unifi_w¨nög
(
¥iv
, "%s: unifònŸÑódy, faûögÇë_›í\n", 
__FUNCTION__
);

769  -
EINVAL
;

772 #i‡(
deföed
 
CSR_NATIVE_LINUX
Ë&& (deföed 
UNIFI_SNIFF_ARPHRD
Ë&& 
	`deföed
(
CSR_SUPPORT_WEXT
)

780 i‡(
¥iv
->
wext_c⁄f
.
mode
 =
IW_MODE_MONITOR
) {

781 
îr
;

782 
îr
 = 
	`uf_°¨t_¢iff
(
¥iv
);

783 i‡(
îr
) {

784  
îr
;

786 
	`√tif_ˇºõr_⁄
(
dev
);

790 #ifde‡
CSR_SUPPORT_WEXT


791 i‡(
öãrÁ˚Priv
->
waô_√tdev_ch™ge
) {

792 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "%s: Waiting for NETDEV_CHANGE,ássume connected\n",

793 
__FUNCTION__
);

794 
öãrÁ˚Priv
->
c⁄√˘ed
 = 
UnifiC⁄√˘ed
;

795 
öãrÁ˚Priv
->
waô_√tdev_ch™ge
 = 
FALSE
;

799 
	`UF_NETIF_TX_START_ALL_QUEUES
(
dev
);

801 
	`func_exô
();

803 
	}
}

807 
	$uf_√t_°›
(
√t_devi˚
 *
dev
)

809 #i‡
	`deföed
(
CSR_NATIVE_LINUX
Ë&& deföed(
UNIFI_SNIFF_ARPHRD
Ë&& deföed(
CSR_SUPPORT_WEXT
)

810 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_t*)
	`√tdev_¥iv
(
dev
);

811 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

813 
	`func_íãr
();

816 i‡(
¥iv
->
wext_c⁄f
.
mode
 =
IW_MODE_MONITOR
) {

817 i‡(
¥iv
->
ˇrd
) {

818 
îr
;

819 
îr
 = 
	`unifi_ª£t_°©e
(
¥iv
, 
dev
->
dev_addr
, 1);

820 i‡(
îr
) {

821  
îr
;

826 
	`func_íãr
();

829 
	`UF_NETIF_TX_STOP_ALL_QUEUES
(
dev
);

831 
	`func_exô
();

833 
	}
}

838 
	$uf_√t_io˘l
(
√t_devi˚
 *
dev
, 
i‰eq
 *
rq
, 
cmd
)

840 
rc
;

842 
rc
 = -
EOPNOTSUPP
;

844  
rc
;

845 
	}
}

849 
√t_devi˚_°©s
 *

850 
	$uf_√t_gë_°©s
(
√t_devi˚
 *
dev
)

852 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

854  &
öãrÁ˚Priv
->
°©s
;

855 
	}
}

857 
CSR_PRIORITY
 
	$uf_gë_∑ckë_¥i‹ôy
(
unifi_¥iv_t
 *
¥iv
, 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
, 
sk_buff
 *
skb
, c⁄° 
¥Ÿo
)

859 
CSR_PRIORITY
 
¥i‹ôy
 = 
CSR_CONTENTION
;

861 
	`func_íãr
();

862 
¥i‹ôy
 = (
CSR_PRIORITY
Ë(
skb
->priority >> 5);

864 i‡(
¥i‹ôy
 =
CSR_QOS_UP0
) {

866 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "uf_gë_∑ckë_¥i‹ôy:ÖrŸÿ0x%.4X\n", 
¥Ÿo
);

868 
¥Ÿo
) {

872 
¥i‹ôy
 = (
CSR_PRIORITY
Ë(
skb
->
d©a
[1 + 
ETH_HLEN
] >> 5);

876 
¥i‹ôy
 = (
CSR_PRIORITY
Ë(
skb
->
d©a
[0 + 
ETH_HLEN
] >> 5);

880 
¥i‹ôy
 = (
CSR_PRIORITY
Ë((
skb
->
d©a
[0 + 
ETH_HLEN
] & 0x0E) >> 1);

884 
¥i‹ôy
 = 
CSR_QOS_UP0
;

891 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_STA
 ||

892 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PCLI
) {

893 
unifi_TøfficQueue
 
queue
;

897 
queue
 = 
	`unifi_‰ame_¥i‹ôy_to_queue
(
¥i‹ôy
);

899 
queue
 > 
UNIFI_TRAFFIC_Q_BK
 && !
öãrÁ˚Priv
->
queueE«bÀd
[queue]) {

900 
queue
--;

901 
¥i‹ôy
 = 
	`unifi_gë_deÁu…_downgøde_¥i‹ôy
(
queue
);

905 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "PackëÖri‹ôy = %d\n", 
¥i‹ôy
);

907 
	`func_exô
();

908  
¥i‹ôy
;

909 
	}
}

928 
CSR_PRIORITY


929 
	$gë_∑ckë_¥i‹ôy
(
unifi_¥iv_t
 *
¥iv
, 
sk_buff
 *
skb
, c⁄° 
ëhhdr
 *
ehdr
, 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
)

931 
CSR_PRIORITY
 
¥i‹ôy
 = 
CSR_CONTENTION
;

932 c⁄° 
¥Ÿo
 = 
	`¡ohs
(
ehdr
->
h_¥Ÿo
);

934 
C§Uöt8
 
öãrÁ˚Mode
 = 
öãrÁ˚Priv
->interfaceMode;

936 
	`func_íãr
();

939 
öãrÁ˚Mode
)

941 
CSR_WIFI_ROUTER_CTRL_MODE_STA
:

942 
CSR_WIFI_ROUTER_CTRL_MODE_P2PCLI
:

943 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "mode is STA \n");

944 i‡((
¥iv
->
°a_wmm_ˇ∑bûôõs
 & 
QOS_CAPABILITY_WMM_ENABLED
) == 1) {

945 
¥i‹ôy
 = 
	`uf_gë_∑ckë_¥i‹ôy
(
¥iv
, 
öãrÁ˚Priv
, 
skb
, 
¥Ÿo
);

947 
¥i‹ôy
 = 
CSR_CONTENTION
;

950 #ifde‡
CSR_SUPPORT_SME


951 
CSR_WIFI_ROUTER_CTRL_MODE_AP
:

952 
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
:

953 
CSR_WIFI_ROUTER_CTRL_MODE_IBSS
:

955 
C§WifiRouãrCålSèInfo_t
 * 
d°SèInfo
 =

956 
	`C§WifiRouãrCålGëSèti⁄Rec‹dFromPìrMacAddªss
(
¥iv
,
ehdr
->
h_de°
, 
öãrÁ˚Priv
->
I¡îÁ˚Tag
);

957 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "mode is AP \n");

958 i‡(!(
ehdr
->
h_de°
[0] & 0x01Ë&& 
d°SèInfo
 && d°SèInfo->
wmmOrQosE«bÀd
) {

960 
¥i‹ôy
 = 
	`uf_gë_∑ckë_¥i‹ôy
(
¥iv
, 
öãrÁ˚Priv
, 
skb
, 
¥Ÿo
);

963 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "Destination isÇot QSTA or BroadCast/Multicast\n");

964 
¥i‹ôy
 = 
CSR_CONTENTION
;

970 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, " modêunknow¿ö %†func, mode=%x\n", 
__FUNCTION__
, 
öãrÁ˚Mode
);

972 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "¥i‹ôy = %x\n", 
¥i‹ôy
);

974 
	`func_exô
();

975  
¥i‹ôy
;

976 
	}
}

978 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,28)

993 
u16


994 
	$uf_√t_£À˘_queue
(
√t_devi˚
 *
dev
, 
sk_buff
 *
skb
)

996 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

997 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
öãrÁ˚Priv
->
¥ivPå
;

998 
ëhhdr
 
ehdr
;

999 
unifi_TøfficQueue
 
queue
;

1000 
¥Ÿo
;

1001 
CSR_PRIORITY
 
¥i‹ôy
;

1003 
	`func_íãr
();

1005 
	`mem˝y
(&
ehdr
, 
skb
->
d©a
, 
ETH_HLEN
);

1006 
¥Ÿo
 = 
	`¡ohs
(
ehdr
.
h_¥Ÿo
);

1009 i‡((
¥Ÿo
 !
ETH_P_PAE
)

1010 #ifde‡
CSR_WIFI_SECURITY_WAPI_ENABLE


1011 && (
¥Ÿo
 !
ETH_P_WAI
)

1015 
¥i‹ôy
 = 
	`gë_∑ckë_¥i‹ôy
(
¥iv
, 
skb
, &
ehdr
, 
öãrÁ˚Priv
);

1016 
queue
 = 
	`unifi_‰ame_¥i‹ôy_to_queue
(
¥i‹ôy
);

1019 
queue
 = 
UNIFI_TRAFFIC_Q_EAPOL
;

1023 
	`func_exô
();

1024  (
u16
)
queue
;

1025 
	}
}

1029 
	$skb_add_Œc_¢≠
(
√t_devi˚
 *
dev
, 
sk_buff
 *
skb
, 
¥Ÿo
)

1031 
Œc_¢≠_hdr_t
 *
¢≠
;

1032 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

1033 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

1034 
hódroom
;

1037 
hódroom
 = 
	`skb_hódroom
(
skb
);

1040 i‡(
¥Ÿo
 < 0x600) {

1043 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "802.3Üí: %d\n", 
skb
->
Àn
);

1046 
	`skb_åim
(
skb
, 
¥Ÿo
);

1047 } i‡(
¥Ÿo
 =
ETH_P_8021Q
) {

1050 
u16
 
vœn_¢≠
 = *(u16*)
skb
->
d©a
;

1052 i‡(
hódroom
 < 14) {

1053 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "cantáppend vlan snap: debug\n");

1057 
¢≠
 = (
Œc_¢≠_hdr_t
 *)
	`skb_push
(
skb
, 4);

1058 
¢≠
->
dßp
 = s«p->
sßp
 = 0xAA;

1059 
¢≠
->
˘æ
 = 0x03;

1060 
	`mem˝y
(
¢≠
->
oui
, 
oui_rfc1042
, 
P80211_OUI_LEN
);

1063 
¢≠
 = (
Œc_¢≠_hdr_t
 *)
	`skb_push
(
skb
, 10);

1064 
¢≠
->
dßp
 = s«p->
sßp
 = 0xAA;

1065 
¢≠
->
˘æ
 = 0x03;

1066 
	`mem˝y
(
¢≠
->
oui
, 
oui_rfc1042
, 
P80211_OUI_LEN
);

1069 
¢≠
->
¥Ÿocﬁ
 = 
	`ht⁄s
(
¥Ÿo
);

1070 *(
u16
*)(
¢≠
 + 1Ë
vœn_¢≠
;

1075 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "DIXIIÜí: %d\n", 
skb
->
Àn
);

1078 i‡(
hódroom
 < (
Œc_¢≠_hdr_t
)) {

1079 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "cantáppend snap: debug\n");

1083 
¢≠
 = (
Œc_¢≠_hdr_t
 *)
	`skb_push
(
skb
, (llc_snap_hdr_t));

1084 
¢≠
->
dßp
 = s«p->
sßp
 = 0xAA;

1085 
¢≠
->
˘æ
 = 0x03;

1087 i‡((
¥Ÿo
 =
ETH_P_AARP
Ë|| (¥Ÿÿ=
ETH_P_IPX
)) {

1088 
	`mem˝y
(
¢≠
->
oui
, 
oui_8021h
, 
P80211_OUI_LEN
);

1090 
	`mem˝y
(
¢≠
->
oui
, 
oui_rfc1042
, 
P80211_OUI_LEN
);

1092 
¢≠
->
¥Ÿocﬁ
 = 
	`ht⁄s
(
¥Ÿo
);

1096 
	}
}

1098 #ifde‡
CSR_SUPPORT_SME


1100 
	$_idítify_sme_ma_pkt_öd
(
unifi_¥iv_t
 *
¥iv
,

1101 c⁄° 
C§I¡8
 *
oui
, 
C§Uöt16
 
¥Ÿocﬁ
,

1102 c⁄° 
CSR_SIGNAL
 *
sig«l
,

1103 
bulk_d©a_∑øm_t
 *
bulkd©a
,

1104 c⁄° *
daddr
,

1105 c⁄° *
ßddr
)

1107 
CSR_MA_PACKET_INDICATION
 *
pkt_öd
 = (CSR_MA_PACKET_INDICATION*)&
sig«l
->
u
.
MaPackëIndiˇti⁄
;

1108 
r
;

1109 
C§Uöt8
 
i
;

1111 
	`unifi_åa˚
(
¥iv
, 
UDBG5
,

1113 
i
 = 0; i < 
MAX_MA_UNIDATA_IND_FILTERS
; i++) {

1114 i‡(
¥iv
->
sme_unid©a_öd_fûãrs
[
i
].
ö_u£
) {

1115 i‡(!
	`memcmp
(
oui
, 
¥iv
->
sme_unid©a_öd_fûãrs
[
i
].oui, 3) &&

1116 (
¥Ÿocﬁ
 =
¥iv
->
sme_unid©a_öd_fûãrs
[
i
].protocol)) {

1119 i‡(
¥iv
->
sme_˛i
) {

1124 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,

1126 
i
, 
¥iv
->
sme_unid©a_öd_fûãrs
[i].
íˇpsuœti⁄
,

1127 
¥iv
->
sme_unid©a_öd_fûãrs
[
i
].
¥Ÿocﬁ
);

1128 i‡(
¥iv
->
sme_unid©a_öd_fûãrs
[
i
].
íˇpsuœti⁄
 =
CSR_WIFI_ROUTER_ENCAPSULATION_ETHERNET
) {

1129 
sk_buff
 *
skb
;

1131 
skb
 = (
sk_buff
*)
bulkd©a
->
d
[0].
os_√t_buf_±r
;

1132 
skb
->
Àn
 = 
bulkd©a
->
d
[0].
d©a_Àngth
;

1134 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,

1136 
r
 = 
	`skb_80211_to_ëhî
(
¥iv
, 
skb
, 
daddr
, 
ßddr
,

1137 
sig«l
, 
bulkd©a
);

1138 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,

1140 i‡(
r
) {

1141  -
EINVAL
;

1145 
bulkd©a
->
d
[0].
os_d©a_±r
 = 
skb
->
d©a
;

1146 
bulkd©a
->
d
[0].
d©a_Àngth
 = 
skb
->
Àn
;

1149 
bulkd©a
->
d
[0].
os_d©a_±r
 -2*
ETH_ALEN
;

1150 
bulkd©a
->
d
[0].
d©a_Àngth
 +2*
ETH_ALEN
;

1151 
	`mem˝y
((*)
bulkd©a
->
d
[0].
os_d©a_±r
, 
daddr
, 
ETH_ALEN
);

1152 
	`mem˝y
((*)
bulkd©a
->
d
[0].
os_d©a_±r
 + 
ETH_ALEN
, 
ßddr
, ETH_ALEN);

1155 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,

1157 
	`C§WifiRouãrMaPackëIndSíd
(
¥iv
->
sme_unid©a_öd_fûãrs
[
i
].
≠pH™dÀ
,

1158 (
pkt_öd
->
VútuÆI¡îÁ˚Idítifõr
 & 0xff),

1159 
i
,

1160 
pkt_öd
->
Re˚±i⁄Sètus
,

1161 
bulkd©a
->
d
[0].
d©a_Àngth
,

1162 (
C§Uöt8
*)
bulkd©a
->
d
[0].
os_d©a_±r
,

1163 
NULL
,

1164 
pkt_öd
->
Rssi
,

1165 
pkt_öd
->
Sƒ
,

1166 
pkt_öd
->
Re˚ivedR©e
);

1169 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,

1179 
	}
}

1202 
	$skb_80211_to_ëhî
(
unifi_¥iv_t
 *
¥iv
, 
sk_buff
 *
skb
,

1203 c⁄° *
daddr
, c⁄° *
ßddr
,

1204 c⁄° 
CSR_SIGNAL
 *
sig«l
,

1205 
bulk_d©a_∑øm_t
 *
bulkd©a
)

1207 *
∑ylﬂd
;

1208 
∑ylﬂd_Àngth
;

1209 
ëhhdr
 *
ëh
;

1210 
Œc_¢≠_hdr_t
 *
¢≠
;

1211 
hódroom
;

1212 
	#UF_VLAN_LLC_HEADER_SIZE
 18

	)

1213 c⁄° 
u8
 
vœn_ö√r_¢≠
[] = { 0xAA, 0xAA, 0x03, 0x00, 0x00, 0x00 };

1214 #i‡
	`deföed
(
CSR_NATIVE_SOFTMAC
Ë&& deföed(
CSR_SUPPORT_SME
)

1215 c⁄° 
CSR_MA_PACKET_INDICATION
 *
pkt_öd
 = &
sig«l
->
u
.
MaPackëIndiˇti⁄
;

1218 if(
skb
=
NULL
 || 
daddr
 =NULL || 
ßddr
 == NULL){

1219 
	`unifi_îr‹
(
¥iv
,"skb_80211_to_ether: PBC fail\n");

1223 
∑ylﬂd
 = 
skb
->
d©a
;

1224 
∑ylﬂd_Àngth
 = 
skb
->
Àn
;

1226 
¢≠
 = (
Œc_¢≠_hdr_t
 *)
∑ylﬂd
;

1227 
ëh
 = (
ëhhdr
 *)
∑ylﬂd
;

1230 
hódroom
 = 
	`skb_hódroom
(
skb
);

1235 i‡((
∑ylﬂd_Àngth
 >(
Œc_¢≠_hdr_t
)) &&

1236 (
¢≠
->
dßp
 == 0xAA) &&

1237 (
¢≠
->
sßp
 == 0xAA) &&

1238 (
¢≠
->
˘æ
 == 0x03) &&

1239 (
¢≠
->
oui
[0] == 0) &&

1240 (
¢≠
->
oui
[1] == 0) &&

1241 ((
¢≠
->
oui
[2] == 0) || (snap->oui[2] == 0xF8)))

1244 i‡((
¢≠
->
oui
[2] == 0) &&

1245 ((
	`¡ohs
(
¢≠
->
¥Ÿocﬁ
Ë=
ETH_P_AARP
Ë|| (¡ohs(¢≠->¥ŸocﬁË=
ETH_P_IPX
)))

1247 
u16
 
Àn
;

1249 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "%sÜen: %d\n",

1250 (
	`¡ohs
(
¢≠
->
¥Ÿocﬁ
Ë=
ETH_P_AARP
) ? "ETH_P_AARP" : "ETH_P_IPX",

1251 
∑ylﬂd_Àngth
);

1254 i‡(
hódroom
 < (2 * 
ETH_ALEN
 + 2)) {

1255 
	`unifi_w¨nög
(
¥iv
, "headroomÇotávailableÅo skb_pushÉther header\n");

1260 
Àn
 = 
	`ht⁄s
(
skb
->len);

1261 
	`mem˝y
(
	`skb_push
(
skb
, 2), &
Àn
, 2);

1262 
	`mem˝y
(
	`skb_push
(
skb
, 
ETH_ALEN
), 
ßddr
, ETH_ALEN);

1263 
	`mem˝y
(
	`skb_push
(
skb
, 
ETH_ALEN
), 
daddr
, ETH_ALEN);

1268 i‡((
¢≠
->
oui
[2] =0Ë&& (
	`¡ohs
(¢≠->
¥Ÿocﬁ
Ë=
ETH_P_8021Q
))

1279 
u16
 
vœn_¢≠
;

1281 i‡(
∑ylﬂd_Àngth
 < 
UF_VLAN_LLC_HEADER_SIZE
) {

1282 
	`unifi_w¨nög
(
¥iv
, "VLAN SNAP hódîÅoÿsh‹t: %d byãs\n", 
∑ylﬂd_Àngth
);

1286 i‡(
	`memcmp
(
∑ylﬂd
 + 10, 
vœn_ö√r_¢≠
, 6)) {

1287 
	`unifi_w¨nög
(
¥iv
, "VLAN malformatted SNAP header.\n");

1291 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "VLAN SNAP: %02x-%02x\n", 
∑ylﬂd
[8],Öayload[9]);

1292 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "VLANÜí: %d\n", 
∑ylﬂd_Àngth
);

1296 
vœn_¢≠
 = *((
u16
*)(
∑ylﬂd
 + 8));

1299 
ëh
->
h_¥Ÿo
 = 
¢≠
->
¥Ÿocﬁ
;

1301 
	`mem˝y
(
ëh
->
h_de°
, 
daddr
, 
ETH_ALEN
);

1302 
	`mem˝y
(
ëh
->
h_sour˚
, 
ßddr
, 
ETH_ALEN
);

1303 *(
u16
*)(
ëh
 + 1Ë
vœn_¢≠
;

1308 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "SNAP+RFC1042Üí: %d\n", 
∑ylﬂd_Àngth
);

1311 
	`skb_puŒ
(
skb
, (
Œc_¢≠_hdr_t
));

1317 
ëh
 = (
ëhhdr
 *)
	`skb_push
(
skb
, 
ETH_HLEN
);

1318 
	`mem˝y
(
ëh
->
h_de°
, 
daddr
, 
ETH_ALEN
);

1319 
	`mem˝y
(
ëh
->
h_sour˚
, 
ßddr
, 
ETH_ALEN
);

1321 
ëh
->
h_¥Ÿo
 = 
¢≠
->
¥Ÿocﬁ
;

1323 
u16
 
Àn
;

1326 i‡(
hódroom
 < (2 * 
ETH_ALEN
 + 2)) {

1327 
	`unifi_w¨nög
(
¥iv
, "headroomÇotávailableÅo skb_pushÉther header\n");

1331 
Àn
 = 
	`ht⁄s
(
skb
->len);

1332 
	`mem˝y
(
	`skb_push
(
skb
, 2), &
Àn
, 2);

1333 
	`mem˝y
(
	`skb_push
(
skb
, 
ETH_ALEN
), 
ßddr
, ETH_ALEN);

1334 
	`mem˝y
(
	`skb_push
(
skb
, 
ETH_ALEN
), 
daddr
, ETH_ALEN);

1340 
	}
}

1343 
C§WifiRouãrCålP‹tA˘i⁄
 
	$vîify_p‹t
(
unifi_¥iv_t
 *
¥iv
, *
addªss
, 
queue
, 
C§Uöt16
 
öãrÁ˚Tag
)

1345 #ifde‡
CSR_NATIVE_LINUX


1346 #ifde‡
CSR_SUPPORT_WEXT


1347 i‡(
queue
 =
UF_CONTROLLED_PORT_Q
) {

1348  
¥iv
->
wext_c⁄f
.
block_c⁄åﬁÀd_p‹t
;

1350  
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_OPEN
;

1353  
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_OPEN
;

1356  
	`uf_sme_p‹t_°©e
(
¥iv
, 
addªss
, 
queue
, 
öãrÁ˚Tag
);

1358 
	}
}

1386 
	$¥ï¨e_™d_add_machódî
(
unifi_¥iv_t
 *
¥iv
, 
sk_buff
 *
skb
, sk_buf‡*
√wSkb
,

1387 
CSR_PRIORITY
 
¥i‹ôy
,

1388 
bulk_d©a_∑øm_t
 *
bulkd©a
,

1389 
C§Uöt16
 
öãrÁ˚Tag
,

1390 c⁄° 
C§Uöt8
 *
daddr
,

1391 c⁄° 
C§Uöt8
 *
ßddr
,

1392 
C§Boﬁ
 
¥Ÿe˘i⁄
)

1394 
C§Uöt16
 
fc
 = 0;

1395 
C§Uöt8
 
qc
 = 0;

1396 
C§Uöt8
 
macHódîLígthInByãs
 = 
MAC_HEADER_SIZE
, *
bufPå
 = 
NULL
;

1397 
bulk_d©a_∑øm_t
 
d©a_±rs
;

1398 
C§Resu…
 
c§Resu…
;

1399 
hódroom
 =0;

1400 
C§Uöt8
 
dúe˘i⁄
 = 0;

1401 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

1402 
C§Uöt8
 *
addªssO√
;

1403 
C§Boﬁ
 
bQosNuŒ
 = 
Ál£
;

1405 i‡(
skb
 =
NULL
) {

1406 
	`unifi_îr‹
(
¥iv
,"prepare_and_add_macheader: Invalid SKBÑeference\n");

1411 i‡(
¥i‹ôy
 !
CSR_CONTENTION
) {

1413 i‡(
¥i‹ôy
 =
CSR_MANAGEMENT
) {

1414 
fc
 |
	`˝u_to_À16
(
IEEE802_11_FC_TYPE_DATA
);

1417 
macHódîLígthInByãs
 +
QOS_CONTROL_HEADER_SIZE
;

1419 i‡(
skb
->
Àn
) {

1421 
fc
 |
	`˝u_to_À16
(
IEEE802_11_FC_TYPE_QOS_DATA
);

1423 
fc
 |
	`˝u_to_À16
(
IEEE802_11_FC_TYPE_QOS_NULL
);

1424 
bQosNuŒ
 = 
åue
;

1428 if(
skb
->
Àn
 == 0) {

1429 
fc
 |
	`˝u_to_À16
(
IEEE802_11_FC_TYPE_NULL
);

1431 
fc
 |
	`˝u_to_À16
(
IEEE802_11_FC_TYPE_DATA
);

1435 
öãrÁ˚Priv
->
öãrÁ˚Mode
)

1437 
CSR_WIFI_ROUTER_CTRL_MODE_STA
:

1438 
CSR_WIFI_ROUTER_CTRL_MODE_P2PCLI
:

1439 
dúe˘i⁄
 = 2;

1440 
fc
 |
	`˝u_to_À16
(
IEEE802_11_FC_TO_DS_MASK
);

1442 
CSR_WIFI_ROUTER_CTRL_MODE_IBSS
:

1443 
dúe˘i⁄
 = 0;

1445 
CSR_WIFI_ROUTER_CTRL_MODE_AP
:

1446 
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
:

1447 
dúe˘i⁄
 = 1;

1448 
fc
 |
	`˝u_to_À16
(
IEEE802_11_FC_FROM_DS_MASK
);

1450 
CSR_WIFI_ROUTER_CTRL_MODE_AMP
:

1451 i‡(
¥i‹ôy
 =
CSR_MANAGEMENT
 ) {

1453 
dúe˘i⁄
 = 2;

1454 
fc
 |
	`˝u_to_À16
(
IEEE802_11_FC_TO_DS_MASK
);

1457 
dúe˘i⁄
 = 3;

1458 
fc
 |
	`˝u_to_À16
(
IEEE802_11_FC_TO_DS_MASK
 | 
IEEE802_11_FC_FROM_DS_MASK
);

1459 
macHódîLígthInByãs
 += 6;

1463 
	`unifi_w¨nög
(
¥iv
, "prepare_and_add_macheader: Unknown mode %d\n",

1464 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

1471 if(
¥Ÿe˘i⁄
) {

1472 
fc
 |
	`˝u_to_À16
(
IEEE802_11_FC_PROTECTED_MASK
);

1476 
hódroom
 = 
	`skb_hódroom
(
skb
);

1478 i‡(
hódroom
 < 
macHódîLígthInByãs
) {

1479 
	`unifi_åa˚
(
¥iv
, 
UDBG5
,

1481 
macHódîLígthInByãs
);

1483 
c§Resu…
 = 
	`unifi_√t_d©a_mÆloc
(
¥iv
, &
d©a_±rs
.
d
[0], 
skb
->
Àn
 + 
macHódîLígthInByãs
);

1485 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

1486 
	`unifi_îr‹
(
¥iv
, " faûedÅÿÆloˇãÑeque°_d©a. i¿%†func\n", 
__FUNCTION__
);

1489 
√wSkb
 = (
sk_buff
 *)(
d©a_±rs
.
d
[0].
os_√t_buf_±r
);

1490 
√wSkb
->
Àn
 = 
skb
->À¿+ 
macHódîLígthInByãs
;

1492 
	`mem˝y
((*)
d©a_±rs
.
d
[0].
os_d©a_±r
 + 
macHódîLígthInByãs
,

1493 
skb
->
d©a
, skb->
Àn
);

1495 
bulkd©a
->
d
[0].
os_d©a_±r
 = 
√wSkb
->
d©a
;

1496 
bulkd©a
->
d
[0].
os_√t_buf_±r
 = (*)
√wSkb
;

1497 
bulkd©a
->
d
[0].
d©a_Àngth
 = 
√wSkb
->
Àn
;

1499 
bufPå
 = (
C§Uöt8
*)
d©a_±rs
.
d
[0].
os_d©a_±r
;

1502 
	`k‰ì_skb
(
skb
);

1506 
bufPå
 = (
C§Uöt8
*)
	`skb_push
(
skb
, 
macHódîLígthInByãs
);

1507 
bulkd©a
->
d
[0].
os_d©a_±r
 = 
skb
->
d©a
;

1508 
bulkd©a
->
d
[0].
os_√t_buf_±r
 = (*)
skb
;

1509 
bulkd©a
->
d
[0].
d©a_Àngth
 = 
skb
->
Àn
;

1514 
	`mem£t
(
bufPå
, 0, 
macHódîLígthInByãs
);

1517 
	`mem˝y
(
bufPå
, &
fc
, (fc));

1518 
bufPå
 +(
fc
);

1519 
macHódîLígthInByãs
 -(
fc
);

1522 
bufPå
 += 2;

1523 
macHódîLígthInByãs
 -= 2;

1525 
dúe˘i⁄
)

1530 
	`mem˝y
(
bufPå
, 
daddr
, 
ETH_ALEN
);

1531 
bufPå
 +
ETH_ALEN
;

1532 
macHódîLígthInByãs
 -
ETH_ALEN
;

1535 
	`mem˝y
(
bufPå
, 
ßddr
, 
ETH_ALEN
);

1536 
bufPå
 +
ETH_ALEN
;

1537 
macHódîLígthInByãs
 -
ETH_ALEN
;

1540 
	`mem˝y
(
bufPå
, &
öãrÁ˚Priv
->
bssid
, 
ETH_ALEN
);

1541 
bufPå
 +
ETH_ALEN
;

1542 
macHódîLígthInByãs
 -
ETH_ALEN
;

1546 
	`mem˝y
(
bufPå
, 
daddr
, 
ETH_ALEN
);

1547 
bufPå
 +
ETH_ALEN
;

1548 
macHódîLígthInByãs
 -
ETH_ALEN
;

1550 
	`mem˝y
(
bufPå
, &
öãrÁ˚Priv
->
bssid
, 
ETH_ALEN
);

1551 
bufPå
 +
ETH_ALEN
;

1552 
macHódîLígthInByãs
 -
ETH_ALEN
;

1555 
	`mem˝y
(
bufPå
, 
ßddr
, 
ETH_ALEN
);

1556 
bufPå
 +
ETH_ALEN
;

1557 
macHódîLígthInByãs
 -
ETH_ALEN
;

1561 
	`mem˝y
(
bufPå
, &
öãrÁ˚Priv
->
bssid
, 
ETH_ALEN
);

1562 
bufPå
 +
ETH_ALEN
;

1563 
macHódîLígthInByãs
 -
ETH_ALEN
;

1566 
	`mem˝y
(
bufPå
, 
ßddr
, 
ETH_ALEN
);

1567 
bufPå
 +
ETH_ALEN
;

1568 
macHódîLígthInByãs
 -
ETH_ALEN
;

1571 
	`mem˝y
(
bufPå
, 
daddr
, 
ETH_ALEN
);

1572 
bufPå
 +
ETH_ALEN
;

1573 
macHódîLígthInByãs
 -
ETH_ALEN
;

1576 
	`mem˝y
(
bufPå
, &
öãrÁ˚Priv
->
bssid
, 
ETH_ALEN
);

1577 
bufPå
 +
ETH_ALEN
;

1578 
macHódîLígthInByãs
 -
ETH_ALEN
;

1581 
	`mem˝y
(
bufPå
, 
ßddr
, 
ETH_ALEN
);

1582 
bufPå
 +
ETH_ALEN
;

1583 
macHódîLígthInByãs
 -
ETH_ALEN
;

1586 
	`mem˝y
(
bufPå
, 
daddr
, 
ETH_ALEN
);

1587 
bufPå
 +
ETH_ALEN
;

1588 
macHódîLígthInByãs
 -
ETH_ALEN
;

1591 
	`unifi_îr‹
(
¥iv
,"Unknow¿dúe˘i⁄ =%d : NŸ h™dÀdÇow\n",
dúe˘i⁄
);

1595 
bufPå
 += 2;

1596 
macHódîLígthInByãs
 -= 2;

1598 i‡(3 =
dúe˘i⁄
) {

1600 
	`mem˝y
(
bufPå
, 
ßddr
, 
ETH_ALEN
);

1601 
bufPå
 +
ETH_ALEN
;

1602 
macHódîLígthInByãs
 -
ETH_ALEN
;

1606 i‡((
¥i‹ôy
 !
CSR_CONTENTION
Ë&& (
macHódîLígthInByãs
 >
QOS_CONTROL_HEADER_SIZE
)) {

1608 i‡(
¥i‹ôy
 > 7) {

1609 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "d©®∑ckë†¥i‹ôy i†m‹êth™ 7,Öri‹ôy = %x\n", 
¥i‹ôy
);

1610 
qc
 |= 7;

1612 
qc
 |
¥i‹ôy
;

1619 
addªssO√
 = 
bufPå
- 
ADDRESS_ONE_OFFSET
;

1621 i‡(
addªssO√
[0] & 0x1) {

1623 
qc
 |= 1 << 5;

1626 if(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_STA
 ||

1627 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_IBSS
 ||

1628 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PCLI
) {

1631 if(
bQosNuŒ
) {

1632 
qc
 |= 1 << 4;

1637 
bufPå
[0] = 
qc
;

1639 
bufPå
[1] = 0;

1640 
macHódîLígthInByãs
 -
QOS_CONTROL_HEADER_SIZE
;

1642 i‡(
macHódîLígthInByãs
) {

1643 
	`unifi_w¨nög
(
¥iv
, " Mac headerÇotáppendedÖroperly\n");

1647 
	}
}

1667 
	$£nd_ma_pkt_ªque°
(
unifi_¥iv_t
 *
¥iv
, 
sk_buff
 *
skb
, c⁄° 
ëhhdr
 *
ehdr
, 
CSR_PRIORITY
 
¥i‹ôy
)

1669 
r
;

1670 
C§Uöt16
 
i
;

1671 
C§Boﬁ
 
ópﬁSt‹e
 = 
FALSE
;

1672 
sk_buff
 *
√wSkb
 = 
NULL
;

1673 
bulk_d©a_∑øm_t
 
bulkd©a
;

1674 c⁄° 
¥Ÿo
 = 
	`¡ohs
(
ehdr
->
h_¥Ÿo
);

1675 
C§Uöt16
 
öãrÁ˚Tag
;

1676 
C§WifiMacAddªss
 
≥îAddªss
;

1677 
CSR_TRANSMISSION_CONTROL
 
å™smissi⁄C⁄åﬁ
 = 
CSR_NO_CONFIRM_REQUIRED
;

1678 
C§I¡8
 
¥Ÿe˘i⁄
;

1679 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
NULL
;

1680 
CSR_RATE
 
TønsmôR©e
 = (CSR_RATE)0;

1682 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "entering send_ma_pkt_request\n");

1685 
i
 = 0; i < 
CSR_WIFI_NUM_INTERFACES
; i++) {

1686 i‡(!
	`memcmp
(
¥iv
->
√tdev
[
i
]->
dev_addr
, 
ehdr
->
h_sour˚
, 
ETH_ALEN
)) {

1687 
öãrÁ˚Tag
 = 
i
;

1688 
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

1693 i‡(
öãrÁ˚Priv
 =
NULL
) {

1695 
öãrÁ˚Tag
 = 0;

1696 
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

1697 
	`unifi_w¨nög
(
¥iv
, "MacáddressÇot matching ... debuggingÇeeded\n");

1698 
öãrÁ˚Priv
->
°©s
.
tx_dr›≥d
++;

1699 
	`k‰ì_skb
(
skb
);

1704 i‡(
	`skb_add_Œc_¢≠
(
¥iv
->
√tdev
[
öãrÁ˚Tag
], 
skb
, 
¥Ÿo
) != 0) {

1706 
	`unifi_îr‹
(
¥iv
, "skb_add_llc_snap failed.\n");

1707 
	`k‰ì_skb
(
skb
);

1711 
bulkd©a
.
d
[0].
os_d©a_±r
 = 
skb
->
d©a
;

1712 
bulkd©a
.
d
[0].
os_√t_buf_±r
 = (*)
skb
;

1713 
bulkd©a
.
d
[0].
√t_buf_Àngth
 = bulkd©a.d[0].
d©a_Àngth
 = 
skb
->
Àn
;

1714 
bulkd©a
.
d
[1].
os_d©a_±r
 = 
NULL
;

1715 
bulkd©a
.
d
[1].
os_√t_buf_±r
 = 
NULL
;

1716 
bulkd©a
.
d
[1].
√t_buf_Àngth
 = bulkd©a.d[1].
d©a_Àngth
 = 0;

1718 #ifde‡
CSR_SUPPORT_SME


1720 i‡((
öãrÁ˚Priv
->
öãrÁ˚Mode
 !
CSR_WIFI_ROUTER_CTRL_MODE_AP
) &&

1721 (
öãrÁ˚Priv
->
öãrÁ˚Mode
 !
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
)) {

1722 
	`unifi_è_ßm∂e
(
¥iv
->
ˇrd
, 
CSR_WIFI_ROUTER_CTRL_PROTOCOL_DIRECTION_TX
,

1723 &
bulkd©a
.
d
[0], 
ehdr
->
h_sour˚
,

1724 
¥iv
->
√tdev
[
öãrÁ˚Tag
]->
dev_addr
,

1725 
	`jiffõs_to_m£cs
(
jiffõs
),

1730 i‡((
¥Ÿo
 =
ETH_P_PAE
)

1731 #ifde‡
CSR_WIFI_SECURITY_WAPI_ENABLE


1732 || (
¥Ÿo
 =
ETH_P_WAI
)

1737 i‡(0 =
	`uf_vîify_m4
(
¥iv
, 
bulkd©a
.
d
[0].
os_d©a_±r
, bulkd©a.d[0].
d©a_Àngth
)) {

1738 
ópﬁSt‹e
 = 
TRUE
;

1742 #ifde‡
CSR_WIFI_SECURITY_WAPI_ENABLE


1743 i‡(
¥Ÿo
 =
ETH_P_WAI
)

1745 
¥Ÿe˘i⁄
 = 0;

1750 #ifde‡
CSR_SUPPORT_SME


1751 i‡((
¥Ÿe˘i⁄
 = 
	`uf_gë_¥Ÿe˘i⁄_bô_‰om_öãrÁ˚mode
(
¥iv
, 
öãrÁ˚Tag
, 
ehdr
->
h_de°
)) < 0) {

1752 
	`unifi_w¨nög
(
¥iv
, "unicastáddress, but destinationÇot in stationÑecord database\n");

1753 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
.
d
[0]);

1757 
¥Ÿe˘i⁄
 = 0;

1759 #ifde‡
CSR_WIFI_SECURITY_WAPI_ENABLE


1764 i‡(
	`¥ï¨e_™d_add_machódî
(
¥iv
, 
skb
, 
√wSkb
, 
¥i‹ôy
, &
bulkd©a
, 
öãrÁ˚Tag
, 
ehdr
->
h_de°
,Éhdr->
h_sour˚
, 
¥Ÿe˘i⁄
)) {

1765 
	`unifi_îr‹
(
¥iv
, "failedÅo create MAC header\n");

1766 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
.
d
[0]);

1774 
	`mem˝y
(
≥îAddªss
.
a
, ((
C§Uöt8
 *Ë
bulkd©a
.
d
[0].
os_d©a_±r
Ë+ 4, 
ETH_ALEN
);

1776 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "RA[0]=%x, RA[1]=%x, RA[2]=%x, RA[3]=%x, RA[4]=%x, RA[5]=%x\n",

1777 
≥îAddªss
.
a
[0],peerAddress.a[1],ÖeerAddress.a[2],ÖeerAddress.a[3],

1778 
≥îAddªss
.
a
[4],peerAddress.a[5]);

1781 i‡((
¥Ÿo
 =
ETH_P_PAE
)

1782 #ifde‡
CSR_WIFI_SECURITY_WAPI_ENABLE


1783 || (
¥Ÿo
 =
ETH_P_WAI
)

1787 
CSR_SIGNAL
 
sig«l
;

1788 
CSR_MA_PACKET_REQUEST
 *
ªq
 = &
sig«l
.
u
.
MaPackëReque°
;

1791 
	`mem£t
(&
sig«l
, 0, (
CSR_SIGNAL
));

1794 
sig«l
.
Sig«lPrimôiveHódî
.
Sig«lId
 = 
CSR_MA_PACKET_REQUEST_ID
;

1795 
sig«l
.
Sig«lPrimôiveHódî
.
Re˚ivîPro˚ssId
 = 0;

1796 
sig«l
.
Sig«lPrimôiveHódî
.
SídîPro˚ssId
 = 
¥iv
->
√tdev_˛õ¡
->
£ndî_id
;

1798 
å™smissi⁄C⁄åﬁ
 = 
ªq
->
Tønsmissi⁄C⁄åﬁ
 = 0;

1799 #ifde‡
CSR_SUPPORT_SME


1800 i‡(
ópﬁSt‹e
)

1802 
√tI¡îÁ˚_¥iv_t
 *
√çriv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
¥iv
->
√tdev
[
öãrÁ˚Tag
]);

1806 
ªq
->
Pri‹ôy
 = 
¥i‹ôy
;

1807 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "Tx Fømêwôh Pri‹ôy: %x\n", 
ªq
->
Pri‹ôy
);

1810 
ªq
->
TønsmôR©e
 = 0;

1811 
ªq
->
Ho°Tag
 = 
CSR_WIFI_EAPOL_M4_HOST_TAG
;

1813 
	`mem˝y
(
ªq
->
Ra
.
x
, ((
C§Uöt8
 *Ë
bulkd©a
.
d
[0].
os_d©a_±r
Ë+ 4, 
ETH_ALEN
);

1815 
	`•ö_lock
(&
¥iv
->
m4_lock
);

1817 
öãrÁ˚Priv
->
m4_sig«l
 = 
sig«l
;

1818 
öãrÁ˚Priv
->
m4_bulk_d©a
.
√t_buf_Àngth
 = 
bulkd©a
.
d
[0].net_buf_length;

1819 
öãrÁ˚Priv
->
m4_bulk_d©a
.
d©a_Àngth
 = 
bulkd©a
.
d
[0].data_length;

1820 
öãrÁ˚Priv
->
m4_bulk_d©a
.
os_d©a_±r
 = 
bulkd©a
.
d
[0].os_data_ptr;

1821 
öãrÁ˚Priv
->
m4_bulk_d©a
.
os_√t_buf_±r
 = 
bulkd©a
.
d
[0].os_net_buf_ptr;

1822 
	`•ö_u∆ock
(&
¥iv
->
m4_lock
);

1828 
	`queue_w‹k
(
¥iv
->
unifi_w‹kqueue
, &
√çriv
->
£nd_m4_ªady_èsk
);

1835 #i‡(
	`deföed
(
CSR_WIFI_SECURITY_WAPI_ENABLE
Ë&& deföed(
CSR_WIFI_SECURITY_WAPI_SW_ENCRYPTION
))

1836 i‡((
CSR_WIFI_ROUTER_CTRL_MODE_STA
 =
öãrÁ˚Priv
->
öãrÁ˚Mode
) && \

1837 (
¥iv
->
w≠i_uniˇ°_fûãr
) && \

1838 (
¥Ÿo
 !
ETH_P_PAE
) && \

1839 (
¥Ÿo
 !
ETH_P_WAI
) && \

1840 (
skb
->
Àn
 > 0))

1842 
CSR_SIGNAL
 
sig«l
;

1843 
CSR_MA_PACKET_REQUEST
 *
ªq
 = &
sig«l
.
u
.
MaPackëReque°
;

1844 
√tI¡îÁ˚_¥iv_t
 *
√çriv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
¥iv
->
√tdev
[
öãrÁ˚Tag
]);

1846 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "send_ma_pkt_request() - WAPI unicast dataÖacket when USKID = 1 \n");

1849 
	`mem£t
(&
sig«l
, 0, (
CSR_SIGNAL
));

1851 
sig«l
.
Sig«lPrimôiveHódî
.
Sig«lId
 = 
CSR_MA_PACKET_REQUEST_ID
;

1852 
sig«l
.
Sig«lPrimôiveHódî
.
Re˚ivîPro˚ssId
 = 0;

1853 
sig«l
.
Sig«lPrimôiveHódî
.
SídîPro˚ssId
 = 
¥iv
->
√tdev_˛õ¡
->
£ndî_id
;

1856 
ªq
->
Tønsmissi⁄C⁄åﬁ
 = 0;

1857 
ªq
->
Pri‹ôy
 = 
¥i‹ôy
;

1858 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "Tx Fømêwôh Pri‹ôy: %x\n", 
ªq
->
Pri‹ôy
);

1859 
ªq
->
TønsmôR©e
 = (
CSR_RATE
) 0;

1860 
ªq
->
Ho°Tag
 = 0xffffffff;

1862 
	`mem˝y
(
ªq
->
Ra
.
x
, ((
C§Uöt8
 *Ë
bulkd©a
.
d
[0].
os_d©a_±r
Ë+ 4, 
ETH_ALEN
);

1865 
	`•ö_lock
(&
¥iv
->
w≠i_lock
);

1866 
öãrÁ˚Priv
->
w≠i_uniˇ°_ma_pkt_sig
 = 
sig«l
;

1867 
öãrÁ˚Priv
->
w≠i_uniˇ°_bulk_d©a
.
√t_buf_Àngth
 = 
bulkd©a
.
d
[0].net_buf_length;

1868 
öãrÁ˚Priv
->
w≠i_uniˇ°_bulk_d©a
.
d©a_Àngth
 = 
bulkd©a
.
d
[0].data_length;

1869 
öãrÁ˚Priv
->
w≠i_uniˇ°_bulk_d©a
.
os_d©a_±r
 = 
bulkd©a
.
d
[0].os_data_ptr;

1870 
öãrÁ˚Priv
->
w≠i_uniˇ°_bulk_d©a
.
os_√t_buf_±r
 = 
bulkd©a
.
d
[0].os_net_buf_ptr;

1871 
	`•ö_u∆ock
(&
¥iv
->
w≠i_lock
);

1877 
	`queue_w‹k
(
¥iv
->
unifi_w‹kqueue
, &
√çriv
->
£nd_pkt_to_í¸y±
);

1883 if(
¥iv
->
cm™rTe°Mode
)

1885 
TønsmôR©e
 = 
¥iv
->
cm™rTe°ModeTønsmôR©e
;

1886 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "send_ma_pkt_request: cmanrTestModeTransmitRate = %d TransmitRate=%d\n",

1887 
¥iv
->
cm™rTe°ModeTønsmôR©e
,

1888 
TønsmôR©e


1894 
r
 = 
	`uf_¥o˚ss_ma_∑ckë_ªq
(
¥iv
,

1895 
≥îAddªss
.
a
,

1897 
öãrÁ˚Tag
,

1898 
å™smissi⁄C⁄åﬁ
,

1899 
TønsmôR©e
,

1900 
¥i‹ôy
,

1901 
¥iv
->
√tdev_˛õ¡
->
£ndî_id
,

1902 &
bulkd©a
);

1904 i‡(
r
) {

1905 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "(HIP vÆid©i⁄ faûuªË∏%x\n", 
r
);

1906 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
.
d
[0]);

1910 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "Àavög síd_ma_pkt_ªque°, UNITDATAÑesu… codê%d\n", 
r
);

1912  
r
;

1913 
	}
}

1936 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,32)

1937 
	g√tdev_tx_t


1941 
	$uf_√t_xmô
(
sk_buff
 *
skb
, 
√t_devi˚
 *
dev
)

1943 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

1944 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

1945 
ëhhdr
 
ehdr
;

1946 
¥Ÿo
, 
p‹t
;

1947 
ªsu…
;

1948 
tx_sig«l_h™dÀr
 
tx_h™dÀr
;

1949 
CSR_PRIORITY
 
¥i‹ôy
;

1950 #i‡!
	`deföed
 (
CONFIG_NET_SCHED
Ë|| (
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,28))

1951 
C§WifiRouãrCålP‹tA˘i⁄
 
p‹t_a˘i⁄
;

1954 
	`func_íãr
();

1956 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "unifi_√t_xmô: skb = %x\n", 
skb
);

1958 
	`mem˝y
(&
ehdr
, 
skb
->
d©a
, 
ETH_HLEN
);

1959 
¥Ÿo
 = 
	`¡ohs
(
ehdr
.
h_¥Ÿo
);

1960 
¥i‹ôy
 = 
	`gë_∑ckë_¥i‹ôy
(
¥iv
, 
skb
, &
ehdr
, 
öãrÁ˚Priv
);

1963 
tx_h™dÀr
 = 
£nd_ma_pkt_ªque°
;

1966 i‡((
¥Ÿo
 !
ETH_P_PAE
)

1967 #ifde‡
CSR_WIFI_SECURITY_WAPI_ENABLE


1968 && (
¥Ÿo
 !
ETH_P_WAI
)

1971 
p‹t
 = 
UF_CONTROLLED_PORT_Q
;

1974 
p‹t
 = 
UF_UNCONTROLLED_PORT_Q
;

1977 #i‡
	`deföed
 (
CONFIG_NET_SCHED
Ë&& (
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,28))

1979 
	`skb_puŒ
(
skb
, 
ETH_HLEN
);

1980 
ªsu…
 = 
	`tx_h™dÀr
(
¥iv
, 
skb
, &
ehdr
, 
¥i‹ôy
);

1983 
p‹t_a˘i⁄
 = 
	`vîify_p‹t
(
¥iv


1984 , (((
CSR_WIFI_ROUTER_CTRL_MODE_STA
 =
öãrÁ˚Priv
->
öãrÁ˚Mode
)||(
CSR_WIFI_ROUTER_CTRL_MODE_P2PCLI
=öãrÁ˚Priv->öãrÁ˚Mode))? i¡îÁ˚Priv->
bssid
.
a
: 
ehdr
.
h_de°
)

1985 , 
p‹t


1986 , 
öãrÁ˚Priv
->
I¡îÁ˚Tag
);

1988 i‡(
p‹t_a˘i⁄
 =
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_OPEN
) {

1989 
	`unifi_åa˚
(
¥iv
, 
UDBG5
,

1991 
p‹t
 ? "" : "un");

1993 
	`skb_puŒ
(
skb
, 
ETH_HLEN
);

1994 
ªsu…
 = 
	`tx_h™dÀr
(
¥iv
, 
skb
, &
ehdr
, 
¥i‹ôy
);

1998 
	`unifi_åa˚
(
¥iv
, 
UDBG2
,

2000 
p‹t
 ? "" : "un", 
p‹t_a˘i⁄
==
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_CLOSED_BLOCK
 ? "blocked" : "closed");

2001 
öãrÁ˚Priv
->
°©s
.
tx_dr›≥d
++;

2002 
	`k‰ì_skb
(
skb
);

2004 
	`func_exô
();

2005  
NETDEV_TX_OK
;

2009 i‡(
ªsu…
 =
NETDEV_TX_OK
) {

2010 #i‡(
	`deföed
(
CSR_WIFI_SECURITY_WAPI_ENABLE
Ë&& deföed(
CSR_WIFI_SECURITY_WAPI_SW_ENCRYPTION
))

2012 i‡(!((
CSR_WIFI_ROUTER_CTRL_MODE_STA
 =
öãrÁ˚Priv
->
öãrÁ˚Mode
) &&

2013 (
¥iv
->
w≠i_uniˇ°_fûãr
 == 1)))

2015 
dev
->
å™s_°¨t
 = 
jiffõs
;

2019 
öãrÁ˚Priv
->
°©s
.
tx_∑ckës
++;

2021 
öãrÁ˚Priv
->
°©s
.
tx_byãs
 +
skb
->
Àn
;

2025 
dev
->
å™s_°¨t
 = 
jiffõs
;

2031 
öãrÁ˚Priv
->
°©s
.
tx_∑ckës
++;

2033 
öãrÁ˚Priv
->
°©s
.
tx_byãs
 +
skb
->
Àn
;

2035 } i‡(
ªsu…
 < 0) {

2041 
öãrÁ˚Priv
->
°©s
.
tx_dr›≥d
++;

2042 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "unifi_√t_xmô: (Packë Dr›), dr›≥d cou¡ = %x\n", 
öãrÁ˚Priv
->
°©s
.
tx_dr›≥d
);

2043 
ªsu…
 = 
NETDEV_TX_OK
;

2048 
	`func_exô
();

2049  
ªsu…
;

2050 
	}
}

2072 
	$unifi_∑u£_xmô
(*
o•riv
, 
unifi_TøfficQueue
 
queue
)

2074 
unifi_¥iv_t
 *
¥iv
 = 
o•riv
;

2075 
i
;

2077 
	`func_íãr
();

2078 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "St›pög queuê%d\n", 
queue
);

2080 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,28)

2081 
i
=0;i<
CSR_WIFI_NUM_INTERFACES
;i++)

2083 i‡(
	`√tif_ru¬ög
(
¥iv
->
√tdev
[
i
]))

2085 
	`√tif_°›_subqueue
(
¥iv
->
√tdev
[
i
], (
u16
)
queue
);

2089 #ifde‡
ALLOW_Q_PAUSE


2090 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "StoppingÇetif\n");

2092 
i
=0;i<
CSR_WIFI_NUM_INTERFACES
;i++)

2094 i‡(
	`√tif_ru¬ög
(
¥iv
->
√tdev
[
i
])) {

2095 
	`UF_NETIF_TX_STOP_ALL_QUEUES
(
¥iv
->
√tdev
[
i
]);

2099 i‡(
	`√t_is_tx_q_∑u£d
(
¥iv
, 
queue
)) {

2100 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "Queueálready stopped\n");

2103 
	`√t_tx_q_∑u£
(
¥iv
, 
queue
);

2107 #ifde‡
CSR_SUPPORT_SME


2108 if(
queue
<=3) {

2109 
	`rouãrSèπBuf„rög
(
¥iv
,
queue
);

2110 
	`unifi_åa˚
(
¥iv
,
UDBG2
,"Sèπ buf„rög %d\n", 
queue
);

2112 
	`rouãrSèπBuf„rög
(
¥iv
,0);

2113 
	`unifi_îr‹
(
¥iv
, "Sèπ buf„rög %d deÁu…ögÅÿ0\n", 
queue
);

2116 
	`func_exô
();

2118 
	}
}

2121 
	$unifi_ª°¨t_xmô
(*
o•riv
, 
unifi_TøfficQueue
 
queue
)

2123 
unifi_¥iv_t
 *
¥iv
 = 
o•riv
;

2124 
i
=0;

2126 
	`func_íãr
();

2127 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "Wakög queuê%d\n", 
queue
);

2129 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,28)

2130 
i
=0;i<
CSR_WIFI_NUM_INTERFACES
;i++)

2132 i‡(
	`√tif_ru¬ög
(
¥iv
->
√tdev
[
i
]))

2134 
	`√tif_wake_subqueue
(
¥iv
->
√tdev
[
i
], (
u16
)
queue
);

2138 #ifde‡
ALLOW_Q_PAUSE


2141 
i
=0;i<
CSR_WIFI_NUM_INTERFACES
;i++)

2143 i‡(
	`√tif_ru¬ög
(
¥iv
->
√tdev
[
i
])) {

2144 
	`UF_NETIF_TX_WAKE_ALL_QUEUES
(
¥iv
->
√tdev
[
i
]);

2148 i‡(!(
	`√t_is_tx_q_∑u£d
(
¥iv
, 
queue
))) {

2149 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "QueueálreadyÑunning\n");

2150 
	`func_exô
();

2153 
	`√t_tx_q_u≈au£
(
¥iv
, 
queue
);

2157 #ifde‡
CSR_SUPPORT_SME


2158 if(
queue
 <=3) {

2159 
	`rouãrSt›Buf„rög
(
¥iv
,
queue
);

2160 
	`uf_£nd_buf„ªd_‰ames
(
¥iv
,
queue
);

2162 
	`rouãrSt›Buf„rög
(
¥iv
,0);

2163 
	`uf_£nd_buf„ªd_‰ames
(
¥iv
,0);

2166 
	`func_exô
();

2167 
	}
}

2169 #ifde‡
CSR_WIFI_NAPI_ENABLE


2170 
«pi_pﬁl
(
«pi_°ru˘
 *
«pi
, 
budgë
);

2172 
	$«pi_öô
(
√t_devi˚
 *
dev
, 
«pi_°ru˘
 *
«pi
, 
sk_buff_hód
 *
«pi_skb_li°
)

2174 
	`skb_queue_hód_öô
(
«pi_skb_li°
);

2176 
	`√tif_«pi_add
(
dev
, 
«pi
, 
«pi_pﬁl
, 
CSR_WIFI_NAPI_BUDGET
);

2177 
	`«pi_íabÀ
(
«pi
);

2178 
	}
}

2180 
	$«pi_deöô
(
«pi_°ru˘
 *
«pi
, 
sk_buff_hód
 *
«pi_skb_li°
)

2182 
	`«pi_dißbÀ
(
«pi
);

2183 
	`√tif_«pi_dñ
(
«pi
);

2184 
	`skb_queue_purge
(
«pi_skb_li°
);

2185 
	}
}

2187 
	$«pi_scheduÀ_√w_∑ckës
(
unifi_¥iv_t
 *
¥iv
)

2189 
i
;

2191 
i
 = 0; i < 
CSR_WIFI_NUM_INTERFACES
; i++)

2193 
√tI¡îÁ˚_¥iv
 *
ù
 = 
¥iv
->
öãrÁ˚Priv
[
i
];

2194 
«pi_°ru˘
 *
«pi
 = &
ù
->napi;

2195 
sk_buff_hód
 *
«pi_skb_li°
 = &
ù
->napi_skb_list;

2197 i‡(
	`skb_queue_Àn
(
«pi_skb_li°
))

2199 
	`«pi_scheduÀ
(
«pi
);

2200 
	`loˇl_bh_dißbÀ
();

2201 
	`loˇl_bh_íabÀ
();

2204 
	}
}

2206 
	$«pi_íqueue
(
sk_buff_hód
 *
«pi_skb_li°
, 
sk_buff
 *
skb
)

2208 
	`skb_queue_èû
(
«pi_skb_li°
, 
skb
);

2209 
	}
}

2211 
sk_buff
 *
	$«pi_dequeue
(
sk_buff_hód
 *
«pi_skb_li°
)

2213  
	`skb_dequeue
(
«pi_skb_li°
);

2214 
	}
}

2216 
	$«pi_pﬁl
(
«pi_°ru˘
 *
«pi
, 
budgë
)

2218 
w‹k_d⁄e
;

2219 
sk_buff
 *
skb
;

2220 
√tI¡îÁ˚_¥iv
 *
ù
 = 
	`c⁄èöî_of
(
«pi
, netInterface_priv,Çapi);

2222 
w‹k_d⁄e
 = 0; w‹k_d⁄ê< 
budgë
; work_done++)

2224 
skb
 = 
	`«pi_dequeue
(&
ù
->
«pi_skb_li°
);

2226 i‡(!
skb
)

2231 
	`√tif_ª˚ive_skb
(
skb
);

2234 i‡(
w‹k_d⁄e
 < 
budgë
)

2236 
	`«pi_com∂ëe
(
«pi
);

2239  
w‹k_d⁄e
;

2240 
	}
}

2244 
	$ödiˇã_rx_skb
(
unifi_¥iv_t
 *
¥iv
, 
C§Uöt16
 
ifTag
, 
C§Uöt8
* 
d°_a
, C§Uöt8* 
§c_a
, 
sk_buff
 *
skb
, 
CSR_SIGNAL
 *
sig«l
,

2245 
bulk_d©a_∑øm_t
 *
bulkd©a
)

2247 
r
, 
§
 = 0;

2248 
√t_devi˚
 *
dev
;

2250 #ifde‡
CSR_SUPPORT_SME


2251 
Œc_¢≠_hdr_t
 *
¢≠
;

2253 
¢≠
 = (
Œc_¢≠_hdr_t
 *)
skb
->
d©a
;

2255 
§
 = 
	`_idítify_sme_ma_pkt_öd
(
¥iv
,

2256 
¢≠
->
oui
, 
	`¡ohs
(¢≠->
¥Ÿocﬁ
),

2257 
sig«l
,

2258 
bulkd©a
,

2259 
d°_a
, 
§c_a
 );

2267 
r
 = 
	`skb_80211_to_ëhî
(
¥iv
, 
skb
, 
d°_a
, 
§c_a
,

2268 
sig«l
, 
bulkd©a
);

2269 i‡(
r
 == -1) {

2271 
¥iv
->
öãrÁ˚Priv
[
ifTag
]->
°©s
.
rx_îr‹s
++;

2272 
¥iv
->
öãrÁ˚Priv
[
ifTag
]->
°©s
.
rx_‰ame_îr‹s
++;

2273 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
->
d
[0]);

2274 
	`unifi_nŸi˚
(
¥iv
, "indicate_rx_skb: Discard unknown frame.\n");

2275 
	`func_exô
();

2283 i‡(
r
 =1 && 
§
 == 1) {

2284 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
->
d
[0]);

2285 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "indicate_rx_skb: Data givenÅo subscription"

2287 
	`func_exô
();

2291 
dev
 = 
¥iv
->
√tdev
[
ifTag
];

2294 
skb
->
dev
 = dev;

2295 
skb
->
¥Ÿocﬁ
 = 
	`ëh_ty≥_å™s
(skb, 
dev
);

2296 
skb
->
ù_summed
 = 
CHECKSUM_UNNECESSARY
;

2299 i‡(
skb
->
Àn
 > (
dev
->
mtu
 + 
ETH_HLEN
)) {

2302 
	`unifi_îr‹
(
¥iv
, "%s: oversize frame (%d > %d)\n",

2303 
dev
->
«me
,

2304 
skb
->
Àn
, 
dev
->
mtu
 + 
ETH_HLEN
);

2307 
¥iv
->
öãrÁ˚Priv
[
ifTag
]->
°©s
.
rx_îr‹s
++;

2308 
¥iv
->
öãrÁ˚Priv
[
ifTag
]->
°©s
.
rx_Àngth_îr‹s
++;

2309 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
->
d
[0]);

2310 
	`func_exô
();

2315 if(
¥iv
->
cm™rTe°Mode
)

2317 c⁄° 
CSR_MA_PACKET_INDICATION
 *
pkt_öd
 = &
sig«l
->
u
.
MaPackëIndiˇti⁄
;

2318 
¥iv
->
cm™rTe°ModeTønsmôR©e
 = 
pkt_öd
->
Re˚ivedR©e
;

2319 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "ödiˇã_rx_skb: cm™rTe°ModeTønsmôR©e=%d\n",Öriv->
cm™rTe°ModeTønsmôR©e
);

2323 #ifde‡
CSR_WIFI_NAPI_ENABLE


2324 
	`«pi_íqueue
(&
¥iv
->
öãrÁ˚Priv
[
ifTag
]->
«pi_skb_li°
, 
skb
);

2326 #ifde‡
CSR_WIFI_USE_NETIF_RX


2327 
	`√tif_rx
(
skb
);

2329 
	`√tif_rx_ni
(
skb
);

2333 i‡(
dev
 !
NULL
) {

2334 
dev
->
œ°_rx
 = 
jiffõs
;

2338 
¥iv
->
öãrÁ˚Priv
[
ifTag
]->
°©s
.
rx_∑ckës
++;

2339 
¥iv
->
öãrÁ˚Priv
[
ifTag
]->
°©s
.
rx_byãs
 +
bulkd©a
->
d
[0].
d©a_Àngth
;

2341 
	`func_exô
();

2343 
	}
}

2346 
	$uf_¥o˚ss_rx_≥ndög_queue
(
unifi_¥iv_t
 *
¥iv
, 
queue
,

2347 
C§WifiMacAddªss
 
sour˚_addªss
,

2348 
ödiˇã
, 
C§Uöt16
 
öãrÁ˚Tag
)

2350 
rx_buf„ªd_∑ckës_t
 *
rx_q_ôem
;

2351 
li°_hód
 *
rx_li°
;

2352 
li°_hód
 *
n
;

2353 
li°_hód
 *
l_h
;

2354 c⁄° 
C§WifiMacAddªss
 
brﬂdˇ°_addªss
 = {{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}};

2355 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

2357 i‡(
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
) {

2358 
	`unifi_îr‹
(
¥iv
, "uf_process_rx_pending_queue bad interfaceTag\n");

2362 i‡(
queue
 =
UF_CONTROLLED_PORT_Q
) {

2363 
rx_li°
 = &
öãrÁ˚Priv
->
rx_c⁄åﬁÀd_li°
;

2365 
rx_li°
 = &
öãrÁ˚Priv
->
rx_unc⁄åﬁÀd_li°
;

2368 
	`down
(&
¥iv
->
rx_q_£m
);

2369 
	`li°_f‹_óch_ß„
(
l_h
, 
n
, 
rx_li°
) {

2370 
rx_q_ôem
 = 
	`li°_íåy
(
l_h
, 
rx_buf„ªd_∑ckës_t
, 
q
);

2373 i‡(
	`memcmp
(
brﬂdˇ°_addªss
.
a
, 
sour˚_addªss
.a, 
ETH_ALEN
) &&

2374 
	`memcmp
(
rx_q_ôem
->
ß
.
a
, 
sour˚_addªss
.a, 
ETH_ALEN
)) {

2376 
	`unifi_åa˚
(
¥iv
, 
UDBG2
,

2378 
rx_q_ôem
->
ß
.
a
[0],Ñx_q_item->sa.a[1],

2379 
rx_q_ôem
->
ß
.
a
[2],Ñx_q_item->sa.a[3],

2380 
rx_q_ôem
->
ß
.
a
[4],Ñx_q_item->sa.a[5],

2381 
rx_q_ôem
->
skb
, &rx_q_ôem->
bulkd©a
.
d
[0]);

2385 
	`li°_dñ
(
l_h
);

2388 
	`unifi_åa˚
(
¥iv
, 
UDBG2
,

2390 
rx_q_ôem
->
skb
, &rx_q_ôem->
bulkd©a
);

2392 i‡(
ödiˇã
) {

2393 
	`ödiˇã_rx_skb
(
¥iv
, 
öãrÁ˚Tag
, 
rx_q_ôem
->
da
.
a
,Ñx_q_ôem->
ß
.a,Ñx_q_ôem->
skb
, &rx_q_ôem->
sig«l
, &rx_q_ôem->
bulkd©a
);

2395 
öãrÁ˚Priv
->
°©s
.
rx_dr›≥d
++;

2396 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
rx_q_ôem
->
bulkd©a
.
d
[0]);

2400 
	`k‰ì
(
rx_q_ôem
);

2402 
	`up
(&
¥iv
->
rx_q_£m
);

2403 
	}
}

2421 
	$uf_ªsume_d©a_∂™e
(
unifi_¥iv_t
 *
¥iv
, 
queue
,

2422 
C§WifiMacAddªss
 
≥î_addªss
,

2423 
C§Uöt16
 
öãrÁ˚Tag
)

2425 #ifde‡
CSR_SUPPORT_WEXT


2426 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

2429 i‡(
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
) {

2430 
	`unifi_îr‹
(
¥iv
, "uf_resume_data_plane bad interfaceTag\n");

2434 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "ResumingÇetif\n");

2441 #ifde‡
CSR_SUPPORT_WEXT


2442 i‡(!
öãrÁ˚Priv
->
waô_√tdev_ch™ge
)

2445 #ifde‡
CONFIG_NET_SCHED


2446 i‡(
	`√tif_ru¬ög
(
¥iv
->
√tdev
[
öãrÁ˚Tag
])) {

2447 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,28)

2448 
	`√tif_tx_scheduÀ_Æl
(
¥iv
->
√tdev
[
öãrÁ˚Tag
]);

2449 #ñi‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,27)

2450 
	`√tif_scheduÀ_queue
(
	`√tdev_gë_tx_queue
(
¥iv
->
√tdev
[
öãrÁ˚Tag
], 0));

2452 
	`√tif_scheduÀ
(
¥iv
->
√tdev
[
öãrÁ˚Tag
]);

2456 
	`uf_¥o˚ss_rx_≥ndög_queue
(
¥iv
, 
queue
, 
≥î_addªss
, 1,
öãrÁ˚Tag
);

2458 
	}
}

2461 
	$uf_‰ì_≥ndög_rx_∑ckës
(
unifi_¥iv_t
 *
¥iv
, 
queue
, 
C§WifiMacAddªss
 
≥î_addªss
,
C§Uöt16
 
öãrÁ˚Tag
)

2463 
	`uf_¥o˚ss_rx_≥ndög_queue
(
¥iv
, 
queue
, 
≥î_addªss
, 0,
öãrÁ˚Tag
);

2465 
	}
}

2483 
	$unifi_rx
(
unifi_¥iv_t
 *
¥iv
, 
CSR_SIGNAL
 *
sig«l
, 
bulk_d©a_∑øm_t
 *
bulkd©a
)

2485 
C§Uöt16
 
öãrÁ˚Tag
;

2486 
bulk_d©a_desc_t
 *
pD©a
;

2487 c⁄° 
CSR_MA_PACKET_INDICATION
 *
pkt_öd
 = &
sig«l
->
u
.
MaPackëIndiˇti⁄
;

2488 
sk_buff
 *
skb
;

2489 
C§WifiRouãrCålP‹tA˘i⁄
 
p‹t_a˘i⁄
;

2490 
C§Uöt8
 
d©aFømeTy≥
;

2491 
¥Ÿo
;

2492 
queue
;

2494 
C§Uöt8
 
da
[
ETH_ALEN
], 
ß
[ETH_ALEN];

2495 
C§Uöt8
 
toDs
, 
‰omDs
, 
‰ameTy≥
, 
macHódîLígthInByãs
 = 
MAC_HEADER_SIZE
;

2496 
C§Uöt16
 
‰ameC⁄åﬁ
;

2497 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
;

2498 
ëhhdr
 
ehdr
;

2500 
	`func_íãr
();

2502 
öãrÁ˚Tag
 = (
pkt_öd
->
VútuÆI¡îÁ˚Idítifõr
 & 0xff);

2503 
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

2506 i‡(
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
)

2508 
	`unifi_îr‹
(
¥iv
, "%s: MA-PACKET indiˇti⁄ wôh bad i¡îÁ˚Tag %d\n", 
__FUNCTION__
, 
öãrÁ˚Tag
);

2509 
	`unifi_√t_d©a_‰ì
(
¥iv
,&
bulkd©a
->
d
[0]);

2510 
	`func_exô
();

2515 i‡(!
öãrÁ˚Priv
->
√tdev_ªgi°îed
)

2517 
	`unifi_îr‹
(
¥iv
, "%s: MA-PACKET indiˇti⁄ wôh u«Œoˇãd i¡îÁ˚Tag %d\n", 
__FUNCTION__
, 
öãrÁ˚Tag
);

2518 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
->
d
[0]);

2519 
	`func_exô
();

2523 i‡(
bulkd©a
->
d
[0].
d©a_Àngth
 == 0) {

2524 
	`unifi_w¨nög
(
¥iv
, "%s: MA-PACKET indiˇti⁄ wôh zîÿbulk d©a\n", 
__FUNCTION__
);

2525 
	`unifi_√t_d©a_‰ì
(
¥iv
,&
bulkd©a
->
d
[0]);

2526 
	`func_exô
();

2531 
skb
 = (
sk_buff
*)
bulkd©a
->
d
[0].
os_√t_buf_±r
;

2535 
skb
->
Àn
 = 0;

2536 
	`skb_put
(
skb
,
bulkd©a
->
d
[0].
d©a_Àngth
);

2538 
toDs
 = (
skb
->
d©a
[1] & 0x01) ? 1 : 0;

2539 
‰omDs
 = (
skb
->
d©a
[1] & 0x02) ? 1 : 0;

2541 
	`mem˝y
(
da
,(
skb
->
d©a
+4+
toDs
*12),
ETH_ALEN
);

2542 
	`mem˝y
(
ß
,(
skb
->
d©a
+10+
‰omDs
*(6+
toDs
*8)),
ETH_ALEN
);

2545 
pD©a
 = &
bulkd©a
->
d
[0];

2546 
‰ameC⁄åﬁ
 = 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
(
pD©a
->
os_d©a_±r
);

2547 
‰ameTy≥
 = ((
‰ameC⁄åﬁ
 & 0x000C) >> 2);

2549 
d©aFømeTy≥
 =((
‰ameC⁄åﬁ
 & 0x00f0) >> 4);

2550 
	`unifi_åa˚
(
¥iv
, 
UDBG6
,

2551 "%s: Re˚ivêD©®FømêTy≥ %d \n", 
__FUNCTION__
,
d©aFømeTy≥
);

2553 
d©aFømeTy≥
)

2555 
QOS_DATA
:

2556 
QOS_DATA_NULL
:

2558 i‡(
‰omDs
 && 
toDs
)

2561 
macHódîLígthInByãs
 +(
QOS_CONTROL_HEADER_SIZE
 + 6);

2565 
macHódîLígthInByãs
 +
QOS_CONTROL_HEADER_SIZE
;

2569 i‡(
‰ameC⁄åﬁ
 & 
FRAME_CONTROL_ORDER_BIT
)

2570 
macHódîLígthInByãs
 +
HT_CONTROL_HEADER_SIZE
;

2573 i‡(
‰omDs
 && 
toDs
)

2574 
macHódîLígthInByãs
 += 6;

2578 
d©aFømeTy≥
)

2580 
DATA_NULL
:

2581 
QOS_DATA_NULL
:

2585 
¥Ÿo
 = 0x0;

2589 
Œc_¢≠_hdr_t
 *
¢≠
;

2593 
¢≠
 = (
Œc_¢≠_hdr_t
 *Ë(
skb
->
d©a
 + 
macHódîLígthInByãs
);

2596 
ehdr
.
h_¥Ÿo
 = 
¢≠
->
¥Ÿocﬁ
;

2597 
	`mem˝y
(
ehdr
.
h_de°
, 
da
, 
ETH_ALEN
);

2598 
	`mem˝y
(
ehdr
.
h_sour˚
, 
ß
, 
ETH_ALEN
);

2600 
¥Ÿo
 = 
	`¡ohs
(
ehdr
.
h_¥Ÿo
);

2602 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "ö unifi_rxÖrŸocﬁ from s«∞hódî = 0x%x\n", 
¥Ÿo
);

2604 i‡((
¥Ÿo
 !
ETH_P_PAE
)

2605 #ifde‡
CSR_WIFI_SECURITY_WAPI_ENABLE


2606 && (
¥Ÿo
 !
ETH_P_WAI
)

2609 
queue
 = 
UF_CONTROLLED_PORT_Q
;

2611 
queue
 = 
UF_UNCONTROLLED_PORT_Q
;

2614 
p‹t_a˘i⁄
 = 
	`vîify_p‹t
(
¥iv
, (*)
ß
, 
queue
, 
öãrÁ˚Tag
);

2615 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "ö unifi_rxÖ‹àa˘i⁄ i†0x%x & queuê%x\n", 
p‹t_a˘i⁄
, 
queue
);

2617 #ifde‡
CSR_SUPPORT_SME


2619 if((
öãrÁ˚Priv
->
öãrÁ˚Mode
 !
CSR_WIFI_ROUTER_CTRL_MODE_AP
) &&

2620 (
öãrÁ˚Priv
->
öãrÁ˚Mode
 !
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
))

2623 
	`skb_puŒ
(
skb
, 
macHódîLígthInByãs
);

2624 
pD©a
->
os_d©a_±r
 = 
skb
->
d©a
;

2625 
pD©a
->
d©a_Àngth
 -
macHódîLígthInByãs
;

2627 i‡(
pD©a
->
d©a_Àngth
) {

2628 
	`unifi_è_ßm∂e
(
¥iv
->
ˇrd
, 
CSR_WIFI_ROUTER_CTRL_PROTOCOL_DIRECTION_RX
,

2629 &
bulkd©a
->
d
[0],

2630 
ß
, 
¥iv
->
√tdev
[
öãrÁ˚Tag
]->
dev_addr
,

2631 
	`jiffõs_to_m£cs
(
jiffõs
),

2632 
pkt_öd
->
Re˚ivedR©e
);

2637 
C§WifiRouãrCålSèInfo_t
 * 
§cSèInfo
 =

2638 
	`C§WifiRouãrCålGëSèti⁄Rec‹dFromPìrMacAddªss
(
¥iv
,
ß
,
öãrÁ˚Tag
);

2643 if(
§cSèInfo
 =
NULL
) {

2644 
C§WifiMacAddªss
 
≥îMacAddªss
;

2646 
	`mem˝y
(
≥îMacAddªss
.
a
,
ß
,
ETH_ALEN
);

2647 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "%s: U√x≥˘ed fømê‰omÖì∏%x:%x:%x:%x:%x:%x\n", 
__FUNCTION__
,

2648 
ß
[0], sa[1],sa[2], sa[3], sa[4],sa[5]);

2649 
	`C§WifiRouãrCålU√x≥˘edFømeIndSíd
(
¥iv
->
CSR_WIFI_SME_IFACEQUEUE
,0,
öãrÁ˚Tag
,
≥îMacAddªss
);

2650 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
->
d
[0]);

2651 
	`func_exô
();

2656 i‡(
p‹t_a˘i⁄
 !
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_OPEN
) {

2658 
C§WifiMacAddªss
 
≥îMacAddªss
;

2659 
	`mem˝y
(
≥îMacAddªss
.
a
,
ß
,
ETH_ALEN
);

2660 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "%s: Port isÇot open: unexpected frame fromÖeer = %x:%x:%x:%x:%x:%x\n",

2661 
__FUNCTION__
, 
ß
[0], sa[1],sa[2], sa[3], sa[4],sa[5]);

2663 
	`C§WifiRouãrCålU√x≥˘edFømeIndSíd
(
¥iv
->
CSR_WIFI_SME_IFACEQUEUE
,0,
öãrÁ˚Tag
,
≥îMacAddªss
);

2664 
öãrÁ˚Priv
->
°©s
.
rx_dr›≥d
++;

2665 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
->
d
[0]);

2666 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "%s: Dr›pögÖackë,ÖrŸo=0x%04x, %†p‹t\n", 
__FUNCTION__
,

2667 
¥Ÿo
, 
queue
 ? "Controlled" : "Un-controlled");

2668 
	`func_exô
();

2673 if((
d©aFømeTy≥
 =
QOS_DATA_NULL
Ë|| (d©aFømeTy≥ =
DATA_NULL
)){

2674 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "%s: NuŒ FømêRe˚ivedánd Fªed\n", 
__FUNCTION__
);

2675 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
->
d
[0]);

2676 
	`func_exô
();

2686 if(!(
	`uf_≠_¥o˚ss_d©a_pdu
(
¥iv
, 
skb
, &
ehdr
, 
§cSèInfo
,

2687 
sig«l
,

2688 
bulkd©a
,

2689 
macHódîLígthInByãs
)))

2691 
	`func_exô
();

2694 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "unifi_rx:Çÿ•ecifi¯AP h™dlögÖro˚s†a†n‹mÆ føme, MAC HódîÜí %d\n",
macHódîLígthInByãs
);

2696 
	`skb_puŒ
(
skb
, 
macHódîLígthInByãs
);

2697 
pD©a
->
os_d©a_±r
 = 
skb
->
d©a
;

2698 
pD©a
->
d©a_Àngth
 -
macHódîLígthInByãs
;

2699 
pD©a
->
os_√t_buf_±r
 = (*)
skb
;

2700 
pD©a
->
√t_buf_Àngth
 = 
skb
->
Àn
;

2708 i‡(
pD©a
->
d©a_Àngth
 == 0) {

2709 i‡(((
‰ameC⁄åﬁ
 & 0x00f0Ë>> 4Ë!
QOS_DATA_NULL
 &&

2710 ((
‰ameC⁄åﬁ
 & 0x00f0Ë>> 4Ë!
DATA_NULL
) {

2711 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "ZîÿÀngth føme, buànŸÇuŒ-d©®%04x\n", 
‰ameC⁄åﬁ
);

2713 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
->
d
[0]);

2714 
	`func_exô
();

2718 i‡(
p‹t_a˘i⁄
 =
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_CLOSED_DISCARD
) {

2720 
öãrÁ˚Priv
->
°©s
.
rx_dr›≥d
++;

2721 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
->
d
[0]);

2722 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "%s: DroppingÖacket,Öroto=0x%04x, %sÖort\n",

2723 
__FUNCTION__
, 
¥Ÿo
, 
queue
 ? "controlled" : "uncontrolled");

2724 
	`func_exô
();

2726 } i‡–(
p‹t_a˘i⁄
 =
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_CLOSED_BLOCK
) ||

2727 (
öãrÁ˚Priv
->
c⁄√˘ed
 !
UnifiC⁄√˘ed
) ) {

2730 
rx_buf„ªd_∑ckës_t
 *
rx_q_ôem
;

2731 
li°_hód
 *
rx_li°
;

2733 
rx_q_ôem
 = (
rx_buf„ªd_∑ckës_t
 *)
	`kmÆloc
((rx_buffered_packets_t),

2734 
GFP_KERNEL
);

2735 i‡(
rx_q_ôem
 =
NULL
) {

2736 
	`unifi_îr‹
(
¥iv
, "%s: FailedÅoállocate %d bytes forÑxÖacketÑecord\n",

2737 
__FUNCTION__
, (
rx_buf„ªd_∑ckës_t
));

2738 
öãrÁ˚Priv
->
°©s
.
rx_dr›≥d
++;

2739 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
->
d
[0]);

2740 
	`func_exô
();

2744 
	`INIT_LIST_HEAD
(&
rx_q_ôem
->
q
);

2745 
rx_q_ôem
->
bulkd©a
 = *bulkdata;

2746 
rx_q_ôem
->
skb
 = skb;

2747 
rx_q_ôem
->
sig«l
 = *signal;

2748 
	`mem˝y
(
rx_q_ôem
->
ß
.
a
, sa, 
ETH_ALEN
);

2749 
	`mem˝y
(
rx_q_ôem
->
da
.
a
, da, 
ETH_ALEN
);

2750 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "%s: Blocked skb=%p, bulkdata=%p\n",

2751 
__FUNCTION__
, 
rx_q_ôem
->
skb
, &rx_q_ôem->
bulkd©a
);

2753 i‡(
queue
 =
UF_CONTROLLED_PORT_Q
) {

2754 
rx_li°
 = &
öãrÁ˚Priv
->
rx_c⁄åﬁÀd_li°
;

2756 
rx_li°
 = &
öãrÁ˚Priv
->
rx_unc⁄åﬁÀd_li°
;

2760 
	`down
(&
¥iv
->
rx_q_£m
);

2761 
	`li°_add_èû
(&
rx_q_ôem
->
q
, 
rx_li°
);

2762 
	`up
(&
¥iv
->
rx_q_£m
);

2764 
	`func_exô
();

2769 
	`ödiˇã_rx_skb
(
¥iv
, 
öãrÁ˚Tag
, 
da
, 
ß
, 
skb
, 
sig«l
, 
bulkd©a
);

2771 
	`func_exô
();

2773 
	}
}

2775 
	$¥o˚ss_ma_∑ckë_cfm
(
unifi_¥iv_t
 *
¥iv
, 
CSR_SIGNAL
 *
sig«l
, 
bulk_d©a_∑øm_t
 *
bulkd©a
)

2777 
C§Uöt16
 
öãrÁ˚Tag
;

2778 c⁄° 
CSR_MA_PACKET_CONFIRM
 *
pkt_cfm
 = &
sig«l
->
u
.
MaPackëC⁄fúm
;

2779 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
;

2781 
	`func_íãr
();

2782 
öãrÁ˚Tag
 = (
pkt_cfm
->
VútuÆI¡îÁ˚Idítifõr
 & 0xff);

2783 
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

2786 i‡(
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
)

2788 
	`unifi_îr‹
(
¥iv
, "%s: MA-PACKET c⁄fúm wôh bad i¡îÁ˚Tag %d\n", 
__FUNCTION__
, 
öãrÁ˚Tag
);

2789 
	`func_exô
();

2792 #ifde‡
CSR_SUPPORT_SME


2793 if(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
 ||

2794 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
) {

2796 
	`uf_¥o˚ss_ma_pkt_cfm_f‹_≠
(
¥iv
,
öãrÁ˚Tag
,
pkt_cfm
);

2797 } i‡(
öãrÁ˚Priv
->
m4_£¡
 && (
pkt_cfm
->
Ho°Tag
 =öãrÁ˚Priv->
m4_ho°Tag
)) {

2799 
C§Resu…
 
ªsu…
 = 
pkt_cfm
->
Tønsmissi⁄Sètus
 =
CSR_TX_SUCCESSFUL
?
CSR_RESULT_SUCCESS
:
CSR_RESULT_FAILURE
;

2800 
C§WifiMacAddªss
 
≥îMacAddªss
;

2801 
	`mem˝y
(
≥îMacAddªss
.
a
, 
öãrÁ˚Priv
->
m4_sig«l
.
u
.
MaPackëReque°
.
Ra
.
x
, 
ETH_ALEN
);

2803 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "%s: Sídög M4 Tønsmô CFM\n", 
__FUNCTION__
);

2804 
	`C§WifiRouãrCålM4TønsmôãdIndSíd
(
¥iv
->
CSR_WIFI_SME_IFACEQUEUE
, 0,

2805 
öãrÁ˚Tag
,

2806 
≥îMacAddªss
,

2807 
ªsu…
);

2808 
öãrÁ˚Priv
->
m4_£¡
 = 
FALSE
;

2809 
öãrÁ˚Priv
->
m4_ho°Tag
 = 0xffffffff;

2812 
	`func_exô
();

2814 
	}
}

2831 
	$¥o˚ss_ma_∑ckë_öd
(
unifi_¥iv_t
 *
¥iv
, 
CSR_SIGNAL
 *
sig«l
, 
bulk_d©a_∑øm_t
 *
bulkd©a
)

2833 
C§Uöt16
 
öãrÁ˚Tag
;

2834 
bulk_d©a_desc_t
 *
pD©a
;

2835 
CSR_MA_PACKET_INDICATION
 *
pkt_öd
 = (CSR_MA_PACKET_INDICATION*)&
sig«l
->
u
.
MaPackëIndiˇti⁄
;

2836 
sk_buff
 *
skb
;

2837 
C§Uöt16
 
‰ameC⁄åﬁ
;

2838 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
;

2839 
C§Uöt8
 
da
[
ETH_ALEN
], 
ß
[ETH_ALEN];

2840 
C§Uöt8
 *
bssid
 = 
NULL
, *
ba_addr
 = NULL;

2841 
C§Uöt8
 
toDs
, 
‰omDs
, 
‰ameTy≥
;

2842 
C§Uöt8
 
i
 =0;

2844 #ifde‡
CSR_SUPPORT_SME


2845 
C§Uöt8
 
d©aFømeTy≥
 = 0;

2846 
C§Boﬁ
 
powîSaveCh™ged
 = 
FALSE
;

2847 
C§Uöt8
 
pmBô
 = 0;

2848 
C§WifiRouãrCålSèInfo_t
 *
§cSèInfo
 = 
NULL
;

2849 
C§Uöt16
 
qosC⁄åﬁ
;

2853 
	`func_íãr
();

2855 
öãrÁ˚Tag
 = (
pkt_öd
->
VútuÆI¡îÁ˚Idítifõr
 & 0xff);

2856 
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

2860 i‡(
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
)

2862 
	`unifi_îr‹
(
¥iv
, "%s: MA-PACKET indiˇti⁄ wôh bad i¡îÁ˚Tag %d\n", 
__FUNCTION__
, 
öãrÁ˚Tag
);

2863 
	`unifi_√t_d©a_‰ì
(
¥iv
,&
bulkd©a
->
d
[0]);

2864 
	`func_exô
();

2869 i‡(!
öãrÁ˚Priv
->
√tdev_ªgi°îed
)

2871 
	`unifi_îr‹
(
¥iv
, "%s: MA-PACKET indiˇti⁄ wôh u«Œoˇãd i¡îÁ˚Tag %d\n", 
__FUNCTION__
, 
öãrÁ˚Tag
);

2872 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
->
d
[0]);

2873 
	`func_exô
();

2877 i‡(
bulkd©a
->
d
[0].
d©a_Àngth
 == 0) {

2878 
	`unifi_w¨nög
(
¥iv
, "%s: MA-PACKET indiˇti⁄ wôh zîÿbulk d©a\n", 
__FUNCTION__
);

2879 
	`unifi_√t_d©a_‰ì
(
¥iv
,&
bulkd©a
->
d
[0]);

2880 
	`func_exô
();

2886 if(
pkt_öd
->
Re˚±i⁄Sètus
 !
CSR_RX_SUCCESS
)

2888 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "%s: MA-PACKET indiˇti⁄ wôh sètu†%d\n",
__FUNCTION__
, 
pkt_öd
->
Re˚±i⁄Sètus
);

2889 
	`unifi_√t_d©a_‰ì
(
¥iv
,&
bulkd©a
->
d
[0]);

2890 
	`func_exô
();

2895 
skb
 = (
sk_buff
*)
bulkd©a
->
d
[0].
os_√t_buf_±r
;

2896 
skb
->
Àn
 = 
bulkd©a
->
d
[0].
d©a_Àngth
;

2899 
toDs
 = (
skb
->
d©a
[1] & 0x01) ? 1 : 0;

2900 
‰omDs
 = (
skb
->
d©a
[1] & 0x02) ? 1 : 0;

2902 
	`mem˝y
(
da
,(
skb
->
d©a
+4+
toDs
*12),
ETH_ALEN
);

2903 
	`mem˝y
(
ß
,(
skb
->
d©a
+10+
‰omDs
*(6+
toDs
*8)),
ETH_ALEN
);

2906 i‡(
toDs
 && 
‰omDs
)

2908 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "4áddress frame - don'tÅryÅo find BSSID\n");

2909 
bssid
 = 
NULL
;

2913 
bssid
 = (
C§Uöt8
 *Ë(
skb
->
d©a
 + 4 + 12 - (
‰omDs
 * 6Ë- (
toDs
 * 12));

2916 
pD©a
 = &
bulkd©a
->
d
[0];

2917 
‰ameC⁄åﬁ
 = 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
(
pD©a
->
os_d©a_±r
);

2918 
‰ameTy≥
 = ((
‰ameC⁄åﬁ
 & 0x000C) >> 2);

2920 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "Rx FømêTy≥: %d sn: %d\n",
‰ameTy≥
,

2921 (
	`À16_to_˝u
(*((
C§Uöt16
*)(
bulkd©a
->
d
[0].
os_d©a_±r
 + 
IEEE802_11_SEQUENCE_CONTROL_OFFSET
))) >> 4) & 0xfff);

2922 if(
‰ameTy≥
 =
IEEE802_11_FRAMETYPE_CONTROL
){

2923 #ifde‡
CSR_SUPPORT_SME


2924 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "%s: Re˚ived C⁄åﬁ Føme\n", 
__FUNCTION__
);

2926 if((
‰ameC⁄åﬁ
 & 0x00f0) == 0x00A0){

2928 
C§Uöt8
 
pmBô
 = (
‰ameC⁄åﬁ
 & 0x1000)?0x01:0x00;

2929 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "%s: Re˚ived PS-POLL Føme\n", 
__FUNCTION__
);

2931 
	`uf_¥o˚ss_ps_pﬁl
(
¥iv
,
ß
,
da
,
pmBô
,
öãrÁ˚Tag
);

2934 
	`unifi_w¨nög
(
¥iv
, "%s: N⁄ PS-POLL c⁄åﬁ fømêi†ª˚ived\n", 
__FUNCTION__
);

2937 
	`unifi_√t_d©a_‰ì
(
¥iv
,&
bulkd©a
->
d
[0]);

2938 
	`func_exô
();

2941 if(
‰ameTy≥
 !
IEEE802_11_FRAMETYPE_DATA
) {

2942 
	`unifi_w¨nög
(
¥iv
, "%s: N⁄ c⁄åﬁ N⁄ D©®‰amêi†ª˚ived\n",
__FUNCTION__
);

2943 
	`unifi_√t_d©a_‰ì
(
¥iv
,&
bulkd©a
->
d
[0]);

2944 
	`func_exô
();

2948 #ifde‡
CSR_SUPPORT_SME


2949 if((
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
) ||

2950 (
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
)){

2952 
§cSèInfo
 = 
	`C§WifiRouãrCålGëSèti⁄Rec‹dFromPìrMacAddªss
(
¥iv
,
ß
,
öãrÁ˚Tag
);

2954 if(
§cSèInfo
 =
NULL
) {

2955 
C§WifiMacAddªss
 
≥îMacAddªss
;

2957 
	`mem˝y
(
≥îMacAddªss
.
a
,
ß
,
ETH_ALEN
);

2958 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "%s: U√x≥˘ed fømê‰omÖì∏%x:%x:%x:%x:%x:%x\n", 
__FUNCTION__
,

2959 
ß
[0], sa[1],sa[2], sa[3], sa[4],sa[5]);

2960 
	`C§WifiRouãrCålU√x≥˘edFømeIndSíd
(
¥iv
->
CSR_WIFI_SME_IFACEQUEUE
,0,
öãrÁ˚Tag
,
≥îMacAddªss
);

2961 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
->
d
[0]);

2962 
	`func_exô
();

2974 
pmBô
 = (
‰ameC⁄åﬁ
 & 0x1000)?0x01:0x00;

2975 
powîSaveCh™ged
 = 
	`uf_¥o˚ss_pm_bô_f‹_≥î
(
¥iv
,
§cSèInfo
,
pmBô
,
öãrÁ˚Tag
);

2978 
§cSèInfo
->
a˘ivôy_Êag
 = 
TRUE
;

2983 
d©aFømeTy≥
 = ((
‰ameC⁄åﬁ
 & 0x00f0) >> 4);

2985 if((
powîSaveCh™ged
 =
FALSE
)&&(
§cSèInfo
->
wmmOrQosE«bÀd
 =
TRUE
)&&

2986 (
§cSèInfo
->
cuºítPìrSèã
 =
CSR_WIFI_ROUTER_CTRL_PEER_CONNECTED_POWER_SAVE
)){

2988 if((
d©aFømeTy≥
 =
QOS_DATA
Ë|| (d©aFømeTy≥ =
QOS_DATA_NULL
)){

2994 if((
‰ameC⁄åﬁ
 & 
IEEE802_11_FC_TO_DS_MASK
Ë&& (‰ameC⁄åﬁ & 
IEEE802_11_FC_FROM_DS_MASK
)){

2995 
qosC⁄åﬁ

	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
(
pD©a
->
os_d©a_±r
 + 30);

2998 
qosC⁄åﬁ
 = 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
(
pD©a
->
os_d©a_±r
 + 24);

3000 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "%s: Check i‡U-APSD o≥øti⁄†¨êåiggîed f‹ qosC⁄åﬁ: 0x%x\n",
__FUNCTION__
,
qosC⁄åﬁ
);

3001 
	`uf_¥o˚ss_wmm_dñivî_ac_u≠sd
(
¥iv
,
§cSèInfo
,
qosC⁄åﬁ
,
öãrÁ˚Tag
);

3008 if–((
‰ameC⁄åﬁ
 & 0x00f0Ë>> 4Ë=
QOS_DATA
) {

3009 
C§Uöt8
 *
qos_c⁄åﬁ_±r
 = (C§Uöt8*)
bulkd©a
->
d
[0].
os_d©a_±r
 + (((
‰ameC⁄åﬁ
 & 
IEEE802_11_FC_TO_DS_MASK
Ë&& (‰ameC⁄åﬁ & 
IEEE802_11_FC_FROM_DS_MASK
))?30: 24);

3010 
tID
 = *
qos_c⁄åﬁ_±r
 & 
IEEE802_11_QC_TID_MASK
;

3011 
ba_£ssi⁄_rx_°ru˘
 *
ba_£ssi⁄
;

3012 
C§Uöt8
 
ba_£ssi⁄_idx
 = 0;

3014 if(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
 ||

3015 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
){

3016 
ba_addr
 = 
ß
;

3018 
ba_addr
 = 
bssid
;

3021 
	`down
(&
¥iv
->
ba_muãx
);

3022 
ba_£ssi⁄_idx
=0; ba_£ssi⁄_idx < 
MAX_SUPPORTED_BA_SESSIONS_RX
; ba_session_idx++){

3023 
ba_£ssi⁄
 = 
öãrÁ˚Priv
->
ba_£ssi⁄_rx
[
ba_£ssi⁄_idx
];

3024 i‡(
ba_£ssi⁄
){

3025 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "found ba_£ssi⁄=0x%x ba_£ssi⁄_idx=%d", 
ba_£ssi⁄
, 
ba_£ssi⁄_idx
);

3026 i‡((!
	`memcmp
(
ba_£ssi⁄
->
macAddªss
.
a
, 
ba_addr
, 
ETH_ALEN
)Ë&& (ba_£ssi⁄->
tID
 ==ÅID)){

3027 
‰ame_desc_°ru˘
 
‰ame_desc
;

3028 
‰ame_desc
.
bulkd©a
 = *bulkdata;

3029 
‰ame_desc
.
sig«l
 = *signal;

3030 
‰ame_desc
.
¢
 = (
	`À16_to_˝u
(*((
C§Uöt16
*)(
bulkd©a
->
d
[0].
os_d©a_±r
 + 
IEEE802_11_SEQUENCE_CONTROL_OFFSET
))) >> 4) & 0xfff;

3031 
‰ame_desc
.
a˘ive
 = 
TRUE
;

3032 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "%s: cÆlögÖro˚ss_ba_‰amê(£ssi⁄=%d)\n", 
__FUNCTION__
, 
ba_£ssi⁄_idx
);

3033 
	`¥o˚ss_ba_‰ame
(
¥iv
, 
öãrÁ˚Priv
, 
ba_£ssi⁄
, &
‰ame_desc
);

3034 
	`up
(&
¥iv
->
ba_muãx
);

3035 
	`¥o˚ss_ba_com∂ëe
(
¥iv
, 
öãrÁ˚Priv
);

3040 i‡(
ba_£ssi⁄_idx
 =
MAX_SUPPORTED_BA_SESSIONS_RX
){

3041 
	`up
(&
¥iv
->
ba_muãx
);

3042 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "%s: cÆlögÖro˚ss_amsdu()", 
__FUNCTION__
);

3043 
	`¥o˚ss_amsdu
(
¥iv
, 
sig«l
, 
bulkd©a
);

3046 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "calling unifi_rx()");

3047 
	`unifi_rx
(
¥iv
, 
sig«l
, 
bulkd©a
);

3057 
	`down
(&
¥iv
->
ba_muãx
);

3058 
i
=0; i < 
MAX_SUPPORTED_BA_SESSIONS_RX
; i++){

3059 
ba_£ssi⁄_rx_°ru˘
 *
ba_£ssi⁄
;

3060 
ba_£ssi⁄
 = 
öãrÁ˚Priv
->
ba_£ssi⁄_rx
[
i
];

3061 i‡(
ba_£ssi⁄
){

3062 
	`check_ba_‰ame_age_timeout
(
¥iv
, 
öãrÁ˚Priv
, 
ba_£ssi⁄
);

3065 
	`up
(&
¥iv
->
ba_muãx
);

3066 
	`¥o˚ss_ba_com∂ëe
(
¥iv
, 
öãrÁ˚Priv
);

3068 
	`func_exô
();

3069 
	}
}

3088 
	$uf_£t_mu…iˇ°_li°
(
√t_devi˚
 *
dev
)

3090 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

3091 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

3093 #ifde‡
CSR_NATIVE_LINUX


3094 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "uf_set_multicast_list unsupported\n");

3098 
u8
 *
mc_li°
 = 
öãrÁ˚Priv
->mc_list;

3099 #i‡
LINUX_VERSION_CODE
 > 
	`KERNEL_VERSION
(2,6,34)

3100 
√tdev_hw_addr
 *
mc_addr
;

3101 
mc_addr_cou¡
;

3103 
dev_mc_li°
 *
p
;

3104 
i
;

3107 i‡(
¥iv
->
öô_¥ogªss
 !
UNIFI_INIT_COMPLETED
) {

3111 #i‡
LINUX_VERSION_CODE
 > 
	`KERNEL_VERSION
(2,6,34)

3112 
mc_addr_cou¡
 = 
	`√tdev_mc_cou¡
(
dev
);

3114 
	`unifi_åa˚
(
¥iv
, 
UDBG3
,

3115 "uf_£t_mu…iˇ°_li° (cou¡=%d)\n", 
mc_addr_cou¡
);

3119 i‡(
mc_addr_cou¡
 > 
UNIFI_MAX_MULTICAST_ADDRESSES
) {

3124 
öãrÁ˚Priv
->
mc_li°_cou¡
 = 
mc_addr_cou¡
;

3125 
	`√tdev_hw_addr_li°_f‹_óch
(
mc_addr
, &
dev
->
mc
) {

3126 
	`mem˝y
(
mc_li°
, 
mc_addr
->
addr
, 
ETH_ALEN
);

3127 
mc_li°
 +
ETH_ALEN
;

3131 
	`unifi_åa˚
(
¥iv
, 
UDBG3
,

3132 "uf_£t_mu…iˇ°_li° (cou¡=%d)\n", 
dev
->
mc_cou¡
);

3135 i‡(
dev
->
mc_cou¡
 > 
UNIFI_MAX_MULTICAST_ADDRESSES
) {

3140 
öãrÁ˚Priv
->
mc_li°_cou¡
 = 
dev
->
mc_cou¡
;

3141 
p
 = 
dev
->
mc_li°
;

3142 
i
 = 0; i < 
dev
->
mc_cou¡
; i++) {

3143 
	`mem˝y
(
mc_li°
, 
p
->
dmi_addr
, 
ETH_ALEN
);

3144 
p
 =Ö->
√xt
;

3145 
mc_li°
 +
ETH_ALEN
;

3150 
	`queue_w‹k
(
¥iv
->
unifi_w‹kqueue
, &¥iv->
mu…iˇ°_li°_èsk
);

3153 
	}
}

3178 
	$√tdev_mlme_evít_h™dÀr
(
ul_˛õ¡_t
 *
p˛i
, c⁄° 
u8
 *
sig_∑cked
, 
sig_Àn
,

3179 c⁄° 
bulk_d©a_∑øm_t
 *
bulkd©a_o
, 
dú
)

3181 
CSR_SIGNAL
 
sig«l
;

3182 
unifi_¥iv_t
 *
¥iv
 = 
	`uf_föd_ö°™˚
(
p˛i
->
ö°™˚
);

3183 
id
, 
r
;

3184 
bulk_d©a_∑øm_t
 
bulkd©a
;

3186 
	`func_íãr
();

3189 i‡(
sig_∑cked
 =
NULL
) {

3197 
bulkd©a
 = *
bulkd©a_o
;

3200 
r
 = 
	`ªad_u≈ack_sig«l
(
sig_∑cked
, &
sig«l
);

3201 i‡(
r
) {

3206 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,

3208 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
(
sig_∑cked
));

3212 
id
 = 
sig«l
.
Sig«lPrimôiveHódî
.
Sig«lId
;

3213 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "Nëdev - Pro˚s†sig«»0x%.4X\n", 
id
);

3218 
id
) {

3219 
CSR_MA_PACKET_ERROR_INDICATION_ID
:

3220 
	`¥o˚ss_ma_∑ckë_îr‹_öd
(
¥iv
, &
sig«l
, &
bulkd©a
);

3222 
CSR_MA_PACKET_INDICATION_ID
:

3223 
	`¥o˚ss_ma_∑ckë_öd
(
¥iv
, &
sig«l
, &
bulkd©a
);

3225 
CSR_MA_PACKET_CONFIRM_ID
:

3226 
	`¥o˚ss_ma_∑ckë_cfm
(
¥iv
, &
sig«l
, &
bulkd©a
);

3228 #ifde‡
CSR_SUPPORT_SME


3229 
CSR_MLME_SET_TIM_CONFIRM_ID
:

3233 
	`uf_h™dÀ_tim_cfm
(
¥iv
, &
sig«l
.
u
.
MlmeSëTimC⁄fúm
, sig«l.
Sig«lPrimôiveHódî
.
Re˚ivîPro˚ssId
);

3236 
CSR_DEBUG_STRING_INDICATION_ID
:

3237 
	`debug_°rög_ödiˇti⁄
(
¥iv
, 
bulkd©a
.
d
[0].
os_d©a_±r
, bulkd©a.d[0].
d©a_Àngth
);

3240 
CSR_DEBUG_WORD16_INDICATION_ID
:

3241 
	`debug_w‹d16_ödiˇti⁄
(
¥iv
, &
sig«l
);

3244 
CSR_DEBUG_GENERIC_CONFIRM_ID
:

3245 
CSR_DEBUG_GENERIC_INDICATION_ID
:

3246 
	`debug_gíîic_ödiˇti⁄
(
¥iv
, &
sig«l
);

3252 
	`func_exô
();

3253 
	}
}

3273 
	$uf_√t_gë_«me
(
√t_devi˚
 *
dev
, *
«me
, 
Àn
)

3275 *
«me
 = '\0';

3276 i‡(
dev
) {

3277 
	`°æ˝y
(
«me
, 
dev
->«me, (
Àn
 > 
IFNAMSIZ
) ? IFNAMSIZ :Üen);

3280 
	}
}

3286 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,28)

3287 #ifde‡
CONFIG_NET_SCHED


3310 
	$uf_ö°Æl_qdisc
(
√t_devi˚
 *
dev
)

3312 
Qdisc
 *
qdisc
;

3313 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,27)

3314 
√tdev_queue
 *
queue0
;

3318 
	`func_íãr
();

3320 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,27)

3326 i‡(
dev
->
qdisc_¶ìpög
 !&
no›_qdisc
) {

3327 
	`func_exô_r
(-
EFAULT
);

3328  -
EINVAL
;

3332 
qdisc
 = 
	`UF_QDISC_CREATE_DFLT
(
dev
, &
uf_qdisc_›s
, 
TC_H_ROOT
);

3333 i‡(!
qdisc
) {

3334 
	`unifi_îr‹
(
NULL
, "%s: qdis¯ö°Æœti⁄ faûed\n", 
dev
->
«me
);

3335 
	`func_exô_r
(-
EFAULT
);

3336  -
EFAULT
;

3338 
	`unifi_åa˚
(
NULL
, 
UDBG5
, "%s:Öarent qdisc=0x%p\n",

3339 
dev
->
«me
, 
qdisc
);

3341 
qdisc
->
h™dÀ
 = 0x80020000;

3342 
qdisc
->
Êags
 = 0x0;

3344 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,27)

3345 
queue0
 = 
	`√tdev_gë_tx_queue
(
dev
, 0);

3346 i‡(
queue0
 =
NULL
) {

3347 
	`unifi_îr‹
(
NULL
, "%s:Çetdev_get_tx_queueÑeturnedÇo queue\n",

3348 
dev
->
«me
);

3349 
	`func_exô_r
(-
EFAULT
);

3350  -
EFAULT
;

3352 
queue0
->
qdisc
 = qdisc;

3353 
queue0
->
qdisc_¶ìpög
 = 
qdisc
;

3355 
	`qdisc_lock_åì
(
dev
);

3356 
	`li°_add_èû
(&
qdisc
->
li°
, &
dev
->
qdisc_li°
);

3357 
dev
->
qdisc_¶ìpög
 = 
qdisc
;

3358 
	`qdisc_u∆ock_åì
(
dev
);

3361 
	`func_exô_r
(0);

3364 
	}
}

3366 
	$uf_qdisc›_íqueue
(
sk_buff
 *
skb
, 
Qdisc
* 
qd
)

3368 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,27)

3369 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
qd
->
dev_queue
->
dev
);

3371 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
qd
->
dev
);

3373 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

3374 
uf_sched_d©a
 *
q
 = 
	`qdisc_¥iv
(
qd
);

3375 
uf_tx_∑ckë_d©a
 *
pkt_d©a
 = (uf_tx_∑ckë_d©®*Ë
skb
->
cb
;

3376 
ëhhdr
 
ehdr
;

3377 
Qdisc
 *
qdisc
;

3378 
r
, 
¥Ÿo
;

3380 
	`func_íãr
();

3382 
	`mem˝y
(&
ehdr
, 
skb
->
d©a
, 
ETH_HLEN
);

3383 
¥Ÿo
 = 
	`¡ohs
(
ehdr
.
h_¥Ÿo
);

3386 i‡((
¥Ÿo
 !
ETH_P_PAE
)

3387 #ifde‡
CSR_WIFI_SECURITY_WAPI_ENABLE


3388 && (
¥Ÿo
 !
ETH_P_WAI
)

3392 
pkt_d©a
->
¥i‹ôy
 = 
	`gë_∑ckë_¥i‹ôy
(
¥iv
, 
skb
, &
ehdr
, 
öãrÁ˚Priv
);

3393 
pkt_d©a
->
queue
 = 
	`unifi_‰ame_¥i‹ôy_to_queue
’kt_d©a->
¥i‹ôy
);

3395 
pkt_d©a
->
queue
 = 
UNIFI_TRAFFIC_Q_EAPOL
;

3398 
qdisc
 = 
q
->
queues
[
pkt_d©a
->
queue
];

3399 
r
 = 
qdisc
->
	`íqueue
(
skb
, qdisc);

3400 i‡(
r
 =
NET_XMIT_SUCCESS
) {

3401 
qd
->
q
.
qÀn
++;

3402 
qd
->
b°©s
.
byãs
 +
skb
->
Àn
;

3403 
qd
->
b°©s
.
∑ckës
++;

3404 
	`func_exô_r
(
NET_XMIT_SUCCESS
);

3405  
NET_XMIT_SUCCESS
;

3408 
	`unifi_îr‹
(
¥iv
, "uf_qdiscop_enqueue: dropped\n");

3409 
qd
->
q°©s
.
dr›s
++;

3411 
	`func_exô_r
(
r
);

3412  
r
;

3414 
	}
}

3417 
	$uf_qdisc›_ªqueue
(
sk_buff
 *
skb
, 
Qdisc
* 
qd
)

3419 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,27)

3420 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_t*)
	`√tdev_¥iv
(
qd
->
dev_queue
->
dev
);

3422 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_t*)
	`√tdev_¥iv
(
qd
->
dev
);

3424 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

3425 
uf_sched_d©a
 *
q
 = 
	`qdisc_¥iv
(
qd
);

3426 
uf_tx_∑ckë_d©a
 *
pkt_d©a
 = (uf_tx_∑ckë_d©®*Ë
skb
->
cb
;

3427 
Qdisc
 *
qdisc
;

3428 
r
;

3430 
	`func_íãr
();

3432 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "uf_qdiscop_requeue: (q=%d),Åag=%u\n",

3433 
pkt_d©a
->
queue
,Ökt_d©a->
ho°_èg
);

3436 
qdisc
 = 
q
->
queues
[
pkt_d©a
->
queue
];

3438 i‡((
r
 = 
qdisc
->
›s
->
	`ªqueue
(
skb
, qdisc)) == 0) {

3439 
qd
->
q
.
qÀn
++;

3440 
	`func_exô_r
(0);

3444 
	`unifi_îr‹
(
¥iv
, "uf_qdiscop_requeue: dropped\n");

3445 
qd
->
q°©s
.
dr›s
++;

3447 
	`func_exô_r
(
r
);

3448  
r
;

3449 
	}
}

3451 
sk_buff
 *
	$uf_qdisc›_dequeue
(
Qdisc
* 
qd
)

3453 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,27)

3454 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
qd
->
dev_queue
->
dev
);

3456 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
qd
->
dev
);

3458 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

3459 
uf_sched_d©a
 *
q
 = 
	`qdisc_¥iv
(
qd
);

3460 
sk_buff
 *
skb
;

3461 
Qdisc
 *
qdisc
;

3462 
queue
, 
i
;

3463 
ëhhdr
 
ehdr
;

3464 
uf_tx_∑ckë_d©a
 *
pkt_d©a
;

3465 
C§WifiRouãrCålP‹tA˘i⁄
 
p‹t_a˘i⁄
;

3467 
	`func_íãr
();

3470 
i
 = 
UNIFI_TRAFFIC_Q_MAX
 - 1; i >= 0; i--) {

3472 i‡(
i
 !
UNIFI_TRAFFIC_Q_EAPOL
) {

3473 
queue
 = 
¥iv
->
¥ev_queue
;

3474 i‡(++
¥iv
->
¥ev_queue
 >
UNIFI_TRAFFIC_Q_EAPOL
) {

3475 
¥iv
->
¥ev_queue
 = 0;

3478 
queue
 = 
i
;

3481 #i‚de‡
ALLOW_Q_PAUSE


3483 i‡(
	`√t_is_tx_q_∑u£d
(
¥iv
, 
queue
)) {

3484 
	`unifi_åa˚
(
¥iv
, 
UDBG5
,

3485 "uf_qdisc›_dequeue:Åx queuê∑u£d (q=%d)\n", 
queue
);

3490 
qdisc
 = 
q
->
queues
[
queue
];

3491 
skb
 = 
qdisc
->
	`dequeue
(qdisc);

3492 i‡(
skb
) {

3494 
qd
->
q
.
qÀn
--;

3496 
pkt_d©a
 = (
uf_tx_∑ckë_d©a
 *Ë
skb
->
cb
;

3499 
	`mem˝y
(&
ehdr
, 
skb
->
d©a
, 
ETH_HLEN
);

3501 
p‹t_a˘i⁄
 = 
	`vîify_p‹t
(
¥iv


3502 , (((
CSR_WIFI_ROUTER_CTRL_MODE_STA
 =
öãrÁ˚Priv
->
öãrÁ˚Mode
Ë||(
CSR_WIFI_ROUTER_CTRL_MODE_P2PCLI
 =öãrÁ˚Priv->öãrÁ˚Mode))? i¡îÁ˚Priv->
bssid
.
a
: 
ehdr
.
h_de°
)

3503 , (
UNIFI_TRAFFIC_Q_EAPOL
 =
queue
? 
UF_UNCONTROLLED_PORT_Q
: 
UF_CONTROLLED_PORT_Q
)

3504 , 
öãrÁ˚Priv
->
I¡îÁ˚Tag
);

3507 i‡(
p‹t_a˘i⁄
 =
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_OPEN
) {

3508 
	`unifi_åa˚
(
¥iv
, 
UDBG5
,

3510 
queue
, 
pkt_d©a
->
ho°_èg
);

3512 
	`func_exô
();

3513  
skb
;

3517 i‡(
p‹t_a˘i⁄
 =
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_CLOSED_DISCARD
) {

3518 
	`unifi_åa˚
(
¥iv
, 
UDBG5
,

3520 
queue
, 
pkt_d©a
->
ho°_èg
);

3521 
	`k‰ì_skb
(
skb
);

3526 i‡(
qdisc
->
›s
->
	`ªqueue
(
skb
, qdisc) != 0) {

3527 
	`unifi_îr‹
(
¥iv
,

3529 
queue
, 
pkt_d©a
->
ho°_èg
);

3532 
	`k‰ì_skb
(
skb
);

3536 
qd
->
q
.
qÀn
++;

3538 
	`unifi_åa˚
(
¥iv
, 
UDBG5
,

3540 
queue
, 
pkt_d©a
->
ho°_èg
);

3544 
	`func_exô
();

3545  
NULL
;

3546 
	}
}

3549 
	$uf_qdisc›_ª£t
(
Qdisc
* 
qd
)

3551 
uf_sched_d©a
 *
q
 = 
	`qdisc_¥iv
(
qd
);

3552 
queue
;

3553 
	`func_íãr
();

3555 
queue
 = 0; queuê< 
UNIFI_TRAFFIC_Q_MAX
; queue++) {

3556 
	`qdisc_ª£t
(
q
->
queues
[
queue
]);

3558 
qd
->
q
.
qÀn
 = 0;

3560 
	`func_exô
();

3561 
	}
}

3564 
	$uf_qdisc›_de°roy
(
Qdisc
* 
qd
)

3566 
uf_sched_d©a
 *
q
 = 
	`qdisc_¥iv
(
qd
);

3567 
queue
;

3569 
	`func_íãr
();

3571 
queue
=0; queuê< 
UNIFI_TRAFFIC_Q_MAX
; queue++) {

3572 
	`qdisc_de°roy
(
q
->
queues
[
queue
]);

3573 
q
->
queues
[
queue
] = &
no›_qdisc
;

3576 
	`func_exô
();

3577 
	}
}

3581 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,25)

3582 
	$uf_qdisc›_tu√
(
Qdisc
 *
qd
, 
∆©å
 *
›t
)

3584 
	$uf_qdisc›_tu√
(
Qdisc
 *
qd
, 
π©å
 *
›t
)

3587 
	`func_íãr
();

3588 
	`func_exô
();

3590 
	}
}

3594 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,25)

3595 
	$uf_qdisc›_öô
(
Qdisc
 *
qd
, 
∆©å
 *
›t
)

3597 
	$uf_qdisc›_öô
(
Qdisc
 *
qd
, 
π©å
 *
›t
)

3600 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,27)

3601 
√t_devi˚
 *
dev
 = 
qd
->
dev_queue
->dev;

3603 
√t_devi˚
 *
dev
 = 
qd
->dev;

3605 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

3606 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

3607 
uf_sched_d©a
 *
q
 = 
	`qdisc_¥iv
(
qd
);

3608 
îr
 = 0, 
i
;

3610 
	`func_íãr
();

3613 i‡(
qd
->
Êags
 & 
TCQ_F_INGRESS
) {

3614 
	`func_exô
();

3615  -
EINVAL
;

3619 i‡(
›t
) {

3620 
îr
 = 
	`uf_qdisc›_tu√
(
qd
, 
›t
);

3624 
i
 = 0; i < 
UNIFI_TRAFFIC_Q_MAX
; i++) {

3625 
q
->
queues
[
i
] = 
	`UF_QDISC_CREATE_DFLT
(
dev
, &
pfifo_qdisc_›s
,

3626 
qd
->
h™dÀ
);

3627 i‡(!
q
->
queues
[
i
]) {

3628 
q
->
queues
[
i
] = &
no›_qdisc
;

3629 
	`unifi_îr‹
(
¥iv
, "%s child qdisc %i creation failed\n");

3632 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "%s: child qdisc=0x%p\n",

3633 
dev
->
«me
, 
q
->
queues
[
i
]);

3636 
	`func_exô_r
(
îr
);

3637  
îr
;

3638 
	}
}

3641 
	$uf_qdisc›_dump
(
Qdisc
 *
qd
, 
sk_buff
 *
skb
)

3643 
	`func_íãr
();

3644 
	`func_exô_r
(
skb
->
Àn
);

3645  
skb
->
Àn
;

3646 
	}
}

3651 #ifde‡
CSR_SUPPORT_WEXT


3672 
	$uf_√tdev_evít
(
nŸifõr_block
 *
nŸif
, 
evít
, * 
±r
) {

3673 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3, 11, 0)

3674 
√t_devi˚
 *
√tdev
 = 
	`√tdev_nŸifõr_öfo_to_dev
(
±r
);

3676 
√t_devi˚
 *
√tdev
 = 
±r
;

3678 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
√tdev
);

3679 
unifi_¥iv_t
 *
¥iv
 = 
NULL
;

3680 c⁄° 
C§WifiMacAddªss
 
brﬂdˇ°_addªss
 = {{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}};

3685 i‡(
	`uf_föd_√tdev_¥iv
(
öãrÁ˚Priv
) == -1) {

3686 
	`unifi_åa˚
(
NULL
, 
UDBG1
, "uf_netdev_event: ignoreÉ=%d,Ötr=%p,Öriv=%p %s\n",

3687 
evít
, 
±r
, 
öãrÁ˚Priv
, 
√tdev
->
«me
);

3691 
evít
) {

3692 
NETDEV_CHANGE
:

3693 
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

3694 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "NETDEV_CHANGE: %p %s %s waiting for it\n",

3695 
±r
,

3696 
√tdev
->
«me
,

3697 
öãrÁ˚Priv
->
waô_√tdev_ch™ge
 ? "" : "not");

3699 i‡(
öãrÁ˚Priv
->
waô_√tdev_ch™ge
) {

3700 
	`UF_NETIF_TX_WAKE_ALL_QUEUES
(
¥iv
->
√tdev
[
öãrÁ˚Priv
->
I¡îÁ˚Tag
]);

3701 
öãrÁ˚Priv
->
c⁄√˘ed
 = 
UnifiC⁄√˘ed
;

3702 
öãrÁ˚Priv
->
waô_√tdev_ch™ge
 = 
FALSE
;

3704 
	`uf_¥o˚ss_rx_≥ndög_queue
(
¥iv
, 
UF_UNCONTROLLED_PORT_Q
, 
brﬂdˇ°_addªss
, 1,
öãrÁ˚Priv
->
I¡îÁ˚Tag
);

3705 
	`uf_¥o˚ss_rx_≥ndög_queue
(
¥iv
, 
UF_CONTROLLED_PORT_Q
, 
brﬂdˇ°_addªss
, 1,
öãrÁ˚Priv
->
I¡îÁ˚Tag
);

3713 
	}
}

3715 
nŸifõr_block
 
	guf_√tdev_nŸifõr
 = {

3716 .
nŸifõr_ˇŒ
 = 
uf_√tdev_evít
,

3722 
	$¥o˚ss_amsdu
(
unifi_¥iv_t
 *
¥iv
, 
CSR_SIGNAL
 *
sig«l
, 
bulk_d©a_∑øm_t
 *
bulkd©a
)

3724 
C§Uöt32
 
off£t
;

3725 
C§Uöt32
 
Àngth
 = 
bulkd©a
->
d
[0].
d©a_Àngth
;

3726 
C§Uöt32
 
sub‰ame_Àngth
, 
sub‰ame_body_Àngth
, 
dŸ11_hdr_size
;

3727 
C§Uöt8
 *
±r
;

3728 
bulk_d©a_∑øm_t
 
sub‰ame_bulkd©a
;

3729 
C§Uöt8
 *
dŸ11_hdr_±r
 = (C§Uöt8*)
bulkd©a
->
d
[0].
os_d©a_±r
;

3730 
C§Resu…
 
c§Resu…
;

3731 
C§Uöt16
 
‰ameC⁄åﬁ
;

3732 
C§Uöt8
 *
qos_c⁄åﬁ_±r
;

3734 
‰ameC⁄åﬁ
 = 
	`À16_to_˝u
(*((
C§Uöt16
*)
dŸ11_hdr_±r
));

3735 
qos_c⁄åﬁ_±r
 = 
dŸ11_hdr_±r
 + (((
‰ameC⁄åﬁ
 & 
IEEE802_11_FC_TO_DS_MASK
Ë&& (‰ameC⁄åﬁ & 
IEEE802_11_FC_FROM_DS_MASK
))?30: 24);

3736 if(!(*
qos_c⁄åﬁ_±r
 & 
IEEE802_11_QC_A_MSDU_PRESENT
)) {

3737 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "%s: cÆlög unifi_rx()", 
__FUNCTION__
);

3738 
	`unifi_rx
(
¥iv
, 
sig«l
, 
bulkd©a
);

3741 *
qos_c⁄åﬁ_±r
 &~(
IEEE802_11_QC_A_MSDU_PRESENT
);

3743 
±r
 = 
qos_c⁄åﬁ_±r
 + 2;

3744 
off£t
 = 
dŸ11_hdr_size
 = 
±r
 - 
dŸ11_hdr_±r
;

3746 
Àngth
 > (
off£t
 + (
ëhhdr
Ë+ (
Œc_¢≠_hdr_t
))) {

3747 
sub‰ame_body_Àngth
 = 
	`¡ohs
(((
ëhhdr
*)
±r
)->
h_¥Ÿo
);

3748 if(
sub‰ame_body_Àngth
 > 
IEEE802_11_MAX_DATA_LEN
) {

3749 
	`unifi_îr‹
(
¥iv
, "%s: bad sub‰ame_body_Àngth = %d\n", 
__FUNCTION__
, 
sub‰ame_body_Àngth
);

3752 
sub‰ame_Àngth
 = (
ëhhdr
Ë+ 
sub‰ame_body_Àngth
;

3753 
	`mem£t
(&
sub‰ame_bulkd©a
, 0, (
bulk_d©a_∑øm_t
));

3755 
c§Resu…
 = 
	`unifi_√t_d©a_mÆloc
(
¥iv
, &
sub‰ame_bulkd©a
.
d
[0], 
dŸ11_hdr_size
 + 
sub‰ame_body_Àngth
);

3757 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

3758 
	`unifi_îr‹
(
¥iv
, "%s: unifi_√t_d©a_mÆlo¯Áûed\n", 
__FUNCTION__
);

3762 
	`mem˝y
((
C§Uöt8
*)
sub‰ame_bulkd©a
.
d
[0].
os_d©a_±r
, 
dŸ11_hdr_±r
, 
dŸ11_hdr_size
);

3766 i‡((
‰ameC⁄åﬁ
 & 
IEEE802_11_FC_TO_DS_MASK
Ë&& !(‰ameC⁄åﬁ & 
IEEE802_11_FC_FROM_DS_MASK
)){

3767 
	`mem˝y
((
C§Uöt8
*)
sub‰ame_bulkd©a
.
d
[0].
os_d©a_±r
 + 
IEEE802_11_ADDR3_OFFSET
, ((
ëhhdr
*)
±r
)->
h_de°
, 
ETH_ALEN
);

3769 i‡(!(
‰ameC⁄åﬁ
 & 
IEEE802_11_FC_TO_DS_MASK
Ë&& (‰ameC⁄åﬁ & 
IEEE802_11_FC_FROM_DS_MASK
)){

3770 
	`mem˝y
((
C§Uöt8
*)
sub‰ame_bulkd©a
.
d
[0].
os_d©a_±r
 + 
IEEE802_11_ADDR3_OFFSET
,

3771 ((
ëhhdr
*)
±r
)->
h_sour˚
,

3772 
ETH_ALEN
);

3775 
	`mem˝y
((
C§Uöt8
*)
sub‰ame_bulkd©a
.
d
[0].
os_d©a_±r
 + 
dŸ11_hdr_size
,

3776 
±r
 + (
ëhhdr
),

3777 
sub‰ame_body_Àngth
);

3778 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "%s: cÆlög unifi_rx.Üígth = %d sub‰ame_Àngth = %d\n", 
__FUNCTION__
, 
Àngth
, 
sub‰ame_Àngth
);

3779 
	`unifi_rx
(
¥iv
, 
sig«l
, &
sub‰ame_bulkd©a
);

3781 
sub‰ame_Àngth
 = (subframe_length + 3)&(~0x3);

3782 
±r
 +
sub‰ame_Àngth
;

3783 
off£t
 +
sub‰ame_Àngth
;

3785 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
->
d
[0]);

3786 
	}
}

3789 
	#SN_TO_INDEX
(
__ba_£ssi⁄
, 
__¢
Ë(((__¢ - __ba_£ssi⁄->
°¨t_¢
Ë& 0xFFFË% __ba_£ssi⁄->
wöd_size
)

	)

3792 
	#ADVANCE_EXPECTED_SN
(
__ba_£ssi⁄
) \

3794 
__ba_£ssi⁄
->
ex≥˘ed_¢
++; \

3795 
__ba_£ssi⁄
->
ex≥˘ed_¢
 &= 0xFFF; \

3796 }

	)

3798 
	#FREE_BUFFER_SLOT
(
__ba_£ssi⁄
, 
__ödex
) \

3800 
__ba_£ssi⁄
->
occupõd_¶Ÿs
--; \

3801 
__ba_£ssi⁄
->
buf„r
[
__ödex
].
a˘ive
 = 
FALSE
; \

3802 
	`ADVANCE_EXPECTED_SN
(
__ba_£ssi⁄
); \

3803 }

	)

3805 
	$add_‰ame_to_ba_com∂ëe
(
unifi_¥iv_t
 *
¥iv
,

3806 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
,

3807 
‰ame_desc_°ru˘
 *
‰ame_desc
)

3809 
öãrÁ˚Priv
->
ba_com∂ëe
[öãrÁ˚Priv->
ba_com∂ëe_ödex
] = *
‰ame_desc
;

3810 
öãrÁ˚Priv
->
ba_com∂ëe_ödex
++;

3811 
	}
}

3814 
	$upd©e_ex≥˘ed_¢
(
unifi_¥iv_t
 *
¥iv
,

3815 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
,

3816 
ba_£ssi⁄_rx_°ru˘
 *
ba_£ssi⁄
,

3817 
C§Uöt16
 
¢
)

3819 
i
, 
j
;

3820 
C§Uöt16
 
g≠
;

3822 
g≠
 = (
¢
 - 
ba_£ssi⁄
->
ex≥˘ed_¢
) & 0xFFF;

3823 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "%s:Öroc˚s†thê‰ame†u∞tÿ√w_ex≥˘ed_¢ = %d g≠ = %d\n", 
__FUNCTION__
, 
¢
, 
g≠
);

3824 
j
 = 0; j < 
g≠
 && j < 
ba_£ssi⁄
->
wöd_size
; j++) {

3825 
i
 = 
	`SN_TO_INDEX
(
ba_£ssi⁄
, ba_£ssi⁄->
ex≥˘ed_¢
);

3826 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "%s:Öroc˚s†thê¶Ÿ index = %d\n", 
__FUNCTION__
, 
i
);

3827 if(
ba_£ssi⁄
->
buf„r
[
i
].
a˘ive
) {

3828 
	`add_‰ame_to_ba_com∂ëe
(
¥iv
, 
öãrÁ˚Priv
, &
ba_£ssi⁄
->
buf„r
[
i
]);

3829 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "%s:Öroc˚s†thê‰amê© index = %dÉx≥˘ed_¢ = %d\n", 
__FUNCTION__
, 
i
, 
ba_£ssi⁄
->
ex≥˘ed_¢
);

3830 
	`FREE_BUFFER_SLOT
(
ba_£ssi⁄
, 
i
);

3832 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "%s:Ém±y slŸáàödex = %d\n", 
__FUNCTION__
, 
i
);

3833 
	`ADVANCE_EXPECTED_SN
(
ba_£ssi⁄
);

3836 
ba_£ssi⁄
->
ex≥˘ed_¢
 = 
¢
;

3837 
	}
}

3840 
	$com∂ëe_ªady_£quí˚
(
unifi_¥iv_t
 *
¥iv
,

3841 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
,

3842 
ba_£ssi⁄_rx_°ru˘
 *
ba_£ssi⁄
)

3844 
i
;

3846 
i
 = 
	`SN_TO_INDEX
(
ba_£ssi⁄
, ba_£ssi⁄->
ex≥˘ed_¢
);

3847 
ba_£ssi⁄
->
buf„r
[
i
].
a˘ive
) {

3848 
	`add_‰ame_to_ba_com∂ëe
(
¥iv
, 
öãrÁ˚Priv
, &
ba_£ssi⁄
->
buf„r
[
i
]);

3849 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "%s: com∂ëed st‹ed føme”x≥˘ed_¢=%dË© i = %d\n", 
__FUNCTION__
, 
ba_£ssi⁄
->
ex≥˘ed_¢
, 
i
);

3850 
	`FREE_BUFFER_SLOT
(
ba_£ssi⁄
, 
i
);

3851 
i
 = 
	`SN_TO_INDEX
(
ba_£ssi⁄
, ba_£ssi⁄->
ex≥˘ed_¢
);

3853 
	}
}

3856 
	$s¸ﬁl_ba_wödow
(
unifi_¥iv_t
 *
¥iv
,

3857 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
,

3858 
ba_£ssi⁄_rx_°ru˘
 *
ba_£ssi⁄
,

3859 
C§Uöt16
 
¢
)

3861 if(((
¢
 - 
ba_£ssi⁄
->
ex≥˘ed_¢
) & 0xFFF) <= 2048) {

3862 
	`upd©e_ex≥˘ed_¢
(
¥iv
, 
öãrÁ˚Priv
, 
ba_£ssi⁄
, 
¢
);

3863 
	`com∂ëe_ªady_£quí˚
(
¥iv
, 
öãrÁ˚Priv
, 
ba_£ssi⁄
);

3865 
	}
}

3868 
	$c⁄sume_‰ame_‹_gë_buf„r_ödex
(
unifi_¥iv_t
 *
¥iv
,

3869 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
,

3870 
ba_£ssi⁄_rx_°ru˘
 *
ba_£ssi⁄
,

3871 
C§Uöt16
 
¢
,

3872 
‰ame_desc_°ru˘
 *
‰ame_desc
) {

3873 
i
;

3874 
C§Uöt16
 
¢_ãmp
;

3876 if(((
¢
 - 
ba_£ssi⁄
->
ex≥˘ed_¢
) & 0xFFF) <= 2048) {

3879 if(!
ba_£ssi⁄
->
åiggî_ba_a·î_s¢
){

3880 
ba_£ssi⁄
->
åiggî_ba_a·î_s¢
 = 
TRUE
;

3883 
¢_ãmp
 = 
ba_£ssi⁄
->
ex≥˘ed_¢
 + ba_£ssi⁄->
wöd_size
;

3884 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "%s:Çew føme: sn=%d\n", 
__FUNCTION__
, 
¢
);

3885 if(!(((
¢
 - 
¢_ãmp
) & 0xFFF) > 2048)) {

3886 
C§Uöt16
 
√w_ex≥˘ed_¢
;

3887 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "%s: fømêi†ouào‡wödow\n", 
__FUNCTION__
);

3888 
¢_ãmp
 = (
¢
 - 
ba_£ssi⁄
->
wöd_size
) & 0xFFF;

3889 
√w_ex≥˘ed_¢
 = (
¢_ãmp
 + 1) & 0xFFF;

3890 
	`upd©e_ex≥˘ed_¢
(
¥iv
, 
öãrÁ˚Priv
, 
ba_£ssi⁄
, 
√w_ex≥˘ed_¢
);

3892 
i
 = -1;

3893 i‡(
¢
 =
ba_£ssi⁄
->
ex≥˘ed_¢
) {

3894 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "%s: s¿ba_£ssi⁄->ex≥˘ed_¢ = %d\n", 
__FUNCTION__
, 
¢
);

3895 
	`ADVANCE_EXPECTED_SN
(
ba_£ssi⁄
);

3896 
	`add_‰ame_to_ba_com∂ëe
(
¥iv
, 
öãrÁ˚Priv
, 
‰ame_desc
);

3898 
i
 = 
	`SN_TO_INDEX
(
ba_£ssi⁄
, 
¢
);

3899 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "%s: sn(%dË!ba_£ssi⁄->ex≥˘ed_¢(%d), i = %d\n", 
__FUNCTION__
, 
¢
, 
ba_£ssi⁄
->
ex≥˘ed_¢
, 
i
);

3900 i‡(
ba_£ssi⁄
->
buf„r
[
i
].
a˘ive
) {

3901 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "%s: fªê‰amê© i = %d\n", 
__FUNCTION__
, 
i
);

3902 
i
 = -1;

3903 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
‰ame_desc
->
bulkd©a
.
d
[0]);

3907 
i
 = -1;

3908 if(!
ba_£ssi⁄
->
åiggî_ba_a·î_s¢
){

3909 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "%s: fømêbef‹ês¢,Öas†ô up: sn=%d\n", 
__FUNCTION__
, 
¢
);

3910 
	`add_‰ame_to_ba_com∂ëe
(
¥iv
, 
öãrÁ˚Priv
, 
‰ame_desc
);

3912 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "%s: old føme, dr›: sn=%d,Éx≥˘ed_¢=%d\n", 
__FUNCTION__
, 
¢
, 
ba_£ssi⁄
->
ex≥˘ed_¢
);

3913 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
‰ame_desc
->
bulkd©a
.
d
[0]);

3916  
i
;

3917 
	}
}

3921 
	$¥o˚ss_ba_‰ame
(
unifi_¥iv_t
 *
¥iv
,

3922 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
,

3923 
ba_£ssi⁄_rx_°ru˘
 *
ba_£ssi⁄
,

3924 
‰ame_desc_°ru˘
 *
‰ame_desc
)

3926 
i
;

3927 
C§Uöt16
 
¢
 = 
‰ame_desc
->sn;

3929 i‡(
ba_£ssi⁄
->
timeout
) {

3930 
	`mod_timî
(&
ba_£ssi⁄
->
timî
, (
jiffõs
 + 
	`u£cs_to_jiffõs
((ba_£ssi⁄->
timeout
) * 1024)));

3932 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "%s: gŸ føme(¢=%d)\n", 
__FUNCTION__
, 
¢
);

3934 
i
 = 
	`c⁄sume_‰ame_‹_gë_buf„r_ödex
(
¥iv
, 
öãrÁ˚Priv
, 
ba_£ssi⁄
, 
¢
, 
‰ame_desc
);

3935 if(
i
 >= 0) {

3936 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "%s: st‹ê‰ame(¢=%dË© i = %d\n", 
__FUNCTION__
, 
¢
, 
i
);

3937 
ba_£ssi⁄
->
buf„r
[
i
] = *
‰ame_desc
;

3938 
ba_£ssi⁄
->
buf„r
[
i
].
ªcv_time
 = 
	`C§TimeGë
(
NULL
);

3939 
ba_£ssi⁄
->
occupõd_¶Ÿs
++;

3941 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "%s: fømêc⁄sumed - s¿%d\n", 
__FUNCTION__
, 
¢
);

3943 
	`com∂ëe_ªady_£quí˚
(
¥iv
, 
öãrÁ˚Priv
, 
ba_£ssi⁄
);

3944 
	}
}

3947 
	$¥o˚ss_ba_com∂ëe
(
unifi_¥iv_t
 *
¥iv
, 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
)

3949 
‰ame_desc_°ru˘
 *
‰ame_desc
;

3950 
C§Uöt8
 
i
;

3952 
i
 = 0; i < 
öãrÁ˚Priv
->
ba_com∂ëe_ödex
; i++) {

3953 
‰ame_desc
 = &
öãrÁ˚Priv
->
ba_com∂ëe
[
i
];

3954 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "%s: cÆlögÖro˚ss_amsdu()\n", 
__FUNCTION__
);

3955 
	`¥o˚ss_amsdu
(
¥iv
, &
‰ame_desc
->
sig«l
, &‰ame_desc->
bulkd©a
);

3957 
öãrÁ˚Priv
->
ba_com∂ëe_ödex
 = 0;

3959 
	}
}

3966 
	$check_ba_‰ame_age_timeout
–
unifi_¥iv_t
 *
¥iv
,

3967 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
,

3968 
ba_£ssi⁄_rx_°ru˘
 *
ba_£ssi⁄
)

3970 
C§Time
 
now
;

3971 
C§Time
 
age
;

3972 
C§Uöt8
 
i
, 
j
;

3973 
C§Uöt16
 
¢_ãmp
;

3978 
C§Uöt8
 
g≠
=1;

3980 
now
 = 
	`C§TimeGë
(
NULL
);

3982 i‡(
ba_£ssi⁄
->
occupõd_¶Ÿs
)

3989 
¢_ãmp
 = (
ba_£ssi⁄
->
ex≥˘ed_¢
 + 1) & 0xFFF;

3991 
j
 = 0; j < 
ba_£ssi⁄
->
wöd_size
; j++)

3993 
i
 = 
	`SN_TO_INDEX
(
ba_£ssi⁄
, 
¢_ãmp
);

3995 if(
ba_£ssi⁄
->
buf„r
[
i
].
a˘ive
)

3997 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "checkágeát slot index = %d sn = %dÑecv_time = %uÇow = %u\n",

3998 
i
,

3999 
ba_£ssi⁄
->
buf„r
[
i
].
¢
,

4000 
ba_£ssi⁄
->
buf„r
[
i
].
ªcv_time
,

4001 
now
);

4003 i‡(
ba_£ssi⁄
->
buf„r
[
i
].
ªcv_time
 > 
now
)

4006 
age
 = 
	`C§TimeAdd
((
C§Time
)
	`C§TimeSub
(
CSR_SCHED_TIME_MAX
, 
ba_£ssi⁄
->
buf„r
[
i
].
ªcv_time
), 
now
);

4010 
age
 = (
C§Time
)
	`C§TimeSub
(
now
, 
ba_£ssi⁄
->
buf„r
[
i
].
ªcv_time
);

4013 i‡(
age
 >
CSR_WIFI_BA_MPDU_FRAME_AGE_TIMEOUT
)

4015 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "releaseÅhe frameát index = %d gap = %dÉxpected_sn = %d sn = %d\n",

4016 
i
,

4017 
g≠
,

4018 
ba_£ssi⁄
->
ex≥˘ed_¢
,

4019 
ba_£ssi⁄
->
buf„r
[
i
].
¢
);

4022 
g≠
--)

4024 
	`ADVANCE_EXPECTED_SN
(
ba_£ssi⁄
);

4026 
	`add_‰ame_to_ba_com∂ëe
(
¥iv
, 
öãrÁ˚Priv
, &
ba_£ssi⁄
->
buf„r
[
i
]);

4027 
	`FREE_BUFFER_SLOT
(
ba_£ssi⁄
, 
i
);

4028 
	`com∂ëe_ªady_£quí˚
(
¥iv
, 
öãrÁ˚Priv
, 
ba_£ssi⁄
);

4036 
¢_ãmp
 = (sn_temp + 1) & 0xFFF;

4037 
g≠
++;

4041 
	}
}

4044 
	$¥o˚ss_ma_∑ckë_îr‹_öd
(
unifi_¥iv_t
 *
¥iv
, 
CSR_SIGNAL
 *
sig«l
, 
bulk_d©a_∑øm_t
 *
bulkd©a
)

4046 
C§Uöt16
 
öãrÁ˚Tag
;

4047 c⁄° 
CSR_MA_PACKET_ERROR_INDICATION
 *
pkt_îr_öd
 = &
sig«l
->
u
.
MaPackëEº‹Indiˇti⁄
;

4048 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
;

4049 
ba_£ssi⁄_rx_°ru˘
 *
ba_£ssi⁄
;

4050 
C§Uöt8
 
ba_£ssi⁄_idx
 = 0;

4051 
CSR_PRIORITY
 
U£rPri‹ôy
;

4052 
CSR_SEQUENCE_NUMBER
 
¢
;

4054 
	`func_íãr
();

4056 
öãrÁ˚Tag
 = (
pkt_îr_öd
->
VútuÆI¡îÁ˚Idítifõr
 & 0xff);

4060 i‡(
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
)

4062 
	`unifi_îr‹
(
¥iv
, "%s: MaPackëEº‹Indiˇti⁄ indiˇti⁄ wôh bad i¡îÁ˚Tag %d\n", 
__FUNCTION__
, 
öãrÁ˚Tag
);

4063 
	`func_exô
();

4067 
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

4068 
U£rPri‹ôy
 = 
pkt_îr_öd
->UserPriority;

4069 if(
U£rPri‹ôy
 > 15) {

4070 
	`unifi_îr‹
(
¥iv
, "%s: MaPackëEº‹Indiˇti⁄ indiˇti⁄ wôh bad U£rPri‹ôy=%d\n", 
__FUNCTION__
, 
U£rPri‹ôy
);

4071 
	`func_exô
();

4073 
¢
 = 
pkt_îr_öd
->
Sequí˚Numbî
;

4075 
	`down
(&
¥iv
->
ba_muãx
);

4077 
ba_£ssi⁄_idx
=0; ba_£ssi⁄_idx < 
MAX_SUPPORTED_BA_SESSIONS_RX
; ba_session_idx++){

4078 
ba_£ssi⁄
 = 
öãrÁ˚Priv
->
ba_£ssi⁄_rx
[
ba_£ssi⁄_idx
];

4079 i‡(
ba_£ssi⁄
){

4080 i‡((!
	`memcmp
(
ba_£ssi⁄
->
macAddªss
.
a
, 
pkt_îr_öd
->
PìrQ°aAddªss
.
x
, 
ETH_ALEN
)Ë&& (ba_£ssi⁄->
tID
 =
U£rPri‹ôy
)){

4081 i‡(
ba_£ssi⁄
->
timeout
) {

4082 
	`mod_timî
(&
ba_£ssi⁄
->
timî
, (
jiffõs
 + 
	`u£cs_to_jiffõs
((ba_£ssi⁄->
timeout
) * 1024)));

4084 
	`s¸ﬁl_ba_wödow
(
¥iv
, 
öãrÁ˚Priv
, 
ba_£ssi⁄
, 
¢
);

4090 
	`up
(&
¥iv
->
ba_muãx
);

4091 
	`¥o˚ss_ba_com∂ëe
(
¥iv
, 
öãrÁ˚Priv
);

4092 
	`func_exô
();

4093 
	}
}

	@os.c

22 
	~"unifi_¥iv.h
"

46 
C§Resu…


47 
	$unifi_√t_d©a_mÆloc
(*
o•riv
, 
bulk_d©a_desc_t
 *
bulk_d©a_¶Ÿ
, 
size
)

49 
sk_buff
 *
skb
;

50 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
o•riv
;

51 
rounded_Àngth
;

53 i‡(
¥iv
->
ˇrd_öfo
.
sdio_block_size
 == 0) {

54 
	`unifi_îr‹
(
¥iv
, "unifi_net_data_malloc: Invalid SDIO block size\n");

55  
CSR_RESULT_FAILURE
;

58 
rounded_Àngth
 = (
size
 + 
¥iv
->
ˇrd_öfo
.
sdio_block_size
 - 1) & ~(priv->card_info.sdio_block_size - 1);

64 
skb
 = 
	`dev_Æloc_skb
(
rounded_Àngth
 + 2 + 
ETH_HLEN
 + 
CSR_WIFI_ALIGN_BYTES
);

65 i‡(! 
skb
) {

66 
	`unifi_îr‹
(
o•riv
, "alloc_skb failed.\n");

67 
bulk_d©a_¶Ÿ
->
os_√t_buf_±r
 = 
NULL
;

68 
bulk_d©a_¶Ÿ
->
√t_buf_Àngth
 = 0;

69 
bulk_d©a_¶Ÿ
->
os_d©a_±r
 = 
NULL
;

70 
bulk_d©a_¶Ÿ
->
d©a_Àngth
 = 0;

71  
CSR_RESULT_FAILURE
;

74 
bulk_d©a_¶Ÿ
->
os_√t_buf_±r
 = (c⁄° *)
skb
;

75 
bulk_d©a_¶Ÿ
->
√t_buf_Àngth
 = 
rounded_Àngth
 + 2 + 
ETH_HLEN
 + 
CSR_WIFI_ALIGN_BYTES
;

76 
bulk_d©a_¶Ÿ
->
os_d©a_±r
 = (c⁄° *)
skb
->
d©a
;

77 
bulk_d©a_¶Ÿ
->
d©a_Àngth
 = 
size
;

79  
CSR_RESULT_SUCCESS
;

80 
	}
}

100 
	$unifi_√t_d©a_‰ì
(*
o•riv
, 
bulk_d©a_desc_t
 *
bulk_d©a_¶Ÿ
)

102 
sk_buff
 *
skb
;

103 
	`CSR_UNUSED
(
o•riv
);

105 
skb
 = (
sk_buff
 *)
bulk_d©a_¶Ÿ
->
os_√t_buf_±r
;

106 
	`dev_k‰ì_skb
(
skb
);

108 
bulk_d©a_¶Ÿ
->
√t_buf_Àngth
 = 0;

109 
bulk_d©a_¶Ÿ
->
d©a_Àngth
 = 0;

110 
bulk_d©a_¶Ÿ
->
os_d©a_±r
 = bulk_d©a_¶Ÿ->
os_√t_buf_±r
 = 
NULL
;

112 
	}
}

132 
C§Resu…


133 
	$unifi_√t_dma_Æign
(*
o•riv
, 
bulk_d©a_desc_t
 *
bulk_d©a_¶Ÿ
)

135 
sk_buff
 *
skb
;

136 
buf_addªss
;

137 
off£t
;

138 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
o•riv
;

140 i‡((
bulk_d©a_¶Ÿ
 =
NULL
Ë|| (
CSR_WIFI_ALIGN_BYTES
 == 0)) {

141  
CSR_RESULT_SUCCESS
;

144 i‡((
bulk_d©a_¶Ÿ
->
os_d©a_±r
 =
NULL
Ë|| (bulk_d©a_¶Ÿ->
d©a_Àngth
 == 0)) {

145  
CSR_RESULT_SUCCESS
;

148 
buf_addªss
 = ()(
bulk_d©a_¶Ÿ
->
os_d©a_±r
Ë& (
CSR_WIFI_ALIGN_BYTES
 - 1);

150 
	`unifi_åa˚
(
¥iv
, 
UDBG5
,

152 
bulk_d©a_¶Ÿ
->
os_d©a_±r
, 
buf_addªss
);

154 
off£t
 = 
CSR_WIFI_ALIGN_BYTES
 - 
buf_addªss
;

155 i‡(
off£t
 < 0) {

156 
	`unifi_îr‹
(
¥iv
, "unifi_√t_dma_Æign: Faûed (off£t=%d)\n", 
off£t
);

157  
CSR_RESULT_FAILURE
;

160 
skb
 = (
sk_buff
*)(
bulk_d©a_¶Ÿ
->
os_√t_buf_±r
);

161 
	`skb_ª£rve
(
skb
, 
off£t
);

162 
bulk_d©a_¶Ÿ
->
os_√t_buf_±r
 = (c⁄° *)
skb
;

163 
bulk_d©a_¶Ÿ
->
os_d©a_±r
 = (c⁄° *)(
skb
->
d©a
);

165  
CSR_RESULT_SUCCESS
;

167 
	}
}

169 #ifde‡
ANDROID_TIMESTAMP


170 vﬁ©ûê
	g¥ötk_˝u
 = 
UINT_MAX
;

171 
	gtbuf
[30];

173 * 
	$¥öt_time
()

175 
t
;

176 
«no£c_ªm
;

178 
t
 = 
	`˝u_˛ock
(
¥ötk_˝u
);

179 
«no£c_ªm
 = 
	`do_div
(
t
, 1000000000);

180 
	`•rötf
(
tbuf
, "[%5lu.%06lu] ",

181 (Ë
t
,

182 
«no£c_ªm
 / 1000);

184  
tbuf
;

185 
	}
}

190 
unifi_debug
;

192 #ifde‡
UNIFI_DEBUG


193 
	#DEBUG_BUFFER_SIZE
 120

	)

195 
	#FORMAT_TRACE
(
_s
, 
_Àn
, 
_¨gs
, 
_fmt
) \

197 
	`va_°¨t
(
_¨gs
, 
_fmt
); \

198 
_Àn
 +
	`v¢¥ötf
(&(
_s
)[_len], \

199 (
DEBUG_BUFFER_SIZE
 - 
_Àn
), \

200 
_fmt
, 
_¨gs
); \

201 
	`va_íd
(
_¨gs
); \

202 i‡(
_Àn
 >
DEBUG_BUFFER_SIZE
) { \

203 (
_s
)[
DEBUG_BUFFER_SIZE
 - 2] = '\n'; \

204 (
_s
)[
DEBUG_BUFFER_SIZE
 - 1] = 0; \

206 } 0)

	)

209 
	$unifi_îr‹
(* 
o•riv
, c⁄° *
fmt
, ...)

211 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*Ë
o•riv
;

212 
s
[
DEBUG_BUFFER_SIZE
];

213 
va_li°
 
¨gs
;

214 
Àn
;

215 #ifde‡
ANDROID_TIMESTAMP


216 i‡(
¥iv
 !
NULL
) {

217 
Àn
 = 
	`¢¥ötf
(
s
, 
DEBUG_BUFFER_SIZE
, 
KERN_ERR
 "%†unifi%d: ", 
	`¥öt_time
(), 
¥iv
->
ö°™˚
);

219 
Àn
 = 
	`¢¥ötf
(
s
, 
DEBUG_BUFFER_SIZE
, 
KERN_ERR
 "%†unifi: ", 
	`¥öt_time
());

222 i‡(
¥iv
 !
NULL
) {

223 
Àn
 = 
	`¢¥ötf
(
s
, 
DEBUG_BUFFER_SIZE
, 
KERN_ERR
 "unifi%d: ", 
¥iv
->
ö°™˚
);

225 
Àn
 = 
	`¢¥ötf
(
s
, 
DEBUG_BUFFER_SIZE
, 
KERN_ERR
 "unifi: ");

228 
	`FORMAT_TRACE
(
s
, 
Àn
, 
¨gs
, 
fmt
);

230 
	`¥ötk
("%s", 
s
);

231 
	}
}

234 
	$unifi_w¨nög
(* 
o•riv
, c⁄° *
fmt
, ...)

236 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*Ë
o•riv
;

237 
s
[
DEBUG_BUFFER_SIZE
];

238 
va_li°
 
¨gs
;

239 
Àn
;

241 #ifde‡
ANDROID_TIMESTAMP


242 i‡(
¥iv
 !
NULL
) {

243 
Àn
 = 
	`¢¥ötf
(
s
, 
DEBUG_BUFFER_SIZE
, 
KERN_WARNING
 "%†unifi%d: ", 
	`¥öt_time
(), 
¥iv
->
ö°™˚
);

245 
Àn
 = 
	`¢¥ötf
(
s
, 
DEBUG_BUFFER_SIZE
, 
KERN_WARNING
 "%†unifi: ", 
	`¥öt_time
());

248 i‡(
¥iv
 !
NULL
) {

249 
Àn
 = 
	`¢¥ötf
(
s
, 
DEBUG_BUFFER_SIZE
, 
KERN_WARNING
 "unifi%d: ", 
¥iv
->
ö°™˚
);

251 
Àn
 = 
	`¢¥ötf
(
s
, 
DEBUG_BUFFER_SIZE
, 
KERN_WARNING
 "unifi: ");

255 
	`FORMAT_TRACE
(
s
, 
Àn
, 
¨gs
, 
fmt
);

257 
	`¥ötk
("%s", 
s
);

258 
	}
}

262 
	$unifi_nŸi˚
(* 
o•riv
, c⁄° *
fmt
, ...)

264 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*Ë
o•riv
;

265 
s
[
DEBUG_BUFFER_SIZE
];

266 
va_li°
 
¨gs
;

267 
Àn
;

269 #ifde‡
ANDROID_TIMESTAMP


270 i‡(
¥iv
 !
NULL
) {

271 
Àn
 = 
	`¢¥ötf
(
s
, 
DEBUG_BUFFER_SIZE
, 
KERN_NOTICE
 "%†unifi%d: ", 
	`¥öt_time
(), 
¥iv
->
ö°™˚
);

273 
Àn
 = 
	`¢¥ötf
(
s
, 
DEBUG_BUFFER_SIZE
, 
KERN_NOTICE
 "%†unifi: ", 
	`¥öt_time
());

276 i‡(
¥iv
 !
NULL
) {

277 
Àn
 = 
	`¢¥ötf
(
s
, 
DEBUG_BUFFER_SIZE
, 
KERN_NOTICE
 "unifi%d: ", 
¥iv
->
ö°™˚
);

279 
Àn
 = 
	`¢¥ötf
(
s
, 
DEBUG_BUFFER_SIZE
, 
KERN_NOTICE
 "unifi: ");

283 
	`FORMAT_TRACE
(
s
, 
Àn
, 
¨gs
, 
fmt
);

285 
	`¥ötk
("%s", 
s
);

286 
	}
}

290 
	$unifi_öfo
(* 
o•riv
, c⁄° *
fmt
, ...)

292 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*Ë
o•riv
;

293 
s
[
DEBUG_BUFFER_SIZE
];

294 
va_li°
 
¨gs
;

295 
Àn
;

297 #ifde‡
ANDROID_TIMESTAMP


298 i‡(
¥iv
 !
NULL
) {

299 
Àn
 = 
	`¢¥ötf
(
s
, 
DEBUG_BUFFER_SIZE
, 
KERN_INFO
 "%†unifi%d: ", 
	`¥öt_time
(), 
¥iv
->
ö°™˚
);

301 
Àn
 = 
	`¢¥ötf
(
s
, 
DEBUG_BUFFER_SIZE
, 
KERN_INFO
 "%†unifi: ", 
	`¥öt_time
());

304 i‡(
¥iv
 !
NULL
) {

305 
Àn
 = 
	`¢¥ötf
(
s
, 
DEBUG_BUFFER_SIZE
, 
KERN_INFO
 "unifi%d: ", 
¥iv
->
ö°™˚
);

307 
Àn
 = 
	`¢¥ötf
(
s
, 
DEBUG_BUFFER_SIZE
, 
KERN_INFO
 "unifi: ");

311 
	`FORMAT_TRACE
(
s
, 
Àn
, 
¨gs
, 
fmt
);

313 
	`¥ötk
("%s", 
s
);

314 
	}
}

318 
	$unifi_åa˚
(* 
o•riv
, 
Àvñ
, c⁄° *
fmt
, ...)

320 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*Ë
o•riv
;

321 
s
[
DEBUG_BUFFER_SIZE
];

322 
va_li°
 
¨gs
;

323 
Àn
;

325 i‡(
unifi_debug
 >
Àvñ
) {

326 #ifde‡
ANDROID_TIMESTAMP


327 i‡(
¥iv
 !
NULL
) {

328 
Àn
 = 
	`¢¥ötf
(
s
, 
DEBUG_BUFFER_SIZE
, 
KERN_ERR
 "%†unifi%d: ", 
	`¥öt_time
(), 
¥iv
->
ö°™˚
);

330 
Àn
 = 
	`¢¥ötf
(
s
, 
DEBUG_BUFFER_SIZE
, 
KERN_ERR
 "%†unifi: ", 
	`¥öt_time
());

333 i‡(
¥iv
 !
NULL
) {

334 
Àn
 = 
	`¢¥ötf
(
s
, 
DEBUG_BUFFER_SIZE
, 
KERN_ERR
 "unifi%d: ", 
¥iv
->
ö°™˚
);

336 
Àn
 = 
	`¢¥ötf
(
s
, 
DEBUG_BUFFER_SIZE
, 
KERN_ERR
 "unifi: ");

340 
	`FORMAT_TRACE
(
s
, 
Àn
, 
¨gs
, 
fmt
);

342 
	`¥ötk
("%s", 
s
);

344 
	}
}

349 
	$unifi_îr‹_n›
(* 
o•riv
, c⁄° *
fmt
, ...)

351 
	}
}

354 
	$unifi_åa˚_n›
(* 
o•riv
, 
Àvñ
, c⁄° *
fmt
, ...)

356 
	}
}

369 #ifde‡
UNIFI_DEBUG


373 
	$unifi_dump
(*
o•riv
, 
Àvñ
, c⁄° *
msg
, *
mem
, 
C§Uöt16
 
Àn
)

375 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*Ë
o•riv
;

377 i‡(
unifi_debug
 >
Àvñ
) {

378 #ifde‡
ANDROID_TIMESTAMP


379 i‡(
¥iv
 !
NULL
) {

380 
	`¥ötk
(
KERN_ERR
 "%†unifi%d: --- dump: %†---\n", 
	`¥öt_time
(), 
¥iv
->
ö°™˚
, 
msg
 ? msg : "");

382 
	`¥ötk
(
KERN_ERR
 "%†unifi: --- dump: %†---\n", 
	`¥öt_time
(), 
msg
 ? msg : "");

385 i‡(
¥iv
 !
NULL
) {

386 
	`¥ötk
(
KERN_ERR
 "unifi%d: --- dump: %†---\n", 
¥iv
->
ö°™˚
, 
msg
 ? msg : "");

388 
	`¥ötk
(
KERN_ERR
 "unifi: --- dump: %†---\n", 
msg
 ? msg : "");

391 
	`dump
(
mem
, 
Àn
);

393 i‡(
¥iv
 !
NULL
) {

394 
	`¥ötk
(
KERN_ERR
 "unifi%d: ---Énd o‡dum∞---\n", 
¥iv
->
ö°™˚
);

396 
	`¥ötk
(
KERN_ERR
 "unifi: ---Énd of dump ---\n");

399 
	}
}

403 
	$dump
(*
mem
, 
C§Uöt16
 
Àn
)

405 
i
, 
cﬁ
 = 0;

406 *
pd©a
 = (*)
mem
;

407 #ifde‡
ANDROID_TIMESTAMP


408 
	`¥ötk
("time°am∞%†\n", 
	`¥öt_time
());

410 i‡(
mem
 =
NULL
) {

411 
	`¥ötk
("(null dump)\n");

414 
i
 = 0; i < 
Àn
; i++) {

415 i‡(
cﬁ
 == 0) {

416 
	`¥ötk
("0x%02X: ", 
i
);

419 
	`¥ötk
(" %02X", 
pd©a
[
i
]);

421 i‡(++
cﬁ
 == 16) {

422 
	`¥ötk
("\n");

423 
cﬁ
 = 0;

426 i‡(
cﬁ
) {

427 
	`¥ötk
("\n");

429 
	}
}

433 
	$dump16
(*
mem
, 
C§Uöt16
 
Àn
)

435 
i
, 
cﬁ
=0;

436 *
p
 = (*)
mem
;

437 #ifde‡
ANDROID_TIMESTAMP


438 
	`¥ötk
("time°am∞%†\n", 
	`¥öt_time
());

440 
i
 = 0; i < 
Àn
; i+=2) {

441 i‡(
cﬁ
 == 0) {

442 
	`¥ötk
("0x%02X: ", 
i
);

445 
	`¥ötk
(" %04X", *
p
++);

447 i‡(++
cﬁ
 == 8) {

448 
	`¥ötk
("\n");

449 
cﬁ
 = 0;

452 i‡(
cﬁ
) {

453 
	`¥ötk
("\n");

455 
	}
}

458 #ifde‡
CSR_WIFI_HIP_DEBUG_OFFLINE


460 
	$dump_°r
(*
mem
, 
C§Uöt16
 
Àn
)

462 
i
, 
cﬁ
 = 0;

463 *
pd©a
 = (*)
mem
;

464 #ifde‡
ANDROID_TIMESTAMP


465 
	`¥ötk
("time°am∞%†\n", 
	`¥öt_time
());

467 
i
 = 0; i < 
Àn
; i++) {

468 
	`¥ötk
("%c", 
pd©a
[
i
]);

470 i‡(
cﬁ
) {

471 
	`¥ötk
("\n");

474 
	}
}

	@putest.c

15 
	~<löux/vmÆloc.h
>

16 
	~<löux/fúmw¨e.h
>

18 
	~"unifi_¥iv.h
"

19 
	~"c§_wifi_hù_chùhñ≥r.h
"

21 
	#UNIFI_PROC_BOTH
 3

	)

24 
	$unifi_puã°_cmd52_ªad
(
unifi_¥iv_t
 *
¥iv
, *
¨g
)

26 
unifi_puã°_cmd52
 
cmd52_∑øms
;

27 
C§Uöt8
 *
¨g_pos
;

28 
cmd_∑øm_size
;

29 
r
;

30 
C§Resu…
 
c§Resu…
;

31 
ªt_buf„r
[32];

32 
C§Uöt8
 *
ªt_buf„r_pos
;

33 
C§Uöt8
 
ªåõs
;

35 
¨g_pos
 = (
C§Uöt8
*)(((
unifi_puã°_comm™d_t
*)
¨g
) + 1);

36 i‡(
	`gë_u£r
(
cmd_∑øm_size
, (*)
¨g_pos
)) {

37 
	`unifi_îr‹
(
¥iv
,

39  -
EFAULT
;

42 i‡(
cmd_∑øm_size
 !(
unifi_puã°_cmd52
)) {

43 
	`unifi_îr‹
(
¥iv
,

45  -
EINVAL
;

48 
¨g_pos
 += ();

49 i‡(
	`c›y_‰om_u£r
(&
cmd52_∑øms
,

50 (*)
¨g_pos
,

51 (
unifi_puã°_cmd52
))) {

52 
	`unifi_îr‹
(
¥iv
,

54  -
EFAULT
;

57 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "cmd52r: func=%dáddr=0x%x ",

58 
cmd52_∑øms
.
fun˙um
, cmd52_∑øms.
addr
);

60 
ªåõs
 = 3;

61 
	`C§SdioCœim
(
¥iv
->
sdio
);

63 i‡(
cmd52_∑øms
.
fun˙um
 == 0) {

64 
c§Resu…
 = 
	`C§SdioF0Ród8
(
¥iv
->
sdio
, 
cmd52_∑øms
.
addr
, &cmd52_∑øms.
d©a
);

66 
c§Resu…
 = 
	`C§SdioRód8
(
¥iv
->
sdio
, 
cmd52_∑øms
.
addr
, &cmd52_∑øms.
d©a
);

68 } --
ªåõs
 && ((
c§Resu…
 =
CSR_SDIO_RESULT_CRC_ERROR
Ë|| (c§Resu… =
CSR_SDIO_RESULT_TIMEOUT
)));

69 
	`C§SdioRñó£
(
¥iv
->
sdio
);

71 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

72 
	`unifi_îr‹
(
¥iv
,

73 "\nunifi_puã°_cmd52_ªad: Ród8(ËÁûed (c§Resu…=0x%x)\n", 
c§Resu…
);

74  -
EFAULT
;

76 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "d©a=%d\n", 
cmd52_∑øms
.
d©a
);

79 *(
unifi_puã°_comm™d_t
*)
ªt_buf„r
 = 
UNIFI_PUTEST_CMD52_READ
;

80 
ªt_buf„r_pos
 = (
C§Uöt8
*)(((
unifi_puã°_comm™d_t
*)
ªt_buf„r
) + 1);

81 *(*)
ªt_buf„r_pos
 = (
unifi_puã°_cmd52
);

82 
ªt_buf„r_pos
 += ();

83 
	`mem˝y
(
ªt_buf„r_pos
, &
cmd52_∑øms
, (
unifi_puã°_cmd52
));

84 
ªt_buf„r_pos
 +(
unifi_puã°_cmd52
);

86 
r
 = 
	`c›y_to_u£r
((*)
¨g
,

87 
ªt_buf„r
,

88 
ªt_buf„r_pos
 - 
ªt_buf„r
);

89 i‡(
r
) {

90 
	`unifi_îr‹
(
¥iv
,

92  -
EFAULT
;

96 
	}
}

99 
	$unifi_puã°_cmd52_wrôe
(
unifi_¥iv_t
 *
¥iv
, *
¨g
)

101 
unifi_puã°_cmd52
 
cmd52_∑øms
;

102 
C§Uöt8
 *
¨g_pos
;

103 
cmd_∑øm_size
;

104 
C§Resu…
 
c§Resu…
;

105 
C§Uöt8
 
ªåõs
;

107 
¨g_pos
 = (
C§Uöt8
*)(((
unifi_puã°_comm™d_t
*)
¨g
) + 1);

108 i‡(
	`gë_u£r
(
cmd_∑øm_size
, (*)
¨g_pos
)) {

109 
	`unifi_îr‹
(
¥iv
,

111  -
EFAULT
;

114 i‡(
cmd_∑øm_size
 !(
unifi_puã°_cmd52
)) {

115 
	`unifi_îr‹
(
¥iv
,

117  -
EINVAL
;

120 
¨g_pos
 += ();

121 i‡(
	`c›y_‰om_u£r
(&
cmd52_∑øms
,

122 (*)(
¨g_pos
),

123 (
unifi_puã°_cmd52
))) {

124 
	`unifi_îr‹
(
¥iv
,

126  -
EFAULT
;

129 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "cmd52w: func=%dáddr=0x%x data=%d\n",

130 
cmd52_∑øms
.
fun˙um
, cmd52_∑øms.
addr
, cmd52_∑øms.
d©a
);

132 
ªåõs
 = 3;

133 
	`C§SdioCœim
(
¥iv
->
sdio
);

135 i‡(
cmd52_∑øms
.
fun˙um
 == 0) {

136 
c§Resu…
 = 
	`C§SdioF0Wrôe8
(
¥iv
->
sdio
, 
cmd52_∑øms
.
addr
, cmd52_∑øms.
d©a
);

138 
c§Resu…
 = 
	`C§SdioWrôe8
(
¥iv
->
sdio
, 
cmd52_∑øms
.
addr
, cmd52_∑øms.
d©a
);

140 } --
ªåõs
 && ((
c§Resu…
 =
CSR_SDIO_RESULT_CRC_ERROR
Ë|| (c§Resu… =
CSR_SDIO_RESULT_TIMEOUT
)));

141 
	`C§SdioRñó£
(
¥iv
->
sdio
);

143 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

144 
	`unifi_îr‹
(
¥iv
,

145 "unifi_puã°_cmd52_wrôe: Wrôe8(ËÁûed (c§Resu…=0x%x)\n", 
c§Resu…
);

146  -
EFAULT
;

150 
	}
}

152 
	$unifi_puã°_gp_ªad16
(
unifi_¥iv_t
 *
¥iv
, *
¨g
)

154 
unifi_puã°_gp_rw16
 
gp_r16_∑øms
;

155 
C§Uöt8
 *
¨g_pos
;

156 
cmd_∑øm_size
;

157 
r
;

158 
C§Resu…
 
c§Resu…
;

159 
ªt_buf„r
[32];

160 
C§Uöt8
 *
ªt_buf„r_pos
;

162 
¨g_pos
 = (
C§Uöt8
*)(((
unifi_puã°_comm™d_t
*)
¨g
) + 1);

163 i‡(
	`gë_u£r
(
cmd_∑øm_size
, (*)
¨g_pos
)) {

164 
	`unifi_îr‹
(
¥iv
,

166  -
EFAULT
;

169 i‡(
cmd_∑øm_size
 !(
unifi_puã°_gp_rw16
)) {

170 
	`unifi_îr‹
(
¥iv
,

172  -
EINVAL
;

175 
¨g_pos
 += ();

176 i‡(
	`c›y_‰om_u£r
(&
gp_r16_∑øms
,

177 (*)
¨g_pos
,

178 (
unifi_puã°_gp_rw16
))) {

179 
	`unifi_îr‹
(
¥iv
,

181  -
EFAULT
;

183 
	`C§SdioCœim
(
¥iv
->
sdio
);

184 
c§Resu…
 = 
	`unifi_ˇrd_ªad16
(
¥iv
->
ˇrd
, 
gp_r16_∑øms
.
addr
, &gp_r16_∑øms.
d©a
);

185 
	`C§SdioRñó£
(
¥iv
->
sdio
);

186 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

187 
	`unifi_îr‹
(
¥iv
,

188 "unifi_puã°_gp_ªad16: unifi_ˇrd_ªad16(ËGP=0x%x faûed (c§Resu…=0x%x)\n", 
gp_r16_∑øms
.
addr
, 
c§Resu…
);

189  -
EFAULT
;

192 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "gp_r16: GP=0x%08x, d©a=0x%04x\n", 
gp_r16_∑øms
.
addr
, gp_r16_∑øms.
d©a
);

195 *(
unifi_puã°_comm™d_t
*)
ªt_buf„r
 = 
UNIFI_PUTEST_GP_READ16
;

196 
ªt_buf„r_pos
 = (
C§Uöt8
*)(((
unifi_puã°_comm™d_t
*)
ªt_buf„r
) + 1);

197 *(*)
ªt_buf„r_pos
 = (
unifi_puã°_gp_rw16
);

198 
ªt_buf„r_pos
 += ();

199 
	`mem˝y
(
ªt_buf„r_pos
, &
gp_r16_∑øms
, (
unifi_puã°_gp_rw16
));

200 
ªt_buf„r_pos
 +(
unifi_puã°_gp_rw16
);

202 
r
 = 
	`c›y_to_u£r
((*)
¨g
,

203 
ªt_buf„r
,

204 
ªt_buf„r_pos
 - 
ªt_buf„r
);

205 i‡(
r
) {

206 
	`unifi_îr‹
(
¥iv
,

208  -
EFAULT
;

212 
	}
}

214 
	$unifi_puã°_gp_wrôe16
(
unifi_¥iv_t
 *
¥iv
, *
¨g
)

216 
unifi_puã°_gp_rw16
 
gp_w16_∑øms
;

217 
C§Uöt8
 *
¨g_pos
;

218 
cmd_∑øm_size
;

219 
C§Resu…
 
c§Resu…
;

221 
¨g_pos
 = (
C§Uöt8
*)(((
unifi_puã°_comm™d_t
*)
¨g
) + 1);

222 i‡(
	`gë_u£r
(
cmd_∑øm_size
, (*)
¨g_pos
)) {

223 
	`unifi_îr‹
(
¥iv
,

225  -
EFAULT
;

228 i‡(
cmd_∑øm_size
 !(
unifi_puã°_gp_rw16
)) {

229 
	`unifi_îr‹
(
¥iv
,

231  -
EINVAL
;

234 
¨g_pos
 += ();

235 i‡(
	`c›y_‰om_u£r
(&
gp_w16_∑øms
,

236 (*)(
¨g_pos
),

237 (
unifi_puã°_gp_rw16
))) {

238 
	`unifi_îr‹
(
¥iv
,

240  -
EFAULT
;

243 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "gp_w16: GP=0x%08x, d©a=0x%04x\n", 
gp_w16_∑øms
.
addr
, gp_w16_∑øms.
d©a
);

244 
	`C§SdioCœim
(
¥iv
->
sdio
);

245 
c§Resu…
 = 
	`unifi_ˇrd_wrôe16
(
¥iv
->
ˇrd
, 
gp_w16_∑øms
.
addr
, gp_w16_∑øms.
d©a
);

246 
	`C§SdioRñó£
(
¥iv
->
sdio
);

247 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

248 
	`unifi_îr‹
(
¥iv
,

249 "unifi_puã°_gp_wrôe16: unifi_ˇrd_wrôe16(ËGP=%x faûed (c§Resu…=0x%x)\n", 
gp_w16_∑øms
.
addr
, 
c§Resu…
);

250  -
EFAULT
;

254 
	}
}

256 
	$unifi_puã°_£t_sdio_˛ock
(
unifi_¥iv_t
 *
¥iv
, *
¨g
)

258 
sdio_˛ock_•ìd
;

259 
C§Resu…
 
c§Resu…
;

261 i‡(
	`gë_u£r
(
sdio_˛ock_•ìd
, (*)(((
unifi_puã°_comm™d_t
*)
¨g
) + 1))) {

262 
	`unifi_îr‹
(
¥iv
,

264  -
EFAULT
;

267 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "£àsdiÿ˛ock: %d KHz\n", 
sdio_˛ock_•ìd
);

269 
	`C§SdioCœim
(
¥iv
->
sdio
);

270 
c§Resu…
 = 
	`C§SdioMaxBusClockFªquícySë
(
¥iv
->
sdio
, 
sdio_˛ock_•ìd
 * 1000);

271 
	`C§SdioRñó£
(
¥iv
->
sdio
);

272 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

273 
	`unifi_îr‹
(
¥iv
,

274 "unifi_puã°_£t_sdio_˛ock: Së clock faûed (c§Resu…=0x%x)\n", 
c§Resu…
);

275  -
EFAULT
;

279 
	}
}

282 
	$unifi_puã°_°¨t
(
unifi_¥iv_t
 *
¥iv
, *
¨g
)

284 
r
;

285 
C§Resu…
 
c§Resu…
;

286 
Æªady_ö_ã°
 = 
¥iv
->
±e°_mode
;

295 
¥iv
->
±e°_mode
 = 1;

298 i‡(
¥iv
->
sme_˛i
) {

299 
r
 = 
	`sme_sys_su•íd
(
¥iv
);

300 i‡(
r
) {

301 
	`unifi_îr‹
(
¥iv
,

303  
r
;

308 i‡(
Æªady_ö_ã°
) {

309 
	`C§SdioCœim
(
¥iv
->
sdio
);

310 
c§Resu…
 = 
	`unifi_°¨t_¥o˚ss‹s
(
¥iv
->
ˇrd
);

311 
	`C§SdioRñó£
(
¥iv
->
sdio
);

312 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

313 
	`unifi_îr‹
(
¥iv
, "FailedÅo start XAPs. HardÑesetÑequired.\n");

317 
	`C§SdioCœim
(
¥iv
->
sdio
);

318 
c§Resu…
 = 
	`C§SdioPowîOn
(
¥iv
->
sdio
);

319 
	`C§SdioRñó£
(
¥iv
->
sdio
);

320 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

321 
	`unifi_îr‹
(
¥iv
, "C§SdioPowîO¿c§Resu… = %d\n", 
c§Resu…
);

324 
	`C§SdioCœim
(
¥iv
->
sdio
);

325 
c§Resu…
 = 
	`unifi_öô
(
¥iv
->
ˇrd
);

326 
	`C§SdioRñó£
(
¥iv
->
sdio
);

327 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

328 
	`unifi_îr‹
(
¥iv
,

330  
	`C§HùResu…ToSètus
(
c§Resu…
);

334 
	}
}

337 
	$unifi_puã°_°›
(
unifi_¥iv_t
 *
¥iv
, *
¨g
)

339 
r
 = 0;

340 
C§Resu…
 
c§Resu…
;

343 
	`C§SdioCœim
(
¥iv
->
sdio
);

344 
c§Resu…
 = 
	`unifi_°¨t_¥o˚ss‹s
(
¥iv
->
ˇrd
);

345 
	`C§SdioRñó£
(
¥iv
->
sdio
);

346 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

347 
	`unifi_îr‹
(
¥iv
, "FailedÅo start XAPs. HardÑesetÑequired.\n");

354 i‡(
¥iv
->
c‹edump_mode
) {

355 
¥iv
->
c‹edump_mode
 = 0;

363 
	`C§SdioCœim
(
¥iv
->
sdio
);

364 
	`C§SdioPowîOff
(
¥iv
->
sdio
);

365 
	`C§SdioRñó£
(
¥iv
->
sdio
);

368 i‡(
¥iv
->
sme_˛i
) {

369 
r
 = 
	`sme_sys_ªsume
(
¥iv
);

370 i‡(
r
) {

371 
	`unifi_îr‹
(
¥iv
,

375 
¥iv
->
±e°_mode
 = 0;

377  
r
;

378 
	}
}

381 
	$unifi_puã°_dl_fw
(
unifi_¥iv_t
 *
¥iv
, *
¨g
)

383 
	#UF_PUTEST_MAX_FW_FILE_NAME
 16

	)

384 
	#UNIFI_MAX_FW_PATH_LEN
 32

	)

385 
fw_«me_Àngth
;

386 
fw_«me
[
UF_PUTEST_MAX_FW_FILE_NAME
+1];

387 *
«me_buf„r
;

388 
po°fix
;

389 
fw_∑th
[
UNIFI_MAX_FW_PATH_LEN
];

390 c⁄° 
fúmw¨e
 *
fw_íåy
;

391 
dÕriv
 
ãmp_fw_°a
;

392 
r
;

393 
C§Resu…
 
c§Resu…
;

396 i‡(
	`gë_u£r
(
fw_«me_Àngth
, (*)(((
unifi_puã°_comm™d_t
*)
¨g
) + 1))) {

397 
	`unifi_îr‹
(
¥iv
,

399  -
EFAULT
;

402 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "unifi_puã°_dl_fw: fûê«mêsizê%d\n", 
fw_«me_Àngth
);

405 i‡(
fw_«me_Àngth
 > 
UF_PUTEST_MAX_FW_FILE_NAME
) {

406 
	`unifi_îr‹
(
¥iv
,

408  -
EINVAL
;

412 
«me_buf„r
 = ((*)
¨g
Ë+ (
unifi_puã°_comm™d_t
) + ();

413 i‡(
	`c›y_‰om_u£r
(
fw_«me
, (*)
«me_buf„r
, 
fw_«me_Àngth
)) {

414 
	`unifi_îr‹
(
¥iv
, "unifi_putest_dl_fw: FailedÅo getÅhe fileÇame\n");

415  -
EFAULT
;

417 
fw_«me
[
fw_«me_Àngth
] = '\0';

418 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "unifi_puã°_dl_fw: fûê%s\n", 
fw_«me
);

421 
ãmp_fw_°a
 = 
¥iv
->
fw_°a
;

424 
po°fix
 = 
¥iv
->
ö°™˚
;

425 
	`s˙¥ötf
(
fw_∑th
, 
UNIFI_MAX_FW_PATH_LEN
, "unifi-sdio/%s",

426 
fw_«me
);

427 
r
 = 
	`ªque°_fúmw¨e
(&
fw_íåy
, 
fw_∑th
, 
¥iv
->
unifi_devi˚
);

428 i‡(
r
 == 0) {

429 
¥iv
->
fw_°a
.
fw_desc
 = (*)
fw_íåy
;

430 
¥iv
->
fw_°a
.
dl_d©a
 = 
fw_íåy
->
d©a
;

431 
¥iv
->
fw_°a
.
dl_Àn
 = 
fw_íåy
->
size
;

433 
	`unifi_îr‹
(
¥iv
, "Firmware fileÇotávailable\n");

434  -
EINVAL
;

438 
	`C§SdioCœim
(
¥iv
->
sdio
);

439 
c§Resu…
 = 
	`unifi_°¨t_¥o˚ss‹s
(
¥iv
->
ˇrd
);

440 
	`C§SdioRñó£
(
¥iv
->
sdio
);

441 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

442 
	`unifi_îr‹
(
¥iv
, "FailedÅo start XAPs. HardÑesetÑequired.\n");

448 
	`C§SdioCœim
(
¥iv
->
sdio
);

449 
c§Resu…
 = 
	`unifi_dow∆ﬂd
(
¥iv
->
ˇrd
, 0x0c00);

450 
	`C§SdioRñó£
(
¥iv
->
sdio
);

451 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

452 
	`unifi_îr‹
(
¥iv
,

454 
‰ì_fw
;

458 
‰ì_fw
:

459 
	`uf_ªÀa£_fúmw¨e
(
¥iv
, &¥iv->
fw_°a
);

461 
¥iv
->
fw_°a
 = 
ãmp_fw_°a
;

463  
	`C§HùResu…ToSètus
(
c§Resu…
);

464 
	}
}

467 
	$unifi_puã°_dl_fw_buff
(
unifi_¥iv_t
 *
¥iv
, *
¨g
)

469 
fw_Àngth
;

470 *
fw_buf
 = 
NULL
;

471 *
fw_u£r_±r
;

472 
dÕriv
 
ãmp_fw_°a
;

473 
C§Resu…
 
c§Resu…
;

476 i‡(
	`gë_u£r
(
fw_Àngth
, (*)(((
unifi_puã°_comm™d_t
*)
¨g
) + 1))) {

477 
	`unifi_îr‹
(
¥iv
,

479  -
EFAULT
;

482 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "unifi_puã°_dl_fw_buff: sizê%d\n", 
fw_Àngth
);

485 i‡(
fw_Àngth
 == 0 || fw_length > 0xfffffff) {

486 
	`unifi_îr‹
(
¥iv
,

487 "unifi_puã°_dl_fw_buff: buf„∏Àngth bad %u\n", 
fw_Àngth
);

488  -
EINVAL
;

492 
fw_buf
 = 
	`C§PmemAŒoc
(
fw_Àngth
);

493 i‡(!
fw_buf
) {

494 
	`unifi_îr‹
(
¥iv
, "unifi_putest_dl_fw_buff: malloc fail\n");

495  -
ENOMEM
;

499 
fw_u£r_±r
 = ((*)
¨g
Ë+ (
unifi_puã°_comm™d_t
) + ();

500 i‡(
	`c›y_‰om_u£r
(
fw_buf
, (*)
fw_u£r_±r
, 
fw_Àngth
)) {

501 
	`unifi_îr‹
(
¥iv
, "unifi_putest_dl_fw_buff: FailedÅo getÅhe buffer\n");

502 
	`C§PmemFªe
(
fw_buf
);

503  -
EFAULT
;

507 
ãmp_fw_°a
 = 
¥iv
->
fw_°a
;

513 
¥iv
->
fw_°a
.
fw_desc
 = 
NULL
;

514 
¥iv
->
fw_°a
.
dl_d©a
 = 
fw_buf
;

515 
¥iv
->
fw_°a
.
dl_Àn
 = 
fw_Àngth
;

518 
	`C§SdioCœim
(
¥iv
->
sdio
);

519 
c§Resu…
 = 
	`unifi_°¨t_¥o˚ss‹s
(
¥iv
->
ˇrd
);

520 
	`C§SdioRñó£
(
¥iv
->
sdio
);

521 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

522 
	`unifi_îr‹
(
¥iv
, "FailedÅo start XAPs. HardÑesetÑequired.\n");

528 
	`C§SdioCœim
(
¥iv
->
sdio
);

529 
c§Resu…
 = 
	`unifi_dow∆ﬂd
(
¥iv
->
ˇrd
, 0x0c00);

530 
	`C§SdioRñó£
(
¥iv
->
sdio
);

531 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

532 
	`unifi_îr‹
(
¥iv
,

534 
‰ì_fw
;

537 
‰ì_fw
:

539 
¥iv
->
fw_°a
 = 
ãmp_fw_°a
;

540 
	`C§PmemFªe
(
fw_buf
);

542  
	`C§HùResu…ToSètus
(
c§Resu…
);

543 
	}
}

546 
	$unifi_puã°_c‹edump_¥ï¨e
(
unifi_¥iv_t
 *
¥iv
, *
¨g
)

548 
C§Uöt16
 
d©a_u16
;

549 
C§I¡32
 
i
;

550 
C§Resu…
 
r
;

552 
	`unifi_öfo
(
¥iv
, "Preparing for SDIO coredump\n");

553 #i‡
	`deföed
 (
CSR_WIFI_HIP_DEBUG_OFFLINE
)

554 
	`unifi_debug_buf_dump
();

560 i‡(
¥iv
->
±e°_mode
) {

561 
	`unifi_îr‹
(
¥iv
, "PUTEST_START shouldn't be used beforeá coredump\n");

567 
¥iv
->
c‹edump_mode
 = 1;

569 
i
 = 0; i < 3; i++) {

570 
	`C§SdioCœim
(
¥iv
->
sdio
);

571 
r
 = 
	`C§SdioRód16
(
¥iv
->
sdio
, 
CHIP_HELPER_UNIFI_GBL_CHIP_VERSION
*2, &
d©a_u16
);

572 
	`C§SdioRñó£
(
¥iv
->
sdio
);

573 i‡(
r
 !
CSR_RESULT_SUCCESS
) {

574 
	`unifi_öfo
(
¥iv
, "FaûedÅÿªad chù vîsi⁄! Try %d\n", 
i
);

577 i‡(
i
 == 0) {

578 
	`unifi_öfo
(
¥iv
, "Try functionÉnable\n");

579 
	`C§SdioCœim
(
¥iv
->
sdio
);

580 
r
 = 
	`C§SdioFun˘i⁄E«bÀ
(
¥iv
->
sdio
);

581 
	`C§SdioRñó£
(
¥iv
->
sdio
);

582 i‡(
r
 !
CSR_RESULT_SUCCESS
) {

583 
	`unifi_îr‹
(
¥iv
, "C§SdioFun˘i⁄E«bÀ faûed %d\n", 
r
);

591 
	`C§SdioCœim
(
¥iv
->
sdio
);

592 
r
 = 
	`C§SdioMaxBusClockFªquícySë
(
¥iv
->
sdio
, 
UNIFI_SDIO_CLOCK_SAFE_HZ
);

593 
	`C§SdioRñó£
(
¥iv
->
sdio
);

594 i‡(
r
 !
CSR_RESULT_SUCCESS
) {

595 
	`unifi_îr‹
(
¥iv
, "C§SdioMaxBusClockFªquícySë(ËÁûed %d\n", 
r
);

599 
	`C§SdioCœim
(
¥iv
->
sdio
);

600 
r
 = 
	`unifi_ˇrd_h¨d_ª£t
(
¥iv
->
ˇrd
);

601 
	`C§SdioRñó£
(
¥iv
->
sdio
);

602 i‡(
r
 !
CSR_RESULT_SUCCESS
) {

603 
	`unifi_îr‹
(
¥iv
, "unifi_ˇrd_h¨d_ª£t(ËÁûed %d\n", 
r
);

606 
	`unifi_öfo
(
¥iv
, "Ród chù vîsi⁄ o‡0x%04x\n", 
d©a_u16
);

611 i‡(
r
 !
CSR_RESULT_SUCCESS
) {

612 
	`unifi_îr‹
(
¥iv
, "FailedÅoÖrepare chip\n");

613  -
EIO
;

619 
	`C§SdioCœim
(
¥iv
->
sdio
);

620 
r
 = 
	`unifi_ˇrd_°›_¥o˚ss‹
(
¥iv
->
ˇrd
, 
UNIFI_PROC_BOTH
);

621 
	`C§SdioRñó£
(
¥iv
->
sdio
);

622 i‡(
r
 !
CSR_RESULT_SUCCESS
) {

623 
	`unifi_îr‹
(
¥iv
, "FailedÅo stopÖrocessors\n");

627 
	}
}

629 
	$unifi_puã°_cmd52_block_ªad
(
unifi_¥iv_t
 *
¥iv
, *
¨g
)

631 
unifi_puã°_block_cmd52_r
 
block_cmd52
;

632 
C§Uöt8
 *
¨g_pos
;

633 
cmd_∑øm_size
;

634 
C§Resu…
 
r
;

635 
C§Uöt8
 *
block_loˇl_buf„r
;

637 
¨g_pos
 = (
C§Uöt8
*)(((
unifi_puã°_comm™d_t
*)
¨g
) + 1);

638 i‡(
	`gë_u£r
(
cmd_∑øm_size
, (*)
¨g_pos
)) {

639 
	`unifi_îr‹
(
¥iv
,

641  -
EFAULT
;

644 i‡(
cmd_∑øm_size
 !(
unifi_puã°_block_cmd52_r
)) {

645 
	`unifi_îr‹
(
¥iv
,

647  -
EINVAL
;

650 
¨g_pos
 += ();

651 i‡(
	`c›y_‰om_u£r
(&
block_cmd52
,

652 (*)
¨g_pos
,

653 (
unifi_puã°_block_cmd52_r
))) {

654 
	`unifi_îr‹
(
¥iv
,

656  -
EFAULT
;

659 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "cmd52r_block: func=%dáddr=0x%xÜen=0x%x ",

660 
block_cmd52
.
fun˙um
, block_cmd52.
addr
, block_cmd52.
Àngth
);

662 
block_loˇl_buf„r
 = 
	`vmÆloc
(
block_cmd52
.
Àngth
);

663 i‡(
block_loˇl_buf„r
 =
NULL
) {

664 
	`unifi_îr‹
(
¥iv
, "cmd52r_block: FailedÅoállocate buffer\n");

665  -
ENOMEM
;

668 
	`C§SdioCœim
(
¥iv
->
sdio
);

669 
r
 = 
	`unifi_ˇrd_ªadn
(
¥iv
->
ˇrd
, 
block_cmd52
.
addr
, 
block_loˇl_buf„r
, block_cmd52.
Àngth
);

670 
	`C§SdioRñó£
(
¥iv
->
sdio
);

671 i‡(
r
 !
CSR_RESULT_SUCCESS
) {

672 
	`unifi_îr‹
(
¥iv
, "cmd52r_block: unifi_readn failed\n");

673  -
EIO
;

676 i‡(
	`c›y_to_u£r
((*)
block_cmd52
.
d©a
,

677 
block_loˇl_buf„r
,

678 
block_cmd52
.
Àngth
)) {

679 
	`unifi_îr‹
(
¥iv
,

681  -
EFAULT
;

685 
	}
}

	@sdio_emb.c

18 
	~<löux/kmod.h
>

19 
	~<löux/öô.h
>

20 
	~<löux/su•íd.h
>

21 
	~"c§_wifi_hù_unifi.h
"

22 
	~"unifi_¥iv.h
"

24 
	~"sdi€mb/sdio_≠i.h
"

27 
C§SdioFun˘i⁄Drivî
 *
	gsdio_func_drv
;

29 #ifde‡
CONFIG_PM


30 
uf_sdio_emb_powî_evít
(
nŸifõr_block
 *
this
, 
evít
, *
±r
);

36 #ifde‡
ANDROID_BUILD


37 
wake_lock
 
	gunifi_sdio_wake_lock
;

41 
C§Resu…


42 
	$C⁄vîtSdioToC§SdioResu…
(
r
)

44 
C§Resu…
 
c§Resu…
 = 
CSR_RESULT_FAILURE
;

46 
r
) {

48 
c§Resu…
 = 
CSR_RESULT_SUCCESS
;

50 -
EIO
:

51 
c§Resu…
 = 
CSR_SDIO_RESULT_CRC_ERROR
;

54 -
ETIMEDOUT
:

55 -
EBUSY
:

56 
c§Resu…
 = 
CSR_SDIO_RESULT_TIMEOUT
;

58 -
ENODEV
:

59 -
ENOMEDIUM
:

60 
c§Resu…
 = 
CSR_SDIO_RESULT_NO_DEVICE
;

62 -
EINVAL
:

63 
c§Resu…
 = 
CSR_SDIO_RESULT_INVALID_VALUE
;

65 -
ENOMEM
:

66 -
ENOSYS
:

67 -
EILSEQ
:

68 -
ERANGE
:

69 -
ENXIO
:

70 
c§Resu…
 = 
CSR_RESULT_FAILURE
;

73 
	`unifi_w¨nög
(
NULL
, "Uƒecogni£d SDIOÉº‹ code: %d\n", 
r
);

77  
c§Resu…
;

78 
	}
}

81 
C§Resu…


82 
	$C§SdioRód8
(
C§SdioFun˘i⁄
 *
fun˘i⁄
, 
C§Uöt32
 
addªss
, 
C§Uöt8
 *
d©a
)

84 
sdi€mb_dev
 *
fdev
 = (sdi€mb_dev *)
fun˘i⁄
->
¥iv
;

85 
îr
;

86 
îr
 = 
	`sdi€mb_ªad8
(
fdev
, 
addªss
, 
d©a
);

87 i‡(
îr
) {

88  
	`C⁄vîtSdioToC§SdioResu…
(
îr
);

90  
CSR_RESULT_SUCCESS
;

91 
	}
}

93 
C§Resu…


94 
	$C§SdioWrôe8
(
C§SdioFun˘i⁄
 *
fun˘i⁄
, 
C§Uöt32
 
addªss
, 
C§Uöt8
 
d©a
)

96 
sdi€mb_dev
 *
fdev
 = (sdi€mb_dev *)
fun˘i⁄
->
¥iv
;

97 
îr
;

98 
îr
 = 
	`sdi€mb_wrôe8
(
fdev
, 
addªss
, 
d©a
);

99 i‡(
îr
) {

100  
	`C⁄vîtSdioToC§SdioResu…
(
îr
);

102  
CSR_RESULT_SUCCESS
;

103 
	}
}

105 
C§Resu…


106 
	$C§SdioRód16
(
C§SdioFun˘i⁄
 *
fun˘i⁄
, 
C§Uöt32
 
addªss
, 
C§Uöt16
 *
d©a
)

108 
sdi€mb_dev
 *
fdev
 = (sdi€mb_dev *)
fun˘i⁄
->
¥iv
;

109 
r
;

111 
r
 = 
	`sdi€mb_ªad16
(
fdev
, 
addªss
, 
d©a
);

112 i‡(
r
) {

113  
	`C⁄vîtSdioToC§SdioResu…
(
r
);

116  
CSR_RESULT_SUCCESS
;

117 
	}
}

119 
C§Resu…


120 
	$C§SdioWrôe16
(
C§SdioFun˘i⁄
 *
fun˘i⁄
, 
C§Uöt32
 
addªss
, 
C§Uöt16
 
d©a
)

122 
sdi€mb_dev
 *
fdev
 = (sdi€mb_dev *)
fun˘i⁄
->
¥iv
;

123 
r
;

125 
r
 = 
	`sdi€mb_wrôe16
(
fdev
, 
addªss
, 
d©a
);

126 i‡(
r
) {

127  
	`C⁄vîtSdioToC§SdioResu…
(
r
);

130  
CSR_RESULT_SUCCESS
;

131 
	}
}

134 
C§Resu…


135 
	$C§SdioF0Ród8
(
C§SdioFun˘i⁄
 *
fun˘i⁄
, 
C§Uöt32
 
addªss
, 
C§Uöt8
 *
d©a
)

137 
sdi€mb_dev
 *
fdev
 = (sdi€mb_dev *)
fun˘i⁄
->
¥iv
;

138 
îr
;

139 
îr
 = 
	`sdi€mb_f0_ªad8
(
fdev
, 
addªss
, 
d©a
);

140 i‡(
îr
) {

141  
	`C⁄vîtSdioToC§SdioResu…
(
îr
);

143  
CSR_RESULT_SUCCESS
;

144 
	}
}

147 
C§Resu…


148 
	$C§SdioF0Wrôe8
(
C§SdioFun˘i⁄
 *
fun˘i⁄
, 
C§Uöt32
 
addªss
, 
C§Uöt8
 
d©a
)

150 
sdi€mb_dev
 *
fdev
 = (sdi€mb_dev *)
fun˘i⁄
->
¥iv
;

151 
îr
;

152 
îr
 = 
	`sdi€mb_f0_wrôe8
(
fdev
, 
addªss
, 
d©a
);

153 i‡(
îr
) {

154  
	`C⁄vîtSdioToC§SdioResu…
(
îr
);

156  
CSR_RESULT_SUCCESS
;

157 
	}
}

159 
C§Resu…


160 
	$C§SdioRód
(
C§SdioFun˘i⁄
 *
fun˘i⁄
, 
C§Uöt32
 
addªss
, *
d©a
, C§Uöt32 
Àngth
)

162 
sdi€mb_dev
 *
fdev
 = (sdi€mb_dev *)
fun˘i⁄
->
¥iv
;

163 
îr
;

164 
îr
 = 
	`sdi€mb_ªad
(
fdev
, 
addªss
, 
d©a
, 
Àngth
);

165 i‡(
îr
) {

166  
	`C⁄vîtSdioToC§SdioResu…
(
îr
);

168  
CSR_RESULT_SUCCESS
;

169 
	}
}

171 
C§Resu…


172 
	$C§SdioWrôe
(
C§SdioFun˘i⁄
 *
fun˘i⁄
, 
C§Uöt32
 
addªss
, c⁄° *
d©a
, C§Uöt32 
Àngth
)

174 
sdi€mb_dev
 *
fdev
 = (sdi€mb_dev *)
fun˘i⁄
->
¥iv
;

175 
îr
;

176 
îr
 = 
	`sdi€mb_wrôe
(
fdev
, 
addªss
, 
d©a
, 
Àngth
);

177 i‡(
îr
) {

178  
	`C⁄vîtSdioToC§SdioResu…
(
îr
);

180  
CSR_RESULT_SUCCESS
;

181 
	}
}

184 
C§Resu…


185 
	$C§SdioBlockSizeSë
(
C§SdioFun˘i⁄
 *
fun˘i⁄
, 
C§Uöt16
 
blockSize
)

187 
sdi€mb_dev
 *
fdev
 = (sdi€mb_dev *)
fun˘i⁄
->
¥iv
;

188 
r
 = 0;

191 i‡(
sdio_block_size
 > -1) {

192 
blockSize
 = 
sdio_block_size
;

195 
	`unifi_åa˚
(
NULL
, 
UDBG1
, "Set SDIO function block sizeÅo %d\n",

196 
blockSize
);

198 
r
 = 
	`sdi€mb_£t_block_size
(
fdev
, 
blockSize
);

199 i‡(
r
) {

200 
	`unifi_îr‹
(
NULL
, "Eº‹ %d sëtög block size\n", 
r
);

204 
fun˘i⁄
->
blockSize
 = 
fdev
->
blocksize
;

206  
	`C⁄vîtSdioToC§SdioResu…
(
r
);

207 
	}
}

224 
C§Resu…


225 
	$C§SdioMaxBusClockFªquícySë
(
C§SdioFun˘i⁄
 *
fun˘i⁄
, 
C§Uöt32
 
maxFªquícy
)

227 
sdi€mb_dev
 *
fdev
 = (sdi€mb_dev *)
fun˘i⁄
->
¥iv
;

228 
C§Uöt32
 
max_khz
 = 
maxFªquícy
/1000;

230 i‡(!
max_khz
 || max_khz > 
sdio_˛ock
) {

231 
max_khz
 = 
sdio_˛ock
;

233 
	`unifi_åa˚
(
NULL
, 
UDBG1
, "Sëtög SDIO bu†˛ockÅÿ%d kHz\n", 
max_khz
);

234 
	`sdi€mb_£t_max_bus_‰eq
(
fdev
, 1000 * 
max_khz
);

236  
CSR_RESULT_SUCCESS
;

237 
	}
}

254 
C§Resu…


255 
	$C§SdioI¡îru±E«bÀ
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

257 
sdi€mb_dev
 *
fdev
 = (sdi€mb_dev *)
fun˘i⁄
->
¥iv
;

258 
r
;

260 
r
 = 
	`sdi€mb_öãºu±_íabÀ
(
fdev
);

261 i‡(
r
) {

262  
	`C⁄vîtSdioToC§SdioResu…
(
r
);

265  
CSR_RESULT_SUCCESS
;

266 
	}
}

268 
C§Resu…


269 
	$C§SdioI¡îru±DißbÀ
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

271 
sdi€mb_dev
 *
fdev
 = (sdi€mb_dev *)
fun˘i⁄
->
¥iv
;

272 
r
;

274 
r
 = 
	`sdi€mb_öãºu±_dißbÀ
(
fdev
);

275 i‡(
r
) {

276  
	`C⁄vîtSdioToC§SdioResu…
(
r
);

279  
CSR_RESULT_SUCCESS
;

280 
	}
}

296 
	$C§SdioI¡îru±AcknowÀdge
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

298 
sdi€mb_dev
 *
fdev
 = (sdi€mb_dev *)
fun˘i⁄
->
¥iv
;

300 
	`sdi€mb_öãºu±_acknowÀdge
(
fdev
);

301 
	}
}

317 
C§Resu…


318 
	$C§SdioFun˘i⁄E«bÀ
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

320 
sdi€mb_dev
 *
fdev
 = (sdi€mb_dev *)
fun˘i⁄
->
¥iv
;

321 
r
;

324 
r
 = 
	`sdi€mb_íabÀ_fun˘i⁄
(
fdev
);

325 i‡(
r
) {

326 
	`unifi_îr‹
(
NULL
, "FaûedÅÿíabÀ SDIO fun˘i⁄ %d\n", 
fdev
->
fun˘i⁄
);

327  
	`C⁄vîtSdioToC§SdioResu…
(
r
);

329  
CSR_RESULT_SUCCESS
;

330 
	}
}

346 
C§Resu…


347 
	$C§SdioFun˘i⁄DißbÀ
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

349 
sdi€mb_dev
 *
fdev
 = (sdi€mb_dev *)
fun˘i⁄
->
¥iv
;

350 
r
;

353 
r
 = 
	`sdi€mb_dißbÀ_fun˘i⁄
(
fdev
);

354 i‡(
r
) {

355 
	`unifi_îr‹
(
NULL
, "FaûedÅÿdißbÀ SDIO fun˘i⁄ %d\n", 
fdev
->
fun˘i⁄
);

356  
	`C⁄vîtSdioToC§SdioResu…
(
r
);

358  
CSR_RESULT_SUCCESS
;

359 
	}
}

374 
	$C§SdioFun˘i⁄A˘ive
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

376 
	}
}

389 
	$C§SdioFun˘i⁄IdÀ
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

391 
sdi€mb_dev
 *
fdev
 = (sdi€mb_dev *)
fun˘i⁄
->
¥iv
;

393 
	`sdi€mb_idÀ_fun˘i⁄
(
fdev
);

394 
	}
}

397 
C§Resu…


398 
	$C§SdioPowîOn
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

400 
sdi€mb_dev
 *
fdev
 = (sdi€mb_dev *)
fun˘i⁄
->
¥iv
;

402 i‡(
dißbÀ_powî_c⁄åﬁ
 != 1) {

403 
	`sdi€mb_powî_⁄
(
fdev
);

406  
CSR_RESULT_SUCCESS
;

407 
	}
}

410 
	$C§SdioPowîOff
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

412 
sdi€mb_dev
 *
fdev
 = (sdi€mb_dev *)
fun˘i⁄
->
¥iv
;

413 i‡(
dißbÀ_powî_c⁄åﬁ
 != 1) {

414 
	`sdi€mb_powî_off
(
fdev
);

416 
	}
}

436 
C§Resu…


437 
	$C§SdioH¨dRe£t
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

439 
sdi€mb_dev
 *
fdev
 = (sdi€mb_dev *)
fun˘i⁄
->
¥iv
;

440 
r
;

443 
r
 = 1;

444 i‡(
dißbÀ_hw_ª£t
 != 1) {

445 
r
 = 
	`sdi€mb_h¨d_ª£t
(
fdev
);

446 i‡(
r
 < 0) {

447  
	`C⁄vîtSdioToC§SdioResu…
(
r
);

452 i‡(
buswidth
 == 1) {

453 
	`unifi_öfo
(
NULL
, "Setting SDIO bus widthÅo 1\n");

454 
	`sdi€mb_£t_bus_width
(
fdev
, 
buswidth
);

455 } i‡(
buswidth
 == 4) {

456 
	`unifi_öfo
(
NULL
, "Setting SDIO bus widthÅo 4\n");

457 
	`sdi€mb_£t_bus_width
(
fdev
, 
buswidth
);

460 if(
r
 == 1)

462  
CSR_SDIO_RESULT_NOT_RESET
;

465  
	`C⁄vîtSdioToC§SdioResu…
(
r
);

467 
	}
}

470 
	$c§_sdio_löux_ªmove_úq
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

472 
sdi€mb_dev
 *
fdev
 = (sdi€mb_dev *)
fun˘i⁄
->
¥iv
;

474  
	`sdi€mb_öãºu±_dißbÀ
(
fdev
);

475 
	}
}

477 
	$c§_sdio_löux_ö°Æl_úq
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

479 
sdi€mb_dev
 *
fdev
 = (sdi€mb_dev *)
fun˘i⁄
->
¥iv
;

481  
	`sdi€mb_öãºu±_íabÀ
(
fdev
);

482 
	}
}

498 
	$uf_glue_sdio_öt_h™dÀr
(
sdi€mb_dev
 *
fdev
)

500 
C§SdioFun˘i⁄
 *
sdio_˘x
 = 
fdev
->
drv_d©a
;

501 
C§SdioI¡îru±D§CÆlback
 
func_d§_ˇŒback
;

504 i‡(
sdio_func_drv
 && sdio_func_drv->
öå
) {

506 
func_d§_ˇŒback
 = 
sdio_func_drv
->
	`öå
(
sdio_˘x
);

508 i‡(
func_d§_ˇŒback
) {

509 
	`func_d§_ˇŒback
(
sdio_˘x
);

512 
	}
}

514 #ifde‡
CONFIG_PM


519 
	suf_sdio_emb_pm_nŸifõr


521 
li°_hód
 
	mli°
;

523 
C§SdioFun˘i⁄
 *
	msdio_˘x
;

524 
nŸifõr_block
 
	mpm_nŸifõr
;

528 
uf_sdio_emb_pm_nŸifõr
 
	guf_sdio_emb_pm_nŸifõrs
 = {

529 .
sdio_˘x
 = 
NULL
,

547 
uf_sdio_emb_pm_nŸifõr
 *

548 
	$uf_sdio_emb_ªgi°î_pm_nŸifõr
(
C§SdioFun˘i⁄
 *
sdio_˘x
)

551 
uf_sdio_emb_pm_nŸifõr
 *
nŸifõr_˘x
 = 
	`kmÆloc
((uf_sdio_emb_pm_nŸifõr), 
GFP_KERNEL
);

553 i‡(
nŸifõr_˘x
)

555 
nŸifõr_˘x
->
sdio_˘x
 = sdio_ctx;

556 
nŸifõr_˘x
->
pm_nŸifõr
.
nŸifõr_ˇŒ
 = 
uf_sdio_emb_powî_evít
;

558 
	`li°_add
(&
nŸifõr_˘x
->
li°
, &
uf_sdio_emb_pm_nŸifõrs
.list);

560 i‡(
	`ªgi°î_pm_nŸifõr
(&
nŸifõr_˘x
->
pm_nŸifõr
)) {

561 
	`¥ötk
(
KERN_ERR
 "unifi:Ñegister_pm_notifier failed\n");

565  
nŸifõr_˘x
;

566 
	}
}

569 
	$uf_sdio_emb_uƒegi°î_pm_nŸifõr
(
C§SdioFun˘i⁄
 *
sdio_˘x
)

571 
uf_sdio_emb_pm_nŸifõr
 *
nŸifõr_˘x
;

572 
li°_hód
 *
node
, *
q
;

574 
	`li°_f‹_óch_ß„
(
node
, 
q
, &
uf_sdio_emb_pm_nŸifõrs
.
li°
) {

575 
nŸifõr_˘x
 = 
	`li°_íåy
(
node
, 
uf_sdio_emb_pm_nŸifõr
, 
li°
);

578 i‡(
nŸifõr_˘x
 &&ÇŸifõr_˘x->
sdio_˘x
 == sdio_ctx)

580 i‡(
	`uƒegi°î_pm_nŸifõr
(&
nŸifõr_˘x
->
pm_nŸifõr
)) {

581 
	`¥ötk
(
KERN_ERR
 "unifi: unregister_pm_notifier failed\n");

585 
nŸifõr_˘x
->
sdio_˘x
 = 
NULL
;

586 
	`li°_dñ
(
node
);

587 
	`k‰ì
(
nŸifõr_˘x
);

590 
	}
}

609 
	$uf_sdio_emb_powî_evít
(
nŸifõr_block
 *
this
, 
evít
, *
±r
)

611 
uf_sdio_emb_pm_nŸifõr
 *
nŸifõr_˘x
 = 
	`c⁄èöî_of
(
this
,

612 
uf_sdio_emb_pm_nŸifõr
,

613 
pm_nŸifõr
);

618 
evít
) {

619 
PM_POST_HIBERNATION
:

620 
PM_POST_SUSPEND
:

621 
	`¥ötk
(
KERN_INFO
 "%s:%dÑesume\n", 
__FUNCTION__
, 
__LINE__
 );

622 i‡(
sdio_func_drv
 && sdio_func_drv->
ªsume
) {

623 
sdio_func_drv
->
	`ªsume
(
nŸifõr_˘x
->
sdio_˘x
);

627 
PM_HIBERNATION_PREPARE
:

628 
PM_SUSPEND_PREPARE
:

629 
	`¥ötk
(
KERN_INFO
 "%s:%d su•íd\n", 
__FUNCTION__
, 
__LINE__
 );

630 i‡(
sdio_func_drv
 && sdio_func_drv->
su•íd
) {

631 
sdio_func_drv
->
	`su•íd
(
nŸifõr_˘x
->
sdio_˘x
);

635  
NOTIFY_DONE
;

636 
	}
}

654 
	$uf_glue_sdio_¥obe
(
sdi€mb_dev
 *
fdev
)

656 
C§SdioFun˘i⁄
 *
sdio_˘x
;

658 
	`unifi_öfo
(
NULL
, "UniFi card inserted\n");

661 
sdio_˘x
 = (
C§SdioFun˘i⁄
 *)
	`kmÆloc
((CsrSdioFunction),

662 
GFP_KERNEL
);

663 i‡(
sdio_˘x
 =
NULL
) {

664  -
ENOMEM
;

668 
sdio_˘x
->
sdioId
.
m™fId
 = 
fdev
->
víd‹_id
;

669 
sdio_˘x
->
sdioId
.
ˇrdId
 = 
fdev
->
devi˚_id
;

670 
sdio_˘x
->
sdioId
.
sdioFun˘i⁄
 = 
fdev
->
fun˘i⁄
;

671 
sdio_˘x
->
sdioId
.
sdioI¡îÁ˚
 = 0;

672 
sdio_˘x
->
blockSize
 = 
fdev
->
blocksize
;

673 
sdio_˘x
->
¥iv
 = (*)
fdev
;

674 
sdio_˘x
->
„©uªs
 = 0;

677 i‡(
sdio_byã_mode
) {

678 
sdio_˘x
->
„©uªs
 |
CSR_SDIO_FEATURE_BYTE_MODE
;

682 
fdev
->
drv_d©a
 = 
sdio_˘x
;

685 
	`unifi_åa˚
(
NULL
, 
UDBG1
, "Sëtög SDIO bu†˛ockÅÿ%d kHz\n", 
sdio_˛ock
);

686 
	`sdi€mb_£t_max_bus_‰eq
(
fdev
, 1000 * 
sdio_˛ock
);

688 #ifde‡
CONFIG_PM


690 i‡(
	`uf_sdio_emb_ªgi°î_pm_nŸifõr
(
sdio_˘x
Ë=
NULL
) {

691 
	`unifi_îr‹
(
NULL
, "%s: FaûedÅÿªgi°î f‹ PMÉvíts\n", 
__FUNCTION__
);

696 i‡(
sdio_func_drv
 && sdio_func_drv->
ö£πed
) {

697 
	`uf_add_os_devi˚
(
fdev
->
¶Ÿ_id
, fdev->
os_devi˚
);

698 
sdio_func_drv
->
	`ö£πed
(
sdio_˘x
);

701 #ifde‡
ANDROID_BUILD


703 
	`unifi_åa˚
(
NULL
, 
UDBG1
, "embÖrobe:Åake wakeÜock\n");

704 
	`wake_lock
(&
unifi_sdio_wake_lock
);

708 
	}
}

726 
	$uf_sdio_ªmove
(
sdi€mb_dev
 *
fdev
)

728 
C§SdioFun˘i⁄
 *
sdio_˘x
 = 
fdev
->
drv_d©a
;

730 
	`unifi_öfo
(
NULL
, "UniFi cardÑemoved\n");

733 i‡(
sdio_func_drv
 && sdio_func_drv->
ªmoved
) {

734 
sdio_func_drv
->
	`ªmoved
(
sdio_˘x
);

737 #ifde‡
CONFIG_PM


739 
	`uf_sdio_emb_uƒegi°î_pm_nŸifõr
(
sdio_˘x
);

742 
	`k‰ì
(
sdio_˘x
);

744 
	}
}

761 
	$uf_glue_sdio_su•íd
(
sdi€mb_dev
 *
fdev
)

763 
	`unifi_öfo
(
NULL
, "Suspending...\n");

765 
	}
}

782 
	$uf_glue_sdio_ªsume
(
sdi€mb_dev
 *
fdev
)

784 
	`unifi_öfo
(
NULL
, "Resuming...\n");

786 #ifde‡
ANDROID_BUILD


787 
	`unifi_åa˚
(
NULL
, 
UDBG1
, "embÑesume:Åake wakelock\n");

788 
	`wake_lock
(&
unifi_sdio_wake_lock
);

791 
	}
}

796 
sdi€mb_func_drivî
 
	gunifi_sdi€mb
 = {

797 .
«me
 = "unifi",

798 .
	gid_èbÀ
 = 
NULL
,

800 .
	g¥obe
 = 
uf_glue_sdio_¥obe
,

801 .
	gªmove
 = 
uf_sdio_ªmove
,

802 .
	gˇrd_öt_h™dÀr
 = 
uf_glue_sdio_öt_h™dÀr
,

803 .
	gsu•íd
 = 
uf_glue_sdio_su•íd
,

804 .
	gªsume
 = 
uf_glue_sdio_ªsume
,

824 
C§Resu…


825 
	$C§SdioFun˘i⁄DrivîRegi°î
(
C§SdioFun˘i⁄Drivî
 *
sdio_drv
)

827 
r
;

828 
i
;

830 
	`¥ötk
("Unifi: Using CSRÉmbedded SDIO driver\n");

832 i‡(
sdio_func_drv
) {

833 
	`unifi_îr‹
(
NULL
, "sdio_emb: UniFi driverálreadyÑegistered\n");

834  
CSR_SDIO_RESULT_INVALID_VALUE
;

838 
unifi_sdi€mb
.
id_èbÀ
 = 
	`C§PmemAŒoc
((
sdi€mb_id_èbÀ
Ë* (
sdio_drv
->
idsCou¡
 + 1));

839 i‡(
unifi_sdi€mb
.
id_èbÀ
 =
NULL
) {

840 
	`unifi_îr‹
(
NULL
, "sdio_emb: FaûedÅÿÆloˇã mem‹y f‹ IDÅabÀ (%d IDs)\n", 
sdio_drv
->
idsCou¡
);

841  
CSR_RESULT_FAILURE
;

843 
i
 = 0; i < 
sdio_drv
->
idsCou¡
; i++) {

844 
unifi_sdi€mb
.
id_èbÀ
[
i
].
víd‹_id
 = 
sdio_drv
->
ids
[i].
m™fId
;

845 
unifi_sdi€mb
.
id_èbÀ
[
i
].
devi˚_id
 = 
sdio_drv
->
ids
[i].
ˇrdId
;

846 
unifi_sdi€mb
.
id_èbÀ
[
i
].
fun˘i⁄
 = 
sdio_drv
->
ids
[i].
sdioFun˘i⁄
;

847 
unifi_sdi€mb
.
id_èbÀ
[
i
].
öãrÁ˚
 = 
sdio_drv
->
ids
[i].
sdioI¡îÁ˚
;

849 
unifi_sdi€mb
.
id_èbÀ
[
i
].
víd‹_id
 = 0;

850 
unifi_sdi€mb
.
id_èbÀ
[
i
].
devi˚_id
 = 0;

851 
unifi_sdi€mb
.
id_èbÀ
[
i
].
fun˘i⁄
 = 0;

852 
unifi_sdi€mb
.
id_èbÀ
[
i
].
öãrÁ˚
 = 0;

855 
sdio_func_drv
 = 
sdio_drv
;

857 #ifde‡
CONFIG_PM


859 
	`INIT_LIST_HEAD
(&
uf_sdio_emb_pm_nŸifõrs
.
li°
);

862 #ifde‡
ANDROID_BUILD


863 
	`wake_lock_öô
(&
unifi_sdio_wake_lock
, 
WAKE_LOCK_SUSPEND
, "unifi_sdio_work");

867 
r
 = 
	`sdi€mb_drivî_ªgi°î
(&
unifi_sdi€mb
);

868 i‡(
r
) {

869 
	`unifi_îr‹
(
NULL
, "FaûedÅÿªgi°î UniFòSDIO drivî: %d\n", 
r
);

870  
	`C⁄vîtSdioToC§SdioResu…
(
r
);

873  
CSR_RESULT_SUCCESS
;

874 
	}
}

878 
	$C§SdioFun˘i⁄DrivîUƒegi°î
(
C§SdioFun˘i⁄Drivî
 *
sdio_drv
)

880 
	`sdi€mb_drivî_uƒegi°î
(&
unifi_sdi€mb
);

882 #ifde‡
ANDROID_BUILD


883 
	`wake_lock_de°roy
(&
unifi_sdio_wake_lock
);

886 
sdio_func_drv
 = 
NULL
;

888 
	`C§PmemFªe
(
unifi_sdi€mb
.
id_èbÀ
);

889 
unifi_sdi€mb
.
id_èbÀ
 = 
NULL
;

890 
	}
}

	@sdio_events.c

16 
	~"unifi_¥iv.h
"

45 
	$unifi_su•íd
(*
o•riv
)

47 
unifi_¥iv_t
 *
¥iv
 = 
o•riv
;

48 
öãrÁ˚Tag
=0;

51 
¥iv
->
wﬁ_su•íd
 = (
íabÀ_wﬁ
 =
UNIFI_WOL_OFF
Ë? 
FALSE
 : 
TRUE
;

53 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "unifi_suspend: wol_suspend %d,Énable_wol %d",

54 
¥iv
->
wﬁ_su•íd
, 
íabÀ_wﬁ
 );

58  
öãrÁ˚Tag
=0;öãrÁ˚Tag<
CSR_WIFI_NUM_INTERFACES
;interfaceTag++)

60 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

61 i‡(
öãrÁ˚Priv
->
√tdev_ªgi°îed
 == 1)

63 if–
¥iv
->
wﬁ_su•íd
 ) {

64 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "unifi_suspend: Don'tÇetif_carrier_off");

66 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "unifi_suspend:Çetif_carrier_off");

67 
	`√tif_ˇºõr_off
(
¥iv
->
√tdev
[
öãrÁ˚Tag
]);

69 
	`UF_NETIF_TX_STOP_ALL_QUEUES
(
¥iv
->
√tdev
[
öãrÁ˚Tag
]);

73 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "unifi_suspend: suspend SME");

75 
	`sme_sys_su•íd
(
¥iv
);

77 
	}
}

91 
	$unifi_ªsume
(*
o•riv
)

93 
unifi_¥iv_t
 *
¥iv
 = 
o•riv
;

94 
öãrÁ˚Tag
=0;

95 
r
;

96 
wﬁ
 = 
¥iv
->
wﬁ_su•íd
;

98 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "unifi_ªsume:ÑesumêSME,É«bÀ_wﬁ=%d", 
íabÀ_wﬁ
);

101 
r
 = 
	`sme_sys_ªsume
(
¥iv
);

102 i‡(
r
) {

103 
	`unifi_îr‹
(
¥iv
, "FailedÅoÑesume UniFi\n");

106 i‡(
¥iv
->
ˇrd
 =
NULL
) {

107 
	`unifi_îr‹
(
¥iv
, "No card object\n");

114 i‡(
wﬁ
) {

115 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "unifi_resume:ÅryÅoÉnable carrier");

118  
öãrÁ˚Tag
=0;öãrÁ˚Tag<
CSR_WIFI_NUM_INTERFACES
;interfaceTag++) {

119 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

121 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "unifi_resume: interfaceTag %dÇetdev_registered %d mode %d\n",

122 
öãrÁ˚Tag
, 
öãrÁ˚Priv
->
√tdev_ªgi°îed
, i¡îÁ˚Priv->
öãrÁ˚Mode
);

124 i‡(
öãrÁ˚Priv
->
√tdev_ªgi°îed
 == 1)

126 
	`√tif_ˇºõr_⁄
(
¥iv
->
√tdev
[
öãrÁ˚Tag
]);

127 
	`UF_NETIF_TX_START_ALL_QUEUES
(
¥iv
->
√tdev
[
öãrÁ˚Tag
]);

135 
	`unifi_£nd_sig«l
(
¥iv
->
ˇrd
, 
NULL
, 0, NULL);

138 
	}
}

	@sdio_mmc.c

15 
	~<löux/moduÀ.h
>

16 
	~<löux/öô.h
>

17 
	~<löux/kî√l.h
>

18 
	~<löux/muãx.h
>

19 
	~<löux/gÂ.h
>

21 
	~<löux/mmc/c‹e.h
>

22 
	~<löux/mmc/ˇrd.h
>

23 
	~<löux/mmc/ho°.h
>

24 
	~<löux/mmc/sdio_func.h
>

25 
	~<löux/mmc/sdio_ids.h
>

26 
	~<löux/mmc/sdio.h
>

27 
	~<löux/su•íd.h
>

29 
	~"unifi_¥iv.h
"

31 #ifde‡
ANDROID_BUILD


32 
wake_lock
 
	gunifi_sdio_wake_lock
;

33 
	#CSR_WIFI_SDIO_MMC_SUPPORT_POWERED_SUSPEND


	)

36 
C§SdioFun˘i⁄Drivî
 *
	gsdio_func_drv
;

38 #ifde‡
CSR_WIFI_SDIO_USE_QUEUE


39 
	~<löux/sˇâîli°.h
>

40 
	~<löux/com∂ëi⁄.h
>

41 #ifde‡
CSR_WIFI_DEFER_TH_FLUSH


42 
	#CSR_WIFI_SDIO_QUEUE_LENGTH
 24

	)

44 
	#CSR_WIFI_SDIO_QUEUE_LENGTH
 38

	)

47 
	#CSR_SDIO_CMD_WRITE
 0x80000000

	)

48 
	#CSR_SDIO_CMD_READ
 0x00000000

	)

56 
mmc_ªque°
 
	gsdioReqQueue
[
CSR_WIFI_SDIO_QUEUE_LENGTH
];

57 
mmc_comm™d
 
	gsdioCmdQueue
[
CSR_WIFI_SDIO_QUEUE_LENGTH
];

58 
mmc_d©a
 
	gsdioD©aQueue
[
CSR_WIFI_SDIO_QUEUE_LENGTH
];

59 
sˇâîli°
 
	gsdioSgQueue
[
CSR_WIFI_SDIO_QUEUE_LENGTH
];

61 
	gsdioQueueNext
 = 0;

62 
	gsdioQueueCuºít
 = 0;

63 
	gsdioQueueBuûd
 = 0;

66 
sdio_func
 *
	gsdioFunc
;

69 
C§WifiSdioQueueReque°D⁄e
(
mmc_ªque°
 *
mrq
);

70 
C§Resu…
 
C⁄vîtSdioToC§SdioResu…
(
r
);

73 
	$C§WifiSdioQueueInô
(
sdio_func
 *
fun˘i⁄
)

77 
C§I¡32
 
i
;

78 
	`C§MemSë
(
sdioReqQueue
, 0, (sdioReqQueue));

79 
	`C§MemSë
(
sdioCmdQueue
, 0, (sdioCmdQueue));

80 
	`C§MemSë
(
sdioD©aQueue
, 0, (sdioDataQueue));

81 
	`C§MemSë
(
sdioSgQueue
, 0, (sdioSgQueue));

82 
i
 = 
CSR_WIFI_SDIO_QUEUE_LENGTH
-1; i >= 0; i--)

85 
sdioReqQueue
[
i
].
cmd
 = &(
sdioCmdQueue
[i]);

87 
sdioCmdQueue
[
i
].
mrq
 = &(
sdioReqQueue
[i]);

88 
sdioD©aQueue
[
i
].
mrq
 = &(
sdioReqQueue
[i]);

89 
sdioD©aQueue
[
i
].
blksz
 = 
fun˘i⁄
->
cur_blksize
;

93 
sdioFunc
 = 
fun˘i⁄
;

94 
	}
}

97 
	$C§WifiSdioQueueSèπReque°
(
mmc_ªque°
 *
mrq
)

99 
mrq
->
cmd
->
îr‹
 = 0;

100 
mrq
->
cmd
->
ª•
[0] = 0;

101 
mrq
->
cmd
->
ª•
[1] = 0;

102 
mrq
->
cmd
->
ª•
[2] = 0;

103 
mrq
->
cmd
->
ª•
[3] = 0;

104 
mrq
->
cmd
->
ªåõs
 = 0;

105 
sdioFunc
->
ˇrd
->
ho°
->
›s
->
	`ªque°
(sdioFunc->ˇrd->ho°, 
mrq
);

106 
	}
}

108 
	$c§WifiSdioExåa˘Eº‹
(
mmc_ªque°
 *
mrq
)

110 i‡(
mrq
->
cmd
->
îr‹
)

111  
mrq
->
cmd
->
îr‹
;

113 i‡(
	`mmc_ho°_is_•i
(
sdioFunc
->
ˇrd
->
ho°
)) {

116 i‡(
mrq
->
cmd
->
ª•
[0] & 
R5_ERROR
)

117  -
EIO
;

118 i‡(
mrq
->
cmd
->
ª•
[0] & 
R5_FUNCTION_NUMBER
)

119  -
EINVAL
;

120 i‡(
mrq
->
cmd
->
ª•
[0] & 
R5_OUT_OF_RANGE
)

121  -
ERANGE
;

124 
	}
}

127 
	$C§WifiSdioQueueReque°D⁄e
(
mmc_ªque°
 *
mrq
)

129 if(
	`c§WifiSdioExåa˘Eº‹
(
mrq
Ë=0 && (
sdioQueueCuºít
+1Ë< 
sdioQueueNext
)

131 
mmc_ªque°
 *
√xtMrq
;

132 
sdioQueueCuºít
++;

133 
√xtMrq
 = &(
sdioReqQueue
[
sdioQueueCuºít
]);

134 
√xtMrq
->
d⁄e
 = 
C§WifiSdioQueueReque°D⁄e
;

135 
√xtMrq
->
d⁄e_d©a
 = 
mrq
->done_data;

136 
	`C§WifiSdioQueueSèπReque°
(
√xtMrq
);

140 
	`com∂ëe
(
mrq
->
d⁄e_d©a
);

142 
	}
}

147 
	$C§WifiSdioQueueSèπ
()

149 
sdioQueueBuûd
 = 1;

151 
sdioQueueNext
 = 0;

152 
	}
}

154 
C§Resu…
 
	$C§WifiSdioQueueFlush
()

156 
sdioQueueBuûd
 = 0;

157 if(
sdioQueueNext
 > 0)

159 
îr
 = 0;

160 
	`DECLARE_COMPLETION_ONSTACK
(
com∂ëeFœg
);

161 
mmc_ªque°
 *
mrq
;

163 
sdioQueueCuºít
=0;

164 
mrq
 = &(
sdioReqQueue
[
sdioQueueCuºít
]);

165 
mrq
->
d⁄e
 = 
C§WifiSdioQueueReque°D⁄e
;

166 
mrq
->
d⁄e_d©a
 = &
com∂ëeFœg
;

168 
	`_sdio_˛aim_ho°
(
sdioFunc
);

170 
	`C§WifiSdioQueueSèπReque°
(
mrq
);

172 
	`waô_f‹_com∂ëi⁄
(&
com∂ëeFœg
);

174 
	`_sdio_ªÀa£_ho°
(
sdioFunc
);

176 
mrq
 = &(
sdioReqQueue
[
sdioQueueCuºít
]);

178 
îr
 = 
	`c§WifiSdioExåa˘Eº‹
(
mrq
);

180 i‡(
îr
) {

181 
	`func_exô_r
(
îr
);

182  
	`C⁄vîtSdioToC§SdioResu…
(
îr
);

186  
CSR_RESULT_SUCCESS
;

187 
	}
}

189 
C§Resu…
 
	$C§SdioQueueWrôe8
(
func_ƒ
, 
C§Uöt32
 
addªss
, 
C§Uöt8
 
d©a
)

192 if(
sdioQueueNext
 =
CSR_WIFI_SDIO_QUEUE_LENGTH
)

194 
C§Resu…
 
ªs
;

196 
	`unifi_îr‹
(
NULL
, "CsrSdioQueueWrite8() Queue is full -Öerformingá queue flush.\n");

197 
ªs
 = 
	`C§WifiSdioQueueFlush
();

198 if(
ªs
 !
CSR_RESULT_SUCCESS
)

200  
ªs
;

202 
	`C§WifiSdioQueueSèπ
();

205 
mmc_comm™d
 *
cmd
 = 
sdioReqQueue
[
sdioQueueNext
++].cmd;

209 
cmd
->
d©a
 = 
NULL
;

210 
cmd
->
mrq
->
d©a
 = 
NULL
;

211 
cmd
->
mrq
->
°›
 = 
NULL
;

214 
cmd
->
›code
 = 
SD_IO_RW_DIRECT
;

215 
cmd
->
¨g
 = 
CSR_SDIO_CMD_WRITE
;

216 
cmd
->
¨g
 |
func_ƒ
 << 28;

217 
cmd
->
¨g
 |
addªss
 << 9;

218 
cmd
->
¨g
 |
d©a
;

219 
cmd
->
Êags
 = 
MMC_RSP_SPI_R5
 | 
MMC_RSP_R5
 | 
MMC_CMD_AC
;

222  
CSR_RESULT_SUCCESS
;

223 
	}
}

227 
C§Resu…
 
	$C§SdioQueueCmd53
(
sdio_func
 *
func
, 
C§Uöt32
 
addªss
, c⁄° *
d©a_buf
, C§Uöt32 
Àngth
, C§Uöt32 
wrôe_bô
)

230 if(
sdioQueueNext
 =
CSR_WIFI_SDIO_QUEUE_LENGTH
)

232 
C§Resu…
 
ªs
;

234 
	`unifi_îr‹
(
NULL
, "CsrSdioQueueCmd53() Queue is full -Öerformingá queue flush.\n");

235 
ªs
 = 
	`C§WifiSdioQueueFlush
();

236 if(
ªs
 !
CSR_RESULT_SUCCESS
)

238  
ªs
;

240 
	`C§WifiSdioQueueSèπ
();

243 
mmc_ªque°
 *
mrq
 = &(
sdioReqQueue
[
sdioQueueNext
]);

244 
mmc_comm™d
 *
cmd
 = 
mrq
->cmd;

245 
mmc_d©a
 *
d©a
 = &(
sdioD©aQueue
[
sdioQueueNext
]);

246 
sˇâîli°
 *
sg
 = &(
sdioSgQueue
[
sdioQueueNext
]);

247 
C§Uöt32
 
blocks
;

249 
sdioQueueNext
++;

253 
blocks
 = (
Àngth
+
func
->
cur_blksize
-1) / func->cur_blksize;

256 
	`BUG_ON
(
blocks
>511);

261 
d©a
->
îr‹
 = 0;

262 
d©a
->
byãs_x„ªd
 = 0;

265 
cmd
->
d©a
 = data;

266 
mrq
->
d©a
 = data;

269 
cmd
->
›code
 = 
SD_IO_RW_EXTENDED
;

270 
cmd
->
¨g
 = 
wrôe_bô
;

271 
cmd
->
¨g
 |
func
->
num
 << 28;

272 
cmd
->
¨g
 |
addªss
 << 9;

273 
cmd
->
¨g
 |0x08000000 | 
blocks
;

274 
cmd
->
Êags
 = 
MMC_RSP_SPI_R5
 | 
MMC_RSP_R5
 | 
MMC_CMD_ADTC
;

277 
d©a
->
blocks
 = blocks;

278 
d©a
->
Êags
 = (
wrôe_bô
 =
CSR_SDIO_CMD_READ
Ë? 
MMC_DATA_READ
 : 
MMC_DATA_WRITE
;

279 
d©a
->
sg
 = sg;

280 
d©a
->
sg_Àn
 = 1;

282 
	`sg_öô_⁄e
(
sg
, 
d©a_buf
, 
func
->
cur_blksize
 * 
blocks
);

285 
	`mmc_£t_d©a_timeout
(
d©a
, 
sdioFunc
->
ˇrd
);

288  
CSR_RESULT_SUCCESS
;

289 
	}
}

293 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,32)

294 #ifde‡
CONFIG_PM


295 
uf_sdio_mmc_powî_evít
(
nŸifõr_block
 *
this
, 
evít
, *
±r
);

306 
	gˇrd_is_powîed
 = 1;

311 
C§Resu…


312 
	$C⁄vîtSdioToC§SdioResu…
(
r
)

314 
C§Resu…
 
c§Resu…
 = 
CSR_RESULT_FAILURE
;

316 
r
) {

318 
c§Resu…
 = 
CSR_RESULT_SUCCESS
;

320 -
EIO
:

321 -
EILSEQ
:

322 
c§Resu…
 = 
CSR_SDIO_RESULT_CRC_ERROR
;

325 -
ETIMEDOUT
:

326 -
EBUSY
:

327 
c§Resu…
 = 
CSR_SDIO_RESULT_TIMEOUT
;

329 -
ENODEV
:

330 -
ENOMEDIUM
:

331 
c§Resu…
 = 
CSR_SDIO_RESULT_NO_DEVICE
;

333 -
EINVAL
:

334 
c§Resu…
 = 
CSR_SDIO_RESULT_INVALID_VALUE
;

336 -
ENOMEM
:

337 -
ENOSYS
:

338 -
ERANGE
:

339 -
ENXIO
:

340 
c§Resu…
 = 
CSR_RESULT_FAILURE
;

343 
	`unifi_w¨nög
(
NULL
, "Uƒecogni£d SDIOÉº‹ code: %d\n", 
r
);

347  
c§Resu…
;

348 
	}
}

352 
	$c§_io_rw_dúe˘
(
mmc_ˇrd
 *
ˇrd
, 
wrôe
, 
uöt8_t
 
‚
,

353 
uöt32_t
 
addr
, 
uöt8_t
 
ö
, uöt8_t* 
out
)

355 
mmc_comm™d
 
cmd
;

356 
îr
;

358 
	`BUG_ON
(!
ˇrd
);

359 
	`BUG_ON
(
‚
 > 7);

361 
	`mem£t
(&
cmd
, 0, (
mmc_comm™d
));

363 
cmd
.
›code
 = 
SD_IO_RW_DIRECT
;

364 
cmd
.
¨g
 = 
wrôe
 ? 0x80000000 : 0x00000000;

365 
cmd
.
¨g
 |
‚
 << 28;

366 
cmd
.
¨g
 |(
wrôe
 && 
out
) ? 0x08000000 : 0x00000000;

367 
cmd
.
¨g
 |
addr
 << 9;

368 
cmd
.
¨g
 |
ö
;

369 
cmd
.
Êags
 = 
MMC_RSP_SPI_R5
 | 
MMC_RSP_R5
 | 
MMC_CMD_AC
;

371 
îr
 = 
	`mmc_waô_f‹_cmd
(
ˇrd
->
ho°
, &
cmd
, 0);

372 i‡(
îr
)

373  
îr
;

381 i‡(
cmd
.
ª•
[0] & 
R5_ERROR
) {

382 
	`¥ötk
(
KERN_ERR
 "%s:Ñ5Érror 0x%02x\n",

383 
__FUNCTION__
, 
cmd
.
ª•
[0]);

384  -
EIO
;

386 i‡(
cmd
.
ª•
[0] & 
R5_FUNCTION_NUMBER
)

387  -
EINVAL
;

388 i‡(
cmd
.
ª•
[0] & 
R5_OUT_OF_RANGE
)

389  -
ERANGE
;

392 i‡(
out
) {

394 *
out
 = (
cmd
.
ª•
[0] >> 8) & 0xFF;

397 *
out
 = 
cmd
.
ª•
[0] & 0xFF;

401  
CSR_RESULT_SUCCESS
;

402 
	}
}

405 
C§Resu…


406 
	$C§SdioRód8
(
C§SdioFun˘i⁄
 *
fun˘i⁄
, 
C§Uöt32
 
addªss
, 
C§Uöt8
 *
d©a
)

408 
sdio_func
 *
func
 = (sdio_fun¯*)
fun˘i⁄
->
¥iv
;

409 
îr
 = 0;

411 
	`_sdio_˛aim_ho°
(
func
);

412 *
d©a
 = 
	`sdio_ªadb
(
func
, 
addªss
, &
îr
);

413 
	`_sdio_ªÀa£_ho°
(
func
);

415 i‡(
îr
) {

416 
	`func_exô_r
(
îr
);

417  
	`C⁄vîtSdioToC§SdioResu…
(
îr
);

420  
CSR_RESULT_SUCCESS
;

421 
	}
}

423 
C§Resu…


424 
	$C§SdioWrôe8
(
C§SdioFun˘i⁄
 *
fun˘i⁄
, 
C§Uöt32
 
addªss
, 
C§Uöt8
 
d©a
)

426 
sdio_func
 *
func
 = (sdio_fun¯*)
fun˘i⁄
->
¥iv
;

427 #ifde‡
CSR_WIFI_SDIO_USE_QUEUE


428 if(
sdioQueueBuûd
 == 1)

430  
	`C§SdioQueueWrôe8
(
func
->
num
, 
addªss
, 
d©a
);

435 
îr
 = 0;

437 
	`_sdio_˛aim_ho°
(
func
);

438 
	`sdio_wrôeb
(
func
, 
d©a
, 
addªss
, &
îr
);

439 
	`_sdio_ªÀa£_ho°
(
func
);

441 i‡(
îr
) {

442 
	`func_exô_r
(
îr
);

443  
	`C⁄vîtSdioToC§SdioResu…
(
îr
);

446  
CSR_RESULT_SUCCESS
;

447 
	}
}

449 
C§Resu…


450 
	$C§SdioRód16
(
C§SdioFun˘i⁄
 *
fun˘i⁄
, 
C§Uöt32
 
addªss
, 
C§Uöt16
 *
d©a
)

452 
sdio_func
 *
func
 = (sdio_fun¯*)
fun˘i⁄
->
¥iv
;

453 
îr
;

454 
uöt8_t
 
b0
, 
b1
;

456 
	`_sdio_˛aim_ho°
(
func
);

457 
b0
 = 
	`sdio_ªadb
(
func
, 
addªss
, &
îr
);

458 i‡(
îr
) {

459 
	`_sdio_ªÀa£_ho°
(
func
);

460  
	`C⁄vîtSdioToC§SdioResu…
(
îr
);

463 
b1
 = 
	`sdio_ªadb
(
func
, 
addªss
+1, &
îr
);

464 i‡(
îr
) {

465 
	`_sdio_ªÀa£_ho°
(
func
);

466  
	`C⁄vîtSdioToC§SdioResu…
(
îr
);

468 
	`_sdio_ªÀa£_ho°
(
func
);

470 *
d©a
 = ((
uöt16_t
)
b1
 << 8Ë| 
b0
;

472  
CSR_RESULT_SUCCESS
;

473 
	}
}

476 
C§Resu…


477 
	$C§SdioWrôe16
(
C§SdioFun˘i⁄
 *
fun˘i⁄
, 
C§Uöt32
 
addªss
, 
C§Uöt16
 
d©a
)

479 
sdio_func
 *
func
 = (sdio_fun¯*)
fun˘i⁄
->
¥iv
;

480 
îr
;

481 
uöt8_t
 
b0
, 
b1
;

483 
b1
 = (
d©a
 >> 8) & 0xFF;

484 #ifde‡
CSR_WIFI_SDIO_USE_QUEUE


485 if(
sdioQueueBuûd
 == 1)

487 
	`C§SdioQueueWrôe8
(
func
->
num
, 
addªss
+1, 
b1
);

492 
	`_sdio_˛aim_ho°
(
func
);

493 
	`sdio_wrôeb
(
func
, 
b1
, 
addªss
+1, &
îr
);

494 i‡(
îr
) {

495 
	`_sdio_ªÀa£_ho°
(
func
);

496  
	`C⁄vîtSdioToC§SdioResu…
(
îr
);

500 
b0
 = 
d©a
 & 0xFF;

501 #ifde‡
CSR_WIFI_SDIO_USE_QUEUE


502 if(
sdioQueueBuûd
 == 1)

504 
	`C§SdioQueueWrôe8
(
func
->
num
, 
addªss
, 
b0
);

509 
	`sdio_wrôeb
(
func
, 
b0
, 
addªss
, &
îr
);

510 i‡(
îr
) {

511 
	`_sdio_ªÀa£_ho°
(
func
);

512  
	`C⁄vîtSdioToC§SdioResu…
(
îr
);

514 
	`_sdio_ªÀa£_ho°
(
func
);

517  
CSR_RESULT_SUCCESS
;

518 
	}
}

521 
C§Resu…


522 
	$C§SdioF0Ród8
(
C§SdioFun˘i⁄
 *
fun˘i⁄
, 
C§Uöt32
 
addªss
, 
C§Uöt8
 *
d©a
)

524 
sdio_func
 *
func
 = (sdio_fun¯*)
fun˘i⁄
->
¥iv
;

525 
îr
 = 0;

527 
	`_sdio_˛aim_ho°
(
func
);

528 #ifde‡
MMC_QUIRK_LENIENT_FN0


529 *
d©a
 = 
	`sdio_f0_ªadb
(
func
, 
addªss
, &
îr
);

531 
îr
 = 
	`c§_io_rw_dúe˘
(
func
->
ˇrd
, 0, 0, 
addªss
, 0, 
d©a
);

533 
	`_sdio_ªÀa£_ho°
(
func
);

535 i‡(
îr
) {

536 
	`func_exô_r
(
îr
);

537  
	`C⁄vîtSdioToC§SdioResu…
(
îr
);

540  
CSR_RESULT_SUCCESS
;

541 
	}
}

543 
C§Resu…


544 
	$C§SdioF0Wrôe8
(
C§SdioFun˘i⁄
 *
fun˘i⁄
, 
C§Uöt32
 
addªss
, 
C§Uöt8
 
d©a
)

546 #ifde‡
CSR_WIFI_SDIO_USE_QUEUE


547 if(
sdioQueueBuûd
 == 1)

549 
	`C§SdioQueueWrôe8
(0, 
addªss
, 
d©a
);

554 
sdio_func
 *
func
 = (sdio_fun¯*)
fun˘i⁄
->
¥iv
;

555 
îr
 = 0;

557 
	`_sdio_˛aim_ho°
(
func
);

558 #ifde‡
MMC_QUIRK_LENIENT_FN0


559 
	`sdio_f0_wrôeb
(
func
, 
d©a
, 
addªss
, &
îr
);

561 
îr
 = 
	`c§_io_rw_dúe˘
(
func
->
ˇrd
, 1, 0, 
addªss
, 
d©a
, 
NULL
);

563 
	`_sdio_ªÀa£_ho°
(
func
);

565 i‡(
îr
) {

566 
	`func_exô_r
(
îr
);

567  
	`C⁄vîtSdioToC§SdioResu…
(
îr
);

571  
CSR_RESULT_SUCCESS
;

572 
	}
}

577 
C§Resu…


578 
	$C§SdioRód
(
C§SdioFun˘i⁄
 *
fun˘i⁄
, 
C§Uöt32
 
addªss
, *
d©a
, C§Uöt32 
Àngth
)

580 #ifde‡
CSR_WIFI_SDIO_USE_QUEUE


581 if(
sdioQueueBuûd
 == 1)

583 
sdio_func
 *
func
 = (sdio_fun¯*)
fun˘i⁄
->
¥iv
;

584 
	`C§SdioQueueCmd53
(
func
, 
addªss
, 
d©a
, 
Àngth
, 
CSR_SDIO_CMD_READ
);

589 
sdio_func
 *
func
 = (sdio_fun¯*)
fun˘i⁄
->
¥iv
;

590 
îr
;

592 
	`_sdio_˛aim_ho°
(
func
);

593 
îr
 = 
	`sdio_ªadsb
(
func
, 
d©a
, 
addªss
, 
Àngth
);

594 
	`_sdio_ªÀa£_ho°
(
func
);

596 i‡(
îr
) {

597 
	`func_exô_r
(
îr
);

598  
	`C⁄vîtSdioToC§SdioResu…
(
îr
);

601  
CSR_RESULT_SUCCESS
;

602 
	}
}

604 
C§Resu…


605 
	$C§SdioWrôe
(
C§SdioFun˘i⁄
 *
fun˘i⁄
, 
C§Uöt32
 
addªss
, c⁄° *
d©a
, C§Uöt32 
Àngth
)

607 #ifde‡
CSR_WIFI_SDIO_USE_QUEUE


608 if(
sdioQueueBuûd
 == 1)

610 
sdio_func
 *
func
 = (sdio_fun¯*)
fun˘i⁄
->
¥iv
;

611 
	`C§SdioQueueCmd53
(
func
, 
addªss
, 
d©a
, 
Àngth
, 
CSR_SDIO_CMD_WRITE
);

616 
sdio_func
 *
func
 = (sdio_fun¯*)
fun˘i⁄
->
¥iv
;

617 
îr
;

619 
	`_sdio_˛aim_ho°
(
func
);

620 
îr
 = 
	`sdio_wrôesb
(
func
, 
addªss
, (*)
d©a
, 
Àngth
);

621 
	`_sdio_ªÀa£_ho°
(
func
);

623 i‡(
îr
) {

624 
	`func_exô_r
(
îr
);

625  
	`C⁄vîtSdioToC§SdioResu…
(
îr
);

628  
CSR_RESULT_SUCCESS
;

629 
	}
}

633 
	$c§_sdio_íabÀ_hs
(
mmc_ˇrd
 *
ˇrd
)

635 
ªt
;

636 
u8
 
•ìd
;

638 i‡(!(
ˇrd
->
ho°
->
ˇps
 & 
MMC_CAP_SD_HIGHSPEED
)) {

643  -
EOPNOTSUPP
;

646 i‡(!
ˇrd
->
cc¸
.
high_•ìd
)

647  -
EOPNOTSUPP
;

650 
ªt
 = 
	`c§_io_rw_dúe˘
(
ˇrd
, 0, 0, 
SDIO_CCCR_SPEED
, 0, &
•ìd
);

651 i‡(
ªt
)

652  
ªt
;

654 
•ìd
 |
SDIO_SPEED_EHS
;

657 
•ìd
 = 
SDIO_SPEED_EHS
 | 
SDIO_SPEED_SHS
;

660 
ªt
 = 
	`c§_io_rw_dúe˘
(
ˇrd
, 1, 0, 
SDIO_CCCR_SPEED
, 
•ìd
, 
NULL
);

661 i‡(
ªt
)

662  
ªt
;

664 
	`mmc_ˇrd_£t_high•ìd
(
ˇrd
);

665 
ˇrd
->
ho°
->
ios
.
timög
 = 
MMC_TIMING_SD_HS
;

668 
	}
}

671 
	$c§_sdio_dißbÀ_hs
(
mmc_ˇrd
 *
ˇrd
)

673 
ªt
;

674 
u8
 
•ìd
;

676 i‡(!(
ˇrd
->
ho°
->
ˇps
 & 
MMC_CAP_SD_HIGHSPEED
))

677  -
EOPNOTSUPP
;

679 i‡(!
ˇrd
->
cc¸
.
high_•ìd
)

680  -
EOPNOTSUPP
;

682 
ªt
 = 
	`c§_io_rw_dúe˘
(
ˇrd
, 0, 0, 
SDIO_CCCR_SPEED
, 0, &
•ìd
);

683 i‡(
ªt
)

684  
ªt
;

686 
•ìd
 &~
SDIO_SPEED_EHS
;

689 
•ìd
 = 
SDIO_SPEED_SHS
;

692 
ªt
 = 
	`c§_io_rw_dúe˘
(
ˇrd
, 1, 0, 
SDIO_CCCR_SPEED
, 
•ìd
, 
NULL
);

693 i‡(
ªt
)

694  
ªt
;

696 
ˇrd
->
°©e
 &~
MMC_STATE_HIGHSPEED
;

697 
ˇrd
->
ho°
->
ios
.
timög
 = 
MMC_TIMING_LEGACY
;

700 
	}
}

717 
C§Resu…


718 
	$C§SdioMaxBusClockFªquícySë
(
C§SdioFun˘i⁄
 *
fun˘i⁄
, 
C§Uöt32
 
maxFªquícy
)

720 
sdio_func
 *
func
 = (sdio_fun¯*)
fun˘i⁄
->
¥iv
;

721 
mmc_ho°
 *
ho°
 = 
func
->
ˇrd
->host;

722 
mmc_ios
 *
ios
 = &
ho°
->ios;

723 
îr
;

725 i‡(!
maxFªquícy
 || maxFªquícy > 1000 * 
sdio_˛ock
) {

726 
maxFªquícy
 = 1000 * 
sdio_˛ock
;

729 
	`_sdio_˛aim_ho°
(
func
);

730 i‡(
maxFªquícy
 > 
ho°
->
f_max
) {

731 
maxFªquícy
 = 
ho°
->
f_max
;

734 i‡(
maxFªquícy
 > 
UNIFI_SDIO_STD_CLOCK_HZ
) {

735 
îr
 = 
	`c§_sdio_íabÀ_hs
(
func
->
ˇrd
);

737 
îr
 = 
	`c§_sdio_dißbÀ_hs
(
func
->
ˇrd
);

739 i‡(
îr
) {

740 i‡(
îr
 =-
EOPNOTSUPP
)

742 
maxFªquícy
 = 
UNIFI_SDIO_STD_CLOCK_HZ
;

746 
	`¥ötk
(
KERN_ERR
 "SDIO warning: FailedÅo configure SDIO clock mode\n");

747 
	`_sdio_ªÀa£_ho°
(
func
);

748  
CSR_RESULT_FAILURE
;

752 
ios
->
˛ock
 = 
maxFªquícy
;

753 
ho°
->
›s
->
	`£t_ios
(ho°, 
ios
);

755 
	`_sdio_ªÀa£_ho°
(
func
);

757  
CSR_RESULT_SUCCESS
;

758 
	}
}

782 
C§Resu…


783 
	$C§SdioI¡îru±E«bÀ
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

785 
sdio_func
 *
func
 = (sdio_fun¯*)
fun˘i⁄
->
¥iv
;

786 
îr
 = 0;

788 #ifde‡
CSR_CONFIG_MMC_INT_BYPASS_KSOFTIRQD


789 
	`sdio_unblock_ˇrd_úq
(
func
);

791 
	`_sdio_˛aim_ho°
(
func
);

793 #ifde‡
MMC_QUIRK_LENIENT_FN0


794 
	`sdio_f0_wrôeb
(
func
, 0x3, 
SDIO_CCCR_IENx
, &
îr
);

796 
îr
 = 
	`c§_io_rw_dúe˘
(
func
->
ˇrd
, 1, 0, 
SDIO_CCCR_IENx
, 0x03, 
NULL
);

798 
	`_sdio_ªÀa£_ho°
(
func
);

800 
	`func_exô
();

801 i‡(
îr
) {

802 
	`¥ötk
(
KERN_ERR
 "unifi: %s:Éº‹ %d wrôög IENx\n", 
__FUNCTION__
, 
îr
);

803  
	`C⁄vîtSdioToC§SdioResu…
(
îr
);

806  
CSR_RESULT_SUCCESS
;

807 
	}
}

809 
C§Resu…


810 
	$C§SdioI¡îru±DißbÀ
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

812 
sdio_func
 *
func
 = (sdio_fun¯*)
fun˘i⁄
->
¥iv
;

813 
îr
 = 0;

815 #ifde‡
CSR_CONFIG_MMC_INT_BYPASS_KSOFTIRQD


816 
	`sdio_block_ˇrd_úq
(
func
);

818 
	`_sdio_˛aim_ho°
(
func
);

820 #ifde‡
MMC_QUIRK_LENIENT_FN0


821 
	`sdio_f0_wrôeb
(
func
, 0, 
SDIO_CCCR_IENx
, &
îr
);

823 
îr
 = 
	`c§_io_rw_dúe˘
(
func
->
ˇrd
, 1, 0, 
SDIO_CCCR_IENx
, 0x00, 
NULL
);

825 
	`_sdio_ªÀa£_ho°
(
func
);

827 
	`func_exô
();

828 i‡(
îr
) {

829 
	`¥ötk
(
KERN_ERR
 "unifi: %s:Éº‹ %d wrôög IENx\n", 
__FUNCTION__
, 
îr
);

830  
	`C⁄vîtSdioToC§SdioResu…
(
îr
);

833  
CSR_RESULT_SUCCESS
;

834 
	}
}

837 
	$C§SdioI¡îru±AcknowÀdge
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

839 
	}
}

855 
C§Resu…


856 
	$C§SdioFun˘i⁄E«bÀ
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

858 
sdio_func
 *
func
 = (sdio_fun¯*)
fun˘i⁄
->
¥iv
;

859 
îr
;

861 
	`func_íãr
();

864 
	`_sdio_˛aim_ho°
(
func
);

865 
îr
 = 
	`sdio_íabÀ_func
(
func
);

866 
	`_sdio_ªÀa£_ho°
(
func
);

867 i‡(
îr
) {

868 
	`unifi_îr‹
(
NULL
, "FaûedÅÿíabÀ SDIO fun˘i⁄ %d\n", 
func
->
num
);

871 
	`func_exô
();

872  
	`C⁄vîtSdioToC§SdioResu…
(
îr
);

873 
	}
}

889 
C§Resu…


890 
	$C§SdioFun˘i⁄DißbÀ
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

892 
sdio_func
 *
func
 = (sdio_fun¯*)
fun˘i⁄
->
¥iv
;

893 
îr
;

895 
	`func_íãr
();

898 
	`_sdio_˛aim_ho°
(
func
);

899 
îr
 = 
	`sdio_dißbÀ_func
(
func
);

900 
	`_sdio_ªÀa£_ho°
(
func
);

901 i‡(
îr
) {

902 
	`unifi_îr‹
(
NULL
, "FaûedÅÿdißbÀ SDIO fun˘i⁄ %d\n", 
func
->
num
);

905 
	`func_exô
();

906  
	`C⁄vîtSdioToC§SdioResu…
(
îr
);

907 
	}
}

922 
	$C§SdioFun˘i⁄A˘ive
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

924 
	}
}

937 
	$C§SdioFun˘i⁄IdÀ
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

939 
	}
}

955 
C§Resu…


956 
	$C§SdioPowîOn
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

958 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,32)

959 
sdio_func
 *
func
 = (sdio_fun¯*)
fun˘i⁄
->
¥iv
;

960 
mmc_ho°
 *
ho°
 = 
func
->
ˇrd
->host;

962 
	`_sdio_˛aim_ho°
(
func
);

963 i‡(!
ˇrd_is_powîed
) {

964 #i‡((
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,37) || LINUX_VERSION_CODE >= KERNEL_VERSION(3,0,0)))

965 
	`mmc_powî_ª°‹e_ho°
(
ho°
);

967 
ˇrd_is_powîed
 = 1;

969 
	`¥ötk
(
KERN_INFO
 "SDIO: SkipÖower on; card isálreadyÖowered.\n");

971 
	`_sdio_ªÀa£_ho°
(
func
);

974  
CSR_RESULT_SUCCESS
;

975 
	}
}

988 
	$C§SdioPowîOff
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

990 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,32)

991 
sdio_func
 *
func
 = (sdio_fun¯*)
fun˘i⁄
->
¥iv
;

992 
mmc_ho°
 *
ho°
 = 
func
->
ˇrd
->host;

994 
	`_sdio_˛aim_ho°
(
func
);

995 i‡(
ˇrd_is_powîed
) {

996 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,37) || LINUX_VERSION_CODE >= KERNEL_VERSION(3,0,0))

997 
	`mmc_powî_ßve_ho°
(
ho°
);

999 
ˇrd_is_powîed
 = 0;

1001 
	`¥ötk
(
KERN_INFO
 "SDIO: SkipÖower off; card isálreadyÖowered off.\n");

1003 
	`_sdio_ªÀa£_ho°
(
func
);

1005 
	}
}

1009 
	$sdio_£t_block_size_ign‹e_fú°_îr‹
(
sdio_func
 *
func
, 
blksz
)

1011 
ªt
;

1013 i‡(
blksz
 > 
func
->
ˇrd
->
ho°
->
max_blk_size
)

1014  -
EINVAL
;

1016 i‡(
blksz
 == 0) {

1017 
blksz
 = 
	`mö
(
func
->
max_blksize
, func->
ˇrd
->
ho°
->
max_blk_size
);

1018 
blksz
 = 
	`mö
(blksz, 512u);

1025 
ªt
 = 
	`c§_io_rw_dúe˘
(
func
->
ˇrd
, 1, 0,

1026 
	`SDIO_FBR_BASE
(
func
->
num
Ë+ 
SDIO_FBR_BLKSIZE
,

1027 
blksz
 & 0xff, 
NULL
);

1028 i‡(
ªt
 &&Ñë !-
ERANGE
)

1029  
ªt
;

1030 
ªt
 = 
	`c§_io_rw_dúe˘
(
func
->
ˇrd
, 1, 0,

1031 
	`SDIO_FBR_BASE
(
func
->
num
Ë+ 
SDIO_FBR_BLKSIZE
 + 1,

1032 (
blksz
 >> 8Ë& 0xff, 
NULL
);

1033 i‡(
ªt
)

1034  
ªt
;

1035 
func
->
cur_blksize
 = 
blksz
;

1036 #ifde‡
CSR_WIFI_SDIO_USE_QUEUE


1038 
	`C§WifiSdioQueueInô
(
func
);

1042 
	}
}

1044 
C§Resu…


1045 
	$C§SdioBlockSizeSë
(
C§SdioFun˘i⁄
 *
fun˘i⁄
, 
C§Uöt16
 
blockSize
)

1047 
sdio_func
 *
func
 = (sdio_fun¯*)
fun˘i⁄
->
¥iv
;

1048 
r
 = 0;

1051 i‡(
sdio_block_size
 > -1) {

1052 
blockSize
 = 
sdio_block_size
;

1055 
	`unifi_åa˚
(
NULL
, 
UDBG1
, "Set SDIO function block sizeÅo %d\n",

1056 
blockSize
);

1058 
	`_sdio_˛aim_ho°
(
func
);

1059 
r
 = 
	`sdio_£t_block_size
(
func
, 
blockSize
);

1060 
	`_sdio_ªÀa£_ho°
(
func
);

1066 i‡(
r
 =-
ERANGE
) {

1067 
	`_sdio_˛aim_ho°
(
func
);

1068 
r
 = 
	`sdio_£t_block_size_ign‹e_fú°_îr‹
(
func
, 
blockSize
);

1069 
	`_sdio_ªÀa£_ho°
(
func
);

1071 i‡(
r
) {

1072 
	`unifi_îr‹
(
NULL
, "Eº‹ %d sëtög block size\n", 
r
);

1076 
fun˘i⁄
->
blockSize
 = 
func
->
cur_blksize
;

1077 #ifde‡
CSR_WIFI_SDIO_USE_QUEUE


1079 
	`C§WifiSdioQueueInô
(
func
);

1082  
	`C⁄vîtSdioToC§SdioResu…
(
r
);

1083 
	}
}

1096 
C§Resu…


1097 
	$C§SdioH¨dRe£t
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

1099  
CSR_RESULT_FAILURE
;

1100 
	}
}

1121 
	$uf_glue_sdio_öt_h™dÀr
(
sdio_func
 *
func
)

1123 
C§SdioFun˘i⁄
 *
sdio_˘x
;

1124 
C§SdioI¡îru±D§CÆlback
 
func_d§_ˇŒback
;

1125 
r
;

1127 
sdio_˘x
 = 
	`sdio_gë_drvd©a
(
func
);

1128 i‡(!
sdio_˘x
) {

1132 #i‚de‡
CSR_CONFIG_MMC_INT_BYPASS_KSOFTIRQD


1139 #ifde‡
MMC_QUIRK_LENIENT_FN0


1140 
	`sdio_f0_wrôeb
(
func
, 0, 
SDIO_CCCR_IENx
, &
r
);

1142 
r
 = 
	`c§_io_rw_dúe˘
(
func
->
ˇrd
, 1, 0, 
SDIO_CCCR_IENx
, 0x00, 
NULL
);

1144 i‡(
r
) {

1145 
	`¥ötk
(
KERN_ERR
 "UniFòMMC I¡ h™dÀr: FaûedÅÿdißbÀ i¡îru±†%d\n", 
r
);

1149 i‡(
sdio_func_drv
 && sdio_func_drv->
öå
) {

1151 
func_d§_ˇŒback
 = 
sdio_func_drv
->
	`öå
(
sdio_˘x
);

1154 i‡(
func_d§_ˇŒback
) {

1155 
	`func_d§_ˇŒback
(
sdio_˘x
);

1159 
	}
}

1178 
	$c§_sdio_löux_ªmove_úq
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

1180 
sdio_func
 *
func
 = (sdio_fun¯*)
fun˘i⁄
->
¥iv
;

1181 
r
;

1183 
	`unifi_åa˚
(
NULL
, 
UDBG1
, "csr_sdio_linux_remove_irq\n");

1185 
	`sdio_˛aim_ho°
(
func
);

1186 
r
 = 
	`sdio_ªÀa£_úq
(
func
);

1187 
	`sdio_ªÀa£_ho°
(
func
);

1189  
r
;

1191 
	}
}

1209 
	$c§_sdio_löux_ö°Æl_úq
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

1211 
sdio_func
 *
func
 = (sdio_fun¯*)
fun˘i⁄
->
¥iv
;

1212 
r
;

1214 
	`unifi_åa˚
(
NULL
, 
UDBG1
, "csr_sdio_linux_install_irq\n");

1217 
	`sdio_˛aim_ho°
(
func
);

1218 
r
 = 
	`sdio_˛aim_úq
(
func
, 
uf_glue_sdio_öt_h™dÀr
);

1219 
	`sdio_ªÀa£_ho°
(
func
);

1222 i‡(
r
 =-
EBUSY
) {

1223 
r
 = 0;

1226  
r
;

1227 
	}
}

1229 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,32)

1230 #ifde‡
CONFIG_PM


1235 
	suf_sdio_mmc_pm_nŸifõr


1237 
li°_hód
 
	mli°
;

1239 
C§SdioFun˘i⁄
 *
	msdio_˘x
;

1240 
nŸifõr_block
 
	mpm_nŸifõr
;

1244 
uf_sdio_mmc_pm_nŸifõr
 
	guf_sdio_mmc_pm_nŸifõrs
 = {

1245 .
sdio_˘x
 = 
NULL
,

1263 
uf_sdio_mmc_pm_nŸifõr
 *

1264 
	$uf_sdio_mmc_ªgi°î_pm_nŸifõr
(
C§SdioFun˘i⁄
 *
sdio_˘x
)

1267 
uf_sdio_mmc_pm_nŸifõr
 *
nŸifõr_˘x
 = 
	`kmÆloc
((uf_sdio_mmc_pm_nŸifõr), 
GFP_KERNEL
);

1269 i‡(
nŸifõr_˘x
)

1271 
nŸifõr_˘x
->
sdio_˘x
 = sdio_ctx;

1272 
nŸifõr_˘x
->
pm_nŸifõr
.
nŸifõr_ˇŒ
 = 
uf_sdio_mmc_powî_evít
;

1274 
	`li°_add
(&
nŸifõr_˘x
->
li°
, &
uf_sdio_mmc_pm_nŸifõrs
.list);

1276 i‡(
	`ªgi°î_pm_nŸifõr
(&
nŸifõr_˘x
->
pm_nŸifõr
)) {

1277 
	`¥ötk
(
KERN_ERR
 "unifi:Ñegister_pm_notifier failed\n");

1281  
nŸifõr_˘x
;

1282 
	}
}

1285 
	$uf_sdio_mmc_uƒegi°î_pm_nŸifõr
(
C§SdioFun˘i⁄
 *
sdio_˘x
)

1287 
uf_sdio_mmc_pm_nŸifõr
 *
nŸifõr_˘x
;

1288 
li°_hód
 *
node
, *
q
;

1290 
	`li°_f‹_óch_ß„
(
node
, 
q
, &
uf_sdio_mmc_pm_nŸifõrs
.
li°
) {

1291 
nŸifõr_˘x
 = 
	`li°_íåy
(
node
, 
uf_sdio_mmc_pm_nŸifõr
, 
li°
);

1294 i‡(
nŸifõr_˘x
 &&ÇŸifõr_˘x->
sdio_˘x
 == sdio_ctx)

1296 i‡(
	`uƒegi°î_pm_nŸifõr
(&
nŸifõr_˘x
->
pm_nŸifõr
)) {

1297 
	`¥ötk
(
KERN_ERR
 "unifi: unregister_pm_notifier failed\n");

1301 
nŸifõr_˘x
->
sdio_˘x
 = 
NULL
;

1302 
	`li°_dñ
(
node
);

1303 
	`k‰ì
(
nŸifõr_˘x
);

1306 
	}
}

1308 #ifde‡
CSR_WIFI_SDIO_MMC_SUPPORT_POWERED_SUSPEND


1310 
	$uf_sdio_mmc_su•íd_powî_£tup
(
C§SdioFun˘i⁄
 *
sdio_˘x
)

1312 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,34)

1317 
sdio_func
 *
func
 = (sdio_fun¯*)
sdio_˘x
->
¥iv
;

1318 
Êags_ªs
;

1319 
mmc_pm_Êag_t
 
ˇps
;

1321 i‡(!
íabÀ_wﬁ
) {

1325 
ˇps
 = 
	`sdio_gë_ho°_pm_ˇps
(
func
);

1327 i‡(!(
ˇps
 & 
MMC_PM_KEEP_POWER
)) {

1328 
	`¥ötk
(
KERN_ERR
 "unifi: %sÑequestingÖowered suspend but controllerÇot capable 0x%x\n",

1329 
__FUNCTION__
, 
ˇps
);

1332 
	`unifi_åa˚
(
NULL
, 
UDBG1
, "%s Existing flags = 0x%x, caps=0x%x\n",

1333 
__FUNCTION__
, 
func
->
ˇrd
->
ho°
->
pm_Êags
, 
ˇps
);

1334 
	`¥ötk
(
KERN_INFO
 "unifi: %†£âög MMC_PM_KEEP_POWER\n", 
__FUNCTION__
);

1336 
Êags_ªs
 = 
	`sdio_£t_ho°_pm_Êags
(
func
, 
MMC_PM_KEEP_POWER
);

1337 i‡(
Êags_ªs
 != 0) {

1338 
	`¥ötk
(
KERN_ERR
 "unifi: %†£âög MMC_PM_KEEP_POWER faûed!\n", 
__FUNCTION__
);

1341  
Êags_ªs
;

1345 
	}
}

1348 
	$uf_sdio_mmc_su•íd_powî_ªvît
(
C§SdioFun˘i⁄
 *
sdio_˘x
)

1350 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,34)

1353 
sdio_func
 *
func
 = (sdio_fun¯*)
sdio_˘x
->
¥iv
;

1355 i‡(
íabÀ_wﬁ
) {

1356 
	`sdio_£t_ho°_pm_Êags
(
func
, 
	`sdio_gë_ho°_pm_ˇps
(funcË& ~
MMC_PM_KEEP_POWER
);

1357 
	`¥ötk
(
KERN_INFO
 "unifi: %†MMC_PM_KEEP_POWERÑemoved\n", 
__FUNCTION__
);

1360 
	}
}

1380 
	$uf_sdio_mmc_powî_evít
(
nŸifõr_block
 *
this
, 
evít
, *
±r
)

1382 
uf_sdio_mmc_pm_nŸifõr
 *
nŸifõr_˘x
 = 
	`c⁄èöî_of
(
this
,

1383 
uf_sdio_mmc_pm_nŸifõr
,

1384 
pm_nŸifõr
);

1389 
evít
) {

1390 
PM_POST_HIBERNATION
:

1391 
PM_POST_SUSPEND
:

1392 
	`¥ötk
(
KERN_INFO
 "%s:%dÑesume\n", 
__FUNCTION__
, 
__LINE__
 );

1393 i‡(
sdio_func_drv
 && sdio_func_drv->
ªsume
) {

1394 
sdio_func_drv
->
	`ªsume
(
nŸifõr_˘x
->
sdio_˘x
);

1398 
PM_HIBERNATION_PREPARE
:

1399 
PM_SUSPEND_PREPARE
:

1400 
	`¥ötk
(
KERN_INFO
 "%s:%d su•íd\n", 
__FUNCTION__
, 
__LINE__
 );

1401 i‡(
sdio_func_drv
 && sdio_func_drv->
su•íd
) {

1402 #ifde‡
CSR_WIFI_SDIO_MMC_SUPPORT_POWERED_SUSPEND


1403 i‡(
	`uf_sdio_mmc_su•íd_powî_£tup
(
nŸifõr_˘x
->
sdio_˘x
)) {

1405  
NOTIFY_BAD
;

1408 
sdio_func_drv
->
	`su•íd
(
nŸifõr_˘x
->
sdio_˘x
);

1412  
NOTIFY_DONE
;

1413 
	}
}

1432 
	$uf_glue_sdio_¥obe
(
sdio_func
 *
func
,

1433 c⁄° 
sdio_devi˚_id
 *
id
)

1435 
ö°™˚
;

1436 
C§SdioFun˘i⁄
 *
sdio_˘x
;

1438 
	`func_íãr
();

1441 
	`sdio_˛aim_ho°
(
func
);

1443 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,32)

1445 
ˇrd_is_powîed
 = 1;

1449 
ö°™˚
 = 
func
->
ˇrd
->
ho°
->
ödex
;

1450 
	`¥ötk
("sdio bus_id: %16s - UniFi card 0x%X inserted\n",

1451 
	`sdio_func_id
(
func
), 
ö°™˚
);

1454 
sdio_˘x
 = (
C§SdioFun˘i⁄
 *)
	`kmÆloc
((CsrSdioFunction),

1455 
GFP_KERNEL
);

1456 i‡(
sdio_˘x
 =
NULL
) {

1457 
	`sdio_ªÀa£_ho°
(
func
);

1458  -
ENOMEM
;

1462 
sdio_˘x
->
sdioId
.
m™fId
 = 
func
->
víd‹
;

1463 
sdio_˘x
->
sdioId
.
ˇrdId
 = 
func
->
devi˚
;

1464 
sdio_˘x
->
sdioId
.
sdioFun˘i⁄
 = 
func
->
num
;

1465 
sdio_˘x
->
sdioId
.
sdioI¡îÁ˚
 = 
func
->
˛ass
;

1466 
sdio_˘x
->
blockSize
 = 
func
->
cur_blksize
;

1467 
sdio_˘x
->
¥iv
 = (*)
func
;

1468 
sdio_˘x
->
„©uªs
 = 0;

1471 i‡(
sdio_byã_mode
) {

1472 
sdio_˘x
->
„©uªs
 |
CSR_SDIO_FEATURE_BYTE_MODE
;

1475 i‡(
func
->
ˇrd
->
ho°
->
ˇps
 & 
MMC_CAP_SD_HIGHSPEED
) {

1476 
	`unifi_åa˚
(
NULL
, 
UDBG1
, "MMC_CAP_SD_HIGHSPEED isávailable\n");

1479 
	`unifi_åa˚
(
NULL
,
UDBG1
, "MMC_CAP_SD_HIGHSPEED isÇot supported\n");

1481 #ifde‡
MMC_QUIRK_LENIENT_FN0


1482 
func
->
ˇrd
->
quúks
 |
MMC_QUIRK_LENIENT_FN0
;

1486 
	`sdio_£t_drvd©a
(
func
, 
sdio_˘x
);

1488 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,32)

1489 #ifde‡
CONFIG_PM


1491 i‡(
	`uf_sdio_mmc_ªgi°î_pm_nŸifõr
(
sdio_˘x
Ë=
NULL
) {

1492 
	`unifi_îr‹
(
NULL
, "%s: FaûedÅÿªgi°î f‹ PMÉvíts\n", 
__FUNCTION__
);

1499 i‡(
sdio_func_drv
 && sdio_func_drv->
ö£πed
) {

1500 
	`uf_add_os_devi˚
(
ö°™˚
, &
func
->
dev
);

1501 
sdio_func_drv
->
	`ö£πed
(
sdio_˘x
);

1504 #ifde‡
CSR_WIFI_SDIO_USE_QUEUE


1505 
	`C§WifiSdioQueueInô
(
func
);

1509 
	`sdio_ªÀa£_ho°
(
func
);

1511 #ifde‡
ANDROID_BUILD


1513 
	`unifi_åa˚
(
NULL
, 
UDBG1
, "probe:Åake wakeÜock\n");

1514 
	`wake_lock
(&
unifi_sdio_wake_lock
);

1517 
	`func_exô
();

1519 
	}
}

1536 
	$uf_glue_sdio_ªmove
(
sdio_func
 *
func
)

1538 
C§SdioFun˘i⁄
 *
sdio_˘x
;

1540 
sdio_˘x
 = 
	`sdio_gë_drvd©a
(
func
);

1541 i‡(!
sdio_˘x
) {

1545 
	`func_íãr
();

1547 
	`unifi_öfo
(
NULL
, "UniFi cardÑemoved\n");

1549 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 32)

1550 #ifde‡
CSR_WIFI_SDIO_MMC_SUPPORT_POWERED_SUSPEND


1551 #ifde‡
CONFIG_PM


1552 
	`uf_sdio_mmc_su•íd_powî_ªvît
(
sdio_˘x
);

1558 i‡(
sdio_func_drv
 && sdio_func_drv->
ªmoved
) {

1559 
	`uf_ªmove_os_devi˚
(
func
->
ˇrd
->
ho°
->
ödex
);

1560 
sdio_func_drv
->
	`ªmoved
(
sdio_˘x
);

1563 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,32)

1564 #ifde‡
CONFIG_PM


1566 
	`uf_sdio_mmc_uƒegi°î_pm_nŸifõr
(
sdio_˘x
);

1570 
	`k‰ì
(
sdio_˘x
);

1572 
	`func_exô
();

1574 
	}
}

1581 c⁄° 
sdio_devi˚_id
 
	gunifi_ids
[] = {

1582 { 
SDIO_DEVICE
(
SDIO_MANF_ID_CSR
,
SDIO_CARD_ID_UNIFI_3
) },

1583 { 
SDIO_DEVICE
(
SDIO_MANF_ID_CSR
,
SDIO_CARD_ID_UNIFI_4
) },

1587 
MODULE_DEVICE_TABLE
(
sdio
, 
unifi_ids
);

1589 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,32)

1590 #ifde‡
CONFIG_PM


1606 
	$uf_glue_sdio_su•íd
(
devi˚
 *
dev
)

1608 
	`func_íãr
();

1610 
	`unifi_åa˚
(
NULL
, 
UDBG1
, "uf_glue_sdio_suspend");

1612 
	`func_exô
();

1614 
	}
}

1631 
	$uf_glue_sdio_ªsume
(
devi˚
 *
dev
)

1633 
	`func_íãr
();

1635 
	`unifi_åa˚
(
NULL
, 
UDBG1
, "uf_glue_sdio_resume");

1637 #ifde‡
ANDROID_BUILD


1638 
	`unifi_åa˚
(
NULL
, 
UDBG1
, "resume:Åake wakelock\n");

1639 
	`wake_lock
(&
unifi_sdio_wake_lock
);

1642 
	`func_exô
();

1645 
	}
}

1647 
dev_pm_›s
 
	gunifi_pm_›s
 = {

1648 .
su•íd
 = 
uf_glue_sdio_su•íd
,

1649 .
	gªsume
 = 
uf_glue_sdio_ªsume
,

1652 
	#UNIFI_PM_OPS
 (&
unifi_pm_›s
)

	)

1656 
	#UNIFI_PM_OPS
 
NULL


	)

1661 
sdio_drivî
 
	gunifi_drivî
 = {

1662 .
¥obe
 = 
uf_glue_sdio_¥obe
,

1663 .
	gªmove
 = 
uf_glue_sdio_ªmove
,

1664 .
	g«me
 = "unifi",

1665 .
	gid_èbÀ
 = 
unifi_ids
,

1666 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,32)

1667 .
	gdrv
.
	gpm
 = 
UNIFI_PM_OPS
,

1688 
C§Resu…


1689 
	$C§SdioFun˘i⁄DrivîRegi°î
(
C§SdioFun˘i⁄Drivî
 *
sdio_drv
)

1691 
r
;

1693 
	`¥ötk
("UniFi: UsingÇative Linux MMC driver for SDIO.\n");

1695 i‡(
sdio_func_drv
) {

1696 
	`unifi_îr‹
(
NULL
, "sdio_mmc: UniFi driverálreadyÑegistered\n");

1697  
CSR_SDIO_RESULT_INVALID_VALUE
;

1700 #ifde‡
ANDROID_BUILD


1701 
	`wake_lock_öô
(&
unifi_sdio_wake_lock
, 
WAKE_LOCK_SUSPEND
, "unifi_sdio_work");

1710 
sdio_func_drv
 = 
sdio_drv
;

1712 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,32)

1713 #ifde‡
CONFIG_PM


1715 
	`INIT_LIST_HEAD
(&
uf_sdio_mmc_pm_nŸifõrs
.
li°
);

1720 
r
 = 
	`sdio_ªgi°î_drivî
(&
unifi_drivî
);

1721 i‡(
r
) {

1722 
	`¥ötk
(
KERN_ERR
 "unifi_sdio: FaûedÅÿªgi°î UniFòSDIO drivî: %d\n", 
r
);

1723  
	`C⁄vîtSdioToC§SdioResu…
(
r
);

1725  
CSR_RESULT_SUCCESS
;

1726 
	}
}

1731 
	$C§SdioFun˘i⁄DrivîUƒegi°î
(
C§SdioFun˘i⁄Drivî
 *
sdio_drv
)

1733 
	`¥ötk
(
KERN_INFO
 "UniFi: unregister from MMC sdio\n");

1735 #ifde‡
ANDROID_BUILD


1736 
	`wake_lock_de°roy
(&
unifi_sdio_wake_lock
);

1738 
	`sdio_uƒegi°î_drivî
(&
unifi_drivî
);

1740 
sdio_func_drv
 = 
NULL
;

1742 
	}
}

	@sdio_stubs.c

16 
	~"c§_wifi_hù_unifi.h
"

18 
__©åibuã__
((
wók
)Ë
	$C§SdioFun˘i⁄IdÀ
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

20 
	}
}

22 
__©åibuã__
((
wók
)Ë
	$C§SdioFun˘i⁄A˘ive
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

24 
	}
}

26 
C§Resu…
 
__©åibuã__
((
wók
)Ë
	$C§SdioPowîOn
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

28  
CSR_RESULT_SUCCESS
;

29 
	}
}

31 
__©åibuã__
((
wók
)Ë
	$C§SdioPowîOff
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

33 
	}
}

35 
C§Resu…
 
__©åibuã__
((
wók
)Ë
	$C§SdioH¨dRe£t
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

37  
CSR_SDIO_RESULT_NOT_RESET
;

38 
	}
}

40 
C§Resu…
 
__©åibuã__
((
wók
)Ë
	$C§SdioBlockSizeSë
(
C§SdioFun˘i⁄
 *
fun˘i⁄
,

41 
C§Uöt16
 
blockSize
)

43  
CSR_RESULT_SUCCESS
;

44 
	}
}

46 
C§Resu…
 
__©åibuã__
((
wók
)Ë
	$C§SdioSu•íd
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

48  
CSR_RESULT_SUCCESS
;

49 
	}
}

51 
C§Resu…
 
__©åibuã__
((
wók
)Ë
	$C§SdioResume
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

53  
CSR_RESULT_SUCCESS
;

54 
	}
}

56 
__©åibuã__
((
wók
)Ë
	$c§_sdio_löux_ö°Æl_úq
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

59 
	}
}

61 
__©åibuã__
((
wók
)Ë
	$c§_sdio_löux_ªmove_úq
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

64 
	}
}

66 
__©åibuã__
((
wók
)Ë
	$C§SdioIn£πedAcknowÀdge
(
C§SdioFun˘i⁄
 *
fun˘i⁄
, 
C§Resu…
 
ªsu…
)

68 
	}
}

70 
__©åibuã__
((
wók
)Ë
	$C§SdioRemovedAcknowÀdge
(
C§SdioFun˘i⁄
 *
fun˘i⁄
)

72 
	}
}

74 
__©åibuã__
((
wók
)Ë
	$C§SdioSu•ídAcknowÀdge
(
C§SdioFun˘i⁄
 *
fun˘i⁄
, 
C§Resu…
 
ªsu…
)

76 
	}
}

78 
__©åibuã__
((
wók
)Ë
	$C§SdioResumeAcknowÀdge
(
C§SdioFun˘i⁄
 *
fun˘i⁄
, 
C§Resu…
 
ªsu…
)

80 
	}
}

	@sme_blocking.c

17 
	~"unifi_¥iv.h
"

77 
	#UNIFI_SME_MGT_SHORT_TIMEOUT
 10000

	)

78 
	#UNIFI_SME_MGT_LONG_TIMEOUT
 19000

	)

79 
	#UNIFI_SME_SYS_LONG_TIMEOUT
 10000

	)

81 #ifde‡
UNIFI_DEBUG


82 
	#sme_waô_f‹_ª∂y
(
¥iv
, 
t
Ë
	`_sme_waô_f‹_ª∂y
’riv,Å, 
__func__
)

	)

84 
	#sme_waô_f‹_ª∂y
(
¥iv
, 
t
Ë
	`_sme_waô_f‹_ª∂y
’riv,Å, 
NULL
)

	)

88 
	$sme_öô_ªque°
(
unifi_¥iv_t
 *
¥iv
)

90 i‡(
¥iv
 =
NULL
) {

91 
	`unifi_îr‹
(
¥iv
, "sme_init_request: InvalidÖriv\n");

92  -
EIO
;

95 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "sme_init_request: wait sem\n");

98 i‡(
	`down_öãºu±ibÀ
(&
¥iv
->
sme_£m
)) {

99 
	`unifi_îr‹
(
¥iv
, "sme_init_request: FailedÅo get SME semaphore\n");

100  -
EIO
;

102 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "sme_init_request: got sem:Öending\n");

104 
¥iv
->
sme_ª∂y
.
ªque°_°©us
 = 
SME_REQUEST_PENDING
;

108 
	}
}

112 
	$uf_sme_com∂ëe_ªque°
(
unifi_¥iv_t
 *
¥iv
, 
C§Resu…
 
ª∂y_°©us
, c⁄° *
func
)

114 i‡(
¥iv
 =
NULL
) {

115 
	`unifi_îr‹
(
¥iv
, "sme_complete_request: InvalidÖriv\n");

119 i‡(
¥iv
->
sme_ª∂y
.
ªque°_°©us
 !
SME_REQUEST_PENDING
) {

120 
	`unifi_nŸi˚
(
¥iv
,

122 (
func
 ? fun¯: ""), 
¥iv
->
sme_ª∂y
.
ªque°_°©us
);

125 
	`unifi_åa˚
(
¥iv
, 
UDBG5
,

127 (
func
 ? fun¯: ""), 
¥iv
->
sme_ª∂y
.
ªque°_°©us
);

129 
¥iv
->
sme_ª∂y
.
ªque°_°©us
 = 
SME_REQUEST_RECEIVED
;

130 
¥iv
->
sme_ª∂y
.
ª∂y_°©us
 =Ñeply_status;

132 
	`wake_up_öãºu±ibÀ
(&
¥iv
->
sme_ªque°_wq
);

135 
	}
}

139 
	$uf_sme_ˇn˚l_ªque°
(
unifi_¥iv_t
 *
¥iv
, 
C§Resu…
 
ª∂y_°©us
)

145 i‡(
¥iv
 =
NULL
) {

146 
	`unifi_îr‹
(
¥iv
, "sme_cancel_request: InvalidÖriv\n");

151 i‡(
¥iv
->
sme_ª∂y
.
ªque°_°©us
 !
SME_REQUEST_PENDING
) {

152 
	`unifi_åa˚
(
¥iv
, 
UDBG5
,

154 
¥iv
->
sme_ª∂y
.
ªque°_°©us
);

158 
	`unifi_åa˚
(
¥iv
, 
UDBG5
,

160 
¥iv
->
sme_ª∂y
.
ªque°_°©us
);

163 
¥iv
->
sme_ª∂y
.
ªque°_°©us
 = 
SME_REQUEST_CANCELLED
;

164 
¥iv
->
sme_ª∂y
.
ª∂y_°©us
 =Ñeply_status;

166 
	`wake_up_öãºu±ibÀ
(&
¥iv
->
sme_ªque°_wq
);

169 
	}
}

173 
	$_sme_waô_f‹_ª∂y
(
unifi_¥iv_t
 *
¥iv
,

174 
timeout
, c⁄° *
func
)

176 
r
;

178 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "sme_waô_f‹_ª∂y: %†¶ìp\n", 
func
 ? func : "");

179 
r
 = 
	`waô_evít_öãºu±ibÀ_timeout
(
¥iv
->
sme_ªque°_wq
,

180 (
¥iv
->
sme_ª∂y
.
ªque°_°©us
 !
SME_REQUEST_PENDING
),

181 
	`m£cs_to_jiffõs
(
timeout
));

182 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "sme_waô_f‹_ª∂y: %†awakê(%d)\n", 
func
 ? fun¯: "", 
r
);

184 i‡(
¥iv
 =
NULL
) {

185 
	`¥ötk
(
KERN_ERR
 "%†: unifò¥iv NULL. NŸ com∂ëögÅhêªque°!\n", 
__FUNCTION__
);

186  -
EINVAL
;

189 i‡(
r
 =-
ERESTARTSYS
) {

191 
	`unifi_öfo
(
¥iv
, "ERESTARTSYS in _sme_wait_for_reply\n");

192 
	`up
(&
¥iv
->
sme_£m
);

193  
r
;

195 i‡(
¥iv
->
sme_ª∂y
.
ªque°_°©us
 =
SME_REQUEST_CANCELLED
) {

196 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "Cancelled waiting for SMEÅoÑeply (%s s:%d,Å:%d,Ñ:%d)\n",

197 (
func
 ? fun¯: ""), 
¥iv
->
sme_ª∂y
.
ªque°_°©us
, 
timeout
, 
r
);

200 
	`up
(&
¥iv
->
sme_£m
);

201  -
EIO
;

203 i‡((
r
 =0Ë&& (
¥iv
->
sme_ª∂y
.
ªque°_°©us
 !
SME_REQUEST_RECEIVED
)) {

204 
	`unifi_nŸi˚
(
¥iv
, "Timeout waiting for SMEÅoÑeply (%s s:%d,Å:%d)\n",

205 (
func
 ? fun¯: ""), 
¥iv
->
sme_ª∂y
.
ªque°_°©us
, 
timeout
);

207 
¥iv
->
sme_ª∂y
.
ªque°_°©us
 = 
SME_REQUEST_TIMEDOUT
;

210 
	`up
(&
¥iv
->
sme_£m
);

212  -
ETIMEDOUT
;

215 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "sme_wait_for_reply: %sÑeceived (%d)\n",

216 
func
 ? fun¯: "", 
r
);

219 
	`up
(&
¥iv
->
sme_£m
);

222 
	}
}

227 #ifde‡
CSR_SUPPORT_WEXT


228 
	$sme_mgt_wifi_⁄
(
unifi_¥iv_t
 *
¥iv
)

230 
C§Uöt16
 
numEÀmíts
;

231 
C§WifiSmeD©aBlock
* 
d©aLi°
;

232 #ifde‡
CSR_SUPPORT_WEXT_AP


233 
r
;

236 i‡(
¥iv
->
smïriv
 =
NULL
) {

237 
	`unifi_îr‹
(
¥iv
, "sme_mgt_wifi_on: invalid smepriv\n");

238  -
EIO
;

241 i‡(
¥iv
->
mib_d©a
.
Àngth
) {

242 
numEÀmíts
 = 1;

243 
d©aLi°
 = &
¥iv
->
mib_d©a
;

245 
numEÀmíts
 = 0;

246 
d©aLi°
 = 
NULL
;

249 #ifde‡
CSR_SUPPORT_WEXT_AP


250 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

251 i‡(
r
) {

252  -
EIO
;

255 
	`C§WifiSmeWifiOnReqSíd
(0, 
¥iv
->
°a_mac_addªss
, 
numEÀmíts
, 
d©aLi°
);

256 #ifde‡
CSR_SUPPORT_WEXT_AP


257 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_LONG_TIMEOUT
);

258 
	`unifi_åa˚
(
¥iv
, 
UDBG4
,

260 
r
, 
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

261  
	`c⁄vît_sme_îr‹
(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

265 
	}
}

268 
	$sme_mgt_wifi_off
(
unifi_¥iv_t
 *
¥iv
)

270 
r
;

272 i‡(
¥iv
->
smïriv
 =
NULL
) {

273 
	`unifi_îr‹
(
¥iv
, "sme_mgt_wifi_off: invalid smepriv\n");

274  -
EIO
;

277 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

278 i‡(
r
) {

279  -
EIO
;

283 
	`C§WifiSmeWifiOffReqSíd
(0);

285 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_LONG_TIMEOUT
);

286 i‡(
r
) {

287  
r
;

290 
	`unifi_åa˚
(
¥iv
, 
UDBG4
,

292 
r
, 
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

293  
	`c⁄vît_sme_îr‹
(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

295 
	}
}

297 
	$sme_mgt_key
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeKey
 *
sme_key
,

298 
C§WifiSmeLi°A˘i⁄
 
a˘i⁄
)

300 
r
;

302 i‡(
¥iv
->
smïriv
 =
NULL
) {

303 
	`unifi_îr‹
(
¥iv
, "sme_mgt_key: invalid smepriv\n");

304  -
EIO
;

307 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

308 i‡(
r
) {

309  -
EIO
;

312 
	`C§WifiSmeKeyReqSíd
(0, 
CSR_WIFI_INTERFACE_IN_USE
, 
a˘i⁄
, *
sme_key
);

314 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_SHORT_TIMEOUT
);

315 i‡(
r
) {

316  
r
;

319  
	`c⁄vît_sme_îr‹
(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

320 
	}
}

323 
	$sme_mgt_sˇn_fuŒ
(
unifi_¥iv_t
 *
¥iv
,

324 
C§WifiSsid
 *
•ecific_ssid
,

325 
num_ch™√ls
,

326 *
ch™√l_li°
)

328 
C§WifiMacAddªss
 
bˇ°Addªss
 = {{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }};

329 
C§Boﬁ
 
is_a˘ive
 = (
num_ch™√ls
 > 0Ë? 
TRUE
 : 
FALSE
;

330 
r
;

332 i‡(
¥iv
->
smïriv
 =
NULL
) {

333 
	`unifi_îr‹
(
¥iv
, "sme_mgt_scan_full: invalid smepriv\n");

334  -
EIO
;

337 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "sme_mgt_scan_full: -->\n");

339 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

340 i‡(
r
) {

341  -
EIO
;

345 i‡(
is_a˘ive
) {

346 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,

348 
num_ch™√ls
);

351 
	`C§WifiSmeSˇnFuŒReqSíd
(0,

352 
•ecific_ssid
->
Àngth
?1:0,

353 
•ecific_ssid
,

354 
bˇ°Addªss
,

355 
is_a˘ive
,

356 
CSR_WIFI_SME_BSS_TYPE_ANY_BSS
,

357 
CSR_WIFI_SME_SCAN_TYPE_ALL
,

358 (
C§Uöt16
)
num_ch™√ls
, 
ch™√l_li°
,

359 
¥iv
->
sˇnInf‹m©i⁄EÀmítsLígth
,Öriv->
sˇnInf‹m©i⁄EÀmíts
);

361 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_LONG_TIMEOUT
);

362 i‡(
r
) {

363  
r
;

366 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "sme_mgt_sˇn_fuŒ: <-- (°©us=%d)\n",Öriv->
sme_ª∂y
.
ª∂y_°©us
);

367 i‡(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
 =
CSR_WIFI_RESULT_UNAVAILABLE
) {

370  
	`c⁄vît_sme_îr‹
(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

372 
	}
}

375 
	$sme_mgt_sˇn_ªsu…s_gë_async
(
unifi_¥iv_t
 *
¥iv
,

376 
iw_ªque°_öfo
 *
öfo
,

377 *
sˇn_ªsu…s
,

378 
sˇn_ªsu…s_Àn
)

380 
C§Uöt16
 
sˇn_ªsu…_li°_cou¡
;

381 
C§WifiSmeSˇnResu…
 *
sˇn_ªsu…_li°
;

382 
C§WifiSmeSˇnResu…
 *
sˇn_ªsu…
;

383 
r
;

384 
i
;

385 *
cuºít_ev
 = 
sˇn_ªsu…s
;

387 i‡(
¥iv
->
smïriv
 =
NULL
) {

388 
	`unifi_îr‹
(
¥iv
, "sme_mgt_scan_results_get_async: invalid smepriv\n");

389  -
EIO
;

392 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

393 i‡(
r
) {

394  -
EIO
;

397 
	`C§WifiSmeSˇnResu…sGëReqSíd
(0);

398 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_LONG_TIMEOUT
);

399 i‡(
r
) {

400  
r
;

403 
sˇn_ªsu…_li°_cou¡
 = 
¥iv
->
sme_ª∂y
.
ª∂y_sˇn_ªsu…s_cou¡
;

404 
sˇn_ªsu…_li°
 = 
¥iv
->
sme_ª∂y
.
ª∂y_sˇn_ªsu…s
;

405 
	`unifi_åa˚
(
¥iv
, 
UDBG2
,

407 
r
, 
sˇn_ªsu…_li°_cou¡
);

410 
i
 = 0; i < 
sˇn_ªsu…_li°_cou¡
; ++i) {

411 
sˇn_ªsu…
 = &
sˇn_ªsu…_li°
[
i
];

413 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "Scan Result: %.*s\n",

414 
sˇn_ªsu…
->
ssid
.
Àngth
,

415 
sˇn_ªsu…
->
ssid
.ssid);

417 
r
 = 
	`unifi_å™¶©e_sˇn
(
¥iv
->
√tdev
[0], 
öfo
,

418 
cuºít_ev
,

419 
sˇn_ªsu…s
 + 
sˇn_ªsu…s_Àn
,

420 
sˇn_ªsu…
, 
i
+1);

422 i‡(
r
 < 0) {

423 
	`C§PmemFªe
(
sˇn_ªsu…_li°
);

424 
¥iv
->
sme_ª∂y
.
ª∂y_sˇn_ªsu…s_cou¡
 = 0;

425 
¥iv
->
sme_ª∂y
.
ª∂y_sˇn_ªsu…s
 = 
NULL
;

426  
r
;

429 
cuºít_ev
 +
r
;

437 
	`C§PmemFªe
(
sˇn_ªsu…_li°
);

438 
¥iv
->
sme_ª∂y
.
ª∂y_sˇn_ªsu…s_cou¡
 = 0;

439 
¥iv
->
sme_ª∂y
.
ª∂y_sˇn_ªsu…s
 = 
NULL
;

441 
	`unifi_åa˚
(
¥iv
, 
UDBG2
,

443 
cuºít_ev
 - 
sˇn_ªsu…s
);

444  (
cuºít_ev
 - 
sˇn_ªsu…s
);

445 
	}
}

448 
	$sme_mgt_c⁄√˘
(
unifi_¥iv_t
 *
¥iv
)

450 
r
;

452 i‡(
¥iv
->
smïriv
 =
NULL
) {

453 
	`unifi_îr‹
(
¥iv
, "sme_mgt_connect: invalid smepriv\n");

454  -
EIO
;

457 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "sme_mgt_connect: %.*s\n",

458 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
ssid
.
Àngth
,

459 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
ssid
.ssid);

461 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

462 i‡(
r
) {

463  -
EIO
;

466 
	`C§WifiSmeC⁄√˘ReqSíd
(0, 
CSR_WIFI_INTERFACE_IN_USE
, 
¥iv
->
c⁄√˘i⁄_c⁄fig
);

467 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_SHORT_TIMEOUT
);

468 i‡(
r
) {

469  
r
;

472 i‡(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
) {

473 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "sme_mgt_connect: failed with SME status %d\n",

474 
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

477  
	`c⁄vît_sme_îr‹
(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

478 
	}
}

481 
	$sme_mgt_disc⁄√˘
(
unifi_¥iv_t
 *
¥iv
)

483 
r
;

485 i‡(
¥iv
->
smïriv
 =
NULL
) {

486 
	`unifi_îr‹
(
¥iv
, "sme_mgt_disconnect: invalid smepriv\n");

487  -
EIO
;

490 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

491 i‡(
r
) {

492  -
EIO
;

495 
	`C§WifiSmeDisc⁄√˘ReqSíd
(0, 
CSR_WIFI_INTERFACE_IN_USE
);

496 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_SHORT_TIMEOUT
);

497 i‡(
r
) {

498  
r
;

501 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "sme_mgt_disc⁄√˘: <-- (°©us=%d)\n",Öriv->
sme_ª∂y
.
ª∂y_°©us
);

502  
	`c⁄vît_sme_îr‹
(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

503 
	}
}

506 
	$sme_mgt_pmkid
(
unifi_¥iv_t
 *
¥iv
,

507 
C§WifiSmeLi°A˘i⁄
 
a˘i⁄
,

508 
C§WifiSmePmkidLi°
 *
pmkid_li°
)

510 
r
;

512 i‡(
¥iv
->
smïriv
 =
NULL
) {

513 
	`unifi_îr‹
(
¥iv
, "sme_mgt_pmkid: invalid smepriv\n");

514  -
EIO
;

517 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

518 i‡(
r
) {

519  -
EIO
;

522 
	`C§WifiSmePmkidReqSíd
(0, 
CSR_WIFI_INTERFACE_IN_USE
, 
a˘i⁄
,

523 
pmkid_li°
->
pmkidsCou¡
,Ömkid_li°->
pmkids
);

524 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_SHORT_TIMEOUT
);

525 i‡(
r
) {

526  
r
;

529 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "sme_mgt_pmkid: <-- (°©us=%d)\n",Öriv->
sme_ª∂y
.
ª∂y_°©us
);

530  
	`c⁄vît_sme_îr‹
(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

531 
	}
}

534 
	$sme_mgt_mib_gë
(
unifi_¥iv_t
 *
¥iv
,

535 *
v¨böd
, *
Àngth
)

537 
r
;

539 i‡(
¥iv
->
smïriv
 =
NULL
) {

540 
	`unifi_îr‹
(
¥iv
, "sme_mgt_mib_get: invalid smepriv\n");

541  -
EIO
;

544 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

545 i‡(
r
) {

546  -
EIO
;

549 
¥iv
->
mib_cfm_buf„r
 = 
v¨böd
;

550 
¥iv
->
mib_cfm_buf„r_Àngth
 = 
MAX_VARBIND_LENGTH
;

552 
	`C§WifiSmeMibGëReqSíd
(0, *
Àngth
, 
v¨böd
);

553 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_SHORT_TIMEOUT
);

554 i‡(
r
) {

555 
¥iv
->
mib_cfm_buf„r_Àngth
 = 0;

556 
¥iv
->
mib_cfm_buf„r
 = 
NULL
;

557  
r
;

560 *
Àngth
 = 
¥iv
->
mib_cfm_buf„r_Àngth
;

562 
¥iv
->
mib_cfm_buf„r_Àngth
 = 0;

563 
¥iv
->
mib_cfm_buf„r
 = 
NULL
;

564 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "sme_mgt_mib_gë: <-- (°©us=%d)\n",Öriv->
sme_ª∂y
.
ª∂y_°©us
);

565  
	`c⁄vît_sme_îr‹
(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

566 
	}
}

568 
	$sme_mgt_mib_£t
(
unifi_¥iv_t
 *
¥iv
,

569 *
v¨böd
, 
Àngth
)

571 
r
;

573 i‡(
¥iv
->
smïriv
 =
NULL
) {

574 
	`unifi_îr‹
(
¥iv
, "sme_mgt_mib_get: invalid smepriv\n");

575  -
EIO
;

578 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

579 i‡(
r
) {

580  -
EIO
;

583 
	`C§WifiSmeMibSëReqSíd
(0, 
Àngth
, 
v¨böd
);

584 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_SHORT_TIMEOUT
);

585 i‡(
r
) {

586  
r
;

589 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "sme_mgt_mib_£t: <-- (°©us=%d)\n",Öriv->
sme_ª∂y
.
ª∂y_°©us
);

590  
	`c⁄vît_sme_îr‹
(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

591 
	}
}

595 
	$sme_mgt_powî_c⁄fig_£t
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmePowîC⁄fig
 *
powîC⁄fig
)

597 #ifde‡
CSR_SME_USERSPACE


598 
r
;

600 i‡(
¥iv
->
smïriv
 =
NULL
) {

601 
	`unifi_îr‹
(
¥iv
, "sme_mgt_set_value_async: invalid smepriv\n");

602  -
EIO
;

605 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

606 i‡(
r
) {

607  -
EIO
;

610 
	`C§WifiSmePowîC⁄figSëReqSíd
(0, *
powîC⁄fig
);

612 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_SHORT_TIMEOUT
);

613 i‡(
r
) {

614  
r
;

617 
	`unifi_åa˚
(
¥iv
, 
UDBG4
,

619 
r
, 
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

620  
	`c⁄vît_sme_îr‹
(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

622 
C§Resu…
 
°©us
;

623 i‡(
¥iv
->
smïriv
 =
NULL
) {

624 
	`unifi_îr‹
(
¥iv
, "sme_mgt_set_value: invalid smepriv\n");

625  -
EIO
;

627 
	`C§WifiSmeMgtCœimSyncAc˚ss
(
¥iv
->
smïriv
);

628 
°©us
 = 
	`C§WifiSmeMgtPowîC⁄figSëReq
(
¥iv
->
smïriv
, *
powîC⁄fig
);

629 
	`C§WifiSmeMgtRñó£SyncAc˚ss
(
¥iv
->
smïriv
);

630  
	`c⁄vît_sme_îr‹
(
°©us
);

632 
	}
}

634 
	$sme_mgt_sme_c⁄fig_£t
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeSèC⁄fig
 *
°aC⁄fig
, 
C§WifiSmeDevi˚C⁄fig
 *
devi˚C⁄fig
)

636 #ifde‡
CSR_SME_USERSPACE


637 
r
;

639 i‡(
¥iv
->
smïriv
 =
NULL
) {

640 
	`unifi_îr‹
(
¥iv
, "sme_mgt_sme_config_set: invalid smepriv\n");

641  -
EIO
;

644 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

645 i‡(
r
) {

646  -
EIO
;

649 
	`C§WifiSmeSmeSèC⁄figSëReqSíd
(0, 
CSR_WIFI_INTERFACE_IN_USE
, *
°aC⁄fig
);

650 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_SHORT_TIMEOUT
);

651 i‡(
r
) {

652  
r
;

654 
	`unifi_åa˚
(
¥iv
, 
UDBG4
,

656 
r
, 
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

658 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

659 i‡(
r
) {

660  -
EIO
;

663 
	`C§WifiSmeSmeComm⁄C⁄figSëReqSíd
(0, *
devi˚C⁄fig
);

664 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_SHORT_TIMEOUT
);

665 i‡(
r
) {

666  
r
;

669 
	`unifi_åa˚
(
¥iv
, 
UDBG4
,

671 
r
, 
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

673  
	`c⁄vît_sme_îr‹
(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

675 
C§Resu…
 
°©us
;

676 i‡(
¥iv
->
smïriv
 =
NULL
) {

677 
	`unifi_îr‹
(
¥iv
, "sme_mgt_sme_config_set: invalid smepriv\n");

678  -
EIO
;

680 
	`C§WifiSmeMgtCœimSyncAc˚ss
(
¥iv
->
smïriv
);

681 
°©us
 = 
	`C§WifiSmeMgtSmeC⁄figSëReq
(
¥iv
->
smïriv
, *
°aC⁄fig
);

682 
°©us
 = 
	`C§WifiSmeMgtDevi˚C⁄figSëReq
(
¥iv
->
smïriv
, *
devi˚C⁄fig
);

683 
	`C§WifiSmeMgtRñó£SyncAc˚ss
(
¥iv
->
smïriv
);

684  
	`c⁄vît_sme_îr‹
(
°©us
);

686 
	}
}

688 #ifde‡
CSR_SUPPORT_WEXT


690 
	$sme_mgt_mib_c⁄fig_£t
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeMibC⁄fig
 *
mibC⁄fig
)

692 #ifde‡
CSR_SME_USERSPACE


693 
r
;

695 i‡(
¥iv
->
smïriv
 =
NULL
) {

696 
	`unifi_îr‹
(
¥iv
, "sme_mgt_mib_config_set: invalid smepriv\n");

697  -
EIO
;

700 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

701 i‡(
r
) {

702  -
EIO
;

705 
	`C§WifiSmeMibC⁄figSëReqSíd
(0, *
mibC⁄fig
);

707 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_SHORT_TIMEOUT
);

708 i‡(
r
) {

709  
r
;

712 
	`unifi_åa˚
(
¥iv
, 
UDBG4
,

714 
r
, 
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

715  
	`c⁄vît_sme_îr‹
(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

717 
C§Resu…
 
°©us
;

718 i‡(
¥iv
->
smïriv
 =
NULL
) {

719 
	`unifi_îr‹
(
¥iv
, "sme_mgt_mib_config_set: invalid smepriv\n");

720  -
EIO
;

722 
	`C§WifiSmeMgtCœimSyncAc˚ss
(
¥iv
->
smïriv
);

723 
°©us
 = 
	`C§WifiSmeMgtMibC⁄figSëReq
(
¥iv
->
smïriv
, *
mibC⁄fig
);

724 
	`C§WifiSmeMgtRñó£SyncAc˚ss
(
¥iv
->
smïriv
);

725  
	`c⁄vît_sme_îr‹
(
°©us
);

727 
	}
}

729 
	$sme_mgt_c€x_c⁄fig_£t
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeC€xC⁄fig
 *
c€xC⁄fig
)

731 #ifde‡
CSR_SME_USERSPACE


732 
r
;

734 i‡(
¥iv
->
smïriv
 =
NULL
) {

735 
	`unifi_îr‹
(
¥iv
, "sme_mgt_coex_config_set: invalid smepriv\n");

736  -
EIO
;

739 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

740 i‡(
r
) {

741  -
EIO
;

744 
	`C§WifiSmeC€xC⁄figSëReqSíd
(0, *
c€xC⁄fig
);

746 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_SHORT_TIMEOUT
);

747 i‡(
r
) {

748  
r
;

751 
	`unifi_åa˚
(
¥iv
, 
UDBG4
,

753 
r
, 
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

754  
	`c⁄vît_sme_îr‹
(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

756 
C§Resu…
 
°©us
;

757 i‡(
¥iv
->
smïriv
 =
NULL
) {

758 
	`unifi_îr‹
(
¥iv
, "sme_mgt_coex_config_set: invalid smepriv\n");

759  -
EIO
;

761 
	`C§WifiSmeMgtCœimSyncAc˚ss
(
¥iv
->
smïriv
);

762 
°©us
 = 
	`C§WifiSmeMgtC€xC⁄figSëReq
(
¥iv
->
smïriv
, *
c€xC⁄fig
);

763 
	`C§WifiSmeMgtRñó£SyncAc˚ss
(
¥iv
->
smïriv
);

764  
	`c⁄vît_sme_îr‹
(
°©us
);

766 
	}
}

770 
	$sme_mgt_ho°_c⁄fig_£t
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeHo°C⁄fig
 *
ho°C⁄fig
)

772 #ifde‡
CSR_SME_USERSPACE


773 
r
;

775 i‡(
¥iv
->
smïriv
 =
NULL
) {

776 
	`unifi_îr‹
(
¥iv
, "sme_mgt_host_config_set: invalid smepriv\n");

777  -
EIO
;

780 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

781 i‡(
r
) {

782  -
EIO
;

785 
	`C§WifiSmeHo°C⁄figSëReqSíd
(0, 
CSR_WIFI_INTERFACE_IN_USE
, *
ho°C⁄fig
);

787 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_SHORT_TIMEOUT
);

788 i‡(
r
) {

789  
r
;

792 
	`unifi_åa˚
(
¥iv
, 
UDBG4
,

794 
r
, 
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

795  
	`c⁄vît_sme_îr‹
(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

797 
C§Resu…
 
°©us
;

798 i‡(
¥iv
->
smïriv
 =
NULL
) {

799 
	`unifi_îr‹
(
¥iv
, "sme_mgt_host_config_set: invalid smepriv\n");

800  -
EIO
;

802 
	`C§WifiSmeMgtCœimSyncAc˚ss
(
¥iv
->
smïriv
);

803 
°©us
 = 
	`C§WifiSmeMgtHo°C⁄figSëReq
(
¥iv
->
smïriv
, *
ho°C⁄fig
);

804 
	`C§WifiSmeMgtRñó£SyncAc˚ss
(
¥iv
->
smïriv
);

805  
	`c⁄vît_sme_îr‹
(
°©us
);

807 
	}
}

809 #ifde‡
CSR_SUPPORT_WEXT


811 
	$sme_mgt_vîsi⁄s_gë
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeVîsi⁄s
 *
vîsi⁄s
)

813 #ifde‡
CSR_SME_USERSPACE


814 
r
;

816 i‡(
¥iv
->
smïriv
 =
NULL
) {

817 
	`unifi_îr‹
(
¥iv
, "sme_mgt_versions_get: invalid smepriv\n");

818  -
EIO
;

821 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "sme_mgt_versions_get: unifi_mgt_versions_get_req -->\n");

822 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

823 i‡(
r
) {

824  -
EIO
;

827 
	`C§WifiSmeVîsi⁄sGëReqSíd
(0);

829 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_SHORT_TIMEOUT
);

830 i‡(
r
) {

831  
r
;

835 i‡(
vîsi⁄s
 !
NULL
) {

836 
	`mem˝y
((*)
vîsi⁄s
,

837 (*)&
¥iv
->
sme_ª∂y
.
vîsi⁄s
,

838 (
C§WifiSmeVîsi⁄s
));

841 
	`unifi_åa˚
(
¥iv
, 
UDBG4
,

843 
r
, 
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

845  
	`c⁄vît_sme_îr‹
(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

847 
C§Resu…
 
°©us
;

848 
	`C§WifiSmeMgtCœimSyncAc˚ss
(
¥iv
->
smïriv
);

849 
°©us
 = 
	`C§WifiSmeMgtVîsi⁄sGëReq
(
¥iv
->
smïriv
, 
vîsi⁄s
);

850 
	`C§WifiSmeMgtRñó£SyncAc˚ss
(
¥iv
->
smïriv
);

851  
	`c⁄vît_sme_îr‹
(
°©us
);

853 
	}
}

857 
	$sme_mgt_powî_c⁄fig_gë
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmePowîC⁄fig
 *
powîC⁄fig
)

859 #ifde‡
CSR_SME_USERSPACE


860 
r
;

862 i‡(
¥iv
->
smïriv
 =
NULL
) {

863 
	`unifi_îr‹
(
¥iv
, "sme_mgt_power_config_get: invalid smepriv\n");

864  -
EIO
;

867 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "sme_mgt_power_config_get: unifi_mgt_power_config_req -->\n");

868 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

869 i‡(
r
) {

870  -
EIO
;

873 
	`C§WifiSmePowîC⁄figGëReqSíd
(0);

875 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_SHORT_TIMEOUT
);

876 i‡(
r
) {

877  
r
;

881 i‡(
powîC⁄fig
 !
NULL
) {

882 
	`mem˝y
((*)
powîC⁄fig
,

883 (*)&
¥iv
->
sme_ª∂y
.
powîC⁄fig
,

884 (
C§WifiSmePowîC⁄fig
));

887 
	`unifi_åa˚
(
¥iv
, 
UDBG4
,

889 
r
, 
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

891  
	`c⁄vît_sme_îr‹
(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

893 
C§Resu…
 
°©us
;

894 
	`C§WifiSmeMgtCœimSyncAc˚ss
(
¥iv
->
smïriv
);

895 
°©us
 = 
	`C§WifiSmeMgtPowîC⁄figGëReq
(
¥iv
->
smïriv
, 
powîC⁄fig
);

896 
	`C§WifiSmeMgtRñó£SyncAc˚ss
(
¥iv
->
smïriv
);

897  
	`c⁄vît_sme_îr‹
(
°©us
);

899 
	}
}

901 
	$sme_mgt_ho°_c⁄fig_gë
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeHo°C⁄fig
 *
ho°C⁄fig
)

903 #ifde‡
CSR_SME_USERSPACE


904 
r
;

906 i‡(
¥iv
->
smïriv
 =
NULL
) {

907 
	`unifi_îr‹
(
¥iv
, "sme_mgt_host_config_get: invalid smepriv\n");

908  -
EIO
;

911 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "sme_mgt_host_config_get: unifi_mgt_host_config_get_req -->\n");

912 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

913 i‡(
r
) {

914  -
EIO
;

917 
	`C§WifiSmeHo°C⁄figGëReqSíd
(0, 
CSR_WIFI_INTERFACE_IN_USE
);

919 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_SHORT_TIMEOUT
);

920 i‡(
r
) {

921  
r
;

925 i‡(
ho°C⁄fig
 !
NULL
) {

926 
	`mem˝y
((*)
ho°C⁄fig
,

927 (*)&
¥iv
->
sme_ª∂y
.
ho°C⁄fig
,

928 (
C§WifiSmeHo°C⁄fig
));

931 
	`unifi_åa˚
(
¥iv
, 
UDBG4
,

933 
r
, 
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

935  
	`c⁄vît_sme_îr‹
(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

937 
C§Resu…
 
°©us
;

938 
	`C§WifiSmeMgtCœimSyncAc˚ss
(
¥iv
->
smïriv
);

939 
°©us
 = 
	`C§WifiSmeMgtHo°C⁄figGëReq
(
¥iv
->
smïriv
, 
ho°C⁄fig
);

940 
	`C§WifiSmeMgtRñó£SyncAc˚ss
(
¥iv
->
smïriv
);

941  
	`c⁄vît_sme_îr‹
(
°©us
);

943 
	}
}

945 
	$sme_mgt_sme_c⁄fig_gë
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeSèC⁄fig
 *
°aC⁄fig
, 
C§WifiSmeDevi˚C⁄fig
 *
devi˚C⁄fig
)

947 #ifde‡
CSR_SME_USERSPACE


948 
r
;

950 i‡(
¥iv
->
smïriv
 =
NULL
) {

951 
	`unifi_îr‹
(
¥iv
, "sme_mgt_sme_config_get: invalid smepriv\n");

952  -
EIO
;

955 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "sme_mgt_sme_config_get: unifi_mgt_sme_config_get_req -->\n");

958 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

959 i‡(
r
) {

960  -
EIO
;

963 
	`C§WifiSmeSmeComm⁄C⁄figGëReqSíd
(0);

964 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_SHORT_TIMEOUT
);

965 i‡(
r
) {

966  
r
;

970 i‡(
devi˚C⁄fig
 !
NULL
) {

971 
	`mem˝y
((*)
devi˚C⁄fig
,

972 (*)&
¥iv
->
sme_ª∂y
.
devi˚C⁄fig
,

973 (
C§WifiSmeDevi˚C⁄fig
));

977 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

978 i‡(
r
) {

979  -
EIO
;

982 
	`C§WifiSmeSmeSèC⁄figGëReqSíd
(0, 
CSR_WIFI_INTERFACE_IN_USE
);

983 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_SHORT_TIMEOUT
);

984 i‡(
r
) {

985  
r
;

989 i‡(
°aC⁄fig
 !
NULL
) {

990 
	`mem˝y
((*)
°aC⁄fig
,

991 (*)&
¥iv
->
sme_ª∂y
.
°aC⁄fig
,

992 (
C§WifiSmeSèC⁄fig
));

995 
	`unifi_åa˚
(
¥iv
, 
UDBG4
,

997 
r
, 
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

999  
	`c⁄vît_sme_îr‹
(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

1001 
C§Resu…
 
°©us
;

1002 
	`C§WifiSmeMgtCœimSyncAc˚ss
(
¥iv
->
smïriv
);

1003 
°©us
 = 
	`C§WifiSmeMgtSmeC⁄figGëReq
(
¥iv
->
smïriv
, 
°aC⁄fig
);

1004 
°©us
 = 
	`C§WifiSmeMgtDevi˚C⁄figGëReq
(
¥iv
->
smïriv
, 
devi˚C⁄fig
);

1005 
	`C§WifiSmeMgtRñó£SyncAc˚ss
(
¥iv
->
smïriv
);

1006  
	`c⁄vît_sme_îr‹
(
°©us
);

1008 
	}
}

1010 
	$sme_mgt_c€x_öfo_gë
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeC€xInfo
 *
c€xInfo
)

1012 #ifde‡
CSR_SME_USERSPACE


1013 
r
;

1015 i‡(
¥iv
->
smïriv
 =
NULL
) {

1016 
	`unifi_îr‹
(
¥iv
, "sme_mgt_coex_info_get: invalid smepriv\n");

1017  -
EIO
;

1020 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "sme_mgt_coex_info_get: unifi_mgt_coex_info_get_req -->\n");

1021 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

1022 i‡(
r
) {

1023  -
EIO
;

1026 
	`C§WifiSmeC€xInfoGëReqSíd
(0);

1028 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_SHORT_TIMEOUT
);

1029 i‡(
r
) {

1030  
r
;

1034 i‡(
c€xInfo
 !
NULL
) {

1035 
	`mem˝y
((*)
c€xInfo
,

1036 (*)&
¥iv
->
sme_ª∂y
.
c€xInfo
,

1037 (
C§WifiSmeC€xInfo
));

1040 
	`unifi_åa˚
(
¥iv
, 
UDBG4
,

1042 
r
, 
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

1044  
	`c⁄vît_sme_îr‹
(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

1046 
C§Resu…
 
°©us
;

1047 
	`C§WifiSmeMgtCœimSyncAc˚ss
(
¥iv
->
smïriv
);

1048 
°©us
 = 
	`C§WifiSmeMgtC€xInfoGëReq
(
¥iv
->
smïriv
, 
c€xInfo
);

1049 
	`C§WifiSmeMgtRñó£SyncAc˚ss
(
¥iv
->
smïriv
);

1050  
	`c⁄vît_sme_îr‹
(
°©us
);

1052 
	}
}

1054 #ifde‡
CSR_SUPPORT_WEXT


1056 
	$sme_mgt_c€x_c⁄fig_gë
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeC€xC⁄fig
 *
c€xC⁄fig
)

1058 #ifde‡
CSR_SME_USERSPACE


1059 
r
;

1061 i‡(
¥iv
->
smïriv
 =
NULL
) {

1062 
	`unifi_îr‹
(
¥iv
, "sme_mgt_coex_config_get: invalid smepriv\n");

1063  -
EIO
;

1066 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "sme_mgt_coex_config_get: unifi_mgt_coex_config_get_req -->\n");

1067 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

1068 i‡(
r
) {

1069  -
EIO
;

1072 
	`C§WifiSmeC€xC⁄figGëReqSíd
(0);

1074 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_SHORT_TIMEOUT
);

1075 i‡(
r
) {

1076  
r
;

1080 i‡(
c€xC⁄fig
 !
NULL
) {

1081 
	`mem˝y
((*)
c€xC⁄fig
,

1082 (*)&
¥iv
->
sme_ª∂y
.
c€xC⁄fig
,

1083 (
C§WifiSmeC€xC⁄fig
));

1086 
	`unifi_åa˚
(
¥iv
, 
UDBG4
,

1088 
r
, 
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

1090  
	`c⁄vît_sme_îr‹
(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

1092 
C§Resu…
 
°©us
;

1093 
	`C§WifiSmeMgtCœimSyncAc˚ss
(
¥iv
->
smïriv
);

1094 
°©us
 = 
	`C§WifiSmeMgtC€xC⁄figGëReq
(
¥iv
->
smïriv
, 
c€xC⁄fig
);

1095 
	`C§WifiSmeMgtRñó£SyncAc˚ss
(
¥iv
->
smïriv
);

1096  
	`c⁄vît_sme_îr‹
(
°©us
);

1098 
	}
}

1100 
	$sme_mgt_mib_c⁄fig_gë
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeMibC⁄fig
 *
mibC⁄fig
)

1102 #ifde‡
CSR_SME_USERSPACE


1103 
r
;

1105 i‡(
¥iv
->
smïriv
 =
NULL
) {

1106 
	`unifi_îr‹
(
¥iv
, "sme_mgt_mib_config_get: invalid smepriv\n");

1107  -
EIO
;

1110 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "sme_mgt_mib_config_get: unifi_mgt_mib_config_get_req -->\n");

1111 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

1112 i‡(
r
) {

1113  -
EIO
;

1116 
	`C§WifiSmeMibC⁄figGëReqSíd
(0);

1118 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_SHORT_TIMEOUT
);

1119 i‡(
r
) {

1120  
r
;

1124 i‡(
mibC⁄fig
 !
NULL
) {

1125 
	`mem˝y
((*)
mibC⁄fig
,

1126 (*)&
¥iv
->
sme_ª∂y
.
mibC⁄fig
,

1127 (
C§WifiSmeMibC⁄fig
));

1130 
	`unifi_åa˚
(
¥iv
, 
UDBG4
,

1132 
r
, 
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

1134  
	`c⁄vît_sme_îr‹
(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

1136 
C§Resu…
 
°©us
;

1137 
	`C§WifiSmeMgtCœimSyncAc˚ss
(
¥iv
->
smïriv
);

1138 
°©us
 = 
	`C§WifiSmeMgtMibC⁄figGëReq
(
¥iv
->
smïriv
, 
mibC⁄fig
);

1139 
	`C§WifiSmeMgtRñó£SyncAc˚ss
(
¥iv
->
smïriv
);

1140  
	`c⁄vît_sme_îr‹
(
°©us
);

1142 
	}
}

1144 
	$sme_mgt_c⁄√˘i⁄_öfo_gë
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeC⁄√˘i⁄Info
 *
c⁄√˘i⁄Info
)

1146 #ifde‡
CSR_SME_USERSPACE


1147 
r
;

1149 i‡(
¥iv
->
smïriv
 =
NULL
) {

1150 
	`unifi_îr‹
(
¥iv
, "sme_mgt_connection_info_get: invalid smepriv\n");

1151  -
EIO
;

1154 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "sme_mgt_connection_info_get: unifi_mgt_connection_info_get_req -->\n");

1155 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

1156 i‡(
r
) {

1157  -
EIO
;

1160 
	`C§WifiSmeC⁄√˘i⁄InfoGëReqSíd
(0, 
CSR_WIFI_INTERFACE_IN_USE
);

1162 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_SHORT_TIMEOUT
);

1163 i‡(
r
) {

1164  
r
;

1168 i‡(
c⁄√˘i⁄Info
 !
NULL
) {

1169 
	`mem˝y
((*)
c⁄√˘i⁄Info
,

1170 (*)&
¥iv
->
sme_ª∂y
.
c⁄√˘i⁄Info
,

1171 (
C§WifiSmeC⁄√˘i⁄Info
));

1174 
	`unifi_åa˚
(
¥iv
, 
UDBG4
,

1176 
r
, 
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

1178  
	`c⁄vît_sme_îr‹
(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

1180 
C§Resu…
 
°©us
;

1181 
	`C§WifiSmeMgtCœimSyncAc˚ss
(
¥iv
->
smïriv
);

1182 
°©us
 = 
	`C§WifiSmeMgtC⁄√˘i⁄InfoGëReq
(
¥iv
->
smïriv
, 
c⁄√˘i⁄Info
);

1183 
	`C§WifiSmeMgtRñó£SyncAc˚ss
(
¥iv
->
smïriv
);

1184  
	`c⁄vît_sme_îr‹
(
°©us
);

1186 
	}
}

1188 
	$sme_mgt_c⁄√˘i⁄_c⁄fig_gë
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeC⁄√˘i⁄C⁄fig
 *
c⁄√˘i⁄C⁄fig
)

1190 #ifde‡
CSR_SME_USERSPACE


1191 
r
;

1193 i‡(
¥iv
->
smïriv
 =
NULL
) {

1194 
	`unifi_îr‹
(
¥iv
, "sme_mgt_connection_config_get: invalid smepriv\n");

1195  -
EIO
;

1198 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "sme_mgt_connection_config_get: unifi_mgt_connection_config_get_req -->\n");

1199 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

1200 i‡(
r
) {

1201  -
EIO
;

1204 
	`C§WifiSmeC⁄√˘i⁄C⁄figGëReqSíd
(0, 
CSR_WIFI_INTERFACE_IN_USE
);

1206 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_SHORT_TIMEOUT
);

1207 i‡(
r
) {

1208  
r
;

1212 i‡(
c⁄√˘i⁄C⁄fig
 !
NULL
) {

1213 
	`mem˝y
((*)
c⁄√˘i⁄C⁄fig
,

1214 (*)&
¥iv
->
sme_ª∂y
.
c⁄√˘i⁄C⁄fig
,

1215 (
C§WifiSmeC⁄√˘i⁄C⁄fig
));

1218 
	`unifi_åa˚
(
¥iv
, 
UDBG4
,

1220 
r
, 
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

1222  
	`c⁄vît_sme_îr‹
(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

1224 
C§Resu…
 
°©us
;

1225 
	`C§WifiSmeMgtCœimSyncAc˚ss
(
¥iv
->
smïriv
);

1226 
°©us
 = 
	`C§WifiSmeMgtC⁄√˘i⁄C⁄figGëReq
(
¥iv
->
smïriv
, 
c⁄√˘i⁄C⁄fig
);

1227 
	`C§WifiSmeMgtRñó£SyncAc˚ss
(
¥iv
->
smïriv
);

1228  
	`c⁄vît_sme_îr‹
(
°©us
);

1230 
	}
}

1232 
	$sme_mgt_c⁄√˘i⁄_°©s_gë
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeC⁄√˘i⁄Sèts
 *
c⁄√˘i⁄Sèts
)

1234 #ifde‡
CSR_SME_USERSPACE


1235 
r
;

1237 i‡(
¥iv
->
smïriv
 =
NULL
) {

1238 
	`unifi_îr‹
(
¥iv
, "sme_mgt_connection_stats_get: invalid smepriv\n");

1239  -
EIO
;

1242 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "sme_mgt_connection_stats_get: unifi_mgt_connection_stats_get_req -->\n");

1243 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

1244 i‡(
r
) {

1245  -
EIO
;

1248 
	`C§WifiSmeC⁄√˘i⁄SètsGëReqSíd
(0, 
CSR_WIFI_INTERFACE_IN_USE
);

1250 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_SHORT_TIMEOUT
);

1251 i‡(
r
) {

1252  
r
;

1256 i‡(
c⁄√˘i⁄Sèts
 !
NULL
) {

1257 
	`mem˝y
((*)
c⁄√˘i⁄Sèts
,

1258 (*)&
¥iv
->
sme_ª∂y
.
c⁄√˘i⁄Sèts
,

1259 (
C§WifiSmeC⁄√˘i⁄Sèts
));

1262 
	`unifi_åa˚
(
¥iv
, 
UDBG4
,

1264 
r
, 
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

1266  
	`c⁄vît_sme_îr‹
(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

1268 
C§Resu…
 
°©us
;

1269 
	`C§WifiSmeMgtCœimSyncAc˚ss
(
¥iv
->
smïriv
);

1270 
°©us
 = 
	`C§WifiSmeMgtC⁄√˘i⁄SètsGëReq
(
¥iv
->
smïriv
, 
c⁄√˘i⁄Sèts
);

1271 
	`C§WifiSmeMgtRñó£SyncAc˚ss
(
¥iv
->
smïriv
);

1272  
	`c⁄vît_sme_îr‹
(
°©us
);

1274 
	}
}

1278 
	$sme_mgt_∑ckë_fûãr_£t
(
unifi_¥iv_t
 *
¥iv
)

1280 
C§WifiIp4Addªss
 
ùAddªss
 = {{0xFF, 0xFF, 0xFF, 0xFF }};

1281 i‡(
¥iv
->
smïriv
 =
NULL
) {

1282 
	`unifi_îr‹
(
¥iv
, "sme_mgt_packet_filter_set: invalid smepriv\n");

1283  -
EIO
;

1285 i‡(
¥iv
->
∑ckë_fûãrs
.
¨p_fûãr
) {

1286 
ùAddªss
.
a
[0] = (
¥iv
->
°a_ù_addªss
 ) & 0xFF;

1287 
ùAddªss
.
a
[1] = (
¥iv
->
°a_ù_addªss
 >> 8) & 0xFF;

1288 
ùAddªss
.
a
[2] = (
¥iv
->
°a_ù_addªss
 >> 16) & 0xFF;

1289 
ùAddªss
.
a
[3] = (
¥iv
->
°a_ù_addªss
 >> 24) & 0xFF;

1292 
	`unifi_åa˚
(
¥iv
, 
UDBG5
,

1294 
ùAddªss
.
a
[0], ipAddress.a[1],

1295 
ùAddªss
.
a
[2], ipAddress.a[3]);

1298 
	`C§WifiSmePackëFûãrSëReqSíd
(0, 
CSR_WIFI_INTERFACE_IN_USE
,

1299 
¥iv
->
∑ckë_fûãrs
.
t˛as_õs_Àngth
,

1300 
¥iv
->
fûãr_t˛as_õs
,

1301 
¥iv
->
∑ckë_fûãrs
.
fûãr_mode
,

1302 
ùAddªss
);

1304 
	}
}

1306 
	$sme_mgt_t•ec
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeLi°A˘i⁄
 
a˘i⁄
,

1307 
C§Uöt32
 
tid
, 
C§WifiSmeD©aBlock
 *
t•ec
, C§WifiSmeD©aBlock *
t˛as
)

1309 
r
;

1311 i‡(
¥iv
->
smïriv
 =
NULL
) {

1312 
	`unifi_îr‹
(
¥iv
, "sme_mgt_tspec: invalid smepriv\n");

1313  -
EIO
;

1316 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

1317 i‡(
r
) {

1318  -
EIO
;

1321 
	`C§WifiSmeT•ecReqSíd
(0, 
CSR_WIFI_INTERFACE_IN_USE
,

1322 
a˘i⁄
, 
tid
, 
TRUE
, 0,

1323 
t•ec
->
Àngth
,Å•ec->
d©a
,

1324 
t˛as
->
Àngth
,Å˛as->
d©a
);

1325 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_SHORT_TIMEOUT
);

1326 i‡(
r
) {

1327  
r
;

1330 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "sme_mgt_t•ec: <-- (°©us=%d)\n",Öriv->
sme_ª∂y
.
ª∂y_°©us
);

1331  
	`c⁄vît_sme_îr‹
(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

1332 
	}
}

1336 
	$sme_sys_su•íd
(
unifi_¥iv_t
 *
¥iv
)

1338 
r
;

1339 
C§Resu…
 
c§Resu…
;

1341 i‡(
¥iv
->
smïriv
 =
NULL
) {

1342 
	`unifi_îr‹
(
¥iv
, "sme_sys_suspend: invalid smepriv\n");

1343  -
EIO
;

1346 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

1347 i‡(
r
) {

1348  -
EIO
;

1352 
	`C§WifiRouãrCålSu•ídIndSíd
(
¥iv
->
CSR_WIFI_SME_IFACEQUEUE
,0, 0,Öriv->
wﬁ_su•íd
);

1353 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_SYS_LONG_TIMEOUT
);

1354 i‡(
r
) {

1356 
	`unifi_nŸi˚
(
¥iv
,

1358 (
¥iv
->
±e°_mode
 |Öriv->
wﬁ_su•íd
) ? "leaveÖowered" : "power off UniFiányway\n");

1361 i‡(!
¥iv
->
±e°_mode
) {

1363 
	`C§SdioCœim
(
¥iv
->
sdio
);

1364 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "Force deep sleep");

1365 
c§Resu…
 = 
	`unifi_f‹˚_low_powî_mode
(
¥iv
->
ˇrd
);

1368 i‡(!
¥iv
->
wﬁ_su•íd
) {

1369 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "Power off\n");

1370 
	`C§SdioPowîOff
(
¥iv
->
sdio
);

1372 
	`C§SdioRñó£
(
¥iv
->
sdio
);

1376 i‡(
¥iv
->
wﬁ_su•íd
) {

1377 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "UniFiÜeftÖowered for WOL\n");

1385 i‡(
	`c§_sdio_löux_ªmove_úq
(
¥iv
->
sdio
)) {

1386 
	`unifi_nŸi˚
(
¥iv
, "WOL csr_sdio_linux_remove_irq failed\n");

1389 i‡(
íabÀ_wﬁ
 =
UNIFI_WOL_SDIO
) {

1393 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "Enable card SDIO interrupt for SDIO WOL\n");

1395 
	`C§SdioCœim
(
¥iv
->
sdio
);

1396 
c§Resu…
 = 
	`C§SdioI¡îru±E«bÀ
(
¥iv
->
sdio
);

1397 
	`C§SdioRñó£
(
¥iv
->
sdio
);

1399 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

1400 
	`unifi_îr‹
(
¥iv
, "WOL C§SdioI¡îru±E«bÀ faûed %d\n", 
c§Resu…
);

1403 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "Disabled card SDIO interrupt for PIO WOL\n");

1410 
¥iv
->
bh_thªad
.
block_thªad
 = 1;

1412 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "unifi_suspend: suspended BH");

1416 
¥iv
->
öô_¥ogªss
 = 
UNIFI_INIT_NONE
;

1418 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "sme_sys_su•íd: <-- (r=%d sètus=%d)\n", 
r
,Öriv->
sme_ª∂y
.
ª∂y_°©us
);

1419  
	`c⁄vît_sme_îr‹
(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

1420 
	}
}

1423 
	$sme_sys_ªsume
(
unifi_¥iv_t
 *
¥iv
)

1425 
r
;

1427 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "sme_sys_ªsumê%s\n",Öriv->
wﬁ_su•íd
 ? "warm" : "");

1429 i‡(
¥iv
->
smïriv
 =
NULL
) {

1430 
	`unifi_îr‹
(
¥iv
, "sme_sys_resume: invalid smepriv\n");

1431  -
EIO
;

1434 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

1435 i‡(
r
) {

1436  -
EIO
;

1439 
	`C§WifiRouãrCålResumeIndSíd
(
¥iv
->
CSR_WIFI_SME_IFACEQUEUE
,0,Öriv->
wﬁ_su•íd
);

1441 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_SYS_LONG_TIMEOUT
);

1442 i‡(
r
) {

1443 
	`unifi_nŸi˚
(
¥iv
,

1448 
	}
}

1450 #ifde‡
CSR_SUPPORT_WEXT_AP


1451 
	$sme_≠_°›
(
unifi_¥iv_t
 *
¥iv
,
C§Uöt16
 
öãrÁ˚_èg
)

1453 
r
;

1455 i‡(
¥iv
->
smïriv
 =
NULL
) {

1456 
	`unifi_îr‹
(
¥iv
, "sme_ap_stop: invalid smepriv\n");

1457  -
EIO
;

1460 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

1461 i‡(
r
) {

1462  -
EIO
;

1465 
	`C§WifiNmeApSt›ReqSíd
(0,
öãrÁ˚_èg
);

1467 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_SHORT_TIMEOUT
);

1468 i‡(
r
) {

1469  
r
;

1472 
	`unifi_åa˚
(
¥iv
, 
UDBG4
,

1474 
r
, 
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

1475  
	`c⁄vît_sme_îr‹
(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

1477 
	}
}

1479 
	$sme_≠_°¨t
(
unifi_¥iv_t
 *
¥iv
,
C§Uöt16
 
öãrÁ˚_èg
,

1480 
C§WifiSmeApC⁄fig_t
 * 
≠_c⁄fig
)

1482 
r
;

1483 
C§WifiSmeApP2pGoC⁄fig
 
p2p_go_∑øm
;

1484 
	`mem£t
(&
p2p_go_∑øm
,0,(
C§WifiSmeApP2pGoC⁄fig
));

1486 i‡(
¥iv
->
smïriv
 =
NULL
) {

1487 
	`unifi_îr‹
(
¥iv
, "sme_ap_start: invalid smepriv\n");

1488  -
EIO
;

1491 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

1492 i‡(
r
) {

1493  -
EIO
;

1496 
	`C§WifiNmeApSèπReqSíd
(0,
öãrÁ˚_èg
,
CSR_WIFI_AP_TYPE_LEGACY
,
FALSE
,

1497 
≠_c⁄fig
->
ssid
,1,≠_c⁄fig->
ch™√l
,

1498 
≠_c⁄fig
->
¸edítüls
,≠_c⁄fig->
max_c⁄√˘i⁄s
,

1499 
p2p_go_∑øm
,
FALSE
);

1501 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_SHORT_TIMEOUT
);

1502 i‡(
r
) {

1503  
r
;

1506 
	`unifi_åa˚
(
¥iv
, 
UDBG4
,

1508 
r
, 
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

1509  
	`c⁄vît_sme_îr‹
(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

1510 
	}
}

1512 
	$sme_≠_c⁄fig
(
unifi_¥iv_t
 *
¥iv
,

1513 
C§WifiSmeApMacC⁄fig
 *
≠_mac_c⁄fig
,

1514 
C§WifiNmeApC⁄fig
 *
group_£curôy_c⁄fig
)

1516 
r
;

1517 
C§WifiSmeApP2pGoC⁄fig
 
p2p_go_∑øm
;

1518 
	`mem£t
(&
p2p_go_∑øm
,0,(
C§WifiSmeApP2pGoC⁄fig
));

1520 i‡(
¥iv
->
smïriv
 =
NULL
) {

1521 
	`unifi_îr‹
(
¥iv
, "sme_ap_config: invalid smepriv\n");

1522  -
EIO
;

1525 
r
 = 
	`sme_öô_ªque°
(
¥iv
);

1526 i‡(
r
) {

1527  -
EIO
;

1530 
	`C§WifiNmeApC⁄figSëReqSíd
(0,*
group_£curôy_c⁄fig
,

1531 *
≠_mac_c⁄fig
);

1533 
r
 = 
	`sme_waô_f‹_ª∂y
(
¥iv
, 
UNIFI_SME_MGT_SHORT_TIMEOUT
);

1535 
	`unifi_åa˚
(
¥iv
, 
UDBG4
,

1537 
r
, 
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

1538  
	`c⁄vît_sme_îr‹
(
¥iv
->
sme_ª∂y
.
ª∂y_°©us
);

1539 
	}
}

	@sme_csr/csr_wifi_nme_ap_sef.c

11 
	~"c§_wifi_nme_≠_£f.h
"

12 
	~"unifi_¥iv.h
"

14 
	$C§WifiNmeApUp°ªamSèãH™dÀrs
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

16 
msg
->
ty≥
) {

17 
CSR_WIFI_NME_AP_START_CFM
:

18 
	`C§WifiNmeApSèπCfmH™dÀr
(
drv¥iv
, 
msg
);

20 
CSR_WIFI_NME_AP_STOP_CFM
:

21 
	`C§WifiNmeApSt›CfmH™dÀr
(
drv¥iv
, 
msg
);

23 
CSR_WIFI_NME_AP_CONFIG_SET_CFM
:

24 
	`C§WifiNmeApC⁄figSëCfmH™dÀr
(
drv¥iv
,
msg
);

27 
	`unifi_îr‹
(
drv¥iv
, "C§WifiNmeApUp°ªamSèãH™dÀrs: unh™dÀd NME_AP mesßgêty≥ 0x%.4X\n",
msg
->
ty≥
);

30 
	}
}

	@sme_csr/csr_wifi_nme_ap_sef.h

9 #i‚de‡
CSR_WIFI_ROUTER_SEF_CSR_WIFI_NME_H__


10 
	#CSR_WIFI_ROUTER_SEF_CSR_WIFI_NME_H__


	)

12 
	~"c§_wifi_nme_¥im.h
"

15 #ifde‡
__˝lu•lus


19 
C§WifiNmeApUp°ªamSèãH™dÀrs
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

22 
C§WifiNmeApC⁄figSëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

23 
C§WifiNmeApSèπCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

24 
C§WifiNmeApSt›CfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

27 #ifde‡
__˝lu•lus


	@sme_csr/csr_wifi_router_ctrl_sef.c

9 
	~"c§_wifi_rouãr_˘æ_£f.h
"

11 c⁄° 
C§WifiRouãrCålSèãH™dÀrTy≥
 
	gC§WifiRouãrCålDown°ªamSèãH™dÀrs
[
CSR_WIFI_ROUTER_CTRL_PRIM_DOWNSTREAM_COUNT
] =

13  
C§WifiRouãrCålC⁄figuªPowîModeReqH™dÀr
,

14  
C§WifiRouãrCålHùReqH™dÀr
,

15  
C§WifiRouãrCålMedüSètusReqH™dÀr
,

16  
C§WifiRouãrCålMu…iˇ°AddªssResH™dÀr
,

17  
C§WifiRouãrCålP‹tC⁄figuªReqH™dÀr
,

18  
C§WifiRouãrCålQosC⁄åﬁReqH™dÀr
,

19  
C§WifiRouãrCålSu•ídResH™dÀr
,

20  
C§WifiRouãrCålT˛asAddReqH™dÀr
,

21  
C§WifiRouãrCålResumeResH™dÀr
,

22  
C§WifiRouãrCålRawSdioDeöôüli£ReqH™dÀr
,

23  
C§WifiRouãrCålRawSdioInôüli£ReqH™dÀr
,

24  
C§WifiRouãrCålT˛asDñReqH™dÀr
,

25  
C§WifiRouãrCålTøfficCœssifiˇti⁄ReqH™dÀr
,

26  
C§WifiRouãrCålTøfficC⁄figReqH™dÀr
,

27  
C§WifiRouãrCålWifiOffReqH™dÀr
,

28  
C§WifiRouãrCålWifiOffResH™dÀr
,

29  
C§WifiRouãrCålWifiOnReqH™dÀr
,

30  
C§WifiRouãrCålWifiOnResH™dÀr
,

31  
C§WifiRouãrCålM4TønsmôReqH™dÀr
,

32  
C§WifiRouãrCålModeSëReqH™dÀr
,

33  
C§WifiRouãrCålPìrAddReqH™dÀr
,

34  
C§WifiRouãrCålPìrDñReqH™dÀr
,

35  
C§WifiRouãrCålPìrUpd©eReqH™dÀr
,

36  
C§WifiRouãrCålC≠abûôõsReqH™dÀr
,

37  
C§WifiRouãrCålBlockAckE«bÀReqH™dÀr
,

38  
C§WifiRouãrCålBlockAckDißbÀReqH™dÀr
,

39  
C§WifiRouãrCålW≠iRxPktReqH™dÀr
,

40  
C§WifiRouãrCålW≠iMu…iˇ°FûãrReqH™dÀr
,

41  
C§WifiRouãrCålW≠iUniˇ°FûãrReqH™dÀr
,

42  
C§WifiRouãrCålW≠iUniˇ°TxPktReqH™dÀr
,

43  
C§WifiRouãrCålW≠iFûãrReqH™dÀr
,

	@sme_csr/csr_wifi_router_ctrl_sef.h

9 #i‚de‡
CSR_WIFI_ROUTER_SEF_CSR_WIFI_ROUTER_CTRL_H__


10 
	#CSR_WIFI_ROUTER_SEF_CSR_WIFI_ROUTER_CTRL_H__


	)

12 
	~"c§_wifi_rouãr_˘æ_¥im.h
"

14 #ifde‡
__˝lu•lus


18 (*
C§WifiRouãrCålSèãH™dÀrTy≥
)(* 
	tdrv¥iv
, 
	tC§WifiFsmEvít
* 
	tmsg
);

20 c⁄° 
C§WifiRouãrCålSèãH™dÀrTy≥
 
C§WifiRouãrCålDown°ªamSèãH™dÀrs
[
CSR_WIFI_ROUTER_CTRL_PRIM_DOWNSTREAM_COUNT
];

22 
C§WifiRouãrCålC⁄figuªPowîModeReqH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

23 
C§WifiRouãrCålHùReqH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

24 
C§WifiRouãrCålMedüSètusReqH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

25 
C§WifiRouãrCålMu…iˇ°AddªssResH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

26 
C§WifiRouãrCålP‹tC⁄figuªReqH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

27 
C§WifiRouãrCålQosC⁄åﬁReqH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

28 
C§WifiRouãrCålSu•ídResH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

29 
C§WifiRouãrCålT˛asAddReqH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

30 
C§WifiRouãrCålResumeResH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

31 
C§WifiRouãrCålRawSdioDeöôüli£ReqH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

32 
C§WifiRouãrCålRawSdioInôüli£ReqH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

33 
C§WifiRouãrCålT˛asDñReqH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

34 
C§WifiRouãrCålTøfficCœssifiˇti⁄ReqH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

35 
C§WifiRouãrCålTøfficC⁄figReqH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

36 
C§WifiRouãrCålWifiOffReqH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

37 
C§WifiRouãrCålWifiOffResH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

38 
C§WifiRouãrCålWifiOnReqH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

39 
C§WifiRouãrCålWifiOnResH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

40 
C§WifiRouãrCålM4TønsmôReqH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

41 
C§WifiRouãrCålModeSëReqH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

42 
C§WifiRouãrCålPìrAddReqH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

43 
C§WifiRouãrCålPìrDñReqH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

44 
C§WifiRouãrCålPìrUpd©eReqH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

45 
C§WifiRouãrCålC≠abûôõsReqH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

46 
C§WifiRouãrCålBlockAckE«bÀReqH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

47 
C§WifiRouãrCålBlockAckDißbÀReqH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

48 
C§WifiRouãrCålW≠iMu…iˇ°FûãrReqH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

49 
C§WifiRouãrCålW≠iRxPktReqH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

50 
C§WifiRouãrCålW≠iUniˇ°TxPktReqH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

51 
C§WifiRouãrCålW≠iUniˇ°FûãrReqH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

52 
C§WifiRouãrCålW≠iFûãrReqH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

53 #ifde‡
__˝lu•lus


	@sme_csr/csr_wifi_router_sef.c

9 
	~"c§_wifi_rouãr_£f.h
"

11 c⁄° 
C§WifiRouãrSèãH™dÀrTy≥
 
	gC§WifiRouãrDown°ªamSèãH™dÀrs
[
CSR_WIFI_ROUTER_PRIM_DOWNSTREAM_COUNT
] =

13  
C§WifiRouãrMaPackëSubs¸ibeReqH™dÀr
,

14  
C§WifiRouãrMaPackëUnsubs¸ibeReqH™dÀr
,

15  
C§WifiRouãrMaPackëReqH™dÀr
,

16  
C§WifiRouãrMaPackëResH™dÀr
,

17  
C§WifiRouãrMaPackëC™˚lReqH™dÀr
,

	@sme_csr/csr_wifi_router_sef.h

9 #i‚de‡
CSR_WIFI_ROUTER_SEF_CSR_WIFI_ROUTER_H__


10 
	#CSR_WIFI_ROUTER_SEF_CSR_WIFI_ROUTER_H__


	)

12 
	~"c§_wifi_rouãr_¥im.h
"

14 #ifde‡
__˝lu•lus


18 (*
C§WifiRouãrSèãH™dÀrTy≥
)(* 
	tdrv¥iv
, 
	tC§WifiFsmEvít
* 
	tmsg
);

20 c⁄° 
C§WifiRouãrSèãH™dÀrTy≥
 
C§WifiRouãrDown°ªamSèãH™dÀrs
[
CSR_WIFI_ROUTER_PRIM_DOWNSTREAM_COUNT
];

22 
C§WifiRouãrMaPackëSubs¸ibeReqH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

23 
C§WifiRouãrMaPackëUnsubs¸ibeReqH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

24 
C§WifiRouãrMaPackëReqH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

25 
C§WifiRouãrMaPackëResH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

26 
C§WifiRouãrMaPackëC™˚lReqH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

28 #ifde‡
__˝lu•lus


	@sme_csr/csr_wifi_router_transport.c

11 
	~"unifi_¥iv.h
"

13 
	~"c§_ty≥s.h
"

14 
	~"c§_sched.h
"

15 
	~"c§_msgc⁄v.h
"

17 
	~"sme_u£r•a˚.h
"

19 
	~"c§_wifi_ho°io_¥im.h
"

20 
	~"c§_wifi_rouãr_lib.h
"

21 
	~"c§_wifi_rouãr_£f.h
"

22 
	~"c§_wifi_rouãr_c⁄vîãr_öô.h
"

23 
	~"c§_wifi_rouãr_˘æ_lib.h
"

24 
	~"c§_wifi_rouãr_˘æ_£f.h
"

25 
	~"c§_wifi_rouãr_˘æ_c⁄vîãr_öô.h
"

26 
	~"c§_wifi_sme_¥im.h
"

27 
	~"c§_wifi_sme_£f.h
"

28 
	~"c§_wifi_sme_c⁄vîãr_öô.h
"

29 #ifde‡
CSR_SUPPORT_WEXT


30 #ifde‡
CSR_SUPPORT_WEXT_AP


31 
	~"c§_wifi_nme_≠_¥im.h
"

32 
	~"c§_wifi_nme_≠_£f.h
"

33 
	~"c§_wifi_nme_≠_c⁄vîãr_öô.h
"

37 
unifi_¥iv_t
 *
	gdrv¥iv
 = 
NULL
;

38 
	$C§WifiRouãrTøn•‹tInô
(
unifi_¥iv_t
 *
¥iv
)

40 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "CsrWifiRouterTransportInit: \n");

42 
drv¥iv
 = 
¥iv
;

43 ()
	`C§MsgC⁄vInô
();

44 
	`C§WifiRouãrC⁄vîãrInô
();

45 
	`C§WifiRouãrCålC⁄vîãrInô
();

46 
	`C§WifiSmeC⁄vîãrInô
();

47 #ifde‡
CSR_SUPPORT_WEXT


48 #ifde‡
CSR_SUPPORT_WEXT_AP


49 
	`C§WifiNmeApC⁄vîãrInô
();

52 
	}
}

54 
	$C§WifiRouãrTøn•‹tDeöô
(
unifi_¥iv_t
 *
¥iv
)

56 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "CsrWifiRouterTransportDeinit: \n");

57 i‡(
¥iv
 =
drv¥iv
)

59 
	`C§MsgC⁄vDeöô
();

60 
drv¥iv
 = 
NULL
;

62 
	}
}

64 
	$C§WifiRouãrTøn•‹tRecv
(
unifi_¥iv_t
 *
¥iv
, 
C§Uöt8
* 
buf„r
, 
C§Size
 
buf„rLígth
)

66 
C§MsgC⁄vMsgE¡ry
* 
msgE¡ry
;

67 
C§Uöt16
 
¥imTy≥
;

68 
C§SchedQid
 
§c
;

69 
C§SchedQid
 
de°
;

70 
C§Uöt16
 
msgTy≥
;

71 
C§Size
 
off£t
 = 0;

72 
C§WifiFsmEvít
* 
msg
;

75 
	`C§Uöt16Des
(&
¥imTy≥
, 
buf„r
, &
off£t
);

76 
	`C§Uöt16Des
(&
§c
, 
buf„r
, &
off£t
);

77 
	`C§Uöt16Des
(&
de°
, 
buf„r
, &
off£t
);

78 
	`C§Uöt16Des
(&
msgTy≥
, 
buf„r
, &
off£t
);

79 
off£t
 -= 2;

81 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "CsrWifiRouterTransportRecv:ÖrimType=0x%.4X, msgType=0x%.4X, bufferLength=%d\n",

82 
¥imTy≥
, 
msgTy≥
, 
buf„rLígth
);

85 i‡(
¥imTy≥
 =
CSR_WIFI_HOSTIO_PRIM
)

87 
C§WifiRouãrCålHùReq
 
ªq
 = {{
CSR_WIFI_ROUTER_CTRL_HIP_REQ
, 
CSR_WIFI_ROUTER_CTRL_PRIM
, 
de°
, 
§c
, 
NULL
}, 0, NULL, 0, NULL, 0, NULL};

89 
ªq
.
mlmeComm™dLígth
 = 
buf„rLígth
;

90 
ªq
.
mlmeComm™d
 = 
buf„r
;

92 
off£t
 += 8;

93 
	`C§Uöt16Des
(&
ªq
.
d©aRef1Lígth
, 
buf„r
, &
off£t
);

94 
off£t
 += 2;

95 
	`C§Uöt16Des
(&
ªq
.
d©aRef2Lígth
, 
buf„r
, &
off£t
);

97 i‡(
ªq
.
d©aRef1Lígth
)

99 
C§Uöt16
 
dr1Off£t
 = (
buf„rLígth
 - 
ªq
.
d©aRef2Lígth
Ë-Ñeq.
d©aRef1Lígth
;

100 
ªq
.
d©aRef1
 = &
buf„r
[
dr1Off£t
];

103 i‡(
ªq
.
d©aRef2Lígth
)

105 
C§Uöt16
 
dr2Off£t
 = 
buf„rLígth
 - 
ªq
.
d©aRef2Lígth
;

106 
ªq
.
d©aRef2
 = &
buf„r
[
dr2Off£t
];

110 
ªq
.
mlmeComm™dLígth
 -‘eq.
d©aRef1Lígth
 +Ñeq.
d©aRef2Lígth
 + 6);

111 
ªq
.
mlmeComm™d
 = &
buf„r
[6];

113 
	`C§WifiRouãrCålHùReqH™dÀr
(
¥iv
, &
ªq
.
comm⁄
);

117 
msgE¡ry
 = 
	`C§MsgC⁄vFödE¡ry
(
¥imTy≥
, 
msgTy≥
);

118 i‡(!
msgE¡ry
)

120 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterTransportDeserialiseAndSend canÇotÖrocessÅhe message.ÖrimType=0x%.4X, msgType=0x%.4X\n",

121 
¥imTy≥
, 
msgTy≥
);

122 
	`dump
(
buf„r
, 
buf„rLígth
);

126 
msg
 = (
C§WifiFsmEvít
*)(
msgE¡ry
->
de£rFunc
)(&
buf„r
[
off£t
], 
buf„rLígth
 - offset);

128 
msg
->
¥imty≥
 = 
¥imTy≥
;

129 
msg
->
ty≥
 = 
msgTy≥
;

130 
msg
->
sour˚
 = 
§c
;

131 
msg
->
de°ö©i⁄
 = 
de°
;

133 
¥imTy≥
)

135 
CSR_WIFI_ROUTER_CTRL_PRIM
:

136 
C§WifiRouãrCålDown°ªamSèãH™dÀrs
[
msg
->
ty≥
 - 
CSR_WIFI_ROUTER_CTRL_PRIM_DOWNSTREAM_LOWEST
](
¥iv
, msg);

137 
	`C§WifiRouãrCålFªeDown°ªamMesßgeC⁄ã¡s
(
CSR_WIFI_ROUTER_CTRL_PRIM
, 
msg
);

139 
CSR_WIFI_ROUTER_PRIM
:

140 
C§WifiRouãrDown°ªamSèãH™dÀrs
[
msg
->
ty≥
 - 
CSR_WIFI_ROUTER_PRIM_DOWNSTREAM_LOWEST
](
¥iv
, msg);

141 
	`C§WifiRouãrFªeDown°ªamMesßgeC⁄ã¡s
(
CSR_WIFI_ROUTER_PRIM
, 
msg
);

143 
CSR_WIFI_SME_PRIM
:

144 
C§WifiSmeUp°ªamSèãH™dÀrs
[
msg
->
ty≥
 - 
CSR_WIFI_SME_PRIM_UPSTREAM_LOWEST
](
¥iv
, msg);

145 
	`C§WifiSmeFªeUp°ªamMesßgeC⁄ã¡s
(
CSR_WIFI_SME_PRIM
, 
msg
);

147 #ifde‡
CSR_SUPPORT_WEXT


148 #ifde‡
CSR_SUPPORT_WEXT_AP


149 
CSR_WIFI_NME_AP_PRIM
:

150 
	`C§WifiNmeApUp°ªamSèãH™dÀrs
(
¥iv
, 
msg
);

151 
	`C§WifiNmeApFªeUp°ªamMesßgeC⁄ã¡s
(
CSR_WIFI_NME_AP_PRIM
, 
msg
);

156 
	`unifi_îr‹
(
¥iv
, "C§WifiRouãrTøn•‹tDe£rüli£AndSíd unh™dÀdÖrimÅy≥ 0x%.4X\n", 
¥imTy≥
);

159 
	`C§PmemFªe
(
msg
);

160 
	}
}

162 
	$C§WifiRouãrTøn•‹tSîüli£AndSíd
(
C§Uöt16
 
¥imTy≥
, * 
msg
)

164 
C§WifiFsmEvít
* 
evt
 = (C§WifiFsmEvít*)
msg
;

165 
C§MsgC⁄vMsgE¡ry
* 
msgE¡ry
;

166 
C§Size
 
msgSize
;

167 
C§Size
 
ícodeBuf„rLí
 = 0;

168 
C§Size
 
off£t
 = 0;

169 
C§Uöt8
* 
ícodeBuf„r
;

171 
	`unifi_åa˚
(
drv¥iv
, 
UDBG4
, "CsrWifiRouterTransportSerialiseAndSend:ÖrimType=0x%.4X, msgType=0x%.4X\n",

172 
¥imTy≥
, 
evt
->
ty≥
);

174 
msgE¡ry
 = 
	`C§MsgC⁄vFödE¡ry
(
¥imTy≥
, 
evt
->
ty≥
);

175 i‡(!
msgE¡ry
)

177 
	`unifi_îr‹
(
drv¥iv
, "CsrWifiRouterTransportSerialiseAndSend canÇotÖrocessÅhe message.ÖrimType=0x%.4X, msgType=0x%.4X\n",

178 
¥imTy≥
, 
evt
->
ty≥
);

182 
msgSize
 = 6 + (
msgE¡ry
->
sizeofFunc
)((*)
msg
);

184 
ícodeBuf„r
 = 
	`C§PmemAŒoc
(
msgSize
);

187 
	`C§Uöt16Sî
(
ícodeBuf„r
, &
ícodeBuf„rLí
, 
¥imTy≥
);

188 
	`C§Uöt16Sî
(
ícodeBuf„r
, &
ícodeBuf„rLí
, 
evt
->
sour˚
);

189 
	`C§Uöt16Sî
(
ícodeBuf„r
, &
ícodeBuf„rLí
, 
evt
->
de°ö©i⁄
);

191 ()(
msgE¡ry
->
£rFunc
)(&
ícodeBuf„r
[
ícodeBuf„rLí
], &
off£t
, 
msg
);

192 
ícodeBuf„rLí
 +
off£t
;

194 
	`uf_sme_queue_mesßge
(
drv¥iv
, 
ícodeBuf„r
, 
ícodeBuf„rLí
);

197 
	`C§PmemFªe
(
msg
);

198 
	}
}

200 #i‡
deföed
(
CSR_LOG_ENABLE
Ë&& deföed(
CSR_LOG_INCLUDE_FILE_NAME_AND_LINE_NUMBER
)

201 
	$C§SchedMesßgePutSåögLog
(
C§SchedQid
 
q
, 
C§Uöt16
 
mi
, *
mv
, 
C§Uöt32
 
löe
, 
C§Ch¨Såög
 *
fûe
)

203 
	$C§SchedMesßgePut
(
C§SchedQid
 
q
, 
C§Uöt16
 
mi
, *
mv
)

206 
C§WifiFsmEvít
* 
evt
 = (C§WifiFsmEvít*)
mv
;

207 
evt
->
de°ö©i⁄
 = 
q
;

208 
	`C§WifiRouãrTøn•‹tSîüli£AndSíd
(
mi
, 
mv
);

209 
	}
}

	@sme_csr/csr_wifi_sme_sef.c

9 
	~"c§_wifi_sme_£f.h
"

11 c⁄° 
C§WifiSmeSèãH™dÀrTy≥
 
	gC§WifiSmeUp°ªamSèãH™dÀrs
[
CSR_WIFI_SME_PRIM_UPSTREAM_COUNT
] =

13  
C§WifiSmeA˘iv©eCfmH™dÀr
,

14  
C§WifiSmeAdhocC⁄figGëCfmH™dÀr
,

15  
C§WifiSmeAdhocC⁄figSëCfmH™dÀr
,

16  
C§WifiSmeAssocüti⁄Com∂ëeIndH™dÀr
,

17  
C§WifiSmeAssocüti⁄SèπIndH™dÀr
,

18  
C§WifiSmeBœckli°CfmH™dÀr
,

19  
C§WifiSmeCÆibøti⁄D©aGëCfmH™dÀr
,

20  
C§WifiSmeCÆibøti⁄D©aSëCfmH™dÀr
,

23  
C§WifiSmeC€xC⁄figGëCfmH™dÀr
,

24  
C§WifiSmeC€xC⁄figSëCfmH™dÀr
,

25  
C§WifiSmeC€xInfoGëCfmH™dÀr
,

26  
C§WifiSmeC⁄√˘CfmH™dÀr
,

27  
C§WifiSmeC⁄√˘i⁄C⁄figGëCfmH™dÀr
,

28  
C§WifiSmeC⁄√˘i⁄InfoGëCfmH™dÀr
,

29  
C§WifiSmeC⁄√˘i⁄QuÆôyIndH™dÀr
,

30  
C§WifiSmeC⁄√˘i⁄SètsGëCfmH™dÀr
,

31  
C§WifiSmeDó˘iv©eCfmH™dÀr
,

32  
C§WifiSmeDisc⁄√˘CfmH™dÀr
,

33  
C§WifiSmeEvítMaskSëCfmH™dÀr
,

34  
C§WifiSmeHo°C⁄figGëCfmH™dÀr
,

35  
C§WifiSmeHo°C⁄figSëCfmH™dÀr
,

36  
C§WifiSmeIbssSèti⁄IndH™dÀr
,

37  
C§WifiSmeKeyCfmH™dÀr
,

38  
C§WifiSmeLökQuÆôyGëCfmH™dÀr
,

39  
C§WifiSmeMedüSètusIndH™dÀr
,

40  
C§WifiSmeMibC⁄figGëCfmH™dÀr
,

41  
C§WifiSmeMibC⁄figSëCfmH™dÀr
,

42  
C§WifiSmeMibGëCfmH™dÀr
,

43  
C§WifiSmeMibGëNextCfmH™dÀr
,

44  
C§WifiSmeMibSëCfmH™dÀr
,

45  
C§WifiSmeMicFaûuªIndH™dÀr
,

46  
C§WifiSmeMu…iˇ°AddªssCfmH™dÀr
,

47  
C§WifiSmePackëFûãrSëCfmH™dÀr
,

48  
C§WifiSmePîm™ítMacAddªssGëCfmH™dÀr
,

49  
C§WifiSmePmkidC™did©eLi°IndH™dÀr
,

50  
C§WifiSmePmkidCfmH™dÀr
,

51  
C§WifiSmePowîC⁄figGëCfmH™dÀr
,

52  
C§WifiSmePowîC⁄figSëCfmH™dÀr
,

53  
C§WifiSmeReguœt‹yDomaöInfoGëCfmH™dÀr
,

54  
C§WifiSmeRﬂmCom∂ëeIndH™dÀr
,

55  
C§WifiSmeRﬂmSèπIndH™dÀr
,

56  
C§WifiSmeRﬂmögC⁄figGëCfmH™dÀr
,

57  
C§WifiSmeRﬂmögC⁄figSëCfmH™dÀr
,

58  
C§WifiSmeSˇnC⁄figGëCfmH™dÀr
,

59  
C§WifiSmeSˇnC⁄figSëCfmH™dÀr
,

60  
C§WifiSmeSˇnFuŒCfmH™dÀr
,

61  
C§WifiSmeSˇnResu…IndH™dÀr
,

62  
C§WifiSmeSˇnResu…sFlushCfmH™dÀr
,

63  
C§WifiSmeSˇnResu…sGëCfmH™dÀr
,

64  
C§WifiSmeSmeSèC⁄figGëCfmH™dÀr
,

65  
C§WifiSmeSmeSèC⁄figSëCfmH™dÀr
,

66  
C§WifiSmeSèti⁄MacAddªssGëCfmH™dÀr
,

67  
C§WifiSmeT•ecIndH™dÀr
,

68  
C§WifiSmeT•ecCfmH™dÀr
,

69  
C§WifiSmeVîsi⁄sGëCfmH™dÀr
,

70  
C§WifiSmeWifiFlightmodeCfmH™dÀr
,

71  
C§WifiSmeWifiOffIndH™dÀr
,

72  
C§WifiSmeWifiOffCfmH™dÀr
,

73  
C§WifiSmeWifiOnCfmH™dÀr
,

74  
C§WifiSmeClﬂkedSsidsSëCfmH™dÀr
,

75  
C§WifiSmeClﬂkedSsidsGëCfmH™dÀr
,

76  
C§WifiSmeWifiOnIndH™dÀr
,

77  
C§WifiSmeSmeComm⁄C⁄figGëCfmH™dÀr
,

78  
C§WifiSmeSmeComm⁄C⁄figSëCfmH™dÀr
,

79  
C§WifiSmeGëI¡îÁ˚C≠abûôyCfmH™dÀr
,

80  
C§WifiSmeEº‹IndH™dÀr
,

81  
C§WifiSmeInfoIndH™dÀr
,

82  
C§WifiSmeC‹eDumpIndH™dÀr
,

83  
C§WifiSmeAmpSètusCh™geIndH™dÀr
,

	@sme_csr/csr_wifi_sme_sef.h

9 #i‚de‡
CSR_WIFI_ROUTER_SEF_CSR_WIFI_SME_H__


10 
	#CSR_WIFI_ROUTER_SEF_CSR_WIFI_SME_H__


	)

12 
	~"c§_wifi_sme_¥im.h
"

15 #ifde‡
__˝lu•lus


19 (*
C§WifiSmeSèãH™dÀrTy≥
)(* 
	tdrv¥iv
, 
	tC§WifiFsmEvít
* 
	tmsg
);

21 c⁄° 
C§WifiSmeSèãH™dÀrTy≥
 
C§WifiSmeUp°ªamSèãH™dÀrs
[
CSR_WIFI_SME_PRIM_UPSTREAM_COUNT
];

24 
C§WifiSmeA˘iv©eCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

25 
C§WifiSmeAdhocC⁄figGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

26 
C§WifiSmeAdhocC⁄figSëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

27 
C§WifiSmeAssocüti⁄Com∂ëeIndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

28 
C§WifiSmeAssocüti⁄SèπIndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

29 
C§WifiSmeBœckli°CfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

30 
C§WifiSmeCÆibøti⁄D©aGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

31 
C§WifiSmeCÆibøti⁄D©aSëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

32 
C§WifiSmeC€xC⁄figGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

33 
C§WifiSmeC€xC⁄figSëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

34 
C§WifiSmeC€xInfoGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

35 
C§WifiSmeC⁄√˘CfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

36 
C§WifiSmeC⁄√˘i⁄C⁄figGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

37 
C§WifiSmeC⁄√˘i⁄InfoGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

38 
C§WifiSmeC⁄√˘i⁄QuÆôyIndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

39 
C§WifiSmeC⁄√˘i⁄SètsGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

40 
C§WifiSmeDó˘iv©eCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

41 
C§WifiSmeDisc⁄√˘CfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

42 
C§WifiSmeEvítMaskSëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

43 
C§WifiSmeHo°C⁄figGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

44 
C§WifiSmeHo°C⁄figSëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

45 
C§WifiSmeIbssSèti⁄IndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

46 
C§WifiSmeKeyCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

47 
C§WifiSmeLökQuÆôyGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

48 
C§WifiSmeMedüSètusIndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

49 
C§WifiSmeMibC⁄figGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

50 
C§WifiSmeMibC⁄figSëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

51 
C§WifiSmeMibGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

52 
C§WifiSmeMibGëNextCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

53 
C§WifiSmeMibSëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

54 
C§WifiSmeMicFaûuªIndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

55 
C§WifiSmeMu…iˇ°AddªssCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

56 
C§WifiSmePackëFûãrSëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

57 
C§WifiSmePîm™ítMacAddªssGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

58 
C§WifiSmePmkidC™did©eLi°IndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

59 
C§WifiSmePmkidCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

60 
C§WifiSmePowîC⁄figGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

61 
C§WifiSmePowîC⁄figSëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

62 
C§WifiSmeReguœt‹yDomaöInfoGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

63 
C§WifiSmeRﬂmCom∂ëeIndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

64 
C§WifiSmeRﬂmSèπIndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

65 
C§WifiSmeRﬂmögC⁄figGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

66 
C§WifiSmeRﬂmögC⁄figSëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

67 
C§WifiSmeSˇnC⁄figGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

68 
C§WifiSmeSˇnC⁄figSëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

69 
C§WifiSmeSˇnFuŒCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

70 
C§WifiSmeSˇnResu…IndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

71 
C§WifiSmeSˇnResu…sFlushCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

72 
C§WifiSmeSˇnResu…sGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

73 
C§WifiSmeSmeSèC⁄figGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

74 
C§WifiSmeSmeSèC⁄figSëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

75 
C§WifiSmeSèti⁄MacAddªssGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

76 
C§WifiSmeT•ecIndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

77 
C§WifiSmeT•ecCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

78 
C§WifiSmeVîsi⁄sGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

79 
C§WifiSmeWifiFlightmodeCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

80 
C§WifiSmeWifiOffIndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

81 
C§WifiSmeWifiOffCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

82 
C§WifiSmeWifiOnCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

83 
C§WifiSmeClﬂkedSsidsSëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

84 
C§WifiSmeClﬂkedSsidsGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

85 
C§WifiSmeWifiOnIndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

86 
C§WifiSmeSmeComm⁄C⁄figGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

87 
C§WifiSmeSmeComm⁄C⁄figSëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

88 
C§WifiSmeGëI¡îÁ˚C≠abûôyCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

89 
C§WifiSmeEº‹IndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

90 
C§WifiSmeInfoIndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

91 
C§WifiSmeC‹eDumpIndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

92 
C§WifiSmeAmpSètusCh™geIndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
);

94 #ifde‡
__˝lu•lus


	@sme_csr/sme_userspace.c

17 
	~"unifi_¥iv.h
"

23 
C§SchedQid
 
	gCSR_WIFI_ROUTER_IFACEQUEUE
 = 0xFFFF;

24 
C§SchedQid
 
	gCSR_WIFI_SME_IFACEQUEUE
 = 0xFFFF;

25 #ifde‡
CSR_SUPPORT_WEXT_AP


26 
C§SchedQid
 
	gCSR_WIFI_NME_IFACEQUEUE
 = 0xFFFF;

29 
	$uf_sme_öô
(
unifi_¥iv_t
 *
¥iv
)

31 
i
, 
j
;

33 
	`C§WifiRouãrTøn•‹tInô
(
¥iv
);

35 
¥iv
->
smïriv
 =Öriv;

37 
	`öô_waôqueue_hód
(&
¥iv
->
sme_ªque°_wq
);

39 
¥iv
->
fûãr_t˛as_õs
 = 
NULL
;

40 
	`mem£t
(&
¥iv
->
∑ckë_fûãrs
, 0, (
uf_cfg_bˇ°_∑ckë_fûãr_t
));

42 #ifde‡
CSR_SUPPORT_WEXT


43 
¥iv
->
ign‹e_bssid_joö
 = 
FALSE
;

44 
¥iv
->
mib_d©a
.
Àngth
 = 0;

46 
	`uf_sme_wext_£t_deÁu…s
(
¥iv
);

49 
¥iv
->
°a_ù_addªss
 = 0xFFFFFFFF;

51 
¥iv
->
wifi_⁄_°©e
 = 
wifi_⁄_un•ecifõd
;

53 
	`£ma_öô
(&
¥iv
->
sme_£m
, 1);

54 
	`mem£t
(&
¥iv
->
sme_ª∂y
, 0, (
sme_ª∂y_t
));

56 
¥iv
->
è_öd_w‹k
.
ö_u£
 = 0;

57 
¥iv
->
è_ßm∂e_öd_w‹k
.
ö_u£
 = 0;

59 
¥iv
->
CSR_WIFI_SME_IFACEQUEUE
 = 0xFFFF;

61 
i
 = 0; i < 
MAX_MA_UNIDATA_IND_FILTERS
; i++) {

62 
¥iv
->
sme_unid©a_öd_fûãrs
[
i
].
ö_u£
 = 0;

66 
	`INIT_WORK
(&
¥iv
->
è_öd_w‹k
.
èsk
, 
uf_è_öd_wq
);

67 
	`INIT_WORK
(&
¥iv
->
è_ßm∂e_öd_w‹k
.
èsk
, 
uf_è_ßm∂e_öd_wq
);

68 #ifde‡
CSR_SUPPORT_WEXT


69 
	`INIT_WORK
(&
¥iv
->
sme_c⁄fig_èsk
, 
uf_sme_c⁄fig_wq
);

72 
i
 = 0; i < 
CSR_WIFI_NUM_INTERFACES
; i++) {

73 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
i
];

74 
öãrÁ˚Priv
->
m4_£¡
 = 
FALSE
;

75 
öãrÁ˚Priv
->
m4_bulk_d©a
.
√t_buf_Àngth
 = 0;

76 
öãrÁ˚Priv
->
m4_bulk_d©a
.
d©a_Àngth
 = 0;

77 
öãrÁ˚Priv
->
m4_bulk_d©a
.
os_d©a_±r
 = i¡îÁ˚Priv->m4_bulk_d©a.
os_√t_buf_±r
 = 
NULL
;

79 
	`mem£t
(&
öãrÁ˚Priv
->
c⁄åﬁÀd_d©a_p‹t
, 0, (
unifi_p‹t_c⁄fig_t
));

80 
öãrÁ˚Priv
->
c⁄åﬁÀd_d©a_p‹t
.
íåõs_ö_u£
 = 1;

81 
öãrÁ˚Priv
->
c⁄åﬁÀd_d©a_p‹t
.
p‹t_cfg
[0].
ö_u£
 = 
TRUE
;

82 
öãrÁ˚Priv
->
c⁄åﬁÀd_d©a_p‹t
.
p‹t_cfg
[0].
p‹t_a˘i⁄
 = 
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_CLOSED_DISCARD
;

83 
öãrÁ˚Priv
->
c⁄åﬁÀd_d©a_p‹t
.
ovîide_a˘i⁄
 = 
UF_DATA_PORT_OVERIDE
;

85 
	`mem£t
(&
öãrÁ˚Priv
->
unc⁄åﬁÀd_d©a_p‹t
, 0, (
unifi_p‹t_c⁄fig_t
));

86 
öãrÁ˚Priv
->
unc⁄åﬁÀd_d©a_p‹t
.
íåõs_ö_u£
 = 1;

87 
öãrÁ˚Priv
->
unc⁄åﬁÀd_d©a_p‹t
.
p‹t_cfg
[0].
ö_u£
 = 
TRUE
;

88 
öãrÁ˚Priv
->
unc⁄åﬁÀd_d©a_p‹t
.
p‹t_cfg
[0].
p‹t_a˘i⁄
 = 
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_CLOSED_DISCARD
;

89 
öãrÁ˚Priv
->
unc⁄åﬁÀd_d©a_p‹t
.
ovîide_a˘i⁄
 = 
UF_DATA_PORT_OVERIDE
;

92 
j
 = 1; j < 
UNIFI_MAX_CONNECTIONS
; j++) {

93 
öãrÁ˚Priv
->
c⁄åﬁÀd_d©a_p‹t
.
p‹t_cfg
[
j
].
ö_u£
 = 
FALSE
;

94 
öãrÁ˚Priv
->
c⁄åﬁÀd_d©a_p‹t
.
p‹t_cfg
[
j
].
p‹t_a˘i⁄
 = 
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_CLOSED_DISCARD
;

96 
öãrÁ˚Priv
->
unc⁄åﬁÀd_d©a_p‹t
.
p‹t_cfg
[
j
].
ö_u£
 = 
FALSE
;

97 
öãrÁ˚Priv
->
unc⁄åﬁÀd_d©a_p‹t
.
p‹t_cfg
[
j
].
p‹t_a˘i⁄
 = 
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_CLOSED_DISCARD
;

101 
	`INIT_LIST_HEAD
(&
öãrÁ˚Priv
->
gíîicMgtFømes
);

102 
	`INIT_LIST_HEAD
(&
öãrÁ˚Priv
->
gíîicMu…iˇ°OrBrﬂdCa°MgtFømes
);

103 
	`INIT_LIST_HEAD
(&
öãrÁ˚Priv
->
gíîicMu…iˇ°OrBrﬂdCa°Fømes
);

105 
j
 = 0; j < 
UNIFI_MAX_CONNECTIONS
; j++) {

106 
öãrÁ˚Priv
->
°aInfo
[
j
] = 
NULL
;

109 
öãrÁ˚Priv
->
num_°©i⁄s_joöed
 = 0;

110 
öãrÁ˚Priv
->
°a_a˘ivôy_check_íabÀd
 = 
FALSE
;

115 
	}
}

119 
	$uf_sme_deöô
(
unifi_¥iv_t
 *
¥iv
)

121 
i
,
j
;

122 
C§Uöt8
 
ba_£ssi⁄_idx
;

123 
ba_£ssi⁄_rx_°ru˘
 *
ba_£ssi⁄_rx
 = 
NULL
;

124 
ba_£ssi⁄_tx_°ru˘
 *
ba_£ssi⁄_tx
 = 
NULL
;

125 
C§WifiRouãrCålSèInfo_t
 *
°aInfo
 = 
NULL
;

126 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
NULL
;

129 i‡(
¥iv
->
∑ckë_fûãrs
.
t˛as_õs_Àngth
) {

130 
¥iv
->
∑ckë_fûãrs
.
t˛as_õs_Àngth
 = 0;

131 
	`C§PmemFªe
(
¥iv
->
fûãr_t˛as_õs
);

132 
¥iv
->
fûãr_t˛as_õs
 = 
NULL
;

135 
i
 = 0; i < 
MAX_MA_UNIDATA_IND_FILTERS
; i++) {

136 
¥iv
->
sme_unid©a_öd_fûãrs
[
i
].
ö_u£
 = 0;

140 
i
 = 0; i < 
CSR_WIFI_NUM_INTERFACES
; i++) {

141 
	`down
(&
¥iv
->
ba_muãx
);

142 
ba_£ssi⁄_idx
=0; ba_£ssi⁄_idx < 
MAX_SUPPORTED_BA_SESSIONS_RX
; ba_session_idx++){

143 
ba_£ssi⁄_rx
 = 
¥iv
->
öãrÁ˚Priv
[
i
]->ba_£ssi⁄_rx[
ba_£ssi⁄_idx
];

144 if(
ba_£ssi⁄_rx
) {

145 
	`blockack_£ssi⁄_°›
(
¥iv
,

146 
i
,

147 
CSR_WIFI_ROUTER_CTRL_BLOCK_ACK_RECIPIENT
,

148 
ba_£ssi⁄_rx
->
tID
,

149 
ba_£ssi⁄_rx
->
macAddªss
);

152 
ba_£ssi⁄_idx
=0; ba_£ssi⁄_idx < 
MAX_SUPPORTED_BA_SESSIONS_TX
; ba_session_idx++){

153 
ba_£ssi⁄_tx
 = 
¥iv
->
öãrÁ˚Priv
[
i
]->ba_£ssi⁄_tx[
ba_£ssi⁄_idx
];

154 if(
ba_£ssi⁄_tx
) {

155 
	`blockack_£ssi⁄_°›
(
¥iv
,

156 
i
,

157 
CSR_WIFI_ROUTER_CTRL_BLOCK_ACK_ORIGINATOR
,

158 
ba_£ssi⁄_tx
->
tID
,

159 
ba_£ssi⁄_tx
->
macAddªss
);

163 
	`up
(&
¥iv
->
ba_muãx
);

164 
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
i
];

165 if(
öãrÁ˚Priv
){

166 
j
 = 0; j < 
UNIFI_MAX_CONNECTIONS
; j++) {

167 i‡((
°aInfo
=
öãrÁ˚Priv
->°aInfo[
j
]Ë!
NULL
) {

169 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "uf_sme_deöô: C™˚lög w‹k queuêf‹ STA wôh AID: %d\n", 
°aInfo
->
aid
);

170 
	`ˇn˚l_w‹k_sync
(&
°aInfo
->
£nd_disc⁄√˘ed_öd_èsk
);

171 
°aInfo
->
nuŒD©aHo°Tag
 = 
INVALID_HOST_TAG
;

174 i‡(
öãrÁ˚Priv
->
°a_a˘ivôy_check_íabÀd
){

175 
öãrÁ˚Priv
->
°a_a˘ivôy_check_íabÀd
 = 
FALSE
;

176 
	`dñ_timî_sync
(&
öãrÁ˚Priv
->
°a_a˘ivôy_check_timî
);

179 
	`C§WifiRouãrCålI¡îÁ˚Re£t
(
¥iv
, 
i
);

180 
¥iv
->
öãrÁ˚Priv
[
i
]->
öãrÁ˚Mode
 = 
CSR_WIFI_ROUTER_CTRL_MODE_NONE
;

184 
	}
}

211 
	$unifi_è_ödiˇã_¥Ÿocﬁ
(*
o•riv
,

212 
C§WifiRouãrCålTøfficPackëTy≥
 
∑ckë_ty≥
,

213 
C§WifiRouãrCålPrŸocﬁDúe˘i⁄
 
dúe˘i⁄
,

214 c⁄° 
C§WifiMacAddªss
 *
§c_addr
)

216 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
o•riv
;

218 i‡(
¥iv
->
è_öd_w‹k
.
ö_u£
) {

219 
	`unifi_w¨nög
(
¥iv
,

224 i‡(
CSR_WIFI_ROUTER_CTRL_PROTOCOL_DIRECTION_RX
 =
dúe˘i⁄
)

226 
C§Uöt16
 
öãrÁ˚Tag
 = 0;

227 
	`C§WifiRouãrCålTøfficPrŸocﬁIndSíd
(
¥iv
->
CSR_WIFI_SME_IFACEQUEUE
,0,

228 
öãrÁ˚Tag
,

229 
∑ckë_ty≥
,

230 
dúe˘i⁄
,

231 *
§c_addr
);

235 
¥iv
->
è_öd_w‹k
.
∑ckë_ty≥
 =Öacket_type;

236 
¥iv
->
è_öd_w‹k
.
dúe˘i⁄
 = direction;

237 
¥iv
->
è_öd_w‹k
.
§c_addr
 = *src_addr;

239 
	`queue_w‹k
(
¥iv
->
unifi_w‹kqueue
, &¥iv->
è_öd_w‹k
.
èsk
);

242 
	}
}

260 
	$unifi_è_ödiˇã_ßm∂ög
(*
o•riv
, 
C§WifiRouãrCålTøfficSèts
 *
°©s
)

262 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
o•riv
;

264 i‡(!
¥iv
) {

268 i‡(
¥iv
->
è_ßm∂e_öd_w‹k
.
ö_u£
) {

269 
	`unifi_w¨nög
(
¥iv
,

274 
¥iv
->
è_ßm∂e_öd_w‹k
.
°©s
 = *stats;

276 
	`queue_w‹k
(
¥iv
->
unifi_w‹kqueue
, &¥iv->
è_ßm∂e_öd_w‹k
.
èsk
);

278 
	}
}

299 
	$unifi_è_ödiˇã_l4°©s
(*
o•riv
,

300 
C§Uöt32
 
rxT˝Throughput
,

301 
C§Uöt32
 
txT˝Throughput
,

302 
C§Uöt32
 
rxUdpThroughput
,

303 
C§Uöt32
 
txUdpThroughput
)

305 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
o•riv
;

307 i‡(!
¥iv
) {

311 
¥iv
->
rxT˝Throughput
 =ÑxTcpThroughput;

312 
¥iv
->
txT˝Throughput
 =ÅxTcpThroughput;

313 
¥iv
->
rxUdpThroughput
 =ÑxUdpThroughput;

314 
¥iv
->
txUdpThroughput
 =ÅxUdpThroughput;

315 
	}
}

	@sme_csr/sme_userspace.h

14 #i‚de‡
__LINUX_SME_USERSPACE_H__


15 
	#__LINUX_SME_USERSPACE_H__
 1

	)

17 
	~<löux/kî√l.h
>

19 
uf_sme_öô
(
unifi_¥iv_t
 *
¥iv
);

20 
uf_sme_deöô
(
unifi_¥iv_t
 *
¥iv
);

21 
uf_sme_queue_mesßge
(
unifi_¥iv_t
 *
¥iv
, 
u8
 *
buf„r
, 
Àngth
);

24 
	~"c§_wifi_rouãr_lib.h
"

25 
	~"c§_wifi_rouãr_£f.h
"

26 
	~"c§_wifi_rouãr_˘æ_lib.h
"

27 
	~"c§_wifi_rouãr_˘æ_£f.h
"

28 
	~"c§_wifi_sme_èsk.h
"

29 #ifde‡
CSR_SUPPORT_WEXT_AP


30 
	~"c§_wifi_nme_≠_lib.h
"

32 
	~"c§_wifi_sme_lib.h
"

34 
C§WifiRouãrTøn•‹tInô
(
unifi_¥iv_t
 *
¥iv
);

35 
C§WifiRouãrTøn•‹tRecv
(
unifi_¥iv_t
 *
¥iv
, 
C§Uöt8
* 
buf„r
, 
C§Size
 
buf„rLígth
);

36 
C§WifiRouãrTøn•‹tDeInô
(
unifi_¥iv_t
 *
¥iv
);

	@sme_mgt.c

18 
	~"c§_wifi_hù_unifivîsi⁄.h
"

19 
	~"unifi_¥iv.h
"

20 
	~"c§_wifi_hù_c⁄vîsi⁄s.h
"

58 
	$C§WifiSmeMicFaûuªIndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

60 #ifde‡
CSR_SUPPORT_WEXT


61 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

62 
C§WifiSmeMicFaûuªInd
* 
öd
 = (C§WifiSmeMicFaûuªInd*)
msg
;

64 i‡(
¥iv
 =
NULL
) {

65 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeMicFailureIndSend: invalidÖriv\n");

69 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,

71 
öd
->
cou¡
, ind->
keyTy≥
);

73 
	`wext_£nd_mich´lmicÁûuª_evít
(
¥iv
, 
öd
->
cou¡
, ind->
addªss
, ind->
keyTy≥
, ind->
öãrÁ˚Tag
);

75 
	}
}

78 
	$C§WifiSmePmkidCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

80 #ifde‡
CSR_SUPPORT_WEXT


81 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

82 
C§WifiSmePmkidCfm
* 
cfm
 = (C§WifiSmePmkidCfm*)
msg
;

84 i‡(
¥iv
 =
NULL
) {

85 
	`unifi_îr‹
(
NULL
, "CsrWifiSmePmkidCfmSend: Invalid ospriv.\n");

94 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

96 
	}
}

99 
	$C§WifiSmePmkidC™did©eLi°IndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

101 #ifde‡
CSR_SUPPORT_WEXT


102 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

103 
C§WifiSmePmkidC™did©eLi°Ind
* 
öd
 = (C§WifiSmePmkidC™did©eLi°Ind*)
msg
;

104 
i
;

106 i‡(
¥iv
->
smïriv
 =
NULL
) {

107 
	`unifi_îr‹
(
¥iv
, "CsrWifiSmePmkidCandidateListIndSend: invalid smepriv\n");

111 
i
 = 0; i < 
öd
->
pmkidC™did©esCou¡
; i++)

113 
	`wext_£nd_pmkid_ˇndid©e_evít
(
¥iv
, 
öd
->
pmkidC™did©es
[
i
].
bssid
, ind->pmkidC™did©es[i].
¥eAuthAŒowed
, ind->
öãrÁ˚Tag
);

116 
	}
}

118 
	$C§WifiSmeSˇnResu…sFlushCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

120 
	}
}

122 
	$C§WifiSmeSˇnResu…sGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

124 #ifde‡
CSR_SUPPORT_WEXT


125 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

126 
C§WifiSmeSˇnResu…sGëCfm
* 
cfm
 = (C§WifiSmeSˇnResu…sGëCfm*)
msg
;

127 
byãsRequúed
 = 
cfm
->
sˇnResu…sCou¡
 * (
C§WifiSmeSˇnResu…
);

128 
i
;

129 
C§Uöt8
* 
cuºít_buff
;

130 
C§WifiSmeSˇnResu…
* 
sˇnC›y
;

132 i‡(
¥iv
 =
NULL
) {

133 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeScanResultsGetCfmSend: Invalid ospriv.\n");

138 
i
 = 0; i < 
cfm
->
sˇnResu…sCou¡
; ++i) {

139 c⁄° 
C§WifiSmeSˇnResu…
 *
sˇn_ªsu…
 = &
cfm
->
sˇnResu…s
[
i
];

140 
byãsRequúed
 +
sˇn_ªsu…
->
öf‹m©i⁄EÀmítsLígth
;

144 
sˇnC›y
 = 
	`C§PmemAŒoc
(
byãsRequúed
);

145 
	`mem˝y
(
sˇnC›y
, 
cfm
->
sˇnResu…s
, (
C§WifiSmeSˇnResu…
Ë* cfm->
sˇnResu…sCou¡
);

148 
cuºít_buff
 = (
C§Uöt8
*)&
sˇnC›y
[
cfm
->
sˇnResu…sCou¡
];

149 
i
 = 0; i < 
cfm
->
sˇnResu…sCou¡
; ++i)

151 
C§WifiSmeSˇnResu…
 *
sˇn_ªsu…
 = &
sˇnC›y
[
i
];

152 
	`C§MemCpy
(
cuºít_buff
, 
sˇn_ªsu…
->
öf‹m©i⁄EÀmíts
, sˇn_ªsu…->
öf‹m©i⁄EÀmítsLígth
);

153 
sˇn_ªsu…
->
öf‹m©i⁄EÀmíts
 = 
cuºít_buff
;

154 
cuºít_buff
 +
sˇn_ªsu…
->
öf‹m©i⁄EÀmítsLígth
;

157 
¥iv
->
sme_ª∂y
.
ª∂y_sˇn_ªsu…s_cou¡
 = 
cfm
->
sˇnResu…sCou¡
;

158 
¥iv
->
sme_ª∂y
.
ª∂y_sˇn_ªsu…s
 = 
sˇnC›y
;

160 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

162 
	}
}

165 
	$C§WifiSmeSˇnFuŒCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

167 #ifde‡
CSR_SUPPORT_WEXT


168 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

169 
C§WifiSmeSˇnFuŒCfm
* 
cfm
 = (C§WifiSmeSˇnFuŒCfm*)
msg
;

171 i‡(
¥iv
 =
NULL
) {

172 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeScanFullCfmSend: Invalid ospriv.\n");

176 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

178 
	}
}

181 
	$C§WifiSmeSˇnResu…IndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

184 
	}
}

187 
	$C§WifiSmeC⁄√˘CfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

189 #ifde‡
CSR_SUPPORT_WEXT


190 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

191 
C§WifiSmeC⁄√˘Cfm
* 
cfm
 = (C§WifiSmeC⁄√˘Cfm*)
msg
;

193 i‡(
¥iv
 =
NULL
) {

194 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeConnectCfmSend: Invalid ospriv.\n");

198 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

200 
	}
}

203 
	$C§WifiSmeDisc⁄√˘CfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

205 #ifde‡
CSR_SUPPORT_WEXT


206 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

207 
C§WifiSmeDisc⁄√˘Cfm
* 
cfm
 = (C§WifiSmeDisc⁄√˘Cfm*)
msg
;

209 i‡(
¥iv
 =
NULL
) {

210 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeDisconnectCfmSend: Invalid ospriv.\n");

214 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

216 
	}
}

219 
	$C§WifiSmeKeyCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

221 #ifde‡
CSR_SUPPORT_WEXT


222 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

223 
C§WifiSmeKeyCfm
* 
cfm
 = (C§WifiSmeKeyCfm*)
msg
;

225 i‡(
¥iv
 =
NULL
) {

226 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeKeyCfmSend: Invalid ospriv.\n");

230 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

232 
	}
}

235 
	$C§WifiSmeMu…iˇ°AddªssCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

237 #ifde‡
CSR_SUPPORT_WEXT


238 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

239 
C§WifiSmeMu…iˇ°AddªssCfm
* 
cfm
 = (C§WifiSmeMu…iˇ°AddªssCfm*)
msg
;

241 i‡(
¥iv
 =
NULL
) {

242 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeMulticastAddressCfmSend: Invalid ospriv.\n");

246 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

248 
	}
}

250 
	$C§WifiSmeWifiFlightmodeCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

252 #ifde‡
CSR_SUPPORT_WEXT


253 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

254 
C§WifiSmeWifiFlightmodeCfm
* 
cfm
 = (C§WifiSmeWifiFlightmodeCfm*)
msg
;

256 i‡(
¥iv
 =
NULL
) {

257 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeWifiFlightmodeCfmSend: Invalid ospriv.\n");

261 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

263 
	}
}

265 
	$C§WifiSmeWifiOnCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

267 #ifde‡
CSR_SUPPORT_WEXT


268 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

269 
C§WifiSmeWifiOnCfm
* 
cfm
 = (C§WifiSmeWifiOnCfm*)
msg
;

271 i‡(
¥iv
 =
NULL
) {

272 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeWifiOnCfmSend: Invalid ospriv.\n");

276 
	`unifi_åa˚
(
¥iv
, 
UDBG4
,

277 "C§WifiSmeWifiOnCfmSíd: wakêu∞°©u†%d\n", 
cfm
->
°©us
);

278 #ifde‡
CSR_SUPPORT_WEXT_AP


279 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

283 
	}
}

285 
	$C§WifiSmeWifiOffCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

287 #ifde‡
CSR_SUPPORT_WEXT


288 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

289 
C§WifiSmeWifiOffCfm
* 
cfm
 = (C§WifiSmeWifiOffCfm*)
msg
;

291 i‡(
¥iv
 =
NULL
) {

292 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeWifiOffCfmSend: Invalid ospriv.\n");

296 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

298 
	}
}

301 
	$C§WifiSmeWifiOffIndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

303 #ifde‡
CSR_SUPPORT_WEXT


304 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

305 
C§WifiSmeWifiOffInd
* 
öd
 = (C§WifiSmeWifiOffInd*)
msg
;

307 i‡(
¥iv
 =
NULL
) {

308 
	`unifi_îr‹
(
NULL
, "CsrWifiRouterCtrlStoppedReqSend: Invalid ospriv.\n");

312 i‡(
¥iv
->
smïriv
 =
NULL
) {

313 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlStoppedReqSend: invalid smepriv\n");

321 
öd
->
ªas⁄
) {

322 
CSR_WIFI_SME_CONTROL_INDICATION_ERROR
:

323 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,

325 
öd
->
ªas⁄
);

328 
	`sme_mgt_wifi_⁄
(
¥iv
);

330 
CSR_WIFI_SME_CONTROL_INDICATION_EXIT
:

331 #ifde‡
CSR_SUPPORT_WEXT_AP


332 
	`sme_com∂ëe_ªque°
(
¥iv
, 0);

340 
	}
}

342 
	$C§WifiSmeVîsi⁄sGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

344 #ifde‡
CSR_SUPPORT_WEXT


345 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

346 
C§WifiSmeVîsi⁄sGëCfm
* 
cfm
 = (C§WifiSmeVîsi⁄sGëCfm*)
msg
;

348 i‡(
¥iv
 =
NULL
) {

349 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeVersionsGetCfmSend: Invalid ospriv.\n");

353 
¥iv
->
sme_ª∂y
.
vîsi⁄s
 = 
cfm
->versions;

354 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

356 
	}
}

358 
	$C§WifiSmePowîC⁄figGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

360 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

361 
C§WifiSmePowîC⁄figGëCfm
* 
cfm
 = (C§WifiSmePowîC⁄figGëCfm*)
msg
;

363 i‡(
¥iv
 =
NULL
) {

364 
	`unifi_îr‹
(
NULL
, "CsrWifiSmePowerConfigGetCfmSend: Invalid ospriv.\n");

368 
¥iv
->
sme_ª∂y
.
powîC⁄fig
 = 
cfm
->powerConfig;

369 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

370 
	}
}

372 
	$C§WifiSmeHo°C⁄figGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

374 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

375 
C§WifiSmeHo°C⁄figGëCfm
* 
cfm
 = (C§WifiSmeHo°C⁄figGëCfm*)
msg
;

377 i‡(
¥iv
 =
NULL
) {

378 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeHostConfigGetCfmSend: Invalid ospriv.\n");

382 
¥iv
->
sme_ª∂y
.
ho°C⁄fig
 = 
cfm
->hostConfig;

383 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

384 
	}
}

386 
	$C§WifiSmeC€xInfoGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

388 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

389 
C§WifiSmeC€xInfoGëCfm
* 
cfm
 = (C§WifiSmeC€xInfoGëCfm*)
msg
;

391 i‡(
¥iv
 =
NULL
) {

392 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeCoexInfoGetCfmSend: Invalid ospriv.\n");

396 
¥iv
->
sme_ª∂y
.
c€xInfo
 = 
cfm
->coexInfo;

397 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

398 
	}
}

400 
	$C§WifiSmeC€xC⁄figGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

402 #ifde‡
CSR_SUPPORT_WEXT


403 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

404 
C§WifiSmeC€xC⁄figGëCfm
* 
cfm
 = (C§WifiSmeC€xC⁄figGëCfm*)
msg
;

406 i‡(
¥iv
 =
NULL
) {

407 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeCoexConfigGetCfmSend: Invalid ospriv.\n");

411 
¥iv
->
sme_ª∂y
.
c€xC⁄fig
 = 
cfm
->coexConfig;

412 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

414 
	}
}

416 
	$C§WifiSmeMibC⁄figGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

418 #ifde‡
CSR_SUPPORT_WEXT


419 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

420 
C§WifiSmeMibC⁄figGëCfm
* 
cfm
 = (C§WifiSmeMibC⁄figGëCfm*)
msg
;

422 i‡(
¥iv
 =
NULL
) {

423 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeMibConfigGetCfmSend: Invalid ospriv.\n");

427 
¥iv
->
sme_ª∂y
.
mibC⁄fig
 = 
cfm
->mibConfig;

428 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

430 
	}
}

432 
	$C§WifiSmeC⁄√˘i⁄InfoGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

434 #ifde‡
CSR_SUPPORT_WEXT


435 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

436 
C§WifiSmeC⁄√˘i⁄InfoGëCfm
* 
cfm
 = (C§WifiSmeC⁄√˘i⁄InfoGëCfm*)
msg
;

438 i‡(
¥iv
 =
NULL
) {

439 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeConnectionInfoGetCfmSend: Invalid ospriv.\n");

443 
¥iv
->
sme_ª∂y
.
c⁄√˘i⁄Info
 = 
cfm
->connectionInfo;

444 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

446 
	}
}

448 
	$C§WifiSmeC⁄√˘i⁄C⁄figGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

450 #ifde‡
CSR_SUPPORT_WEXT


451 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

452 
C§WifiSmeC⁄√˘i⁄C⁄figGëCfm
* 
cfm
 = (C§WifiSmeC⁄√˘i⁄C⁄figGëCfm*)
msg
;

454 i‡(
¥iv
 =
NULL
) {

455 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeConnectionConfigGetCfmSend: Invalid ospriv.\n");

459 
¥iv
->
sme_ª∂y
.
c⁄√˘i⁄C⁄fig
 = 
cfm
->connectionConfig;

460 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

462 
	}
}

464 
	$C§WifiSmeC⁄√˘i⁄SètsGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

466 #ifde‡
CSR_SUPPORT_WEXT


467 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

468 
C§WifiSmeC⁄√˘i⁄SètsGëCfm
* 
cfm
 = (C§WifiSmeC⁄√˘i⁄SètsGëCfm*)
msg
;

470 i‡(
¥iv
 =
NULL
) {

471 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeConnectionStatsGetCfmSend: Invalid ospriv.\n");

475 
¥iv
->
sme_ª∂y
.
c⁄√˘i⁄Sèts
 = 
cfm
->connectionStats;

476 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

478 
	}
}

480 
	$C§WifiSmeMibSëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

482 #ifde‡
CSR_SUPPORT_WEXT


483 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

484 
C§WifiSmeMibSëCfm
* 
cfm
 = (C§WifiSmeMibSëCfm*)
msg
;

486 i‡(
¥iv
 =
NULL
) {

487 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeMibSetCfmSend: Invalid ospriv.\n");

491 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

493 
	}
}

495 
	$C§WifiSmeMibGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

497 #ifde‡
CSR_SUPPORT_WEXT


498 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

499 
C§WifiSmeMibGëCfm
* 
cfm
 = (C§WifiSmeMibGëCfm*)
msg
;

501 i‡(
¥iv
 =
NULL
) {

502 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeMibGetCfmSend: Invalid ospriv.\n");

506 i‡(
cfm
->
mibAâribuã
 =
NULL
) {

507 
	`unifi_îr‹
(
¥iv
, "CsrWifiSmeMibGetCfmSend: EmptyÑeply.\n");

508 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

512 i‡((
¥iv
->
mib_cfm_buf„r
 !
NULL
) &&

513 (
¥iv
->
mib_cfm_buf„r_Àngth
 >
cfm
->
mibAâribuãLígth
)) {

514 
	`mem˝y
(
¥iv
->
mib_cfm_buf„r
, 
cfm
->
mibAâribuã
, cfm->
mibAâribuãLígth
);

515 
¥iv
->
mib_cfm_buf„r_Àngth
 = 
cfm
->
mibAâribuãLígth
;

517 
	`unifi_îr‹
(
¥iv
,

519 
¥iv
->
mib_cfm_buf„r_Àngth
, 
cfm
->
mibAâribuãLígth
);

522 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

524 
	}
}

526 
	$C§WifiSmeMibGëNextCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

528 #ifde‡
CSR_SUPPORT_WEXT


529 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

530 
C§WifiSmeMibGëNextCfm
* 
cfm
 = (C§WifiSmeMibGëNextCfm*)
msg
;

532 i‡(
¥iv
 =
NULL
) {

533 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeMibGetNextCfmSend: Invalid ospriv.\n");

538 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

540 
	}
}

542 
	$C§WifiSmeC⁄√˘i⁄QuÆôyIndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

544 #ifde‡
CSR_SUPPORT_WEXT


545 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

546 
C§WifiSmeC⁄√˘i⁄QuÆôyInd
* 
öd
 = (C§WifiSmeC⁄√˘i⁄QuÆôyInd*)
msg
;

547 
sig«l
, 
noi£
, 
¢r
;

549 i‡(
¥iv
 =
NULL
) {

550 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeConnectionQualityIndSend: Invalid ospriv.\n");

560 
sig«l
 = 
öd
->
lökQuÆôy
.
unifiRssi
;

562 
¢r
 = (
öd
->
lökQuÆôy
.
unifiSƒ
 > 0) ? ind->linkQuality.unifiSnr : 0;

563 
¢r
 = (snr < 255) ? snr : 255;

564 
noi£
 = 
sig«l
 - 
¢r
;

567 
sig«l
 = (signal < 63) ? signal : 63;

568 
sig«l
 = (signal > -192) ? signal : -192;

571 
noi£
 = (noise < 63) ?Çoise : 63;

572 
noi£
 = (noise > -192) ?Çoise : -192;

575 
sig«l
 = ( signal < 0 ) ? signal + 0x100 : signal;

576 
noi£
 = (Çoise < 0 ) ?Çoise + 0x100 :Çoise;

578 
¥iv
->
wext_wúñess_°©s
.
quÆ
.
Àvñ
 = (
u8
)
sig«l
;

579 
¥iv
->
wext_wúñess_°©s
.
quÆ
.
noi£
 = (
u8
)noise;

580 
¥iv
->
wext_wúñess_°©s
.
quÆ
.quÆ = 
¢r
;

581 
¥iv
->
wext_wúñess_°©s
.
quÆ
.
upd©ed
 = 0;

583 #i‡
WIRELESS_EXT
 > 16

584 
¥iv
->
wext_wúñess_°©s
.
quÆ
.
upd©ed
 |
IW_QUAL_LEVEL_UPDATED
 |

585 
IW_QUAL_NOISE_UPDATED
 |

586 
IW_QUAL_QUAL_UPDATED
;

587 #i‡
WIRELESS_EXT
 > 18

588 
¥iv
->
wext_wúñess_°©s
.
quÆ
.
upd©ed
 |
IW_QUAL_DBM
;

592 
	}
}

594 
	$C§WifiSmePackëFûãrSëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

596 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

598 i‡(
¥iv
 =
NULL
) {

599 
	`unifi_îr‹
(
NULL
, "CsrWifiSmePacketFilterSetCfmSend: Invalid ospriv.\n");

604 
	}
}

606 
	$C§WifiSmeT•ecCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

608 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

609 
C§WifiSmeT•ecCfm
* 
cfm
 = (C§WifiSmeT•ecCfm*)
msg
;

611 i‡(
¥iv
 =
NULL
) {

612 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeTspecCfmSend: Invalid ospriv.\n");

616 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

617 
	}
}

619 
	$C§WifiSmeT•ecIndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

621 
	}
}

623 
	$C§WifiSmeBœckli°CfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

625 
	}
}

627 
	$C§WifiSmeEvítMaskSëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

629 
	}
}

632 
	$C§WifiSmeRﬂmSèπIndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

634 
	}
}

636 
	$C§WifiSmeRﬂmCom∂ëeIndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

639 
	}
}

641 
	$C§WifiSmeAssocüti⁄SèπIndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

643 
	}
}

645 
	$C§WifiSmeAssocüti⁄Com∂ëeIndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

647 
	}
}

649 
	$C§WifiSmeIbssSèti⁄IndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

651 
	}
}

653 
	$C§WifiSmeWifiOnIndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

655 
	}
}

657 
	$C§WifiSmeRe°ri˘edAc˚ssE«bÀCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

659 
	}
}

661 
	$C§WifiSmeRe°ri˘edAc˚ssDißbÀCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

663 
	}
}

666 
	$C§WifiSmeAdhocC⁄figGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

668 
	}
}

670 
	$C§WifiSmeAdhocC⁄figSëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

672 #ifde‡
CSR_SUPPORT_WEXT


673 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

674 
C§WifiSmeAdhocC⁄figSëCfm
* 
cfm
 = (C§WifiSmeAdhocC⁄figSëCfm*)
msg
;

676 i‡(
¥iv
 =
NULL
) {

677 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeSmeConfigSetCfmSend: Invalid ospriv.\n");

681 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

683 
	}
}

685 
	$C§WifiSmeCÆibøti⁄D©aGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

687 
	}
}

689 
	$C§WifiSmeCÆibøti⁄D©aSëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

691 #ifde‡
CSR_SUPPORT_WEXT


692 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

693 
C§WifiSmeCÆibøti⁄D©aSëCfm
* 
cfm
 = (C§WifiSmeCÆibøti⁄D©aSëCfm*)
msg
;

695 i‡(
¥iv
 =
NULL
) {

696 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeSmeConfigSetCfmSend: Invalid ospriv.\n");

700 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

702 
	}
}

704 
	$C§WifiSmeClﬂkedSsidsGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

706 
	}
}

708 
	$C§WifiSmeClﬂkedSsidsSëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

710 #ifde‡
CSR_SUPPORT_WEXT


711 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

712 
C§WifiSmeClﬂkedSsidsSëCfm
* 
cfm
 = (C§WifiSmeClﬂkedSsidsSëCfm*)
msg
;

714 i‡(
¥iv
 =
NULL
) {

715 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeSmeConfigSetCfmSend: Invalid ospriv.\n");

719 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

721 
	}
}

724 
	$C§WifiSmeC€xC⁄figSëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

726 #ifde‡
CSR_SUPPORT_WEXT


727 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

728 
C§WifiSmeC€xC⁄figSëCfm
* 
cfm
 = (C§WifiSmeC€xC⁄figSëCfm*)
msg
;

730 i‡(
¥iv
 =
NULL
) {

731 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeSmeConfigSetCfmSend: Invalid ospriv.\n");

735 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

737 
	}
}

739 
	$C§WifiSmeHo°C⁄figSëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

741 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

742 
C§WifiSmeHo°C⁄figSëCfm
* 
cfm
 = (C§WifiSmeHo°C⁄figSëCfm*)
msg
;

744 i‡(
¥iv
 =
NULL
) {

745 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeSmeConfigSetCfmSend: Invalid ospriv.\n");

749 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

750 
	}
}

752 
	$C§WifiSmeLökQuÆôyGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

754 
	}
}

757 
	$C§WifiSmeMibC⁄figSëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

759 #ifde‡
CSR_SUPPORT_WEXT


760 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

761 
C§WifiSmeMibC⁄figSëCfm
* 
cfm
 = (C§WifiSmeMibC⁄figSëCfm*)
msg
;

763 i‡(
¥iv
 =
NULL
) {

764 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeSmeConfigSetCfmSend: Invalid ospriv.\n");

768 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

770 
	}
}

772 
	$C§WifiSmePîm™ítMacAddªssGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

774 
	}
}

776 
	$C§WifiSmePowîC⁄figSëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

778 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

779 
C§WifiSmePowîC⁄figSëCfm
* 
cfm
 = (C§WifiSmePowîC⁄figSëCfm*)
msg
;

781 i‡(
¥iv
 =
NULL
) {

782 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeSmeConfigSetCfmSend: Invalid ospriv.\n");

786 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

787 
	}
}

789 
	$C§WifiSmeReguœt‹yDomaöInfoGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

791 
	}
}

793 
	$C§WifiSmeRﬂmögC⁄figGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

795 
	}
}

797 
	$C§WifiSmeMedüSètusIndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

799 #ifde‡
CSR_SUPPORT_WEXT


800 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

801 
C§WifiSmeMedüSètusInd
* 
öd
 = (C§WifiSmeMedüSètusInd*)
msg
;

803 i‡(
¥iv
->
smïriv
 =
NULL
) {

804 
	`unifi_îr‹
(
¥iv
, "CsrWifiSmeMediaStatusIndSend: invalid smepriv\n");

808 i‡(
öd
->
medüSètus
 =
CSR_WIFI_SME_MEDIA_STATUS_CONNECTED
) {

813 
	`wext_£nd_assoc_evít
(
¥iv
,

814 (*)
öd
->
c⁄√˘i⁄Info
.
bssid
.
a
,

815 (*)
öd
->
c⁄√˘i⁄Info
.
assocReqInfoEÀmíts
,

816 
öd
->
c⁄√˘i⁄Info
.
assocReqInfoEÀmítsLígth
,

817 (*)
öd
->
c⁄√˘i⁄Info
.
assocR•InfoEÀmíts
,

818 
öd
->
c⁄√˘i⁄Info
.
assocR•InfoEÀmítsLígth
,

819 (*)
öd
->
c⁄√˘i⁄Info
.
assocSˇnInfoEÀmíts
,

820 
öd
->
c⁄√˘i⁄Info
.
assocSˇnInfoEÀmítsLígth
);

822 
	`unifi_åa˚
(
¥iv
, 
UDBG2
,

824 
öd
->
c⁄√˘i⁄Info
.
bssid
.
a
[0],

825 
öd
->
c⁄√˘i⁄Info
.
bssid
.
a
[1],

826 
öd
->
c⁄√˘i⁄Info
.
bssid
.
a
[2],

827 
öd
->
c⁄√˘i⁄Info
.
bssid
.
a
[3],

828 
öd
->
c⁄√˘i⁄Info
.
bssid
.
a
[4],

829 
öd
->
c⁄√˘i⁄Info
.
bssid
.
a
[5]);

831 
	`sme_mgt_∑ckë_fûãr_£t
(
¥iv
);

838 
	`wext_£nd_dißssoc_evít
(
¥iv
);

841 
	}
}

843 
	$C§WifiSmeRﬂmögC⁄figSëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

845 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

846 
C§WifiSmeRﬂmögC⁄figSëCfm
* 
cfm
 = (C§WifiSmeRﬂmögC⁄figSëCfm*)
msg
;

848 i‡(
¥iv
 =
NULL
) {

849 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeRoamingConfigSetCfmSend: Invalid ospriv.\n");

853 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

854 
	}
}

856 
	$C§WifiSmeSˇnC⁄figGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

858 
	}
}

860 
	$C§WifiSmeSˇnC⁄figSëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

862 #ifde‡
CSR_SUPPORT_WEXT


863 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

864 
C§WifiSmeSˇnC⁄figSëCfm
* 
cfm
 = (C§WifiSmeSˇnC⁄figSëCfm*)
msg
;

866 i‡(
¥iv
 =
NULL
) {

867 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeSmeConfigSetCfmSend: Invalid ospriv.\n");

871 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

873 
	}
}

875 
	$C§WifiSmeSèti⁄MacAddªssGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

877 
	}
}

879 
	$C§WifiSmeSmeComm⁄C⁄figGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

881 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

882 
C§WifiSmeSmeComm⁄C⁄figGëCfm
* 
cfm
 = (C§WifiSmeSmeComm⁄C⁄figGëCfm*)
msg
;

884 i‡(
¥iv
 =
NULL
) {

885 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeSmeCommonConfigGetCfmSend: Invalid ospriv.\n");

889 
¥iv
->
sme_ª∂y
.
devi˚C⁄fig
 = 
cfm
->deviceConfig;

890 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

891 
	}
}

893 
	$C§WifiSmeSmeSèC⁄figGëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

895 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

896 
C§WifiSmeSmeSèC⁄figGëCfm
* 
cfm
 = (C§WifiSmeSmeSèC⁄figGëCfm*)
msg
;

898 i‡(
¥iv
 =
NULL
) {

899 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeSmeStaConfigGetCfmSend: Invalid ospriv.\n");

903 
¥iv
->
sme_ª∂y
.
°aC⁄fig
 = 
cfm
->
smeC⁄fig
;

904 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

905 
	}
}

907 
	$C§WifiSmeSmeComm⁄C⁄figSëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

909 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

910 
C§WifiSmeSmeComm⁄C⁄figSëCfm
* 
cfm
 = (C§WifiSmeSmeComm⁄C⁄figSëCfm*)
msg
;

912 i‡(
¥iv
 =
NULL
) {

913 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeSmeCommonConfigGetCfmSend: Invalid ospriv.\n");

917 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

918 
	}
}

920 
	$C§WifiSmeSmeSèC⁄figSëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

922 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

923 
C§WifiSmeSmeSèC⁄figSëCfm
* 
cfm
 = (C§WifiSmeSmeSèC⁄figSëCfm*)
msg
;

925 i‡(
¥iv
 =
NULL
) {

926 
	`unifi_îr‹
(
NULL
, "CsrWifiSmeSmeStaConfigGetCfmSend: Invalid ospriv.\n");

930 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

931 
	}
}

933 
	$C§WifiSmeGëI¡îÁ˚C≠abûôyCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

935 
	}
}

937 
	$C§WifiSmeEº‹IndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

939 
	}
}

941 
	$C§WifiSmeInfoIndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

943 
	}
}

945 
	$C§WifiSmeC‹eDumpIndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

947 
	}
}

948 
	$C§WifiSmeAmpSètusCh™geIndH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

950 
	}
}

952 
	$C§WifiSmeA˘iv©eCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

954 
	}
}

955 
	$C§WifiSmeDó˘iv©eCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

957 
	}
}

959 #ifde‡
CSR_SUPPORT_WEXT


960 #ifde‡
CSR_SUPPORT_WEXT_AP


961 
	$C§WifiNmeApSèπCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

963 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

964 
C§WifiNmeApSèπCfm
* 
cfm
 = (C§WifiNmeApSèπCfm*)
msg
;

966 i‡(
¥iv
 =
NULL
) {

967 
	`unifi_îr‹
(
NULL
, "CsrWifiNmeApStartCfmSend: Invalid ospriv.\n");

971 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

972 
	}
}

974 
	$C§WifiNmeApSt›CfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

976 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

977 
C§WifiNmeApSt›Cfm
* 
cfm
 = (C§WifiNmeApSt›Cfm*)
msg
;

979 i‡(
¥iv
 =
NULL
) {

980 
	`unifi_îr‹
(
NULL
, "CsrWifiNmeApStopCfmSend: Invalid ospriv.\n");

984 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

985 
	}
}

987 
	$C§WifiNmeApC⁄figSëCfmH™dÀr
(* 
drv¥iv
, 
C§WifiFsmEvít
* 
msg
)

989 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
drv¥iv
;

990 
C§WifiNmeApC⁄figSëCfm
* 
cfm
 = (C§WifiNmeApC⁄figSëCfm*)
msg
;

992 i‡(
¥iv
 =
NULL
) {

993 
	`unifi_îr‹
(
NULL
, "CsrWifiNmeApConfigSetCfmSend: Invalid ospriv.\n");

996 
	`sme_com∂ëe_ªque°
(
¥iv
, 
cfm
->
°©us
);

997 
	}
}

	@sme_native/mlme.c

15 
	~"c§_wifi_hù_unifi.h
"

16 
	~"unifi_¥iv.h
"

20 
	#SCAN_STARTUP_TIME
 300

	)

55 
	$unifi_mlme_waô_f‹_ª∂y
(
unifi_¥iv_t
 *
¥iv
, 
ul_˛õ¡_t
 *
p˛i
, 
sig_ª∂y_id
, 
timeout
)

57 
ªåõs
 = 0;

58 
r
;

59 
t
 = 
timeout
;

60 
£¡_£q_no
;

63 
t
 = 
	`m£cs_to_jiffõs
(t);

67 
r
 = 
	`waô_evít_öãºu±ibÀ_timeout
(
p˛i
->
udi_wq
,

68 (
p˛i
->
wake_up_wq_id
Ë|| (
¥iv
->
io_ab‹ãd
 == 1),

69 
t
);

71 i‡(
¥iv
->
io_ab‹ãd
) {

72 
	`unifi_îr‹
(
¥iv
, "MLME operationáborted\n");

73  -
EIO
;

81 i‡((
r
 =0Ë&& (
p˛i
->
wake_up_wq_id
 == 0)) {

82 
	`unifi_îr‹
(
¥iv
, "mlme_wait:Åimed-out waiting for 0x%.4X,áfter %lu msec.\n",

83 
sig_ª∂y_id
, 
	`jiffõs_to_m£cs
(
t
));

84 
p˛i
->
wake_up_wq_id
 = 0;

85  -
ETIMEDOUT
;

86 } i‡(
r
 =-
ERESTARTSYS
) {

87 
	`unifi_îr‹
(
¥iv
, "mlme_waô: waôög f‹ 0x%.4X wa†ab‹ãd.\n", 
sig_ª∂y_id
);

88 
p˛i
->
wake_up_wq_id
 = 0;

89  -
EINTR
;

92 i‡(
p˛i
->
£q_no
 != 0) {

93 
£¡_£q_no
 = 
p˛i
->
£q_no
 - 1;

95 
£¡_£q_no
 = 0x0F;

98 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "Received 0x%.4X, seq: (r:%d, s:%d)\n",

99 
p˛i
->
wake_up_wq_id
,

100 
p˛i
->
wake_£q_no
, 
£¡_£q_no
);

103 i‡(
p˛i
->
wake_£q_no
 =
£¡_£q_no
) {

105 i‡(
sig_ª∂y_id
 =
p˛i
->
wake_up_wq_id
) {

110 
	`unifi_îr‹
(
¥iv
, "mlme_wait: mismatching signal id (0x%.4X -Éxp 0x%.4X) (seq %d)\n",

111 
p˛i
->
wake_up_wq_id
,

112 
sig_ª∂y_id
,

113 
p˛i
->
wake_£q_no
);

114 
p˛i
->
wake_up_wq_id
 = 0;

115  -
EIO
;

119 
p˛i
->
wake_up_wq_id
 = 0;

121 
ªåõs
 ++;

122 i‡(
ªåõs
 >= 3) {

123 
	`unifi_îr‹
(
¥iv
, "mlme_wait: confirm waitÑetriesÉxhausted (0x%.4X -Éxp 0x%.4X)\n",

124 
p˛i
->
wake_up_wq_id
,

125 
sig_ª∂y_id
);

126 
p˛i
->
wake_up_wq_id
 = 0;

127  -
EIO
;

132 
p˛i
->
wake_up_wq_id
 = 0;

135 
	}
}

156 
	$unifi_mlme_blockög_ªque°
(
unifi_¥iv_t
 *
¥iv
, 
ul_˛õ¡_t
 *
p˛i
,

157 
CSR_SIGNAL
 *
sig
, 
bulk_d©a_∑øm_t
 *
d©a_±rs
,

158 
timeout
)

160 
r
;

162 
	`func_íãr
();

164 i‡(
sig
->
Sig«lPrimôiveHódî
.
Sig«lId
 == 0) {

165 
	`unifi_îr‹
(
¥iv
, "unifi_mlme_blocking_request: Invalid Signal Id (0x%x)\n",

166 
sig
->
Sig«lPrimôiveHódî
.
Sig«lId
);

167  -
EINVAL
;

170 
	`down
(&
¥iv
->
mlme_blockög_muãx
);

172 
sig
->
Sig«lPrimôiveHódî
.
Re˚ivîPro˚ssId
 = 0;

173 
sig
->
Sig«lPrimôiveHódî
.
SídîPro˚ssId
 = 
p˛i
->
£ndî_id
 |Ö˛i->
£q_no
;

175 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "Send client=%d, S:0x%04X, sig 0x%.4X\n",

176 
p˛i
->
˛õ¡_id
,

177 
sig
->
Sig«lPrimôiveHódî
.
SídîPro˚ssId
,

178 
sig
->
Sig«lPrimôiveHódî
.
Sig«lId
);

180 
r
 = 
	`ul_£nd_sig«l_u≈acked
(
¥iv
, 
sig
, 
d©a_±rs
);

181 i‡(
r
) {

182 
	`up
(&
¥iv
->
mlme_blockög_muãx
);

183 
	`unifi_îr‹
(
¥iv
, "Error queueing MLME REQUEST signal\n");

184  
r
;

187 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "Send 0x%.4X, seq = %d\n",

188 
sig
->
Sig«lPrimôiveHódî
.
Sig«lId
, 
p˛i
->
£q_no
);

194 
p˛i
->
£q_no
++;

195 i‡(
p˛i
->
£q_no
 > 0x0F) {

196 
p˛i
->
£q_no
 = 0;

199 
r
 = 
	`unifi_mlme_waô_f‹_ª∂y
(
¥iv
, 
p˛i
, (
sig
->
Sig«lPrimôiveHódî
.
Sig«lId
 + 1), 
timeout
);

200 
	`up
(&
¥iv
->
mlme_blockög_muãx
);

202 i‡(
r
) {

203 
	`unifi_îr‹
(
¥iv
, "Error waiting for MLME CONFIRM signal\n");

204  
r
;

207 
	`func_exô
();

209 
	}
}

227 
	$unifi_mlme_c›y_ª∂y_™d_wakeup_˛õ¡
(
ul_˛õ¡_t
 *
p˛i
,

228 
CSR_SIGNAL
 *
sig«l
, 
sig«l_Àn
,

229 c⁄° 
bulk_d©a_∑øm_t
 *
bulkd©a
)

231 
i
;

234 
	`mem˝y
(
p˛i
->
ª∂y_sig«l
, 
sig«l
, 
sig«l_Àn
);

237 
p˛i
->
wake_£q_no
 =Ö˛i->
ª∂y_sig«l
->
Sig«lPrimôiveHódî
.
Re˚ivîPro˚ssId
 & 0x0F;

240 
i
 = 0; i < 
UNIFI_MAX_DATA_REFERENCES
; i++) {

241 i‡(
bulkd©a
->
d
[
i
].
d©a_Àngth
 > 0) {

242 i‡(
bulkd©a
->
d
[
i
].
os_d©a_±r
) {

243 
	`mem˝y
(
p˛i
->
ª∂y_bulkd©a
[
i
]->
±r
, 
bulkd©a
->
d
[i].
os_d©a_±r
, bulkd©a->d[i].
d©a_Àngth
);

244 
p˛i
->
ª∂y_bulkd©a
[
i
]->
Àngth
 = 
bulkd©a
->
d
[i].
d©a_Àngth
;

246 
p˛i
->
ª∂y_bulkd©a
[
i
]->
Àngth
 = 0;

252 
p˛i
->
wake_up_wq_id
 =Ö˛i->
ª∂y_sig«l
->
Sig«lPrimôiveHódî
.
Sig«lId
;

253 
	`wake_up_öãºu±ibÀ
(&
p˛i
->
udi_wq
);

255 
	}
}

273 
	$uf_ab‹t_mlme
(
unifi_¥iv_t
 *
¥iv
)

275 
ul_˛õ¡_t
 *
ul_˛i
;

278 
¥iv
->
io_ab‹ãd
 = 1;

280 
ul_˛i
 = 
¥iv
->
√tdev_˛õ¡
;

281 i‡(
ul_˛i
) {

282 
	`wake_up_öãºu±ibÀ
(&
ul_˛i
->
udi_wq
);

285 
ul_˛i
 = 
¥iv
->
wext_˛õ¡
;

286 i‡(
ul_˛i
) {

287 
	`wake_up_öãºu±ibÀ
(&
ul_˛i
->
udi_wq
);

291 
	}
}

303 
	smlme_code
 {

304 c⁄° *
	m«me
;

305 
	mid
;

308 c⁄° 
mlme_code
 
	gResu…_codes
[] = {

338 { 
NULL
, -1 }

341 c⁄° 
mlme_code
 
	gRós⁄_codes
[] = {

378 { 
NULL
, -1 }

383 
	$lookup_somëhög
(c⁄° 
mlme_code
 *
n
, 
id
)

385 ; 
n
->
«me
;Ç++) {

386 i‡(
n
->
id
 == id) {

387  
n
->
«me
;

392  
NULL
;

393 
	}
}

397 
	$lookup_ªsu…_code
(
ªsu…
)

399 
ÁŒback
[16];

400 c⁄° *
°r
;

402 
°r
 = 
	`lookup_somëhög
(
Resu…_codes
, 
ªsu…
);

404 i‡(
°r
 =
NULL
) {

405 
	`¢¥ötf
(
ÁŒback
, 16, "%d", 
ªsu…
);

406 
°r
 = 
ÁŒback
;

409  
°r
;

410 
	}
}

427 
	$lookup_ªas⁄_code
(
ªas⁄
)

429 
ÁŒback
[16];

430 c⁄° *
°r
;

432 
°r
 = 
	`lookup_somëhög
(
Rós⁄_codes
, 
ªas⁄
);

434 i‡(
°r
 =
NULL
) {

435 
	`¢¥ötf
(
ÁŒback
, 16, "%d", 
ªas⁄
);

436 
°r
 = 
ÁŒback
;

439  
°r
;

440 
	}
}

	@sme_native/sme_native.c

14 
	~<löux/√tdevi˚.h
>

16 
	~"unifi_¥iv.h
"

17 
	~"c§_wifi_hù_unifi.h
"

18 
	~"c§_wifi_hù_c⁄vîsi⁄s.h
"

20 c⁄° 
	gwûdˇrd_addªss
[
ETH_ALEN
] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

23 
	$uf_sme_öô
(
unifi_¥iv_t
 *
¥iv
)

25 
	`func_íãr
();

27 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 37)

28 
	`£ma_öô
(&
¥iv
->
mlme_blockög_muãx
, 1);

30 
	`öô_MUTEX
(&
¥iv
->
mlme_blockög_muãx
);

33 #ifde‡
CSR_SUPPORT_WEXT


35 
r
 = 
	`uf_öô_wext_öãrÁ˚
(
¥iv
);

36 i‡(
r
 != 0) {

37 
	`func_exô
();

38  
r
;

45 
	`func_exô
();

47 
	}
}

51 
	$uf_sme_deöô
(
unifi_¥iv_t
 *
¥iv
)

54 
	`func_íãr
();

60 
	`Êush_w‹kqueue
(
¥iv
->
unifi_w‹kqueue
);

62 #ifde‡
CSR_SUPPORT_WEXT


63 
	`uf_deöô_wext_öãrÁ˚
(
¥iv
);

67 
	`func_exô
();

68 
	}
}

71 
	$sme_mgt_wifi_⁄
(
unifi_¥iv_t
 *
¥iv
)

73 
r
,
i
;

74 
C§I¡32
 
c§Resu…
;

76 i‡(
¥iv
 =
NULL
) {

77  -
EINVAL
;

80 
i
=0; i<
CSR_WIFI_NUM_INTERFACES
; i++) {

81 
¥iv
->
öãrÁ˚Priv
[
i
]->
öãrÁ˚Mode
 = 0;

87 
¥iv
->
öãrÁ˚Priv
[0]->
öãrÁ˚Mode
 = 
CSR_WIFI_ROUTER_CTRL_MODE_STA
;

89 
r
 = 
	`uf_ªque°_fúmw¨e_fûes
(
¥iv
, 
UNIFI_FW_STA
);

90 i‡(
r
) {

91 
	`unifi_îr‹
(
¥iv
, "sme_mgt_wifi_on: FailedÅo get f/w\n");

92  
r
;

101 
¥iv
->
bh_thªad
.
block_thªad
 = 1;

104 
	`C§SdioCœim
(
¥iv
->
sdio
);

105 
c§Resu…
 = 
	`C§SdioPowîOn
(
¥iv
->
sdio
);

106 
	`C§SdioRñó£
(
¥iv
->
sdio
);

107 if(
c§Resu…
 !
CSR_RESULT_SUCCESS
 && c§Resu… !
CSR_SDIO_RESULT_NOT_RESET
) {

108  -
EIO
;

111 i‡(
c§Resu…
 =
CSR_RESULT_SUCCESS
) {

113 
r
 = 
	`uf_öô_hw
(
¥iv
);

114 i‡(
r
) {

115  
r
;

120 
¥iv
->
bh_thªad
.
block_thªad
 = 0;

127 
c§Resu…
 = 
	`unifi_c⁄figuª_low_powî_mode
(
¥iv
->
ˇrd
,

128 
UNIFI_LOW_POWER_DISABLED
,

129 
UNIFI_PERIODIC_WAKE_HOST_DISABLED
);

130 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

131 
	`unifi_w¨nög
(
¥iv
,

137 
	`C§SdioCœim
(
¥iv
->
sdio
);

138 
r
 = 
	`uf_öô_bh
(
¥iv
);

139 i‡(
r
) {

140 
	`C§SdioPowîOff
(
¥iv
->
sdio
);

141 
	`C§SdioRñó£
(
¥iv
->
sdio
);

142  
r
;

144 
	`C§SdioRñó£
(
¥iv
->
sdio
);

146 
¥iv
->
öô_¥ogªss
 = 
UNIFI_INIT_FW_DOWNLOADED
;

149 
	}
}

152 
	$sme_sys_su•íd
(
unifi_¥iv_t
 *
¥iv
)

154 c⁄° 
öãrÁ˚Num
 = 0;

155 
C§Resu…
 
c§Resu…
;

158 
	`uf_ab‹t_mlme
(
¥iv
);

161 
¥iv
->
io_ab‹ãd
 = 0;

164 
	`unifi_ª£t_°©e
(
¥iv
,Öriv->
√tdev
[
öãrÁ˚Num
]->
dev_addr
, 0);

167 
	`√tif_ˇºõr_off
(
¥iv
->
√tdev
[
öãrÁ˚Num
]);

170 
	`C§SdioCœim
(
¥iv
->
sdio
);

171 
c§Resu…
 = 
	`unifi_f‹˚_low_powî_mode
(
¥iv
->
ˇrd
);

172 
	`C§SdioRñó£
(
¥iv
->
sdio
);

175 
	}
}

179 
	$sme_sys_ªsume
(
unifi_¥iv_t
 *
¥iv
)

181 #ifde‡
CSR_SUPPORT_WEXT


183 
	`mem£t
(
¥iv
->
wext_c⁄f
.
cuºít_ssid
, 0, 
UNIFI_MAX_SSID_LEN
);

184 
	`mem£t
((*)
¥iv
->
wext_c⁄f
.
cuºít_bssid
, 0, 
ETH_ALEN
);

185 
¥iv
->
wext_c⁄f
.
ˇ∑bûôy
 = 0;

186 
	`wext_£nd_dißssoc_evít
(
¥iv
);

189 
	}
}

214 
	$sme_«tive_log_evít
(
ul_˛õ¡_t
 *
p˛i
,

215 c⁄° 
u8
 *
sig_∑cked
, 
sig_Àn
,

216 c⁄° 
bulk_d©a_∑øm_t
 *
bulkd©a
,

217 
dú
)

219 
unifi_¥iv_t
 *
¥iv
;

220 
udi_log_t
 *
log±r
;

221 
u8
 *
p
;

222 
i
, 
r
;

223 
sig«l_Àn
;

224 
tŸÆ_Àn
;

225 
udi_msg_t
 *
msg±r
;

226 
CSR_SIGNAL
 
sig«l
;

227 
ul_˛õ¡_t
 *
˛õ¡
 = 
p˛i
;

229 
	`func_íãr
();

231 i‡(
˛õ¡
 =
NULL
) {

232 
	`unifi_îr‹
(
NULL
, "sme_native_log_event: client hasÉxited\n");

236 
¥iv
 = 
	`uf_föd_ö°™˚
(
˛õ¡
->
ö°™˚
);

237 i‡(!
¥iv
) {

238 
	`unifi_îr‹
(
¥iv
, "invalidÖriv\n");

243 i‡((
sig_∑cked
 =
NULL
Ë|| (
sig_Àn
 <= 0)) {

248 
r
 = 
	`ªad_u≈ack_sig«l
(
sig_∑cked
, &
sig«l
);

249 i‡(
r
 == 0) {

250 
sig«l_Àn
 = 
	`SigGëSize
(&
sig«l
);

252 
C§Uöt16
 
ª˚ivî_id
 = 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
((
sig_∑cked
) + (CsrUint16)) & 0xFF00;

255 i‡(
sig_Àn
 == 1) {

256 
	`unifi_åa˚
(
¥iv
, 
UDBG5
,

258 *
sig_∑cked
);

260 *(
u8
*)&
sig«l
 = *
sig_∑cked
;

261 
sig«l_Àn
 = 
sig_Àn
;

262 } i‡(
ª˚ivî_id
 == 0) {

268 
	`unifi_åa˚
(
¥iv
, 
UDBG5
,

270 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
(
sig_∑cked
));

272 *(
u8
*)&
sig«l
 = *
sig_∑cked
;

273 
sig«l_Àn
 = 
sig_Àn
;

275 
	`unifi_îr‹
(
¥iv
,

277 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
(
sig_∑cked
));

282 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "sme_native_log_event: signal 0x%.4X for %d\n",

283 
sig«l
.
Sig«lPrimôiveHódî
.
Sig«lId
,

284 
˛õ¡
->
˛õ¡_id
);

286 
tŸÆ_Àn
 = 
sig«l_Àn
;

288 
i
 = 0; i < 
UNIFI_MAX_DATA_REFERENCES
; i++) {

289 
tŸÆ_Àn
 +
bulkd©a
->
d
[
i
].
d©a_Àngth
;

293 
log±r
 = (
udi_log_t
 *)
	`kmÆloc
((udi_log_tË+ 
tŸÆ_Àn
, 
GFP_KERNEL
);

295 i‡(
log±r
 =
NULL
) {

296 
	`unifi_îr‹
(
¥iv
,

298 (
udi_log_t
Ë+ 
tŸÆ_Àn
);

303 
	`INIT_LIST_HEAD
(&
log±r
->
q
);

304 
msg±r
 = &
log±r
->
msg
;

305 
msg±r
->
Àngth
 = (
udi_msg_t
Ë+ 
tŸÆ_Àn
;

306 
msg±r
->
time°amp
 = 
	`jiffõs_to_m£cs
(
jiffõs
);

307 
msg±r
->
dúe˘i⁄
 = 
dú
;

308 
msg±r
->
sig«l_Àngth
 = 
sig«l_Àn
;

311 
p
 = (
u8
 *)(
msg±r
 + 1);

312 
	`mem˝y
(
p
, &
sig«l
, 
sig«l_Àn
);

313 
p
 +
sig«l_Àn
;

316 
i
 = 0; i < 
UNIFI_MAX_DATA_REFERENCES
; i++) {

317 
Àn
 = 
bulkd©a
->
d
[
i
].
d©a_Àngth
;

323 i‡(
Àn
 > 0) {

324 i‡(
bulkd©a
->
d
[
i
].
os_d©a_±r
) {

325 
	`mem˝y
(
p
, 
bulkd©a
->
d
[
i
].
os_d©a_±r
, 
Àn
);

327 
	`mem£t
(
p
, 0, 
Àn
);

329 
p
 +
Àn
;

334 
	`down
(&
˛õ¡
->
udi_£m
);

335 
	`li°_add_èû
(&
log±r
->
q
, &
˛õ¡
->
udi_log
);

336 
	`up
(&
˛õ¡
->
udi_£m
);

339 
	`wake_up_öãºu±ibÀ
(&
˛õ¡
->
udi_wq
);

341 
	`func_exô
();

343 
	}
}

367 
	$unifi_è_ödiˇã_¥Ÿocﬁ
(*
o•riv
,

368 
C§WifiRouãrCålTøfficPackëTy≥
 
∑ckë_ty≥
,

369 
C§WifiRouãrCålPrŸocﬁDúe˘i⁄
 
dúe˘i⁄
,

370 c⁄° 
C§WifiMacAddªss
 *
§c_addr
)

373 
	}
}

390 
	$unifi_è_ödiˇã_ßm∂ög
(*
o•riv
, 
C§WifiRouãrCålTøfficSèts
 *
°©s
)

393 
	}
}

397 
	$unifi_è_ödiˇã_l4°©s
(*
o•riv
,

398 
C§Uöt32
 
rxT˝Throughput
,

399 
C§Uöt32
 
txT˝Throughput
,

400 
C§Uöt32
 
rxUdpThroughput
,

401 
C§Uöt32
 
txUdpThroughput
)

404 
	}
}

426 
	$uf_«tive_¥o˚ss_udi_sig«l
(
ul_˛õ¡_t
 *
p˛i
,

427 c⁄° 
u8
 *
∑cked_sig«l
, 
∑cked_sig«l_Àn
,

428 c⁄° 
bulk_d©a_∑øm_t
 *
bulkd©a
, 
dú
)

431 
	}
}

458 
	$sme_«tive_mlme_evít_h™dÀr
(
ul_˛õ¡_t
 *
p˛i
,

459 c⁄° 
u8
 *
sig_∑cked
, 
sig_Àn
,

460 c⁄° 
bulk_d©a_∑øm_t
 *
bulkd©a
,

461 
dú
)

463 
CSR_SIGNAL
 
sig«l
;

464 
sig«l_Àn
;

465 
unifi_¥iv_t
 *
¥iv
 = 
	`uf_föd_ö°™˚
(
p˛i
->
ö°™˚
);

466 
id
, 
r
;

468 
	`func_íãr
();

471 i‡((
sig_∑cked
 =
NULL
Ë|| (
sig_Àn
 <= 0)) {

476 
r
 = 
	`ªad_u≈ack_sig«l
(
sig_∑cked
, &
sig«l
);

477 i‡(
r
 == 0) {

478 
sig«l_Àn
 = 
	`SigGëSize
(&
sig«l
);

480 
	`unifi_îr‹
(
¥iv
,

482 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
(
sig_∑cked
));

486 
id
 = 
sig«l
.
Sig«lPrimôiveHódî
.
Sig«lId
;

487 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "wexà- Pro˚s†sig«»0x%.4X\n", 
id
);

492 
id
) {

497 
CSR_MA_PACKET_CONFIRM_ID
:

498 
CSR_MLME_RESET_CONFIRM_ID
:

499 
CSR_MLME_GET_CONFIRM_ID
:

500 
CSR_MLME_SET_CONFIRM_ID
:

501 
CSR_MLME_GET_NEXT_CONFIRM_ID
:

502 
CSR_MLME_POWERMGT_CONFIRM_ID
:

503 
CSR_MLME_SCAN_CONFIRM_ID
:

504 
CSR_MLME_HL_SYNC_CONFIRM_ID
:

505 
CSR_MLME_MEASURE_CONFIRM_ID
:

506 
CSR_MLME_SETKEYS_CONFIRM_ID
:

507 
CSR_MLME_DELETEKEYS_CONFIRM_ID
:

508 
CSR_MLME_HL_SYNC_CANCEL_CONFIRM_ID
:

509 
CSR_MLME_ADD_PERIODIC_CONFIRM_ID
:

510 
CSR_MLME_DEL_PERIODIC_CONFIRM_ID
:

511 
CSR_MLME_ADD_AUTONOMOUS_SCAN_CONFIRM_ID
:

512 
CSR_MLME_DEL_AUTONOMOUS_SCAN_CONFIRM_ID
:

513 
CSR_MLME_SET_PACKET_FILTER_CONFIRM_ID
:

514 
CSR_MLME_STOP_MEASURE_CONFIRM_ID
:

515 
CSR_MLME_PAUSE_AUTONOMOUS_SCAN_CONFIRM_ID
:

516 
CSR_MLME_ADD_TRIGGERED_GET_CONFIRM_ID
:

517 
CSR_MLME_DEL_TRIGGERED_GET_CONFIRM_ID
:

518 
CSR_MLME_ADD_BLACKOUT_CONFIRM_ID
:

519 
CSR_MLME_DEL_BLACKOUT_CONFIRM_ID
:

520 
CSR_MLME_ADD_RX_TRIGGER_CONFIRM_ID
:

521 
CSR_MLME_DEL_RX_TRIGGER_CONFIRM_ID
:

522 
CSR_MLME_CONNECT_STATUS_CONFIRM_ID
:

523 
CSR_MLME_MODIFY_BSS_PARAMETER_CONFIRM_ID
:

524 
CSR_MLME_ADD_TEMPLATE_CONFIRM_ID
:

525 
CSR_MLME_CONFIG_QUEUE_CONFIRM_ID
:

526 
CSR_MLME_ADD_TSPEC_CONFIRM_ID
:

527 
CSR_MLME_DEL_TSPEC_CONFIRM_ID
:

528 
CSR_MLME_START_AGGREGATION_CONFIRM_ID
:

529 
CSR_MLME_STOP_AGGREGATION_CONFIRM_ID
:

530 
CSR_MLME_SM_START_CONFIRM_ID
:

531 
CSR_MLME_LEAVE_CONFIRM_ID
:

532 
CSR_MLME_SET_TIM_CONFIRM_ID
:

533 
CSR_MLME_GET_KEY_SEQUENCE_CONFIRM_ID
:

534 
CSR_MLME_SET_CHANNEL_CONFIRM_ID
:

535 
CSR_MLME_ADD_MULTICAST_ADDRESS_CONFIRM_ID
:

536 
CSR_DEBUG_GENERIC_CONFIRM_ID
:

537 
	`unifi_mlme_c›y_ª∂y_™d_wakeup_˛õ¡
(
p˛i
, &
sig«l
, 
sig«l_Àn
, 
bulkd©a
);

540 
CSR_MLME_CONNECTED_INDICATION_ID
:

542 
	`unifi_öfo
(
¥iv
, "CSR_MLME_CONNECTED_INDICATION_ID ignored\n");

549 
	`func_exô
();

550 
	}
}

576 
	$unifi_ª£t_°©e
(
unifi_¥iv_t
 *
¥iv
, *
maˇddr
,

577 
£t_deÁu…_mib
)

579 
r
 = 0;

581 
	`func_íãr
();

583 #ifde‡
CSR_SUPPORT_WEXT


585 
¥iv
->
wext_c⁄f
.
Êag_assocüãd
 = 0;

588 
	`func_exô
();

589  
r
;

590 
	}
}

	@sme_native/unifi_native.h

17 #i‚de‡
__LINUX_UNIFI_NATIVE_H__


18 
	#__LINUX_UNIFI_NATIVE_H__
 1

	)

20 
	~<löux/kî√l.h
>

21 
	~<löux/if_¨p.h
>

28 
	ssˇn_öfo
 {

32 *
	möfo_ñems
;

33 
	möfo_ñem_Àngth
;

35 } 
	tsˇn_öfo_t
;

38 
	#IE_VECTOR_MAXLEN
 1024

	)

40 #ifde‡
CSR_SUPPORT_WEXT


44 
	swext_c⁄fig
 {

47 
	mch™√l
;

50 
	mmode
;

53 
	mˇ∑bûôy
;

56 
	mbóc⁄_≥riod
;

62 
	massoc_li°í_öãrvÆ
;

65 
	mdesúed_ssid
[
UNIFI_MAX_SSID_LEN
];

66 
	mpowî_mode
;

68 
	mwakeup_f‹_dtims
;

71 
	mwï_key_id
;

73 
wï_key_t
 
	mwï_keys
[
NUM_WEPKEYS
];

76 
	m¥ivacy
;

78 
u32
 
	mjoö_Áûuª_timeout
;

79 
u32
 
	mauth_Áûuª_timeout
;

80 
u32
 
	massoc_Áûuª_timeout
;

82 
	mgíîic_õ
[
IE_VECTOR_MAXLEN
];

83 
	mgíîic_õ_Àn
;

85 
iw_°©i°ics
 
	mwúñess_°©s
;

89 
	mcuºít_ssid
[
UNIFI_MAX_SSID_LEN
];

91 
	mcuºít_bssid
[6];

98 
	mw∑_vîsi⁄
;

108 
	m∑úwi£_cùhî_u£d
;

109 
	mgroup_cùhî_u£d
;

111 
	m‰ag_thªsh
;

112 
	mπs_thªsh
;

115 
	mwmm_bss_u≠sd_mask
;

117 
	mbss_wmm_ˇ∑bûôõs
;

120 
	mdißbÀ_joö_⁄_ssid_£t
;

123 
	#UNIFI_MAX_SCANS
 32

	)

124 
sˇn_öfo_t
 
	msˇn_li°
[
UNIFI_MAX_SCANS
];

125 
	mnum_sˇn_öfo
;

128 
C§WifiRouãrP‹tA˘i⁄
 
	mblock_c⁄åﬁÀd_p‹t
;

131 
	mÊag_assocüãd
 : 1;

153 
unifi_˛ór_sˇn_èbÀ
(
unifi_¥iv_t
 *
¥iv
);

154 
sˇn_öfo_t
 *
unifi_gë_sˇn_ªp‹t
(
unifi_¥iv_t
 *
¥iv
, 
ödex
);

160 c⁄° *
unifi_föd_öfo_ñemít
(
id
,

161 c⁄° *
öfo
,

162 
Àn
);

163 
unifi_add_öfo_ñemít
(*
öfo
,

164 
õ_id
,

165 c⁄° *
õ_d©a
,

166 
õ_Àn
);

172 
unifi_autojoö
(
unifi_¥iv_t
 *
¥iv
, c⁄° *
ssid
);

177 
unifi_£t_powîmode
(
unifi_¥iv_t
 *
¥iv
);

178 
unifi_joö_≠
(
unifi_¥iv_t
 *
¥iv
, 
sˇn_öfo_t
 *
si
);

179 
unifi_joö_bss
(
unifi_¥iv_t
 *
¥iv
, *
maˇddr
);

180 
unifi_Àave
(
unifi_¥iv_t
 *
¥iv
);

181 
unifi_gë_wmm_bss_ˇ∑bûôõs
(
unifi_¥iv_t
 *
¥iv
,

182 *
õ_ve˘‹
,

183 
õ_Àn
, *
≠_ˇ∑bûôõs
);

188 
uf_öô_wext_öãrÁ˚
(
unifi_¥iv_t
 *
¥iv
);

189 
uf_deöô_wext_öãrÁ˚
(
unifi_¥iv_t
 *
¥iv
);

194 
unifi_ª£t_°©e
(
unifi_¥iv_t
 *
¥iv
, *
maˇddr
, 
£t_deÁu…_mib
);

201 
uf_ab‹t_mlme
(
unifi_¥iv_t
 *
¥iv
);

203 
unifi_mlme_blockög_ªque°
(
unifi_¥iv_t
 *
¥iv
, 
ul_˛õ¡_t
 *
p˛i
,

204 
CSR_SIGNAL
 *
sig
, 
bulk_d©a_∑øm_t
 *
d©a_±rs
,

205 
timeout
);

206 
unifi_mlme_c›y_ª∂y_™d_wakeup_˛õ¡
(
ul_˛õ¡_t
 *
p˛i
,

207 
CSR_SIGNAL
 *
sig«l
, 
sig«l_Àn
,

208 c⁄° 
bulk_d©a_∑øm_t
 *
bulkd©a
);

213 c⁄° *
lookup_ªas⁄_code
(
ªas⁄
);

214 c⁄° *
lookup_ªsu…_code
(
ªsu…
);

220 
uf_sme_öô
(
unifi_¥iv_t
 *
¥iv
);

221 
uf_sme_deöô
(
unifi_¥iv_t
 *
¥iv
);

222 
sme_sys_su•íd
(
unifi_¥iv_t
 *
¥iv
);

223 
sme_sys_ªsume
(
unifi_¥iv_t
 *
¥iv
);

224 
sme_mgt_wifi_⁄
(
unifi_¥iv_t
 *
¥iv
);

227 
sme_«tive_log_evít
(
ul_˛õ¡_t
 *
˛õ¡
,

228 c⁄° 
u8
 *
sig_∑cked
, 
sig_Àn
,

229 c⁄° 
bulk_d©a_∑øm_t
 *
bulkd©a
,

230 
dú
);

232 
sme_«tive_mlme_evít_h™dÀr
(
ul_˛õ¡_t
 *
p˛i
,

233 c⁄° 
u8
 *
sig_∑cked
, 
sig_Àn
,

234 c⁄° 
bulk_d©a_∑øm_t
 *
bulkd©a
,

235 
dú
);

238 
	#UF_SME_STATS_WQ_TIMEOUT
 2000

	)

239 
uf_sme_°©s_wq
(
w‹k_°ru˘
 *
w‹k
);

241 
uf_«tive_¥o˚ss_udi_sig«l
(
ul_˛õ¡_t
 *
p˛i
,

242 c⁄° 
u8
 *
∑cked_sig«l
,

243 
∑cked_sig«l_Àn
,

244 c⁄° 
bulk_d©a_∑øm_t
 *
bulkd©a
, 
dú
);

255 #ifde‡
ARPHRD_IEEE80211_RADIOTAP


256 
	#UNIFI_SNIFF_ARPHRD
 
ARPHRD_IEEE80211_RADIOTAP


	)

258 #ifde‡
ARPHRD_IEEE80211_PRISM


259 
	#UNIFI_SNIFF_ARPHRD
 
ARPHRD_IEEE80211_PRISM


	)

264 #ifde‡
UNIFI_SNIFF_ARPHRD


268 
uf_°¨t_¢iff
(
unifi_¥iv_t
 *
¥iv
);

	@sme_sys.c

17 
	~"c§_wifi_hù_unifivîsi⁄.h
"

18 
	~"unifi_¥iv.h
"

19 
	~"c§_wifi_hù_c⁄vîsi⁄s.h
"

20 #ifde‡
CSR_SUPPORT_WEXT_AP


21 
	~"sme_c§/c§_wifi_sme_£f.h
"

51 #ifde‡
CSR_SUPPORT_SME


52 
check_öa˘ivôy_timî_expúe_func
(
d©a
);

53 
uf_£nd_disc⁄√˘ed_öd_wq
(
w‹k_°ru˘
 *
w‹k
);

56 
	$£nd_auto_ma_∑ckë_c⁄fúm
(
unifi_¥iv_t
 *
¥iv
,

57 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
,

58 
li°_hód
 *
buf„ªd_‰ames_li°
)

60 
tx_buf„ªd_∑ckës_t
 *
buf„ªd_‰ame_ôem
 = 
NULL
;

61 
li°_hód
 *
li°Hód
;

62 
li°_hód
 *
∂a˚Hﬁdî
;

63 
˛õ¡_id
;

65 
CSR_SIGNAL
 
u≈acked_sig«l
;

66 
C§Uöt8
 
sigbuf
[
UNIFI_PACKED_SIGBUF_SIZE
];

67 
C§Uöt16
 
∑cked_sigÀn
;

70 
	`li°_f‹_óch_ß„
(
li°Hód
, 
∂a˚Hﬁdî
, 
buf„ªd_‰ames_li°
)

72 
buf„ªd_‰ame_ôem
 = 
	`li°_íåy
(
li°Hód
, 
tx_buf„ªd_∑ckës_t
, 
q
);

74 i‡(!
buf„ªd_‰ame_ôem
)

76 
	`unifi_îr‹
(
¥iv
, "Entry shouldÉxist, otherwise it isá (BUG)\n");

80 i‡((
öãrÁ˚Priv
->
öãrÁ˚Mode
 !
CSR_WIFI_ROUTER_CTRL_MODE_NONE
) &&

81 (
¥iv
->
wifi_⁄_°©e
 =
wifi_⁄_d⁄e
))

83 
	`unifi_w¨nög
(
¥iv
, "Send MA_PACKET_CONFIRMÅo SenderProcessId = %x for (HostTag = %x TransmissionControl = %x)\n",

84 (
buf„ªd_‰ame_ôem
->
ÀSídîPro˚ssId
),

85 
buf„ªd_‰ame_ôem
->
ho°Tag
,

86 
buf„ªd_‰ame_ôem
->
å™smissi⁄C⁄åﬁ
);

88 
˛õ¡_id
 = 
buf„ªd_‰ame_ôem
->
ÀSídîPro˚ssId
 & 0xFF00;

90 i‡(
˛õ¡_id
 =
¥iv
->
sme_˛i
->
£ndî_id
)

93 
	`mem£t
(&
u≈acked_sig«l
, 0, (unpacked_signal));

94 
u≈acked_sig«l
.
Sig«lPrimôiveHódî
.
Sig«lId
 = 
CSR_MA_PACKET_CONFIRM_ID
;

95 
u≈acked_sig«l
.
Sig«lPrimôiveHódî
.
Re˚ivîPro˚ssId
 = 
buf„ªd_‰ame_ôem
->
ÀSídîPro˚ssId
;

96 
u≈acked_sig«l
.
Sig«lPrimôiveHódî
.
SídîPro˚ssId
 = 
CSR_WIFI_ROUTER_IFACEQUEUE
;

98 
u≈acked_sig«l
.
u
.
MaPackëC⁄fúm
.
VútuÆI¡îÁ˚Idítifõr
 = 
	`uf_gë_vif_idítifõr
(
öãrÁ˚Priv
->
öãrÁ˚Mode
,

99 
öãrÁ˚Priv
->
I¡îÁ˚Tag
);

100 
u≈acked_sig«l
.
u
.
MaPackëC⁄fúm
.
Tønsmissi⁄Sètus
 = 
CSR_RESULT_FAILURE
;

101 
u≈acked_sig«l
.
u
.
MaPackëC⁄fúm
.
RëryCou¡
 = 0;

102 
u≈acked_sig«l
.
u
.
MaPackëC⁄fúm
.
R©e
 = 
buf„ªd_‰ame_ôem
->
øã
;

103 
u≈acked_sig«l
.
u
.
MaPackëC⁄fúm
.
Ho°Tag
 = 
buf„ªd_‰ame_ôem
->
ho°Tag
;

105 
	`wrôe_∑ck
(&
u≈acked_sig«l
, 
sigbuf
, &
∑cked_sigÀn
);

106 
	`unifi_w¨nög
(
¥iv
, "MA_PACKET_CONFIRM for SME (0x%x, 0x%x, 0x%x, 0x%x)\n",

107 
u≈acked_sig«l
.
Sig«lPrimôiveHódî
.
Re˚ivîPro˚ssId
,

108 
u≈acked_sig«l
.
Sig«lPrimôiveHódî
.
SídîPro˚ssId
,

109 
u≈acked_sig«l
.
u
.
MaPackëC⁄fúm
.
VútuÆI¡îÁ˚Idítifõr
,

110 
u≈acked_sig«l
.
u
.
MaPackëC⁄fúm
.
Ho°Tag
);

112 
	`C§WifiRouãrCålHùIndSíd
(
¥iv
->
CSR_WIFI_SME_IFACEQUEUE
,

113 
∑cked_sigÀn
,

114 (
C§Uöt8
 *)
sigbuf
,

115 0, 
NULL
,

116 0, 
NULL
);

118 i‡((
buf„ªd_‰ame_ôem
->
ho°Tag
 & 0x80000000))

121 
	`unifi_w¨nög
(
¥iv
, "MA_PACKET_CONFIRM for NME (0x%x, 0x%x, 0x%x, 0x%x)\n",

122 
buf„ªd_‰ame_ôem
->
ÀSídîPro˚ssId
,

123 
buf„ªd_‰ame_ôem
->
öãrÁ˚Tag
,

124 
buf„ªd_‰ame_ôem
->
å™smissi⁄C⁄åﬁ
,

125 (
buf„ªd_‰ame_ôem
->
ho°Tag
 & 0x3FFFFFFF));

127 
	`C§WifiRouãrMaPackëCfmSíd
((
buf„ªd_‰ame_ôem
->
ÀSídîPro˚ssId
 & 0xFF),

128 
buf„ªd_‰ame_ôem
->
öãrÁ˚Tag
,

129 
CSR_RESULT_FAILURE
,

130 (
buf„ªd_‰ame_ôem
->
ho°Tag
 & 0x3FFFFFFF),

131 
buf„ªd_‰ame_ôem
->
øã
);

135 
	`unifi_w¨nög
(
¥iv
, "BufferedÖacket dropped without sendingá confirm\n");

139 
	`li°_dñ
(
li°Hód
);

140 
	`k‰ì
(
buf„ªd_‰ame_ôem
);

141 
buf„ªd_‰ame_ôem
 = 
NULL
;

143 
	}
}

146 
	$C§WifiRouãrCålMedüSètusReqH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

148 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

149 
C§WifiRouãrCålMedüSètusReq
 *
ªq
 = (C§WifiRouãrCålMedüSètusReq *)
msg
;

150 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
ªq
->
öãrÁ˚Tag
];

151 
Êags
;

153 i‡(
¥iv
->
smïriv
 =
NULL
)

155 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlMediaStatusReqHandler: invalid smepriv\n");

158 i‡(
ªq
->
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
)

160 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlMediaStatusReqHandler: invalid interfaceTag\n");

163 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "C§WifiRouãrCålMedüSètusReqH™dÀr: Modê%dÑeq->medüSètu†%d\n", 
öãrÁ˚Priv
->
öãrÁ˚Mode
, 
ªq
->
medüSètus
);

164 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 !
CSR_WIFI_ROUTER_CTRL_MODE_AMP
)

166 
bulk_d©a_desc_t
 
bulk_d©a
;

168 
bulk_d©a
.
d©a_Àngth
 = 0;

170 
	`•ö_lock_úqßve
(&
¥iv
->
m4_lock
, 
Êags
);

171 i‡(
öãrÁ˚Priv
->
m4_bulk_d©a
.
d©a_Àngth
 > 0)

173 
bulk_d©a
 = 
öãrÁ˚Priv
->
m4_bulk_d©a
;

174 
öãrÁ˚Priv
->
m4_bulk_d©a
.
√t_buf_Àngth
 = 0;

175 
öãrÁ˚Priv
->
m4_bulk_d©a
.
d©a_Àngth
 = 0;

176 
öãrÁ˚Priv
->
m4_bulk_d©a
.
os_d©a_±r
 = i¡îÁ˚Priv->m4_bulk_d©a.
os_√t_buf_±r
 = 
NULL
;

178 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
m4_lock
, 
Êags
);

180 i‡(
bulk_d©a
.
d©a_Àngth
 != 0)

182 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "CsrWifiRouterCtrlMediaStatusReqHandler: free M4\n");

183 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulk_d©a
);

186 i‡((
ªq
->
medüSètus
 =
CSR_WIFI_SME_MEDIA_STATUS_CONNECTED
) &&

187 (
öãrÁ˚Priv
->
c⁄√˘ed
 !
UnifiC⁄√˘ed
))

189 
öãrÁ˚Priv
->
öãrÁ˚Mode
)

191 
CSR_WIFI_ROUTER_CTRL_MODE_AP
:

192 
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
:

193 
öãrÁ˚Priv
->
c⁄√˘ed
 = 
UnifiC⁄√˘ed
;

194 
	`√tif_ˇºõr_⁄
(
¥iv
->
√tdev
[
ªq
->
öãrÁ˚Tag
]);

195 #ifde‡
CSR_SUPPORT_WEXT


196 
	`wext_£nd_°¨ãd_evít
(
¥iv
);

198 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,

200 
	`UF_NETIF_TX_WAKE_ALL_QUEUES
(
¥iv
->
√tdev
[
ªq
->
öãrÁ˚Tag
]);

204 #ifde‡
CSR_SUPPORT_WEXT


209 i‡(
öãrÁ˚Priv
->
√tdev_ˇŒback_ªgi°îed
 && (öãrÁ˚Priv->
öãrÁ˚Mode
 !
CSR_WIFI_ROUTER_CTRL_MODE_P2PCLI
))

211 
öãrÁ˚Priv
->
waô_√tdev_ch™ge
 = 
TRUE
;

212 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,

218 
	`√tif_ˇºõr_⁄
(
¥iv
->
√tdev
[
ªq
->
öãrÁ˚Tag
]);

219 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,

230 c⁄° 
C§WifiMacAddªss
 
brﬂdˇ°_addªss
 = { { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF } };

231 
öãrÁ˚Priv
->
c⁄√˘ed
 = 
UnifiC⁄√˘ed
;

232 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,

234 
	`√tif_ˇºõr_⁄
(
¥iv
->
√tdev
[
ªq
->
öãrÁ˚Tag
]);

235 
	`UF_NETIF_TX_WAKE_ALL_QUEUES
(
¥iv
->
√tdev
[
ªq
->
öãrÁ˚Tag
]);

236 
	`uf_¥o˚ss_rx_≥ndög_queue
(
¥iv
, 
UF_UNCONTROLLED_PORT_Q
, 
brﬂdˇ°_addªss
, 1, 
öãrÁ˚Priv
->
I¡îÁ˚Tag
);

237 
	`uf_¥o˚ss_rx_≥ndög_queue
(
¥iv
, 
UF_CONTROLLED_PORT_Q
, 
brﬂdˇ°_addªss
, 1, 
öãrÁ˚Priv
->
I¡îÁ˚Tag
);

243 i‡(
ªq
->
medüSètus
 =
CSR_WIFI_SME_MEDIA_STATUS_DISCONNECTED
)

245 #ifde‡
CSR_SUPPORT_WEXT


246 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,

248 
öãrÁ˚Priv
->
waô_√tdev_ch™ge
 = 
FALSE
;

250 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,

252 
	`√tif_ˇºõr_off
(
¥iv
->
√tdev
[
ªq
->
öãrÁ˚Tag
]);

253 #ifde‡
CSR_SUPPORT_WEXT


254 
öãrÁ˚Priv
->
öãrÁ˚Mode
)

256 
CSR_WIFI_ROUTER_CTRL_MODE_AP
:

257 
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
:

258 
	`wext_£nd_°¨ãd_evít
(
¥iv
);

264 
öãrÁ˚Priv
->
c⁄√˘ed
 = 
UnifiNŸC⁄√˘ed
;

270 i‡(
ªq
->
medüSètus
 =
CSR_WIFI_SME_MEDIA_STATUS_CONNECTED
)

272 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "CsrWifiRouterCtrlMediaStatusReqHandler: AMP connected\n");

273 
öãrÁ˚Priv
->
c⁄√˘ed
 = 
UnifiC⁄√˘ed
;

277 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "CsrWifiRouterCtrlMediaStatusReqHandler: AMP disconnected\n");

278 
öãrÁ˚Priv
->
c⁄√˘ed
 = 
UnifiNŸC⁄√˘ed
;

281 
	}
}

284 
	$C§WifiRouãrCålHùReqH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

286 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

287 
C§WifiRouãrCålHùReq
 *
hùªq
 = (C§WifiRouãrCålHùReq *)
msg
;

288 
bulk_d©a_∑øm_t
 
bulkd©a
;

289 
u8
 *
sig«l_±r
;

290 
sig«l_Àngth
;

291 
r
 = 0;

292 *
de°
;

293 
C§Resu…
 
c§Resu…
;

294 
CSR_SIGNAL
 *
sig«l
;

295 
C§Uöt16
 
öãrÁ˚Tag
 = 0;

296 
CSR_MA_PACKET_REQUEST
 *
ªq
;

297 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

299 i‡(
¥iv
 =
NULL
)

303 i‡(
¥iv
->
smïriv
 =
NULL
)

305 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlHipReqHandler: invalid smepriv\n");

308 i‡(
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
)

310 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlHipReqHandler: invalid interfaceTag\n");

315 
	`mem£t
(&
bulkd©a
, 0, (
bulk_d©a_∑øm_t
));

317 
sig«l
 = (
CSR_SIGNAL
 *)
hùªq
->
mlmeComm™d
;

319 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "CsrWifiRouterCtrlHipReqHandler: 0x04%X ---->\n",

320 *((
C§Uöt16
 *)
hùªq
->
mlmeComm™d
));

323 
sig«l_±r
 = (
u8
 *)
hùªq
->
mlmeComm™d
;

324 
sig«l_Àngth
 = 
hùªq
->
mlmeComm™dLígth
;

330 
sig«l_±r
[5] = (
¥iv
->
sme_˛i
->
£ndî_id
 >> 8) & 0xff;

333 i‡(
hùªq
->
d©aRef1Lígth
)

335 
c§Resu…
 = 
	`unifi_√t_d©a_mÆloc
(
¥iv
, &
bulkd©a
.
d
[0], 
hùªq
->
d©aRef1Lígth
);

336 i‡(
c§Resu…
 =
CSR_RESULT_SUCCESS
)

338 
de°
 = (*)
bulkd©a
.
d
[0].
os_d©a_±r
;

339 
	`mem˝y
(
de°
, 
hùªq
->
d©aRef1
, hùªq->
d©aRef1Lígth
);

340 
bulkd©a
.
d
[0].
d©a_Àngth
 = 
hùªq
->
d©aRef1Lígth
;

344 
	`unifi_w¨nög
(
¥iv
, "signalÇot sent down,állocation failed in CsrWifiRouterCtrlHipReqHandler\n");

350 
bulkd©a
.
d
[0].
os_d©a_±r
 = 
NULL
;

351 
bulkd©a
.
d
[0].
d©a_Àngth
 = 0;

353 i‡(
hùªq
->
d©aRef2Lígth
)

355 
c§Resu…
 = 
	`unifi_√t_d©a_mÆloc
(
¥iv
, &
bulkd©a
.
d
[1], 
hùªq
->
d©aRef2Lígth
);

356 i‡(
c§Resu…
 =
CSR_RESULT_SUCCESS
)

358 
de°
 = (*)
bulkd©a
.
d
[1].
os_d©a_±r
;

359 
	`mem˝y
(
de°
, 
hùªq
->
d©aRef2
, hùªq->
d©aRef2Lígth
);

360 
bulkd©a
.
d
[1].
d©a_Àngth
 = 
hùªq
->
d©aRef2Lígth
;

364 i‡(
bulkd©a
.
d
[0].
d©a_Àngth
)

366 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
.
d
[0]);

368 
	`unifi_w¨nög
(
¥iv
, "signalÇot sent down,állocation failed in CsrWifiRouterCtrlHipReqHandler\n");

374 
bulkd©a
.
d
[1].
os_d©a_±r
 = 
NULL
;

375 
bulkd©a
.
d
[1].
d©a_Àngth
 = 0;

378 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "SME SEND: Signal 0x%.4X \n",

379 *((
C§Uöt16
 *)
sig«l_±r
));

380 i‡(
sig«l
->
Sig«lPrimôiveHódî
.
Sig«lId
 =
CSR_MA_PACKET_REQUEST_ID
)

382 
CSR_SIGNAL
 
u≈acked_sig«l
;

383 
	`ªad_u≈ack_sig«l
((
u8
 *Ë
sig«l
, &
u≈acked_sig«l
);

384 
ªq
 = &
u≈acked_sig«l
.
u
.
MaPackëReque°
;

385 
öãrÁ˚Tag
 = 
ªq
->
VútuÆI¡îÁ˚Idítifõr
 & 0xff;

386 
öãrÁ˚Priv
->
öãrÁ˚Mode
)

388 
CSR_WIFI_ROUTER_CTRL_MODE_NONE
:

389 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlHipReqHandler: invalid mode: NONE \n");

392 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "modêi†%x\n", 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

395 
r
 = 
	`uf_¥o˚ss_ma_∑ckë_ªq
(
¥iv
, 
ªq
->
Ra
.
x
, (ªq->
Ho°Tag
 & 0x3FFFFFFF), 
öãrÁ˚Tag
,

396 
ªq
->
Tønsmissi⁄C⁄åﬁ
,Ñeq->
TønsmôR©e
,

397 
ªq
->
Pri‹ôy
, 
sig«l
->
Sig«lPrimôiveHódî
.
SídîPro˚ssId
,

398 &
bulkd©a
);

399 i‡(
r
)

401 i‡(
bulkd©a
.
d
[0].
d©a_Àngth
)

403 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
.
d
[0]);

405 i‡(
bulkd©a
.
d
[1].
d©a_Àngth
)

407 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
.
d
[1]);

414 
r
 = 
	`ul_£nd_sig«l_øw
(
¥iv
, 
sig«l_±r
, 
sig«l_Àngth
, &
bulkd©a
);

417 i‡(
r
)

419 
	`unifi_îr‹
(
¥iv
,

421 *((
C§Uöt16
 *)
sig«l_±r
), 
r
);

422 
	`C§WifiRouãrCålWifiOffIndSíd
(
¥iv
->
CSR_WIFI_SME_IFACEQUEUE
, 0, 
CSR_WIFI_SME_CONTROL_INDICATION_ERROR
);

425 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "CsrWifiRouterCtrlHipReqHandler: <----\n");

426 
	}
}

429 #ifde‡
CSR_WIFI_SEND_GRATUITOUS_ARP


430 
	$uf_£nd_gøtuôous_¨p
(
unifi_¥iv_t
 *
¥iv
, 
C§Uöt16
 
öãrÁ˚Tag
)

432 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

433 
CSR_PRIORITY
 
¥i‹ôy
;

434 
CSR_SIGNAL
 
sig«l
;

435 
bulk_d©a_∑øm_t
 
bulkd©a
;

436 
C§Resu…
 
c§Resu…
;

437 
sk_buff
 *
skb
, *
√wSkb
 = 
NULL
;

438 
C§I¡8
 
¥Ÿe˘i⁄
;

439 
r
;

440 c⁄° 
C§Uöt8
 
¨p_ªq
[36] = {

449 
	`func_íãr
();

451 
c§Resu…
 = 
	`unifi_√t_d©a_mÆloc
(
¥iv
, &
bulkd©a
.
d
[0], (
¨p_ªq
));

452 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
)

454 
	`unifi_îr‹
(
¥iv
, "FailedÅoállocate bulk data in CsrWifiSmeRoamCompleteIndHandler()\n");

457 
skb
 = (
sk_buff
 *)(
bulkd©a
.
d
[0].
os_√t_buf_±r
);

458 
skb
->
Àn
 = 
bulkd©a
.
d
[0].
d©a_Àngth
;

460 
	`mem˝y
(
skb
->
d©a
, 
¨p_ªq
, (arp_req));

462 
	`mem˝y
(
skb
->
d©a
 + 16, 
¥iv
->
√tdev
[
öãrÁ˚Tag
]->
dev_addr
, 
ETH_ALEN
);

463 
skb
->
d©a
[22] = (
¥iv
->
°a_ù_addªss
) & 0xFF;

464 
skb
->
d©a
[23] = (
¥iv
->
°a_ù_addªss
 >> 8) & 0xFF;

465 
skb
->
d©a
[24] = (
¥iv
->
°a_ù_addªss
 >> 16) & 0xFF;

466 
skb
->
d©a
[25] = (
¥iv
->
°a_ù_addªss
 >> 24) & 0xFF;

467 
skb
->
d©a
[32] = (
¥iv
->
°a_ù_addªss
) & 0xFF;

468 
skb
->
d©a
[33] = (
¥iv
->
°a_ù_addªss
 >> 8) & 0xFF;

469 
skb
->
d©a
[34] = (
¥iv
->
°a_ù_addªss
 >> 16) & 0xFF;

470 
skb
->
d©a
[35] = (
¥iv
->
°a_ù_addªss
 >> 24) & 0xFF;

472 
bulkd©a
.
d
[1].
os_d©a_±r
 = 
NULL
;

473 
bulkd©a
.
d
[1].
os_√t_buf_±r
 = 
NULL
;

474 
bulkd©a
.
d
[1].
√t_buf_Àngth
 = bulkd©a.d[1].
d©a_Àngth
 = 0;

476 i‡((
¥Ÿe˘i⁄
 = 
	`uf_gë_¥Ÿe˘i⁄_bô_‰om_öãrÁ˚mode
(
¥iv
, 
öãrÁ˚Tag
, &
¨p_ªq
[26])) < 0)

478 
	`unifi_îr‹
(
¥iv
, "CsrWifiSmeRoamCompleteIndHandler: FailedÅo determineÖrotection mode\n");

479 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
.
d
[0]);

483 i‡((
¥iv
->
°a_wmm_ˇ∑bûôõs
 & 
QOS_CAPABILITY_WMM_ENABLED
) == 1)

485 
¥i‹ôy
 = 
CSR_QOS_UP0
;

489 
¥i‹ôy
 = 
CSR_CONTENTION
;

492 i‡(
	`¥ï¨e_™d_add_machódî
(
¥iv
, 
skb
, 
√wSkb
, 
¥i‹ôy
, &
bulkd©a
,

493 
öãrÁ˚Tag
, &
¨p_ªq
[26],

494 
¥iv
->
√tdev
[
öãrÁ˚Tag
]->
dev_addr
, 
¥Ÿe˘i⁄
))

496 
	`unifi_îr‹
(
¥iv
, "CsrWifiSmeRoamCompleteIndHandler: failedÅo create MAC header\n");

497 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
.
d
[0]);

500 
bulkd©a
.
d
[0].
os_d©a_±r
 = 
skb
->
d©a
;

501 
bulkd©a
.
d
[0].
os_√t_buf_±r
 = 
skb
;

502 
bulkd©a
.
d
[0].
d©a_Àngth
 = 
skb
->
Àn
;

504 
	`unifi_‰ame_ma_∑ckë_ªq
(
¥iv
, 
¥i‹ôy
, 0, 0xffffffff, 
öãrÁ˚Tag
,

505 
CSR_NO_CONFIRM_REQUIRED
, 
¥iv
->
√tdev_˛õ¡
->
£ndî_id
,

506 
öãrÁ˚Priv
->
bssid
.
a
, &
sig«l
);

508 
r
 = 
	`ul_£nd_sig«l_u≈acked
(
¥iv
, &
sig«l
, &
bulkd©a
);

509 i‡(
r
)

511 
	`unifi_îr‹
(
¥iv
, "C§WifiSmeRﬂmCom∂ëeIndH™dÀr: faûedÅÿ£nd QOS d©®nuŒÖackëÑesu…: %d\n", 
r
);

512 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
.
d
[0]);

516 
	`func_exô
();

517 
	}
}

536 
	$c⁄figuª_d©a_p‹t
(
unifi_¥iv_t
 *
¥iv
,

537 
C§WifiRouãrCålP‹tA˘i⁄
 
p‹t_a˘i⁄
,

538 c⁄° 
C§WifiMacAddªss
 *
macAddªss
,

539 c⁄° 
queue
,

540 
C§Uöt16
 
öãrÁ˚Tag
)

542 c⁄° 
C§Uöt8
 
brﬂdˇ°_mac_addªss
[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

543 
unifi_p‹t_c⁄fig_t
 *
p‹t
;

544 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
;

545 
i
;

546 c⁄° *
c⁄åﬁÀd_°rög
;

548 i‡(
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
)

550 
	`unifi_îr‹
(
¥iv
, "configure_data_port: bad interfaceTag\n");

551  -
EFAULT
;

554 
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

556 i‡(
queue
 =
UF_CONTROLLED_PORT_Q
)

558 
p‹t
 = &
öãrÁ˚Priv
->
c⁄åﬁÀd_d©a_p‹t
;

559 
c⁄åﬁÀd_°rög
 = "controlled";

563 
p‹t
 = &
öãrÁ˚Priv
->
unc⁄åﬁÀd_d©a_p‹t
;

564 
c⁄åﬁÀd_°rög
 = "uncontrolled";

567 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "port configÑequest %02x:%02x:%02x:%02x:%02x:%02x %s withÖort_action %d.\n",

568 
macAddªss
->
a
[0], macAddress->a[1], macAddress->a[2],

569 
macAddªss
->
a
[3], macAddress->a[4], macAddress->a[5],

570 
c⁄åﬁÀd_°rög
, 
p‹t_a˘i⁄
);

574 i‡((
CSR_WIFI_ROUTER_CTRL_MODE_STA
 =
öãrÁ˚Priv
->
öãrÁ˚Mode
 ||

575 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PCLI
) ||

576 !
	`memcmp
(
macAddªss
->
a
, 
brﬂdˇ°_mac_addªss
, 
ETH_ALEN
))

578 
p‹t
->
p‹t_cfg
[0].
p‹t_a˘i⁄
 =Öort_action;

579 
p‹t
->
p‹t_cfg
[0].
mac_addªss
 = *
macAddªss
;

580 
p‹t
->
p‹t_cfg
[0].
ö_u£
 = 
TRUE
;

581 
p‹t
->
íåõs_ö_u£
 = 1;

582 
p‹t
->
ovîide_a˘i⁄
 = 
UF_DATA_PORT_OVERIDE
;

584 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "%sÖort override on\n",

585 (
queue
 =
UF_CONTROLLED_PORT_Q
)?"Controlled" : "Uncontrolled");

588 
i
 = 1; i < 
UNIFI_MAX_CONNECTIONS
; i++)

590 
p‹t
->
p‹t_cfg
[
i
].
ö_u£
 = 
FALSE
;

593 i‡(
p‹t_a˘i⁄
 =
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_OPEN
)

595 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "%sÖort broadcast setÅo open.\n",

596 (
queue
 =
UF_CONTROLLED_PORT_Q
)?"Controlled" : "Uncontrolled");

605 
	`uf_ªsume_d©a_∂™e
(
¥iv
, 
queue
, *
macAddªss
, 
öãrÁ˚Tag
);

607 #ifde‡
CSR_WIFI_SEND_GRATUITOUS_ARP


608 i‡((
CSR_WIFI_ROUTER_CTRL_MODE_STA
 =
öãrÁ˚Priv
->
öãrÁ˚Mode
) &&

609 (
queue
 =
UF_CONTROLLED_PORT_Q
Ë&& (
¥iv
->
°a_ù_addªss
 != 0xFFFFFFFF))

611 
	`uf_£nd_gøtuôous_¨p
(
¥iv
, 
öãrÁ˚Tag
);

617 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "%sÖort broadcast setÅo %s.\n",

618 (
queue
 =
UF_CONTROLLED_PORT_Q
)?"Controlled" : "Uncontrolled",

619 (
p‹t_a˘i⁄
 =
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_CLOSED_DISCARD
)?"discard" : "closed");

622 i‡(
p‹t_a˘i⁄
 =
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_CLOSED_DISCARD
)

624 
	`uf_‰ì_≥ndög_rx_∑ckës
(
¥iv
, 
queue
, *
macAddªss
, 
öãrÁ˚Tag
);

634 
found_íåy_Êag
;

635 
fú°_‰ì_¶Ÿ
 = -1;

638 i‡(
p‹t
->
ovîide_a˘i⁄
 =
UF_DATA_PORT_OVERIDE
)

640 
p‹t
->
p‹t_cfg
[0].
ö_u£
 = 
FALSE
;

641 
p‹t
->
íåõs_ö_u£
 = 0;

642 
p‹t
->
ovîide_a˘i⁄
 = 
UF_DATA_PORT_NOT_OVERIDE
;

644 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "%sÖort override off\n",

645 (
queue
 =
UF_CONTROLLED_PORT_Q
)?"Controlled" : "Uncontrolled");

648 
found_íåy_Êag
 = 0;

649 
i
 = 0; i < 
UNIFI_MAX_CONNECTIONS
; i++)

651 i‡(
p‹t
->
p‹t_cfg
[
i
].
ö_u£
)

653 i‡(!
	`memcmp
(&
p‹t
->
p‹t_cfg
[
i
].
mac_addªss
.
a
, 
macAddªss
->a, 
ETH_ALEN
))

656 
p‹t
->
p‹t_cfg
[
i
].
p‹t_a˘i⁄
 =Öort_action;

657 
found_íåy_Êag
 = 1;

661 i‡(
fú°_‰ì_¶Ÿ
 == -1)

666 
fú°_‰ì_¶Ÿ
 = 
i
;

673 i‡(!
found_íåy_Êag
)

675 i‡(
fú°_‰ì_¶Ÿ
 == -1)

677 
	`unifi_îr‹
(
¥iv
, "nÿ‰ì slŸ found i¿p‹àc⁄figáºay (%d u£d)\n", 
p‹t
->
íåõs_ö_u£
);

678  -
EFAULT
;

682 
p‹t
->
íåõs_ö_u£
++;

685 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "p‹àc⁄fig indexássig√d i¿c⁄fig_d©a_p‹à%d\n", 
fú°_‰ì_¶Ÿ
);

686 
p‹t
->
p‹t_cfg
[
fú°_‰ì_¶Ÿ
].
ö_u£
 = 
TRUE
;

687 
p‹t
->
p‹t_cfg
[
fú°_‰ì_¶Ÿ
].
p‹t_a˘i⁄
 =Öort_action;

688 
p‹t
->
p‹t_cfg
[
fú°_‰ì_¶Ÿ
].
mac_addªss
 = *
macAddªss
;

691 i‡(
p‹t_a˘i⁄
 =
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_OPEN
)

700 
	`uf_ªsume_d©a_∂™e
(
¥iv
, 
queue
, *
macAddªss
, 
öãrÁ˚Tag
);

707 i‡(
p‹t_a˘i⁄
 =
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_CLOSED_DISCARD
)

709 
	`uf_‰ì_≥ndög_rx_∑ckës
(
¥iv
, 
queue
, *
macAddªss
, 
öãrÁ˚Tag
);

712 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "port config %02x:%02x:%02x:%02x:%02x:%02x withÖort_action %d.\n",

713 *(
macAddªss
->
a
 + 0), *(macAddress->a + 1), *(macAddress->a + 2),

714 *(
macAddªss
->
a
 + 3), *(macAddress->a + 4), *(macAddress->a + 5),

715 
p‹t_a˘i⁄
);

718 
	}
}

721 
	$C§WifiRouãrCålP‹tC⁄figuªReqH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

723 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

724 
C§WifiRouãrCålP‹tC⁄figuªReq
 *
ªq
 = (C§WifiRouãrCålP‹tC⁄figuªReq *)
msg
;

725 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
ªq
->
öãrÁ˚Tag
];

727 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "entering CsrWifiRouterCtrlPortConfigureReqHandler\n");

728 i‡(
¥iv
->
smïriv
 =
NULL
)

730 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlPortConfigureReqHandler: invalid smepriv\n");

735 
öãrÁ˚Priv
->
öãrÁ˚Mode
)

737 
CSR_WIFI_ROUTER_CTRL_MODE_STA
:

738 
CSR_WIFI_ROUTER_CTRL_MODE_AMP
:

739 
CSR_WIFI_ROUTER_CTRL_MODE_IBSS
:

740 
CSR_WIFI_ROUTER_CTRL_MODE_P2PCLI
:

744 
öãrÁ˚Priv
->
¥Ÿe˘
 = 
ªq
->
£tPrŸe˘i⁄
;

746 
CSR_WIFI_ROUTER_CTRL_MODE_AP
:

747 
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
:

749 
C§Uöt8
 
i
;

750 
C§WifiRouãrCålSèInfo_t
 *
°aRec‹d
;

754 i‡(
ªq
->
c⁄åﬁÀdP‹tA˘i⁄
 =
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_OPEN
)

756 
i
 = 0; i < 
UNIFI_MAX_CONNECTIONS
; i++)

758 
°aRec‹d
 = (
C§WifiRouãrCålSèInfo_t
 *Ë(
öãrÁ˚Priv
->
°aInfo
[
i
]);

759 i‡(
°aRec‹d
)

762 i‡(!
	`memcmp
(
ªq
->
macAddªss
.
a
, 
°aRec‹d
->
≥îMacAddªss
.a, 
ETH_ALEN
))

764 
°aRec‹d
->
¥Ÿe˘i⁄
 = 
ªq
->
£tPrŸe˘i⁄
;

773 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "CsrWifiRouterCtrlPortConfigureReqHandler(0x%.4X) Uncaught mode %d\n",

774 
msg
->
sour˚
, 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

777 
	`c⁄figuª_d©a_p‹t
(
¥iv
, 
ªq
->
unc⁄åﬁÀdP‹tA˘i⁄
, (c⁄° 
C§WifiMacAddªss
 *)&ªq->
macAddªss
,

778 
UF_UNCONTROLLED_PORT_Q
, 
ªq
->
öãrÁ˚Tag
);

779 
	`c⁄figuª_d©a_p‹t
(
¥iv
, 
ªq
->
c⁄åﬁÀdP‹tA˘i⁄
, (c⁄° 
C§WifiMacAddªss
 *)&ªq->
macAddªss
,

780 
UF_CONTROLLED_PORT_Q
, 
ªq
->
öãrÁ˚Tag
);

782 
	`C§WifiRouãrCålP‹tC⁄figuªCfmSíd
(
msg
->
sour˚
, 
ªq
->
˛õ¡D©a
,Ñeq->
öãrÁ˚Tag
,

783 
CSR_RESULT_SUCCESS
, 
ªq
->
macAddªss
);

784 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "leaving CsrWifiRouterCtrlPortConfigureReqHandler\n");

785 
	}
}

788 
	$C§WifiRouãrCålWifiOnReqH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

790 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

791 
C§WifiRouãrCålVîsi⁄s
 
vîsi⁄s
;

792 
C§WifiRouãrCålWifiOnReq
 *
ªq
 = (C§WifiRouãrCålWifiOnReq *)
msg
;

793 
r
, 
i
;

794 
C§Resu…
 
c§Resu…
;

796 i‡(
¥iv
 =
NULL
)

800 i‡(
¥iv
->
wﬁ_su•íd
)

802 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "CsrWifiRouterCtrlWifiOnReqHandler: Don'tÑeset mode\n");

806 #ifde‡
ANDROID_BUILD


808 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "CsrWifiRouterCtrlWifiOnReqHandler:Åake wakeÜock\n");

809 
	`wake_lock
(&
unifi_sdio_wake_lock
);

811 
i
 = 0; i < 
CSR_WIFI_NUM_INTERFACES
; i++)

813 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "C§WifiRouãrCålWifiOnReqH™dÀr: Sëtög i¡îÁ˚ %dÅÿNONE\n", 
i
);

815 
¥iv
->
öãrÁ˚Priv
[
i
]->
öãrÁ˚Mode
 = 0;

818 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "C§WifiRouãrCålWifiOnReqH™dÀr(0x%.4XËªq->d©aLígth=%dÑeq->d©a=0x%x\n", 
msg
->
sour˚
, 
ªq
->
d©aLígth
,Ñeq->
d©a
);

820 i‡(
ªq
->
d©aLígth
 =3 &&Ñeq->
d©a
 &&Ñeq->data[0] == 0 &&Ñeq->data[1] == 1 &&Ñeq->data[2] == 1)

822 
¥iv
->
cm™rTe°Mode
 = 
TRUE
;

823 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "C§WifiRouãrCålWifiOnReqH™dÀr: cm™rTe°Mode=%d\n",Öriv->
cm™rTe°Mode
);

827 
¥iv
->
cm™rTe°Mode
 = 
FALSE
;

836 
¥iv
->
bh_thªad
.
block_thªad
 = 1;

839 
¥iv
->
wifi_⁄_°©e
 = 
wifi_⁄_ö_¥ogªss
;

842 i‡(!
¥iv
->
wﬁ_su•íd
)

844 
r
 = 
	`uf_ªque°_fúmw¨e_fûes
(
¥iv
, 
UNIFI_FW_STA
);

845 i‡(
r
)

847 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlWifiOnReqHandler: FailedÅo get f/w\n");

848 
	`C§WifiRouãrCålWifiOnCfmSíd
(
msg
->
sour˚
, 
ªq
->
˛õ¡D©a
, 
CSR_RESULT_FAILURE
);

854 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "Don'tÇeed firmware\n");

858 
	`C§SdioCœim
(
¥iv
->
sdio
);

859 
c§Resu…
 = 
	`C§SdioPowîOn
(
¥iv
->
sdio
);

860 
	`C§SdioRñó£
(
¥iv
->
sdio
);

861 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
 && c§Resu… !
CSR_SDIO_RESULT_NOT_RESET
)

863 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlWifiOnReqHandler: FailedÅoÖower on UniFi\n");

864 
	`C§WifiRouãrCålWifiOnCfmSíd
(
msg
->
sour˚
, 
ªq
->
˛õ¡D©a
, 
CSR_RESULT_FAILURE
);

869 i‡(
c§Resu…
 =
CSR_RESULT_SUCCESS
 && !
¥iv
->
wﬁ_su•íd
)

872 
r
 = 
	`uf_öô_hw
(
¥iv
);

873 i‡(
r
)

875 
	`unifi_îr‹
(
¥iv
, "C§WifiRouãrCålWifiOnReqH™dÀr: FaûedÅÿöôüli£ h/w,Éº‹ %d\n", 
r
);

876 
	`C§WifiRouãrCålWifiOnCfmSíd
(
msg
->
sour˚
, 
ªq
->
˛õ¡D©a
, 
CSR_RESULT_FAILURE
);

882 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "UniFiálready initialised\n");

886 
¥iv
->
wﬁ_su•íd
 = 
FALSE
;

889 
¥iv
->
bh_thªad
.
block_thªad
 = 0;

895 
r
 = 
	`uf_öô_bh
(
¥iv
);

896 i‡(
r
)

898 
	`C§SdioCœim
(
¥iv
->
sdio
);

899 
	`C§SdioPowîOff
(
¥iv
->
sdio
);

900 
	`C§SdioRñó£
(
¥iv
->
sdio
);

901 
	`C§WifiRouãrCålWifiOnCfmSíd
(
msg
->
sour˚
, 
ªq
->
˛õ¡D©a
, 
CSR_RESULT_FAILURE
);

906 
	`unifi_ˇrd_öfo
(
¥iv
->
ˇrd
, &¥iv->
ˇrd_öfo
);

909 
¥iv
->
CSR_WIFI_SME_IFACEQUEUE
 = 
msg
->
sour˚
;

910 
CSR_WIFI_SME_IFACEQUEUE
 = 
msg
->
sour˚
;

914 
vîsi⁄s
.
chùId
 = 
¥iv
->
ˇrd_öfo
.
chù_id
;

915 
vîsi⁄s
.
chùVîsi⁄
 = 
¥iv
->
ˇrd_öfo
.
chù_vîsi⁄
;

916 
vîsi⁄s
.
fúmw¨eBuûd
 = 
¥iv
->
ˇrd_öfo
.
fw_buûd
;

917 
vîsi⁄s
.
fúmw¨eHù
 = 
¥iv
->
ˇrd_öfo
.
fw_hù_vîsi⁄
;

918 
vîsi⁄s
.
rouãrBuûd
 = (
C§Ch¨Såög
 *)
CSR_WIFI_VERSION
;

919 
vîsi⁄s
.
rouãrHù
 = (
UNIFI_HIP_MAJOR_VERSION
 << 8Ë| 
UNIFI_HIP_MINOR_VERSION
;

921 
	`C§WifiRouãrCålWifiOnIndSíd
(
msg
->
sour˚
, 0, 
CSR_RESULT_SUCCESS
, 
vîsi⁄s
, 0);

924 
¥iv
->
wifi_⁄_°©e
 = 
wifi_⁄_d⁄e
;

925 
	}
}

933 
	$wifi_off
(
unifi_¥iv_t
 *
¥iv
)

935 
powî_off
;

936 
¥iv_ö°™˚
;

937 
i
;

938 
C§Resu…
 
c§Resu…
;

942 i‡(
¥iv
->
wifi_⁄_°©e
 =
wifi_⁄_un•ecifõd
)

944 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "wifi_offálready\n");

948 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "wifi_off\n");

951 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 23)

952 
	`ˇn˚l_w‹k_sync
(&
¥iv
->
è_öd_w‹k
.
èsk
);

953 
	`ˇn˚l_w‹k_sync
(&
¥iv
->
è_ßm∂e_öd_w‹k
.
èsk
);

954 #ifde‡
CSR_SUPPORT_WEXT


955 
	`ˇn˚l_w‹k_sync
(&
¥iv
->
sme_c⁄fig_èsk
);

956 
	`wext_£nd_dißssoc_evít
(
¥iv
);

960 
i
 = 0; i < 
CSR_WIFI_NUM_INTERFACES
; i++)

962 i‡(
¥iv
->
√tdev
[
i
])

964 
√tI¡îÁ˚_¥iv_t
 *
√çriv
 = (√tI¡îÁ˚_¥iv_à*Ë
	`√tdev_¥iv
(
¥iv
->
√tdev
[
i
]);

965 
	`ˇn˚l_w‹k_sync
(&
√çriv
->
£nd_m4_ªady_èsk
);

969 
	`Êush_w‹kqueue
(
¥iv
->
unifi_w‹kqueue
);

972 
¥iv_ö°™˚
 = 
	`uf_föd_¥iv
(
¥iv
);

973 i‡(
¥iv_ö°™˚
 == -1)

975 
	`unifi_w¨nög
(
¥iv
,

977 
powî_off
 = 1;

981 
powî_off
 = (
fw_öô
[
¥iv_ö°™˚
] > 0)?0 : 1;

985 i‡(
¥iv
->
±e°_mode
)

987 
powî_off
 = 0;

991 
	`uf_°›_thªad
(
¥iv
, &¥iv->
bh_thªad
);

995 i‡(
¥iv
->
öô_¥ogªss
 !
UNIFI_INIT_NONE
)

997 
	`C§SdioCœim
(
¥iv
->
sdio
);

998 
	`unifi_ˇ±uª_∑nic
(
¥iv
->
ˇrd
);

999 
	`C§SdioRñó£
(
¥iv
->
sdio
);

1003 i‡(
	`c§_sdio_löux_ªmove_úq
(
¥iv
->
sdio
))

1005 
	`unifi_nŸi˚
(
¥iv
,

1009 i‡(
powî_off
)

1011 
	`unifi_åa˚
(
¥iv
, 
UDBG2
,

1014 
	`C§SdioCœim
(
¥iv
->
sdio
);

1015 
c§Resu…
 = 
	`unifi_f‹˚_low_powî_mode
(
¥iv
->
ˇrd
);

1016 
	`C§SdioRñó£
(
¥iv
->
sdio
);

1018 
	`C§SdioPowîOff
(
¥iv
->
sdio
);

1022 
¥iv
->
öô_¥ogªss
 = 
UNIFI_INIT_NONE
;

1023 
¥iv
->
wifi_⁄_°©e
 = 
wifi_⁄_un•ecifõd
;

1024 
	}
}

1027 
	$C§WifiRouãrCålWifiOffReqH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

1029 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

1030 
C§WifiRouãrCålWifiOffReq
 *
ªq
 = (C§WifiRouãrCålWifiOffReq *)
msg
;

1031 
i
 = 0;

1033 i‡(
¥iv
 =
NULL
)

1038 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "C§WifiRouãrCålWifiOffReqH™dÀr(0x%.4X)\n", 
msg
->
sour˚
);

1041 
i
 = 0; i < 
CSR_WIFI_NUM_INTERFACES
; i++)

1043 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
i
];

1044 i‡(
öãrÁ˚Priv
->
√tdev_ªgi°îed
 == 1)

1046 
	`√tif_ˇºõr_off
(
¥iv
->
√tdev
[
i
]);

1047 
	`UF_NETIF_TX_STOP_ALL_QUEUES
(
¥iv
->
√tdev
[
i
]);

1048 
öãrÁ˚Priv
->
c⁄√˘ed
 = 
UnifiC⁄√˘edUnknown
;

1050 
öãrÁ˚Priv
->
öãrÁ˚Mode
 = 0;

1053 
öãrÁ˚Priv
->
queueE«bÀd
[0] = 1;

1054 
öãrÁ˚Priv
->
queueE«bÀd
[1] = 1;

1055 
öãrÁ˚Priv
->
queueE«bÀd
[2] = 1;

1056 
öãrÁ˚Priv
->
queueE«bÀd
[3] = 1;

1058 
	`wifi_off
(
¥iv
);

1060 
	`C§WifiRouãrCålWifiOffCfmSíd
(
msg
->
sour˚
, 
ªq
->
˛õ¡D©a
);

1066 
	}
}

1069 
	$C§WifiRouãrCålQosC⁄åﬁReqH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

1071 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

1072 
C§WifiRouãrCålQosC⁄åﬁReq
 *
ªq
 = (C§WifiRouãrCålQosC⁄åﬁReq *)
msg
;

1073 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
;

1075 i‡(
¥iv
->
smïriv
 =
NULL
)

1077 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlQosControlReqHandler: invalid smepriv\n");

1081 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "C§WifiRouãrCålQosC⁄åﬁReqH™dÀr:sc⁄åﬁ = %d", 
ªq
->
c⁄åﬁ
);

1083 i‡(
ªq
->
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
)

1085 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlQosControlReqHandler: interfaceID >= CSR_WIFI_NUM_INTERFACES.\n");

1088 
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
ªq
->
öãrÁ˚Tag
];

1090 i‡(
ªq
->
c⁄åﬁ
 =
CSR_WIFI_ROUTER_CTRL_QOS_CONTROL_WMM_ON
)

1092 
¥iv
->
°a_wmm_ˇ∑bûôõs
 |
QOS_CAPABILITY_WMM_ENABLED
;

1093 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "WMMÉnabled\n");

1095 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "QueuêC⁄fig %x\n", 
ªq
->
queueC⁄fig
);

1097 
öãrÁ˚Priv
->
queueE«bÀd
[
UNIFI_TRAFFIC_Q_BK
] = (
ªq
->
queueC⁄fig
 & 
CSR_WIFI_ROUTER_CTRL_QUEUE_BK_ENABLE
)?1 : 0;

1098 
öãrÁ˚Priv
->
queueE«bÀd
[
UNIFI_TRAFFIC_Q_BE
] = (
ªq
->
queueC⁄fig
 & 
CSR_WIFI_ROUTER_CTRL_QUEUE_BE_ENABLE
)?1 : 0;

1099 
öãrÁ˚Priv
->
queueE«bÀd
[
UNIFI_TRAFFIC_Q_VI
] = (
ªq
->
queueC⁄fig
 & 
CSR_WIFI_ROUTER_CTRL_QUEUE_VI_ENABLE
)?1 : 0;

1100 
öãrÁ˚Priv
->
queueE«bÀd
[
UNIFI_TRAFFIC_Q_VO
] = (
ªq
->
queueC⁄fig
 & 
CSR_WIFI_ROUTER_CTRL_QUEUE_VO_ENABLE
)?1 : 0;

1104 
¥iv
->
°a_wmm_ˇ∑bûôõs
 = 0;

1105 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "WMM disabled\n");

1107 
	}
}

1110 
	$C§WifiRouãrCålT˛asAddReqH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

1112 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

1113 
C§WifiRouãrCålT˛asAddReq
 *
ªq
 = (C§WifiRouãrCålT˛asAddReq *)
msg
;

1115 i‡(
¥iv
 =
NULL
)

1117 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlTclasAddReqHandler: invalid smepriv\n");

1121 
	`C§WifiRouãrCålT˛asAddCfmSíd
(
msg
->
sour˚
, 
ªq
->
˛õ¡D©a
,Ñeq->
öãrÁ˚Tag
, 
CSR_RESULT_SUCCESS
);

1122 
	}
}

1125 
	$C§WifiRouãrCålT˛asDñReqH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

1127 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

1128 
C§WifiRouãrCålT˛asDñReq
 *
ªq
 = (C§WifiRouãrCålT˛asDñReq *)
msg
;

1130 i‡(
¥iv
 =
NULL
)

1132 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlTclasDelReqHandler: invalid smepriv\n");

1136 
	`C§WifiRouãrCålT˛asDñCfmSíd
(
msg
->
sour˚
, 
ªq
->
˛õ¡D©a
,Ñeq->
öãrÁ˚Tag
, 
CSR_RESULT_SUCCESS
);

1137 
	}
}

1140 
	$C§WifiRouãrCålC⁄figuªPowîModeReqH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

1142 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

1143 
C§WifiRouãrCålC⁄figuªPowîModeReq
 *
ªq
 = (C§WifiRouãrCålC⁄figuªPowîModeReq *)
msg
;

1144 
unifi_low_powî_mode
 
pm
;

1145 
C§Resu…
 
c§Resu…
;

1147 i‡(
¥iv
->
smïriv
 =
NULL
)

1149 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlConfigurePowerModeReqHandler: invalid smepriv\n");

1153 i‡(
ªq
->
mode
 =
CSR_WIFI_ROUTER_CTRL_LOW_POWER_MODE_DISABLED
)

1155 
pm
 = 
UNIFI_LOW_POWER_DISABLED
;

1159 
pm
 = 
UNIFI_LOW_POWER_ENABLED
;

1162 
	`unifi_åa˚
(
¥iv
, 
UDBG2
,

1164 
ªq
->
mode
,Ñeq->
wakeHo°
);

1165 
c§Resu…
 = 
	`unifi_c⁄figuª_low_powî_mode
(
¥iv
->
ˇrd
, 
pm
,

1166 (
ªq
->
wakeHo°
?
UNIFI_PERIODIC_WAKE_HOST_ENABLED
 : 
UNIFI_PERIODIC_WAKE_HOST_DISABLED
));

1167 
	}
}

1170 
	$C§WifiRouãrCålWifiOnResH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

1172 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

1173 
C§WifiRouãrCålWifiOnRes
 *
ªs
 = (C§WifiRouãrCålWifiOnRe†*)
msg
;

1175 i‡(
¥iv
 =
NULL
)

1177 
	`unifi_îr‹
(
NULL
, "CsrWifiRouterCtrlWifiOnResHandler: Invalid ospriv.\n");

1181 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,

1182 "C§WifiRouãrCålWifiOnResH™dÀr: sètu†%d (∑tch %u)\n", 
ªs
->
°©us
,Ñes->
smeVîsi⁄s
.
fúmw¨eP©ch
);

1184 i‡(
ªs
->
smeVîsi⁄s
.
fúmw¨eP©ch
 != 0)

1186 
	`unifi_öfo
(
¥iv
, "Fúmw¨ê∑tch %d\n", 
ªs
->
smeVîsi⁄s
.
fúmw¨eP©ch
);

1189 i‡(
ªs
->
numI¡îÁ˚Addªss
 > 
CSR_WIFI_NUM_INTERFACES
)

1191 
	`unifi_îr‹
(
¥iv
, "WifiOnResH™dÀ∏badÇumI¡îÁ˚Addªs†%d\n", 
ªs
->
numI¡îÁ˚Addªss
);

1196 i‡(
ªs
->
°©us
 =
CSR_RESULT_SUCCESS
)

1198 
i
;

1199 
C§Uöt32
 
ötmode
 = 
CSR_WIFI_INTMODE_DEFAULT
;

1200 #i‡
	`deföed
(
CSR_WIFI_SPLIT_PATCH
Ë&& !deföed(
CSR_WIFI_FW_RELOAD
)

1201 
C§Boﬁ
 
swôchög_≠_fw
 = 
FALSE
;

1204 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "Card Init Completed Successfully\n");

1207 
i
 = 0; i < 
ªs
->
numI¡îÁ˚Addªss
; i++)

1209 
	`mem˝y
(
¥iv
->
√tdev
[
i
]->
dev_addr
, 
ªs
->
°©i⁄MacAddªss
[i].
a
, 
ETH_ALEN
);

1213 
¥iv
->
sme_vîsi⁄s
 = 
ªs
->
smeVîsi⁄s
;

1215 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "network interfaces count = %d\n",

1216 
ªs
->
numI¡îÁ˚Addªss
);

1219 
i
 = 0; i < 
ªs
->
numI¡îÁ˚Addªss
; i++)

1221 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
i
];

1222 i‡(!
öãrÁ˚Priv
->
√tdev_ªgi°îed
)

1224 
r
;

1225 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "ªgi°îögÇë devi˚ %d\n", 
i
);

1226 
r
 = 
	`uf_ªgi°î_√tdev
(
¥iv
, 
i
);

1227 i‡(
r
)

1230 
	`uf_uƒegi°î_√tdev
(
¥iv
);

1231 
	`unifi_îr‹
(
¥iv
, "FailedÅoÑegisterÅheÇetwork device.\n");

1232 
	`C§WifiRouãrCålWifiOnCfmSíd
(
msg
->
sour˚
, 
ªs
->
˛õ¡D©a
, 
CSR_RESULT_FAILURE
);

1236 #i‡
	`deföed
(
CSR_WIFI_SPLIT_PATCH
Ë&& !deföed(
CSR_WIFI_FW_RELOAD
)

1243 
swôchög_≠_fw
 = 
TRUE
;

1247 
¥iv
->
tŸÆI¡îÁ˚Cou¡
 = 
ªs
->
numI¡îÁ˚Addªss
;

1252 i‡(
run_bh_⁄˚
 != -1)

1254 
ötmode
 = (
C§Uöt32
)
run_bh_⁄˚
;

1256 i‡(
ªs
->
scheduÀdI¡îru±
)

1258 
ötmode
 = 
CSR_WIFI_INTMODE_RUN_BH_ONCE
;

1260 
	`unifi_£t_öãºu±_mode
(
¥iv
->
ˇrd
, 
ötmode
);

1262 
¥iv
->
öô_¥ogªss
 = 
UNIFI_INIT_COMPLETED
;

1265 
	`C§WifiRouãrCålWifiOnCfmSíd
(
msg
->
sour˚
, 
ªs
->
˛õ¡D©a
, 
CSR_RESULT_SUCCESS
);

1267 #i‡
	`deföed
(
CSR_WIFI_SPLIT_PATCH
Ë&& !deföed(
CSR_WIFI_FW_RELOAD
)

1268 i‡(
swôchög_≠_fw
 && (
¥iv
->
≥ndög_mode_£t
.
comm⁄
.
de°ö©i⁄
 != 0xaaaa))

1270 
	`unifi_öfo
(
¥iv
, "Completed firmwareÑeload with %sÖatch\n",

1271 
	`CSR_WIFI_HIP_IS_AP_FW
(
¥iv
->
öãrÁ˚Priv
[0]->
öãrÁ˚Mode
)?"AP" : "STA");

1274 
	`C§WifiRouãrCålModeSëCfmSíd
(
¥iv
->
≥ndög_mode_£t
.
comm⁄
.
sour˚
,

1275 
¥iv
->
≥ndög_mode_£t
.
˛õ¡D©a
,

1276 
¥iv
->
≥ndög_mode_£t
.
öãrÁ˚Tag
,

1277 
¥iv
->
≥ndög_mode_£t
.
mode
,

1278 
CSR_RESULT_SUCCESS
);

1279 
¥iv
->
≥ndög_mode_£t
.
comm⁄
.
de°ö©i⁄
 = 0xaaaa;

1282 
	`unifi_öfo
(
¥iv
, "UniFiÑeady\n");

1284 #i‡
	`deföed
(
ANDROID_BUILD
Ë&& !deföed(
CSR_WIFI_FW_RELOAD
)

1286 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "ready:Ñelease wakeÜock\n");

1287 
	`wake_u∆ock
(&
unifi_sdio_wake_lock
);

1292 
	`unifi_ªque°_max_sdio_˛ock
(
¥iv
->
ˇrd
);

1294 #ifde‡
CSR_SUPPORT_WEXT


1296 
	`wext_£nd_°¨ãd_evít
(
¥iv
);

1298 
	`queue_w‹k
(
¥iv
->
unifi_w‹kqueue
, &¥iv->
sme_c⁄fig_èsk
);

1304 
	`unifi_îr‹
(
¥iv
, "%†: WIFI ON faûed : %d\n", 
__FUNCTION__
, 
ªs
->
°©us
);

1305 
	`C§WifiRouãrCålWifiOnCfmSíd
(
msg
->
sour˚
, 
ªs
->
˛õ¡D©a
, 
CSR_RESULT_FAILURE
);

1307 
	}
}

1310 
	$C§WifiRouãrCålWifiOffResH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

1312 
	}
}

1315 
	$C§WifiRouãrCålMu…iˇ°AddªssResH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

1317 
	}
}

1320 
	$C§WifiRouãrMaPackëSubs¸ibeReqH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

1322 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

1323 
C§WifiRouãrMaPackëSubs¸ibeReq
 *
ªq
 = (C§WifiRouãrMaPackëSubs¸ibeReq *)
msg
;

1324 
C§Uöt8
 
i
;

1325 
C§Resu…
 
ªsu…
;

1327 i‡(
¥iv
 =
NULL
)

1329 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterMaPacketSubscribeReqHandler: invalidÖriv\n");

1335 
ªsu…
 = 
CSR_WIFI_RESULT_NO_ROOM
;

1336 
i
 = 0; i < 
MAX_MA_UNIDATA_IND_FILTERS
; i++)

1338 i‡(!
¥iv
->
sme_unid©a_öd_fûãrs
[
i
].
ö_u£
)

1340 
¥iv
->
sme_unid©a_öd_fûãrs
[
i
].
ö_u£
 = 1;

1341 
¥iv
->
sme_unid©a_öd_fûãrs
[
i
].
≠pH™dÀ
 = 
msg
->
sour˚
;

1342 
¥iv
->
sme_unid©a_öd_fûãrs
[
i
].
íˇpsuœti⁄
 = 
ªq
->encapsulation;

1343 
¥iv
->
sme_unid©a_öd_fûãrs
[
i
].
¥Ÿocﬁ
 = 
ªq
->protocol;

1345 
¥iv
->
sme_unid©a_öd_fûãrs
[
i
].
oui
[2] = (
C§Uöt8
Ë(
ªq
->oui & 0xFF);

1346 
¥iv
->
sme_unid©a_öd_fûãrs
[
i
].
oui
[1] = (
C§Uöt8
Ë((
ªq
->oui >> 8) & 0xFF);

1347 
¥iv
->
sme_unid©a_öd_fûãrs
[
i
].
oui
[0] = (
C§Uöt8
Ë((
ªq
->oui >> 16) & 0xFF);

1349 
ªsu…
 = 
CSR_RESULT_SUCCESS
;

1354 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,

1356 
ªq
->
íˇpsuœti⁄
, 
i
, 
ªsu…
);

1357 
	`C§WifiRouãrMaPackëSubs¸ibeCfmSíd
(
msg
->
sour˚
, 
ªq
->
öãrÁ˚Tag
, 
i
, 
ªsu…
, 0);

1358 
	}
}

1361 
	$C§WifiRouãrMaPackëUnsubs¸ibeReqH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

1363 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

1364 
C§WifiRouãrMaPackëUnsubs¸ibeReq
 *
ªq
 = (C§WifiRouãrMaPackëUnsubs¸ibeReq *)
msg
;

1365 
C§Resu…
 
ªsu…
;

1367 i‡(
¥iv
 =
NULL
)

1369 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterMaPacketUnsubscribeReqHandler: invalidÖriv\n");

1373 
ªsu…
 = 
CSR_WIFI_RESULT_NOT_FOUND
;

1375 i‡(
ªq
->
subs¸ùti⁄H™dÀ
 < 
MAX_MA_UNIDATA_IND_FILTERS
)

1377 i‡(
¥iv
->
sme_unid©a_öd_fûãrs
[
ªq
->
subs¸ùti⁄H™dÀ
].
ö_u£
)

1379 
¥iv
->
sme_unid©a_öd_fûãrs
[
ªq
->
subs¸ùti⁄H™dÀ
].
ö_u£
 = 0;

1380 
ªsu…
 = 
CSR_RESULT_SUCCESS
;

1384 
ªsu…
 = 
CSR_WIFI_RESULT_NOT_FOUND
;

1388 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,

1390 
ªq
->
subs¸ùti⁄H™dÀ
, 
ªsu…
);

1391 
	`C§WifiRouãrMaPackëUnsubs¸ibeCfmSíd
(
msg
->
sour˚
, 
ªq
->
öãrÁ˚Tag
, 
ªsu…
);

1392 
	}
}

1395 
	$C§WifiRouãrCålC≠abûôõsReqH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

1397 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

1398 
C§WifiRouãrCålC≠abûôõsReq
 *
ªq
 = (C§WifiRouãrCålC≠abûôõsReq *)
msg
;

1400 i‡(
¥iv
 =
NULL
)

1402 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlCapabilitiesReqHandler: invalidÖriv\n");

1406 
	`C§WifiRouãrCålC≠abûôõsCfmSíd
(
msg
->
sour˚
, 
ªq
->
˛õ¡D©a
,

1407 
UNIFI_SOFT_COMMAND_Q_LENGTH
 - 1,

1408 
UNIFI_SOFT_TRAFFIC_Q_LENGTH
 - 1);

1409 
	}
}

1412 
	$C§WifiRouãrCålSu•ídResH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

1414 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

1415 
C§WifiRouãrCålSu•ídRes
 *
ªs
 = (C§WifiRouãrCålSu•ídRe†*)
msg
;

1417 i‡(
¥iv
 =
NULL
)

1419 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlSuspendResHandler: invalidÖriv\n");

1423 
	`sme_com∂ëe_ªque°
(
¥iv
, 
ªs
->
°©us
);

1424 
	}
}

1427 
	$C§WifiRouãrCålResumeResH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

1429 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

1430 
C§WifiRouãrCålResumeRes
 *
ªs
 = (C§WifiRouãrCålResumeRe†*)
msg
;

1432 i‡(
¥iv
 =
NULL
)

1434 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlResumeResHandler: invalidÖriv\n");

1438 
	`sme_com∂ëe_ªque°
(
¥iv
, 
ªs
->
°©us
);

1439 
	}
}

1442 
	$C§WifiRouãrCålTøfficC⁄figReqH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

1444 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

1445 
C§WifiRouãrCålTøfficC⁄figReq
 *
ªq
 = (C§WifiRouãrCålTøfficC⁄figReq *)
msg
;

1446 
C§Resu…
 
c§Resu…
;

1448 i‡(
¥iv
 =
NULL
)

1450 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlTrafficConfigReqHandler: invalid smepriv\n");

1453 i‡(
ªq
->
åafficC⁄figTy≥
 =
CSR_WIFI_ROUTER_CTRL_TRAFFIC_CONFIG_TYPE_FILTER
)

1455 
ªq
->
c⁄fig
.
∑ckëFûãr
 |
CSR_WIFI_ROUTER_CTRL_TRAFFIC_PACKET_TYPE_CUSTOM
;

1457 
c§Resu…
 = 
	`unifi_è_c⁄figuª
(
¥iv
->
ˇrd
, 
ªq
->
åafficC⁄figTy≥
, (c⁄° 
C§WifiRouãrCålTøfficC⁄fig
 *)&ªq->
c⁄fig
);

1458 
	}
}

1461 
	$C§WifiRouãrCålTøfficCœssifiˇti⁄ReqH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

1463 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

1464 
C§WifiRouãrCålTøfficCœssifiˇti⁄Req
 *
ªq
 = (C§WifiRouãrCålTøfficCœssifiˇti⁄Req *)
msg
;

1466 i‡(
¥iv
 =
NULL
)

1468 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlTrafficClassificationReqHandler: invalid smepriv\n");

1472 
	`unifi_è_˛assifiˇti⁄
(
¥iv
->
ˇrd
, 
ªq
->
åafficTy≥
,Ñeq->
≥riod
);

1473 
	}
}

1476 
	$_sys_∑ckë_ªq
(
unifi_¥iv_t
 *
¥iv
, c⁄° 
CSR_SIGNAL
 *
sig«l
,

1477 
C§Uöt8
 
subs¸ùti⁄H™dÀ
,

1478 
C§Uöt16
 
‰ameLígth
, 
C§Uöt8
 *
‰ame
,

1479 
¥Ÿo
)

1481 
r
;

1482 c⁄° 
sme_ma_unid©a_öd_fûãr_t
 *
subs
;

1483 
bulk_d©a_∑øm_t
 
bulkd©a
;

1484 
CSR_MA_PACKET_REQUEST
 
ªq
 = 
sig«l
->
u
.
MaPackëReque°
;

1485 
sk_buff
 *
skb
, *
√wSkb
 = 
NULL
;

1486 
C§WifiMacAddªss
 
≥îMacAddªss
;

1487 
C§Resu…
 
c§Resu…
;

1488 
C§Uöt16
 
öãrÁ˚Tag
 = 
ªq
.
VútuÆI¡îÁ˚Idítifõr
 & 0xff;

1489 
C§Boﬁ
 
ópﬁSt‹e
 = 
FALSE
;

1490 
C§I¡8
 
¥Ÿe˘i⁄
 = 0;

1491 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
;

1492 
Êags
;

1494 i‡(
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
)

1496 
	`unifi_îr‹
(
¥iv
, "_sys_packet_req: interfaceID >= CSR_WIFI_NUM_INTERFACES.\n");

1497  -
EINVAL
;

1499 
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

1500 i‡(!
¥iv
->
sme_unid©a_öd_fûãrs
[
subs¸ùti⁄H™dÀ
].
ö_u£
)

1502 
	`unifi_îr‹
(
¥iv
, "_sys_packet_req: unknown subscription.\n");

1503  -
EINVAL
;

1506 
subs
 = &
¥iv
->
sme_unid©a_öd_fûãrs
[
subs¸ùti⁄H™dÀ
];

1507 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,

1509 
subs¸ùti⁄H™dÀ
, 
subs
, subs->
íˇpsuœti⁄
);

1511 
c§Resu…
 = 
	`unifi_√t_d©a_mÆloc
(
¥iv
, &
bulkd©a
.
d
[0], 
‰ameLígth
);

1512 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
)

1514 
	`unifi_îr‹
(
¥iv
, "_sys_packet_req: failedÅoállocate bulkdata.\n");

1515  ()
	`C§HùResu…ToSètus
(
c§Resu…
);

1519 
	`mem˝y
(&
≥îMacAddªss
, 
‰ame
, 
ETH_ALEN
);

1522 i‡(
subs
->
íˇpsuœti⁄
 =
CSR_WIFI_ROUTER_ENCAPSULATION_ETHERNET
)

1524 
	`mem˝y
((*)
bulkd©a
.
d
[0].
os_d©a_±r
, 
‰ame
, 
‰ameLígth
);

1527 
skb
 = (
sk_buff
 *)
bulkd©a
.
d
[0].
os_√t_buf_±r
;

1529 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,

1531 
r
 = 
	`skb_add_Œc_¢≠
(
¥iv
->
√tdev
[
öãrÁ˚Tag
], 
skb
, 
¥Ÿo
);

1532 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,

1534 i‡(
r
)

1536 
	`unifi_îr‹
(
¥iv
,

1538 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
.
d
[0]);

1539  
r
;

1542 
bulkd©a
.
d
[0].
d©a_Àngth
 = 
skb
->
Àn
;

1547 
	`mem˝y
((*)
bulkd©a
.
d
[0].
os_d©a_±r
, 
‰ame
 + 2 * 
ETH_ALEN
, 
‰ameLígth
 - 2 * ETH_ALEN);

1548 
bulkd©a
.
d
[0].
d©a_Àngth
 = 
‰ameLígth
 - 2 * 
ETH_ALEN
;

1549 
skb
 = (
sk_buff
 *)
bulkd©a
.
d
[0].
os_√t_buf_±r
;

1550 
skb
->
Àn
 = 
bulkd©a
.
d
[0].
d©a_Àngth
;

1553 
bulkd©a
.
d
[1].
os_d©a_±r
 = 
NULL
;

1554 
bulkd©a
.
d
[1].
os_√t_buf_±r
 = 
NULL
;

1555 
bulkd©a
.
d
[1].
d©a_Àngth
 = 0;

1558 i‡(0 =
	`uf_vîify_m4
(
¥iv
, 
bulkd©a
.
d
[0].
os_d©a_±r
, bulkd©a.d[0].
d©a_Àngth
))

1560 
ópﬁSt‹e
 = 
TRUE
;

1563 #ifde‡
CSR_WIFI_SECURITY_WAPI_ENABLE


1564 i‡(
¥Ÿo
 =
ETH_P_WAI
)

1566 
¥Ÿe˘i⁄
 = 0;

1572 #ifde‡
CSR_SUPPORT_SME


1573 i‡((
¥Ÿe˘i⁄
 = 
	`uf_gë_¥Ÿe˘i⁄_bô_‰om_öãrÁ˚mode
(
¥iv
, 
öãrÁ˚Tag
, 
≥îMacAddªss
.
a
)) < 0)

1575 
	`unifi_îr‹
(
¥iv
, "unicastáddress, but destinationÇot in stationÑecord database\n");

1576 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
.
d
[0]);

1580 
¥Ÿe˘i⁄
 = 0;

1583 #ifde‡
CSR_WIFI_SECURITY_WAPI_ENABLE


1591 i‡(
	`¥ï¨e_™d_add_machódî
(
¥iv
, 
skb
, 
√wSkb
, 
ªq
.
Pri‹ôy
, &
bulkd©a
, 
öãrÁ˚Tag
, 
‰ame
, fømê+ 
ETH_ALEN
, 
¥Ÿe˘i⁄
))

1593 
	`unifi_îr‹
(
¥iv
, "failedÅo create MAC header\n");

1594 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
.
d
[0]);

1598 i‡(
ópﬁSt‹e
)

1600 
	`•ö_lock_úqßve
(&
¥iv
->
m4_lock
, 
Êags
);

1602 
öãrÁ˚Priv
->
m4_sig«l
 = *
sig«l
;

1603 
öãrÁ˚Priv
->
m4_bulk_d©a
.
√t_buf_Àngth
 = 
bulkd©a
.
d
[0].net_buf_length;

1604 
öãrÁ˚Priv
->
m4_bulk_d©a
.
d©a_Àngth
 = 
bulkd©a
.
d
[0].data_length;

1605 
öãrÁ˚Priv
->
m4_bulk_d©a
.
os_d©a_±r
 = 
bulkd©a
.
d
[0].os_data_ptr;

1606 
öãrÁ˚Priv
->
m4_bulk_d©a
.
os_√t_buf_±r
 = 
bulkd©a
.
d
[0].os_net_buf_ptr;

1607 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
m4_lock
, 
Êags
);

1609 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "_sys_packet_req: Sending CsrWifiRouterCtrlM4ReadyToSendInd\n");

1610 
	`C§WifiRouãrCålM4RódyToSídIndSíd
(
¥iv
->
CSR_WIFI_SME_IFACEQUEUE
, 0, 
öãrÁ˚Tag
, 
≥îMacAddªss
);

1616 
r
 = 
	`uf_¥o˚ss_ma_∑ckë_ªq
(
¥iv
, 
≥îMacAddªss
.
a
, (
ªq
.
Ho°Tag
 | 0x80000000), 
öãrÁ˚Tag
, 0,

1617 (
CSR_RATE
)0, 
ªq
.
Pri‹ôy
, 
sig«l
->
Sig«lPrimôiveHódî
.
SídîPro˚ssId
, &
bulkd©a
);

1618 i‡(
r
)

1620 
	`unifi_îr‹
(
¥iv
,

1622 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
.
d
[0]);

1623  
r
;

1628 
	}
}

1630 
	$C§WifiRouãrMaPackëReqH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

1632 
r
;

1633 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

1634 
C§WifiRouãrMaPackëReq
 *
m¨eq
 = (C§WifiRouãrMaPackëReq *)
msg
;

1635 
Œc_¢≠_hdr_t
 *
¢≠
;

1636 
C§Uöt16
 
¢≠_¥Ÿocﬁ
;

1637 
CSR_SIGNAL
 
sig«l
;

1638 
CSR_MA_PACKET_REQUEST
 *
ªq
 = &
sig«l
.
u
.
MaPackëReque°
;

1639 
C§WifiRouãrCålP‹tA˘i⁄
 
c⁄åﬁP‹è˘i⁄
;

1640 
C§Uöt8
 *
daddr
, *
ßddr
;

1641 
C§Uöt16
 
öãrÁ˚Tag
 = 
m¨eq
->interfaceTag & 0x00ff;

1642 
queue
;

1643 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

1645 i‡(!
m¨eq
->
‰ame
 || !
¥iv
 || !¥iv->
smïriv
)

1647 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterMaPacketReqHandler: invalid frame/priv/priv->smepriv\n");

1651 i‡(
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
)

1653 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterMaPacketReqHandler: interfaceID >= CSR_WIFI_NUM_INTERFACES.\n");

1657 
daddr
 = 
m¨eq
->
‰ame
;

1658 
ßddr
 = (
m¨eq
->
‰ame
 + 
ETH_ALEN
);

1660 
¢≠
 = (
Œc_¢≠_hdr_t
 *Ë(
m¨eq
->
‰ame
 + 2 * 
ETH_ALEN
);

1661 
¢≠_¥Ÿocﬁ
 = 
	`¡ohs
(
¢≠
->
¥Ÿocﬁ
);

1662 i‡((
¢≠_¥Ÿocﬁ
 =
ETH_P_PAE
)

1663 #ifde‡
CSR_WIFI_SECURITY_WAPI_ENABLE


1664 || (
¢≠_¥Ÿocﬁ
 =
ETH_P_WAI
)

1668 
queue
 = 
UF_UNCONTROLLED_PORT_Q
;

1672 
queue
 = 
UF_CONTROLLED_PORT_Q
;

1676 
c⁄åﬁP‹è˘i⁄
 = 
	`uf_sme_p‹t_°©e
(
¥iv
, 
daddr
, 
queue
, 
öãrÁ˚Tag
);

1677 i‡(
c⁄åﬁP‹è˘i⁄
 !
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_OPEN
)

1679 
	`unifi_w¨nög
(
¥iv
, "C§WifiRouãrMaPackëReqH™dÀr: (%s)c⁄åﬁÀdÖ‹ài†˛o£d.\n", (
queue
 =
UF_CONTROLLED_PORT_Q
)?"" : "un");

1680 i‡(
m¨eq
->
cfmReque°ed
)

1682 
	`C§WifiRouãrMaPackëCfmSíd
(
msg
->
sour˚
,

1683 
öãrÁ˚Tag
,

1684 
CSR_RESULT_FAILURE
,

1685 
m¨eq
->
ho°Tag
, 0);

1690 
sig«l
.
Sig«lPrimôiveHódî
.
Sig«lId
 = 
CSR_MA_PACKET_REQUEST_ID
;

1692 #ifde‡
__powîpc__


1693 
sig«l
.
Sig«lPrimôiveHódî
.
SídîPro˚ssId
 = 
	`ht⁄s
((
¥iv
->
sme_˛i
->
£ndî_id
 & 0xff00Ë| ()
msg
->
sour˚
);

1695 
	`CSR_COPY_UINT16_TO_LITTLE_ENDIAN
(((
¥iv
->
sme_˛i
->
£ndî_id
 & 0xff00Ë| ()
msg
->
sour˚
),

1696 (
u8
 *)&
sig«l
.
Sig«lPrimôiveHódî
.
SídîPro˚ssId
);

1699 
sig«l
.
Sig«lPrimôiveHódî
.
Re˚ivîPro˚ssId
 = 0;

1702 
	`mem˝y
(
ªq
->
Ra
.
x
, 
daddr
, 
ETH_ALEN
);

1703 
ªq
->
Pri‹ôy
 = 
m¨eq
->
¥i‹ôy
;

1704 
ªq
->
TønsmôR©e
 = 0;

1705 
ªq
->
VútuÆI¡îÁ˚Idítifõr
 = 
	`uf_gë_vif_idítifõr
(
öãrÁ˚Priv
->
öãrÁ˚Mode
, 
öãrÁ˚Tag
);

1706 
ªq
->
Ho°Tag
 = 
m¨eq
->
ho°Tag
;

1708 i‡(
m¨eq
->
cfmReque°ed
)

1710 
ªq
->
Tønsmissi⁄C⁄åﬁ
 = 0;

1714 
ªq
->
Tønsmissi⁄C⁄åﬁ
 = 
CSR_NO_CONFIRM_REQUIRED
;

1717 
r
 = 
	`_sys_∑ckë_ªq
(
¥iv
, &
sig«l
, 
m¨eq
->
subs¸ùti⁄H™dÀ
,

1718 
m¨eq
->
‰ameLígth
, m¨eq->
‰ame
, 
¢≠_¥Ÿocﬁ
);

1720 
	#MAX_RETRY
 2

	)

1721 i‡(
r
 && 
m¨eq
->
cfmReque°ed
)

1723 
	`C§WifiRouãrMaPackëCfmSíd
(
msg
->
sour˚
, 
öãrÁ˚Tag
,

1724 
CSR_RESULT_FAILURE
,

1725 
m¨eq
->
ho°Tag
, 0);

1727 
	}
}

1730 
	$C§WifiRouãrMaPackëC™˚lReqH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

1732 
	}
}

1735 
	$C§WifiRouãrCålM4TønsmôReqH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

1737 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

1738 
C§WifiRouãrCålM4TønsmôReq
 *
ªq
 = (C§WifiRouãrCålM4TønsmôReq *)
msg
;

1739 
r
;

1740 
bulk_d©a_∑øm_t
 
bulkd©a
;

1741 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
;

1742 
CSR_SIGNAL
 
m4_sig«l
;

1743 
Êags
;

1745 i‡(
¥iv
 =
NULL
)

1747 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlM4TransmitReqHandler: invalid smepriv\n");

1750 i‡(
ªq
->
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
)

1752 
	`unifi_îr‹
(
¥iv
, "M4TransmitReqHandler: interfaceTag >= CSR_WIFI_NUM_INTERFACES\n");

1756 
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
ªq
->
öãrÁ˚Tag
];

1757 
	`•ö_lock_úqßve
(&
¥iv
->
m4_lock
, 
Êags
);

1758 i‡(
öãrÁ˚Priv
->
m4_bulk_d©a
.
d©a_Àngth
 == 0)

1760 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
m4_lock
, 
Êags
);

1761 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlM4TransmitReqHandler: invalid buffer\n");

1765 
	`mem˝y
(&
bulkd©a
.
d
[0], &
öãrÁ˚Priv
->
m4_bulk_d©a
, (
bulk_d©a_desc_t
));

1767 
öãrÁ˚Priv
->
m4_bulk_d©a
.
√t_buf_Àngth
 = 0;

1768 
öãrÁ˚Priv
->
m4_bulk_d©a
.
d©a_Àngth
 = 0;

1769 
öãrÁ˚Priv
->
m4_bulk_d©a
.
os_d©a_±r
 = i¡îÁ˚Priv->m4_bulk_d©a.
os_√t_buf_±r
 = 
NULL
;

1770 
m4_sig«l
 = 
öãrÁ˚Priv
->m4_signal;

1771 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
m4_lock
, 
Êags
);

1773 
bulkd©a
.
d
[1].
os_d©a_±r
 = 
NULL
;

1774 
bulkd©a
.
d
[1].
d©a_Àngth
 = 0;

1776 
öãrÁ˚Priv
->
m4_£¡
 = 
TRUE
;

1777 
m4_sig«l
.
u
.
MaPackëReque°
.
Ho°Tag
 |= 0x80000000;

1779 
öãrÁ˚Priv
->
m4_ho°Tag
 = 
m4_sig«l
.
u
.
MaPackëReque°
.
Ho°Tag
;

1780 
r
 = 
	`ul_£nd_sig«l_u≈acked
(
¥iv
, &
m4_sig«l
, &
bulkd©a
);

1781 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,

1783 i‡(
r
)

1785 
	`unifi_îr‹
(
¥iv
,

1787 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
.
d
[0]);

1789 
	}
}

1793 
	$C§WifiRouãrCålRe£tSèti⁄Rec‹dLi°
(
unifi_¥iv_t
 *
¥iv
, 
C§Uöt16
 
öãrÁ˚Tag
)

1795 
C§Uöt8
 
i
, 
j
;

1796 
C§WifiRouãrCålSèInfo_t
 *
°aInfo
 = 
NULL
;

1797 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

1798 
lock_Êags
;

1801 
li°_hód
 
£nd_cfm_li°
;

1803 i‡(
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
)

1805 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlResetStationRecordList: bad interfaceTag\n");

1809 
	`INIT_LIST_HEAD
(&
£nd_cfm_li°
);

1812 
i
 = 0; i < 
UNIFI_MAX_CONNECTIONS
; i++)

1814 i‡((
°aInfo
 = 
öãrÁ˚Priv
->°aInfo[
i
]Ë!
NULL
)

1816 
	`uf_¥ï¨e_£nd_cfm_li°_f‹_queued_pkts
(
¥iv
,

1817 &
£nd_cfm_li°
,

1818 &(
°aInfo
->
mgtFømes
));

1819 
	`uf_Êush_li°
(
¥iv
, &(
°aInfo
->
mgtFømes
));

1820 
j
 = 0; j < 
MAX_ACCESS_CATOGORY
; j++)

1822 
	`uf_¥ï¨e_£nd_cfm_li°_f‹_queued_pkts
(
¥iv
,

1823 &
£nd_cfm_li°
,

1824 &(
°aInfo
->
d©aPdu
[
j
]));

1825 
	`uf_Êush_li°
(
¥iv
, &(
°aInfo
->
d©aPdu
[
j
]));

1828 
	`•ö_lock_úqßve
(&
¥iv
->
°aRec‹d_lock
, 
lock_Êags
);

1830 
	`mem£t
(
°aInfo
->
≥îC⁄åﬁÀdP‹t
, 0, (
unifi_p‹t_cfg_t
));

1831 
°aInfo
->
≥îC⁄åﬁÀdP‹t
->
p‹t_a˘i⁄
 = 
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_CLOSED_DISCARD
;

1832 
°aInfo
->
≥îC⁄åﬁÀdP‹t
->
ö_u£
 = 
FALSE
;

1833 
öãrÁ˚Priv
->
c⁄åﬁÀd_d©a_p‹t
.
íåõs_ö_u£
--;

1835 
	`mem£t
(
°aInfo
->
≥îUnC⁄åﬁÀdP‹t
, 0, (
unifi_p‹t_cfg_t
));

1836 
°aInfo
->
≥îUnC⁄åﬁÀdP‹t
->
p‹t_a˘i⁄
 = 
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_CLOSED_DISCARD
;

1837 
°aInfo
->
≥îUnC⁄åﬁÀdP‹t
->
ö_u£
 = 
FALSE
;

1838 
öãrÁ˚Priv
->
unc⁄åﬁÀd_d©a_p‹t
.
íåõs_ö_u£
--;

1840 
	`k‰ì
(
öãrÁ˚Priv
->
°aInfo
[
i
]);

1841 
öãrÁ˚Priv
->
°aInfo
[
i
] = 
NULL
;

1842 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
°aRec‹d_lock
, 
lock_Êags
);

1848 
	`£nd_auto_ma_∑ckë_c⁄fúm
(
¥iv
, 
öãrÁ˚Priv
, &
£nd_cfm_li°
);

1850 #ifde‡
CSR_SUPPORT_SME


1852 
öãrÁ˚Priv
->
öãrÁ˚Mode
)

1854 
CSR_WIFI_ROUTER_CTRL_MODE_AP
:

1855 
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
:

1856 
CSR_WIFI_ROUTER_CTRL_MODE_NONE
:

1857 i‡(
¥iv
->
noOfPktQueuedInDrivî
)

1859 
	`unifi_w¨nög
(
¥iv
, "A·îÑe£àthênoOfPktQueuedInDrivî = %x\n",Öriv->
noOfPktQueuedInDrivî
);

1860 
	`•ö_lock_úqßve
(&
¥iv
->
tx_q_lock
, 
lock_Êags
);

1861 
¥iv
->
noOfPktQueuedInDrivî
 = 0;

1862 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
tx_q_lock
, 
lock_Êags
);

1865 
CSR_WIFI_ROUTER_CTRL_MODE_IBSS
:

1868 
	`unifi_îr‹
(
¥iv
, "interfacemode isÇot correct in CsrWifiRouterCtrlResetStationRecordList: debug\n");

1872 i‡(((
öãrÁ˚Priv
->
c⁄åﬁÀd_d©a_p‹t
.
íåõs_ö_u£
 !0Ë|| (öãrÁ˚Priv->
unc⁄åﬁÀd_d©a_p‹t
.entries_in_use != 0))

1873 && (
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_NONE
))

1878 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "In %s controlledÖortÉntries = %d, uncontrolledÖortÉntries = %d\n",

1879 
__FUNCTION__
, 
öãrÁ˚Priv
->
c⁄åﬁÀd_d©a_p‹t
.
íåõs_ö_u£
,

1880 
öãrÁ˚Priv
->
unc⁄åﬁÀd_d©a_p‹t
.
íåõs_ö_u£
);

1882 
	}
}

1885 
	$C§WifiRouãrCålI¡îÁ˚Re£t
(
unifi_¥iv_t
 *
¥iv
, 
C§Uöt16
 
öãrÁ˚Tag
)

1887 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
;

1890 
li°_hód
 
£nd_cfm_li°
;

1892 i‡(
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
)

1894 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlInterfaceReset: bad interfaceTag\n");

1898 
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

1900 
	`INIT_LIST_HEAD
(&
£nd_cfm_li°
);

1903 
öãrÁ˚Priv
->
queueE«bÀd
[0] = 1;

1904 
öãrÁ˚Priv
->
queueE«bÀd
[1] = 1;

1905 
öãrÁ˚Priv
->
queueE«bÀd
[2] = 1;

1906 
öãrÁ˚Priv
->
queueE«bÀd
[3] = 1;

1908 
	`uf_¥ï¨e_£nd_cfm_li°_f‹_queued_pkts
(
¥iv
,

1909 &
£nd_cfm_li°
,

1910 &(
öãrÁ˚Priv
->
gíîicMgtFømes
));

1911 
	`uf_Êush_li°
(
¥iv
, &(
öãrÁ˚Priv
->
gíîicMgtFømes
));

1913 
	`uf_¥ï¨e_£nd_cfm_li°_f‹_queued_pkts
(
¥iv
,

1914 &
£nd_cfm_li°
,

1915 &(
öãrÁ˚Priv
->
gíîicMu…iˇ°OrBrﬂdCa°MgtFømes
));

1916 
	`uf_Êush_li°
(
¥iv
, &(
öãrÁ˚Priv
->
gíîicMu…iˇ°OrBrﬂdCa°MgtFømes
));

1918 
	`uf_¥ï¨e_£nd_cfm_li°_f‹_queued_pkts
(
¥iv
,

1919 &
£nd_cfm_li°
,

1920 &(
öãrÁ˚Priv
->
gíîicMu…iˇ°OrBrﬂdCa°Fømes
));

1922 
	`uf_Êush_li°
(
¥iv
, &(
öãrÁ˚Priv
->
gíîicMu…iˇ°OrBrﬂdCa°Fømes
));

1926 
	`£nd_auto_ma_∑ckë_c⁄fúm
(
¥iv
, 
öãrÁ˚Priv
, &
£nd_cfm_li°
);

1929 
öãrÁ˚Priv
->
öãrÁ˚Mode
)

1931 
CSR_WIFI_ROUTER_CTRL_MODE_STA
:

1932 
CSR_WIFI_ROUTER_CTRL_MODE_P2P
:

1933 
CSR_WIFI_ROUTER_CTRL_MODE_P2PCLI
:

1934 
CSR_WIFI_ROUTER_CTRL_MODE_MONITOR
:

1935 
CSR_WIFI_ROUTER_CTRL_MODE_AMP
:

1939 
	`C§WifiRouãrCålRe£tSèti⁄Rec‹dLi°
(
¥iv
, 
öãrÁ˚Tag
);

1942 
öãrÁ˚Priv
->
num_°©i⁄s_joöed
 = 0;

1943 
öãrÁ˚Priv
->
°a_a˘ivôy_check_íabÀd
 = 
FALSE
;

1944 
	}
}

1947 
	$C§WifiRouãrCålModeSëReqH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

1949 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

1950 
C§WifiRouãrCålModeSëReq
 *
ªq
 = (C§WifiRouãrCålModeSëReq *)
msg
;

1952 i‡(
¥iv
 =
NULL
)

1954 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlModeSetReqHandler: invalid smepriv\n");

1958 i‡(
ªq
->
öãrÁ˚Tag
 < 
CSR_WIFI_NUM_INTERFACES
)

1960 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
ªq
->
öãrÁ˚Tag
];

1961 #i‡
	`deföed
(
CSR_WIFI_SPLIT_PATCH
Ë&& !deföed(
CSR_WIFI_FW_RELOAD
)

1962 
C§Uöt8
 
ﬁd_mode
 = 
öãrÁ˚Priv
->
öãrÁ˚Mode
;

1964 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "CsrWifiRouterCtrlModeSetReqHandler: interfacePriv->interfaceMode = %d\n",

1965 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

1967 #ifde‡
CSR_WIFI_FW_RELOAD


1969 i‡(
ªq
->
mode
 != 0)

1971 i‡((
	`CSR_WIFI_HIP_IS_AP_FW
(
ªq
->
mode
Ë&& 
öãrÁ˚Priv
->
∑tchMode
 == 0) ||

1972 (!
	`CSR_WIFI_HIP_IS_AP_FW
(
ªq
->
mode
Ë&& 
öãrÁ˚Priv
->
∑tchMode
 == 1))

1974 
	`unifi_îr‹
(
¥iv
, "%s : mode changeÇotállowed (req = %d ;Öatch = %d)\n",

1975 
__FUNCTION__
, 
ªq
->
mode
, 
öãrÁ˚Priv
->
∑tchMode
);

1977 
	`C§WifiRouãrCålModeSëCfmSíd
(
msg
->
sour˚
, 
ªq
->
˛õ¡D©a
,Ñeq->
öãrÁ˚Tag
,

1978 
ªq
->
mode
, 
CSR_RESULT_FAILURE
);

1983 
öãrÁ˚Priv
->
öãrÁ˚Mode
 = 
ªq
->
mode
;

1985 #i‡
	`deföed
(
CSR_WIFI_SPLIT_PATCH
Ë&& !deföed(
CSR_WIFI_FW_RELOAD
)

1990 i‡((
	`CSR_WIFI_HIP_IS_AP_FW
(
ªq
->
mode
Ë&& !
öãrÁ˚Priv
->
∑tchMode
) ||

1991 (
	`CSR_WIFI_HIP_IS_STA_FW
(
ªq
->
mode
Ë&& 
öãrÁ˚Priv
->
∑tchMode
))

1993 
C§WifiRouãrCålVîsi⁄s
 
vîsi⁄s
;

1994 
r
;

1996 #ifde‡
ANDROID_BUILD


1998 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "patch switch:Åake wakeÜock\n");

1999 
	`wake_lock
(&
unifi_sdio_wake_lock
);

2001 
	`unifi_öfo
(
¥iv
, "Re£âög UniFòwôh %†∑tch\n", 
	`CSR_WIFI_HIP_IS_AP_FW
(
ªq
->
mode
)?"AP" : "STA");

2002 
öãrÁ˚Priv
->
∑tchMode
 = 
	`CSR_WIFI_HIP_IS_AP_FW
(
ªq
->
mode
);

2003 
r
 = 
	`uf_ªque°_fúmw¨e_fûes
(
¥iv
, 
UNIFI_FW_STA
);

2004 i‡(
r
)

2006 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlModeSetReqHandler: FailedÅo get f/w\n");

2007 
	`C§WifiRouãrCålModeSëCfmSíd
(
msg
->
sour˚
, 
ªq
->
˛õ¡D©a
,Ñeq->
öãrÁ˚Tag
,

2008 
ªq
->
mode
, 
CSR_RESULT_FAILURE
);

2009 
öãrÁ˚Priv
->
∑tchMode
 = 
ﬁd_mode
;

2014 
¥iv
->
bh_thªad
.
block_thªad
 = 1;

2017 
r
 = 
	`uf_öô_hw
(
¥iv
);

2018 i‡(
r
)

2020 
	`unifi_îr‹
(
¥iv
, "C§WifiRouãrCålWifiOnReqH™dÀr: FaûedÅÿöôüli£ h/w,Éº‹ %d\n", 
r
);

2021 
	`C§WifiRouãrCålModeSëCfmSíd
(
msg
->
sour˚
, 
ªq
->
˛õ¡D©a
,Ñeq->
öãrÁ˚Tag
,

2022 
ªq
->
mode
, 
CSR_RESULT_FAILURE
);

2023 
öãrÁ˚Priv
->
∑tchMode
 = 
ﬁd_mode
;

2028 
¥iv
->
bh_thªad
.
block_thªad
 = 0;

2031 
	`unifi_ˇrd_öfo
(
¥iv
->
ˇrd
, &¥iv->
ˇrd_öfo
);

2034 
vîsi⁄s
.
chùId
 = 
¥iv
->
ˇrd_öfo
.
chù_id
;

2035 
vîsi⁄s
.
chùVîsi⁄
 = 
¥iv
->
ˇrd_öfo
.
chù_vîsi⁄
;

2036 
vîsi⁄s
.
fúmw¨eBuûd
 = 
¥iv
->
ˇrd_öfo
.
fw_buûd
;

2037 
vîsi⁄s
.
fúmw¨eHù
 = 
¥iv
->
ˇrd_öfo
.
fw_hù_vîsi⁄
;

2038 
vîsi⁄s
.
rouãrBuûd
 = (
C§Ch¨Såög
 *)
CSR_WIFI_VERSION
;

2039 
vîsi⁄s
.
rouãrHù
 = (
UNIFI_HIP_MAJOR_VERSION
 << 8Ë| 
UNIFI_HIP_MINOR_VERSION
;

2044 
	`C§WifiRouãrCålWifiOnIndSíd
(
msg
->
sour˚
, 0, 
CSR_RESULT_SUCCESS
, 
vîsi⁄s
, 0);

2047 
¥iv
->
≥ndög_mode_£t
 = *
ªq
;

2053 
	`C§WifiRouãrCålModeSëCfmSíd
(
msg
->
sour˚
, 
ªq
->
˛õ¡D©a
,Ñeq->
öãrÁ˚Tag
,

2054 
ªq
->
mode
, 
CSR_RESULT_SUCCESS
);

2057 
öãrÁ˚Priv
->
bssid
 = 
ªq
->bssid;

2059 
öãrÁ˚Priv
->
öåaBssE«bÀd
 = 
FALSE
;

2063 
öãrÁ˚Priv
->
bcTimSë
 = 0xFF;

2064 
öãrÁ˚Priv
->
bcTimSëReqPídögFœg
 = 
FALSE
;

2068 
öãrÁ˚Priv
->
bcTimSëReqQueued
 = 0xFF;

2069 
	`C§WifiRouãrCålI¡îÁ˚Re£t
(
¥iv
, 
ªq
->
öãrÁ˚Tag
);

2071 i‡(
ªq
->
mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
 ||

2072 
ªq
->
mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
)

2074 
öãrÁ˚Priv
->
¥Ÿe˘
 = 
ªq
->
¥Ÿe˘i⁄
;

2075 
öãrÁ˚Priv
->
dtimA˘ive
 = 
FALSE
;

2076 
öãrÁ˚Priv
->
mu…iˇ°PduHo°Tag
 = 0xffffffff;

2081 
öãrÁ˚Priv
->
öåaBssE«bÀd
 = 
ªq
->
öåaBssDi°E«bÀd
;

2082 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "CsrWifiRouterCtrlModeSetReqHandler: IntraBssDisEnabled = %d\n",

2083 
ªq
->
öåaBssDi°E«bÀd
);

2085 i‡(
ªq
->
mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_NONE
)

2087 
	`√tif_ˇºõr_off
(
¥iv
->
√tdev
[
ªq
->
öãrÁ˚Tag
]);

2088 
öãrÁ˚Priv
->
c⁄√˘ed
 = 
UnifiC⁄√˘edUnknown
;

2093 
	`unifi_îr‹
(
¥iv
, "C§WifiRouãrCålModeSëReqH™dÀr: invÆid i¡îÁ˚Tag :%d\n", 
ªq
->
öãrÁ˚Tag
);

2095 
	}
}

2098 
	$C§WifiRouãrMaPackëResH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

2100 
	}
}

2104 
	$≥î_dñëe_ªc‹d
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiRouãrCålPìrDñReq
 *
ªq
)

2106 
C§Uöt8
 
j
;

2107 
C§WifiRouãrCålSèInfo_t
 *
°aInfo
 = 
NULL
;

2108 
unifi_p‹t_c⁄fig_t
 *
c⁄åﬁÀdP‹t
;

2109 
unifi_p‹t_c⁄fig_t
 *
unC⁄åﬁÀdP‹t
;

2110 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
;

2112 
C§Uöt8
 
ba_£ssi⁄_idx
 = 0;

2113 
ba_£ssi⁄_rx_°ru˘
 *
ba_£ssi⁄_rx
 = 
NULL
;

2114 
ba_£ssi⁄_tx_°ru˘
 *
ba_£ssi⁄_tx
 = 
NULL
;

2117 
li°_hód
 
£nd_cfm_li°
;

2119 
lock_Êags
;

2121 i‡((
ªq
->
≥îRec‹dH™dÀ
 >
UNIFI_MAX_CONNECTIONS
Ë|| (ªq->
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
))

2123 
	`unifi_îr‹
(
¥iv
, "h™dÀ/öãrÁ˚Tag i†nŸÖr›î, h™dÀ = %d, i¡îÁ˚Tag = %d\n", 
ªq
->
≥îRec‹dH™dÀ
,Ñeq->
öãrÁ˚Tag
);

2124  
CSR_RESULT_FAILURE
;

2127 
	`INIT_LIST_HEAD
(&
£nd_cfm_li°
);

2129 
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
ªq
->
öãrÁ˚Tag
];

2131 i‡((
°aInfo
 = 
öãrÁ˚Priv
->°aInfo[
ªq
->
≥îRec‹dH™dÀ
]Ë!
NULL
)

2133 
	`uf_¥ï¨e_£nd_cfm_li°_f‹_queued_pkts
(
¥iv
,

2134 &
£nd_cfm_li°
,

2135 &(
°aInfo
->
mgtFømes
));

2137 
	`uf_Êush_li°
(
¥iv
, &(
°aInfo
->
mgtFømes
));

2138 
j
 = 0; j < 
MAX_ACCESS_CATOGORY
; j++)

2140 
	`uf_¥ï¨e_£nd_cfm_li°_f‹_queued_pkts
(
¥iv
,

2141 &
£nd_cfm_li°
,

2142 &(
°aInfo
->
d©aPdu
[
j
]));

2143 
	`uf_Êush_li°
(
¥iv
, &(
°aInfo
->
d©aPdu
[
j
]));

2146 
	`•ö_lock_úqßve
(&
¥iv
->
°aRec‹d_lock
, 
lock_Êags
);

2148 
c⁄åﬁÀdP‹t
 = &
öãrÁ˚Priv
->
c⁄åﬁÀd_d©a_p‹t
;

2149 
unC⁄åﬁÀdP‹t
 = &
öãrÁ˚Priv
->
unc⁄åﬁÀd_d©a_p‹t
;

2151 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "peer_delete_record: Peer found handle = %d,Öort in use: cont(%d), unCont(%d)\n",

2152 
ªq
->
≥îRec‹dH™dÀ
, 
c⁄åﬁÀdP‹t
->
íåõs_ö_u£
, 
unC⁄åﬁÀdP‹t
->entries_in_use);

2154 
	`mem£t
(
°aInfo
->
≥îC⁄åﬁÀdP‹t
, 0, (
unifi_p‹t_cfg_t
));

2155 
°aInfo
->
≥îC⁄åﬁÀdP‹t
->
p‹t_a˘i⁄
 = 
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_CLOSED_DISCARD
;

2156 
°aInfo
->
≥îC⁄åﬁÀdP‹t
->
ö_u£
 = 
FALSE
;

2157 i‡(
c⁄åﬁÀdP‹t
->
íåõs_ö_u£
)

2159 
c⁄åﬁÀdP‹t
->
íåõs_ö_u£
--;

2163 
	`unifi_w¨nög
(
¥iv
, "number of controlledÖortÉntries is zero,ÅryingÅo decrement: debug\n");

2166 
	`mem£t
(
°aInfo
->
≥îUnC⁄åﬁÀdP‹t
, 0, (
unifi_p‹t_cfg_t
));

2167 
°aInfo
->
≥îUnC⁄åﬁÀdP‹t
->
p‹t_a˘i⁄
 = 
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_CLOSED_DISCARD
;

2168 
°aInfo
->
≥îUnC⁄åﬁÀdP‹t
->
ö_u£
 = 
FALSE
;

2169 i‡(
unC⁄åﬁÀdP‹t
->
íåõs_ö_u£
)

2171 
unC⁄åﬁÀdP‹t
->
íåõs_ö_u£
--;

2175 
	`unifi_w¨nög
(
¥iv
, "number of uncontrolledÖortÉntries is zero,ÅryingÅo decrement: debug\n");

2178 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
°aRec‹d_lock
, 
lock_Êags
);

2180 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 !
CSR_WIFI_ROUTER_CTRL_MODE_IBSS
 &&

2181 
°aInfo
->
timSë
 =
CSR_WIFI_TIM_SET
)

2183 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "peer is deleted so TIM updatedÅo 0, in firmware\n");

2184 
	`upd©e_tim
(
¥iv
, 
°aInfo
->
aid
, 0, 
ªq
->
öãrÁ˚Tag
,Ñeq->
≥îRec‹dH™dÀ
);

2191 
	`down
(&
¥iv
->
ba_muãx
);

2192 
ba_£ssi⁄_idx
 = 0; ba_£ssi⁄_idx < 
MAX_SUPPORTED_BA_SESSIONS_RX
; ba_session_idx++)

2194 
ba_£ssi⁄_rx
 = 
¥iv
->
öãrÁ˚Priv
[
ªq
->
öãrÁ˚Tag
]->ba_£ssi⁄_rx[
ba_£ssi⁄_idx
];

2195 i‡(
ba_£ssi⁄_rx
)

2197 i‡(!
	`memcmp
(
ba_£ssi⁄_rx
->
macAddªss
.
a
, 
°aInfo
->
≥îMacAddªss
.a, 
ETH_ALEN
))

2199 
	`blockack_£ssi⁄_°›
(
¥iv
,

2200 
ªq
->
öãrÁ˚Tag
,

2201 
CSR_WIFI_ROUTER_CTRL_BLOCK_ACK_RECIPIENT
,

2202 
ba_£ssi⁄_rx
->
tID
,

2203 
ba_£ssi⁄_rx
->
macAddªss
);

2208 
ba_£ssi⁄_idx
 = 0; ba_£ssi⁄_idx < 
MAX_SUPPORTED_BA_SESSIONS_TX
; ba_session_idx++)

2210 
ba_£ssi⁄_tx
 = 
¥iv
->
öãrÁ˚Priv
[
ªq
->
öãrÁ˚Tag
]->ba_£ssi⁄_tx[
ba_£ssi⁄_idx
];

2211 i‡(
ba_£ssi⁄_tx
)

2213 i‡(!
	`memcmp
(
ba_£ssi⁄_tx
->
macAddªss
.
a
, 
°aInfo
->
≥îMacAddªss
.a, 
ETH_ALEN
))

2215 
	`blockack_£ssi⁄_°›
(
¥iv
,

2216 
ªq
->
öãrÁ˚Tag
,

2217 
CSR_WIFI_ROUTER_CTRL_BLOCK_ACK_ORIGINATOR
,

2218 
ba_£ssi⁄_tx
->
tID
,

2219 
ba_£ssi⁄_tx
->
macAddªss
);

2224 
	`up
(&
¥iv
->
ba_muãx
);

2226 #ifde‡
CSR_SUPPORT_SME


2227 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "C™˚lög w‹k queuêf‹ STA wôh AID: %d\n", 
°aInfo
->
aid
);

2228 
	`ˇn˚l_w‹k_sync
(&
°aInfo
->
£nd_disc⁄√˘ed_öd_èsk
);

2231 
	`•ö_lock_úqßve
(&
¥iv
->
°aRec‹d_lock
, 
lock_Êags
);

2232 #ifde‡
CSR_SUPPORT_SME


2233 
öãrÁ˚Priv
->
num_°©i⁄s_joöed
--;

2235 
°aInfo
->
nuŒD©aHo°Tag
 = 
INVALID_HOST_TAG
;

2237 i‡((
öãrÁ˚Priv
->
°a_a˘ivôy_check_íabÀd
) &&

2238 (
öãrÁ˚Priv
->
num_°©i⁄s_joöed
 < 
STA_INACTIVE_DETECTION_TRIGGER_THRESHOLD
))

2240 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "STOPPINGÅhêI«˘ivôy Timî (num o‡°©i⁄†%d)\n", 
öãrÁ˚Priv
->
num_°©i⁄s_joöed
);

2241 
öãrÁ˚Priv
->
°a_a˘ivôy_check_íabÀd
 = 
FALSE
;

2242 
	`dñ_timî_sync
(&
öãrÁ˚Priv
->
°a_a˘ivôy_check_timî
);

2247 
	`k‰ì
(
öãrÁ˚Priv
->
°aInfo
[
ªq
->
≥îRec‹dH™dÀ
]);

2248 
öãrÁ˚Priv
->
°aInfo
[
ªq
->
≥îRec‹dH™dÀ
] = 
NULL
;

2249 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
°aRec‹d_lock
, 
lock_Êags
);

2253 
	`£nd_auto_ma_∑ckë_c⁄fúm
(
¥iv
, 
öãrÁ˚Priv
, &
£nd_cfm_li°
);

2257 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "Öì∏nŸ found: Dñëêªque° Pì∏h™dÀ[%d]\n", 
ªq
->
≥îRec‹dH™dÀ
);

2260  
CSR_RESULT_SUCCESS
;

2261 
	}
}

2264 
	$C§WifiRouãrCålPìrDñReqH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

2266 
C§WifiRouãrCålPìrDñReq
 *
ªq
 = (C§WifiRouãrCålPìrDñReq *)
msg
;

2267 
C§Resu…
 
°©us
 = 
CSR_RESULT_SUCCESS
;

2268 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

2269 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
ªq
->
öãrÁ˚Tag
];

2271 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "entering CsrWifiRouterCtrlPeerDelReqHandler \n");

2272 i‡(
¥iv
 =
NULL
)

2274 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlPeerDelReqHandler: invalid smepriv\n");

2278 i‡(
ªq
->
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
)

2280 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlPeerDelReqHandler: bad interfaceTag\n");

2284 
öãrÁ˚Priv
->
öãrÁ˚Mode
)

2286 
CSR_WIFI_ROUTER_CTRL_MODE_AP
:

2287 
CSR_WIFI_ROUTER_CTRL_MODE_IBSS
:

2288 
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
:

2290 
°©us
 = 
	`≥î_dñëe_ªc‹d
(
¥iv
, 
ªq
);

2292 
CSR_WIFI_ROUTER_CTRL_MODE_STA
:

2293 
CSR_WIFI_ROUTER_CTRL_MODE_P2PCLI
:

2299 
	`C§WifiRouãrCålPìrDñCfmSíd
(
msg
->
sour˚
, 
ªq
->
˛õ¡D©a
,Ñeq->
öãrÁ˚Tag
, 
°©us
);

2300 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "leaving CsrWifiRouterCtrlPeerDelReqHandler \n");

2301 
	}
}

2305 
	$≥î_add_√w_ªc‹d
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiRouãrCålPìrAddReq
 *
ªq
, 
C§Uöt32
 *
h™dÀ
)

2307 
C§Uöt8
 
i
, 
powîModeTemp
 = 0;

2308 
C§Boﬁ
 
‰ìSlŸFound
 = 
FALSE
;

2309 
C§WifiRouãrCålSèInfo_t
 *
√wRec‹d
 = 
NULL
;

2310 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
ªq
->
öãrÁ˚Tag
];

2311 
C§Time
 
cuºítTime
, 
cuºítTimeHi
;

2312 
lock_Êags
;

2314 i‡(
ªq
->
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
)

2316 
	`unifi_îr‹
(
¥iv
, "peer_add_new_record: bad interfaceTag\n");

2317  
CSR_RESULT_FAILURE
;

2320 
cuºítTime
 = 
	`C§TimeGë
(&
cuºítTimeHi
);

2322 
i
 = 0; i < 
UNIFI_MAX_CONNECTIONS
; i++)

2324 i‡(
öãrÁ˚Priv
->
°aInfo
[
i
] =
NULL
)

2327 
‰ìSlŸFound
 = 
TRUE
;

2328 *
h™dÀ
 = 
i
;

2333 
√wRec‹d
 = (
C§WifiRouãrCålSèInfo_t
 *Ë
	`kmÆloc
((C§WifiRouãrCålSèInfo_t), 
GFP_ATOMIC
);

2334 i‡(!
√wRec‹d
)

2336 
	`unifi_îr‹
(
¥iv
, "failedÅoállocateÅhe %d bytes of mem for stationÑecord\n",

2337 (
C§WifiRouãrCålSèInfo_t
));

2338  
CSR_RESULT_FAILURE
;

2341 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "peer_add_new_record: handle = %d AID = %dáddr = %x:%x:%x:%x:%x:%x LI=%u\n",

2342 *
h™dÀ
, 
ªq
->
assocüti⁄Id
,Ñeq->
≥îMacAddªss
.
a
[0],Ñeq->peerMacAddress.a[1],Ñeq->peerMacAddress.a[2],

2343 
ªq
->
≥îMacAddªss
.
a
[3],Ñeq->peerMacAddress.a[4],Ñeq->peerMacAddress.a[5],

2344 
ªq
->
°aInfo
.
li°íI¡îvÆInTus
);

2347 
	`•ö_lock_úqßve
(&
¥iv
->
°aRec‹d_lock
, 
lock_Êags
);

2349 
öãrÁ˚Priv
->
°aInfo
[
i
] = 
√wRec‹d
;

2351 
	`mem£t
(
√wRec‹d
, 0, (
C§WifiRouãrCålSèInfo_t
));

2353 
	`mem˝y
(
√wRec‹d
->
≥îMacAddªss
.
a
, 
ªq
->≥îMacAddªss.a, 
ETH_ALEN
);

2354 
√wRec‹d
->
wmmOrQosE«bÀd
 = 
ªq
->
°aInfo
.wmmOrQosEnabled;

2357 
√wRec‹d
->
maxSpLígth
 = 
ªq
->
°aInfo
.maxSpLength * 2;

2362 i‡(
√wRec‹d
->
maxSpLígth
 == 0)

2364 
√wRec‹d
->
maxSpLígth
 = 512;

2367 
√wRec‹d
->
assig√dH™dÀ
 = 
i
;

2370 
powîModeTemp
 = (
C§Uöt8
Ë((
ªq
->
°aInfo
.
powîßveMode
 >> 4) & 0xff);

2372 i‡(!(
ªq
->
°aInfo
.
powîßveMode
 & 0x0001))

2374 
√wRec‹d
->
powîßveMode
[
UNIFI_TRAFFIC_Q_BK
] = 
CSR_WIFI_AC_LEGACY_POWER_SAVE
;

2378 
√wRec‹d
->
powîßveMode
[
UNIFI_TRAFFIC_Q_BK
] = 
powîModeTemp
 & 0x03;

2381 i‡(!(
ªq
->
°aInfo
.
powîßveMode
 & 0x0002))

2383 
√wRec‹d
->
powîßveMode
[
UNIFI_TRAFFIC_Q_BE
] = 
CSR_WIFI_AC_LEGACY_POWER_SAVE
;

2387 
√wRec‹d
->
powîßveMode
[
UNIFI_TRAFFIC_Q_BE
] = ((
powîModeTemp
 & 0x0C) >> 2);

2390 i‡(!(
ªq
->
°aInfo
.
powîßveMode
 & 0x0004))

2392 
√wRec‹d
->
powîßveMode
[
UNIFI_TRAFFIC_Q_VI
] = 
CSR_WIFI_AC_LEGACY_POWER_SAVE
;

2396 
√wRec‹d
->
powîßveMode
[
UNIFI_TRAFFIC_Q_VI
] = ((
powîModeTemp
 & 0x30) >> 4);

2399 i‡(!(
ªq
->
°aInfo
.
powîßveMode
 & 0x0008))

2401 
√wRec‹d
->
powîßveMode
[
UNIFI_TRAFFIC_Q_VO
] = 
CSR_WIFI_AC_LEGACY_POWER_SAVE
;

2405 
√wRec‹d
->
powîßveMode
[
UNIFI_TRAFFIC_Q_VO
] = ((
powîModeTemp
 & 0xC0) >> 6);

2409 
C§Uöt8
 
k
;

2410 
k
 = 0; k < 
MAX_ACCESS_CATOGORY
; k++)

2412 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "peer_add_new_record: WMM : %d ,AC %d,ÖowersaveMode %x \n",

2413 
ªq
->
°aInfo
.
wmmOrQosE«bÀd
, 
k
, 
√wRec‹d
->
powîßveMode
[k]);

2417 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "newRecord->wmmOrQosEnabled : %d , MAX SP : %d\n",

2418 
√wRec‹d
->
wmmOrQosE«bÀd
,ÇewRec‹d->
maxSpLígth
);

2422 
C§Uöt8
 
j
;

2423 
	`INIT_LIST_HEAD
(&
√wRec‹d
->
mgtFømes
);

2424 
j
 = 0; j < 
MAX_ACCESS_CATOGORY
; j++)

2426 
	`INIT_LIST_HEAD
(&
√wRec‹d
->
d©aPdu
[
j
]);

2430 
√wRec‹d
->
œ°A˘ivôy
 = 
cuºítTime
;

2431 
√wRec‹d
->
a˘ivôy_Êag
 = 
TRUE
;

2434 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
°aRec‹d_lock
, 
lock_Êags
);

2437 
	`c⁄figuª_d©a_p‹t
(
¥iv
, 
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_OPEN
, &
√wRec‹d
->
≥îMacAddªss
,

2438 
UF_UNCONTROLLED_PORT_Q
, 
ªq
->
öãrÁ˚Tag
);

2440 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_IBSS
)

2442 
	`c⁄figuª_d©a_p‹t
(
¥iv
, 
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_OPEN
, &
√wRec‹d
->
≥îMacAddªss
,

2443 
UF_CONTROLLED_PORT_Q
, 
ªq
->
öãrÁ˚Tag
);

2447 
	`c⁄figuª_d©a_p‹t
(
¥iv
, 
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_CLOSED_DISCARD
, &
√wRec‹d
->
≥îMacAddªss
,

2448 
UF_CONTROLLED_PORT_Q
, 
ªq
->
öãrÁ˚Tag
);

2452 
	`•ö_lock_úqßve
(&
¥iv
->
°aRec‹d_lock
, 
lock_Êags
);

2454 
√wRec‹d
->
≥îC⁄åﬁÀdP‹t
 = 
	`uf_sme_p‹t_c⁄fig_h™dÀ
(
¥iv
,ÇewRec‹d->
≥îMacAddªss
.
a
,

2455 
UF_CONTROLLED_PORT_Q
, 
ªq
->
öãrÁ˚Tag
);

2456 
√wRec‹d
->
≥îUnC⁄åﬁÀdP‹t
 = 
	`uf_sme_p‹t_c⁄fig_h™dÀ
(
¥iv
,ÇewRec‹d->
≥îMacAddªss
.
a
,

2457 
UF_UNCONTROLLED_PORT_Q
, 
ªq
->
öãrÁ˚Tag
);

2459 i‡(!
√wRec‹d
->
≥îC⁄åﬁÀdP‹t
 || !√wRec‹d->
≥îUnC⁄åﬁÀdP‹t
)

2462 
	`unifi_w¨nög
(
¥iv
, "Un/C⁄åﬁÀdP‹àªc‹dÇŸ found i¿p‹àc⁄figuøti⁄áºay index = %d\n", 
i
);

2463 
	`k‰ì
(
öãrÁ˚Priv
->
°aInfo
[
i
]);

2464 
öãrÁ˚Priv
->
°aInfo
[
i
] = 
NULL
;

2465 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
°aRec‹d_lock
, 
lock_Êags
);

2466  
CSR_RESULT_FAILURE
;

2469 
√wRec‹d
->
cuºítPìrSèã
 = 
CSR_WIFI_ROUTER_CTRL_PEER_CONNECTED_ACTIVE
;

2472 
√wRec‹d
->
txSu•íd
 = 
FALSE
;

2475 
√wRec‹d
->
timReque°PídögFœg
 = 
FALSE
;

2480 
√wRec‹d
->
upd©eTimReqQueued
 = 0xFF;

2481 
√wRec‹d
->
timSë
 = 
CSR_WIFI_TIM_RESET
;

2482 
√wRec‹d
->
u≠sdA˘ive
 = 
FALSE
;

2483 
√wRec‹d
->
noOfSpFømesSít
 = 0;

2484 
√wRec‹d
->
åiggîFømePri‹ôy
 = 
CSR_QOS_UP0
;

2490 
√wRec‹d
->
aid
 = 
ªq
->
assocüti⁄Id
;

2492 #ifde‡
CSR_SUPPORT_SME


2493 
öãrÁ˚Priv
->
num_°©i⁄s_joöed
++;

2494 
√wRec‹d
->
öãrÁ˚Priv
 = interfacePriv;

2495 
√wRec‹d
->
li°íI¡îvÆInTus
 = 
ªq
->
°aInfo
.listenIntervalInTus;

2496 
√wRec‹d
->
nuŒD©aHo°Tag
 = 
INVALID_HOST_TAG
;

2498 
	`INIT_WORK
(&
√wRec‹d
->
£nd_disc⁄√˘ed_öd_èsk
, 
uf_£nd_disc⁄√˘ed_öd_wq
);

2500 i‡(!(
öãrÁ˚Priv
->
°a_a˘ivôy_check_íabÀd
) &&

2501 (
öãrÁ˚Priv
->
num_°©i⁄s_joöed
 >
STA_INACTIVE_DETECTION_TRIGGER_THRESHOLD
))

2503 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,

2505 
öãrÁ˚Priv
->
num_°©i⁄s_joöed
);

2507 
öãrÁ˚Priv
->
°a_a˘ivôy_check_íabÀd
 = 
TRUE
;

2508 
öãrÁ˚Priv
->
°a_a˘ivôy_check_timî
.
fun˘i⁄
 = 
check_öa˘ivôy_timî_expúe_func
;

2509 
öãrÁ˚Priv
->
°a_a˘ivôy_check_timî
.
d©a
 = ()interfacePriv;

2511 
	`öô_timî
(&
öãrÁ˚Priv
->
°a_a˘ivôy_check_timî
);

2512 
	`mod_timî
(&
öãrÁ˚Priv
->
°a_a˘ivôy_check_timî
,

2513 (
jiffõs
 + 
	`u£cs_to_jiffõs
(
STA_INACTIVE_DETECTION_TIMER_INTERVAL
 * 1000 * 1000)));

2516 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
°aRec‹d_lock
, 
lock_Êags
);

2521 i‡(!
‰ìSlŸFound
)

2523 
	`unifi_îr‹
(
¥iv
, "Limited connectivity, Free slotÇot found for stationÑecordáddition\n");

2524  
CSR_RESULT_FAILURE
;

2526  
CSR_RESULT_SUCCESS
;

2527 
	}
}

2530 #ifde‡
CSR_SUPPORT_SME


2531 
	$check_öa˘ivôy_timî_expúe_func
(
d©a
)

2533 
unifi_¥iv
 *
¥iv
;

2534 
C§WifiRouãrCålSèInfo_t
 *
°a_ªc‹d
 = 
NULL
;

2535 
C§Uöt8
 
i
 = 0;

2536 
C§Time
 
now
;

2537 
C§Time
 
öa˘ive_time
;

2538 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*Ë
d©a
;

2540 i‡(!
öãrÁ˚Priv
)

2545 
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

2547 i‡(
öãrÁ˚Priv
->
I¡îÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
)

2549 
	`unifi_îr‹
(
¥iv
, "check_inactivity_timer_expire_func: Invalid interfaceTag\n");

2554 
now
 = 
	`C§TimeGë
(
NULL
);

2556 
i
 = 0; i < 
UNIFI_MAX_CONNECTIONS
; i++)

2558 i‡(
öãrÁ˚Priv
->
°aInfo
[
i
] !
NULL
)

2560 
°a_ªc‹d
 = 
öãrÁ˚Priv
->
°aInfo
[
i
];

2562 i‡(
°a_ªc‹d
->
a˘ivôy_Êag
 =
TRUE
)

2564 
°a_ªc‹d
->
a˘ivôy_Êag
 = 
FALSE
;

2565 
°a_ªc‹d
->
œ°A˘ivôy
 = 
now
;

2569 i‡(
°a_ªc‹d
->
œ°A˘ivôy
 > 
now
)

2572 
öa˘ive_time
 = 
	`C§TimeAdd
((
C§Time
)
	`C§TimeSub
(
CSR_SCHED_TIME_MAX
, 
°a_ªc‹d
->
œ°A˘ivôy
), 
now
);

2576 
öa˘ive_time
 = (
C§Time
)
	`C§TimeSub
(
now
, 
°a_ªc‹d
->
œ°A˘ivôy
);

2579 i‡(
öa˘ive_time
 >
STA_INACTIVE_TIMEOUT_VAL
)

2581 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "STA is Inactive - AID = %d inactive_time = %d\n",

2582 
°a_ªc‹d
->
aid
,

2583 
öa˘ive_time
);

2592 i‡(
°a_ªc‹d
->
cuºítPìrSèã
 =
CSR_WIFI_ROUTER_CTRL_PEER_CONNECTED_ACTIVE
)

2594 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "STAÖower save state - Active, sendá NULL frameÅo check if it is ALIVE\n");

2595 
	`uf_£nd_nuŒd©a
(
¥iv
,

2596 
°a_ªc‹d
->
öãrÁ˚Priv
->
I¡îÁ˚Tag
,

2597 
°a_ªc‹d
->
≥îMacAddªss
.
a
,

2598 
CSR_CONTENTION
,

2599 
°a_ªc‹d
);

2601 i‡(
°a_ªc‹d
->
cuºítPìrSèã
 =
CSR_WIFI_ROUTER_CTRL_PEER_CONNECTED_POWER_SAVE
)

2603 i‡((
°a_ªc‹d
->
timSë
 =
CSR_WIFI_TIM_SET
) ||

2604 (
°a_ªc‹d
->
timSë
 =
CSR_WIFI_TIM_SETTING
))

2606 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "STAÖower save state - PS, TIM isálready SET\n");

2616 i‡(
öa˘ive_time
 > (3 * (
°a_ªc‹d
->
li°íI¡îvÆInTus
 * 1024)))

2618 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "STA is inactive for moreÅhan 3Üisten intervals\n");

2619 
	`queue_w‹k
(
¥iv
->
unifi_w‹kqueue
,

2620 &
°a_ªc‹d
->
£nd_disc⁄√˘ed_öd_èsk
);

2625 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "STAÖower save state - PS, update TIMÅo see if it is ALIVE\n");

2626 
	`upd©e_tim
(
¥iv
,

2627 
°a_ªc‹d
->
aid
,

2628 
CSR_WIFI_TIM_SET
,

2629 
öãrÁ˚Priv
->
I¡îÁ˚Tag
,

2630 
°a_ªc‹d
->
assig√dH™dÀ
);

2638 
	`mod_timî
(&
öãrÁ˚Priv
->
°a_a˘ivôy_check_timî
,

2639 (
jiffõs
 + 
	`u£cs_to_jiffõs
(
STA_INACTIVE_DETECTION_TIMER_INTERVAL
 * 1000 * 1000)));

2640 
	}
}

2643 
	$uf_£nd_disc⁄√˘ed_öd_wq
(
w‹k_°ru˘
 *
w‹k
)

2645 
C§WifiRouãrCålSèInfo_t
 *
°aInfo
 = 
	`c⁄èöî_of
(
w‹k
, C§WifiRouãrCålSèInfo_t, 
£nd_disc⁄√˘ed_öd_èsk
);

2646 
unifi_¥iv_t
 *
¥iv
;

2647 
C§Uöt16
 
öãrÁ˚Tag
;

2648 
li°_hód
 
£nd_cfm_li°
;

2649 
C§Uöt8
 
j
;

2651 
	`func_íãr
();

2653 i‡(!
°aInfo
)

2658 i‡(!
°aInfo
->
öãrÁ˚Priv
)

2663 
¥iv
 = 
°aInfo
->
öãrÁ˚Priv
->
¥ivPå
;

2664 
öãrÁ˚Tag
 = 
°aInfo
->
öãrÁ˚Priv
->
I¡îÁ˚Tag
;

2666 i‡(
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
)

2668 
	`unifi_îr‹
(
¥iv
, "uf_send_disconnected_ind_wq: invalid interfaceTag\n");

2677 
	`INIT_LIST_HEAD
(&
£nd_cfm_li°
);

2679 
	`uf_¥ï¨e_£nd_cfm_li°_f‹_queued_pkts
(
¥iv
,

2680 &
£nd_cfm_li°
,

2681 &(
°aInfo
->
mgtFømes
));

2683 
	`uf_Êush_li°
(
¥iv
, &(
°aInfo
->
mgtFømes
));

2685 
j
 = 0; j < 
MAX_ACCESS_CATOGORY
; j++)

2687 
	`uf_¥ï¨e_£nd_cfm_li°_f‹_queued_pkts
(
¥iv
,

2688 &
£nd_cfm_li°
,

2689 &(
°aInfo
->
d©aPdu
[
j
]));

2691 
	`uf_Êush_li°
(
¥iv
, &(
°aInfo
->
d©aPdu
[
j
]));

2694 
	`£nd_auto_ma_∑ckë_c⁄fúm
(
¥iv
, 
°aInfo
->
öãrÁ˚Priv
, &
£nd_cfm_li°
);

2696 
	`unifi_w¨nög
(
¥iv
, "uf_send_disconnected_ind_wq: Router Disconnected IND Peer (%x-%x-%x-%x-%x-%x)\n",

2697 
°aInfo
->
≥îMacAddªss
.
a
[0],

2698 
°aInfo
->
≥îMacAddªss
.
a
[1],

2699 
°aInfo
->
≥îMacAddªss
.
a
[2],

2700 
°aInfo
->
≥îMacAddªss
.
a
[3],

2701 
°aInfo
->
≥îMacAddªss
.
a
[4],

2702 
°aInfo
->
≥îMacAddªss
.
a
[5]);

2704 
	`C§WifiRouãrCålC⁄√˘edIndSíd
(
¥iv
->
CSR_WIFI_SME_IFACEQUEUE
,

2706 
°aInfo
->
öãrÁ˚Priv
->
I¡îÁ˚Tag
,

2707 
°aInfo
->
≥îMacAddªss
,

2708 
CSR_WIFI_ROUTER_CTRL_PEER_DISCONNECTED
);

2709 
	}
}

2713 
	$C§WifiRouãrCålPìrAddReqH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

2715 
C§WifiRouãrCålPìrAddReq
 *
ªq
 = (C§WifiRouãrCålPìrAddReq *)
msg
;

2716 
C§Resu…
 
°©us
 = 
CSR_RESULT_SUCCESS
;

2717 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

2718 
C§Uöt32
 
h™dÀ
 = 0;

2719 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
ªq
->
öãrÁ˚Tag
];

2721 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "entering CsrWifiRouterCtrlPeerAddReqHandler \n");

2722 i‡(
¥iv
 =
NULL
)

2724 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlPeerAddReqHandler: invalid smepriv\n");

2728 i‡(
ªq
->
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
)

2730 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlPeerAddReqHandler: bad interfaceTag\n");

2734 
öãrÁ˚Priv
->
öãrÁ˚Mode
)

2736 
CSR_WIFI_ROUTER_CTRL_MODE_AP
:

2737 
CSR_WIFI_ROUTER_CTRL_MODE_IBSS
:

2738 
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
:

2740 
°©us
 = 
	`≥î_add_√w_ªc‹d
(
¥iv
, 
ªq
, &
h™dÀ
);

2742 
CSR_WIFI_ROUTER_CTRL_MODE_STA
:

2743 
CSR_WIFI_ROUTER_CTRL_MODE_P2PCLI
:

2749 
	`C§WifiRouãrCålPìrAddCfmSíd
(
msg
->
sour˚
, 
ªq
->
˛õ¡D©a
,Ñeq->
öãrÁ˚Tag
,Ñeq->
≥îMacAddªss
, 
h™dÀ
, 
°©us
);

2750 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "leaving CsrWifiRouterCtrlPeerAddReqHandler \n");

2751 
	}
}

2754 
	$C§WifiRouãrCålPìrUpd©eReqH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

2756 
C§WifiRouãrCålPìrUpd©eReq
 *
ªq
 = (C§WifiRouãrCålPìrUpd©eReq *)
msg
;

2757 
C§Resu…
 
°©us
 = 
CSR_RESULT_SUCCESS
;

2758 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

2760 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "entering CsrWifiRouterCtrlPeerUpdateReqHandler \n");

2761 i‡(
¥iv
 =
NULL
)

2763 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlPeerUpdateReqHandler: invalid smepriv\n");

2767 
	`C§WifiRouãrCålPìrUpd©eCfmSíd
(
msg
->
sour˚
, 
ªq
->
˛õ¡D©a
,Ñeq->
öãrÁ˚Tag
, 
°©us
);

2768 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "leaving CsrWifiRouterCtrlPeerUpdateReqHandler \n");

2769 
	}
}

2772 
	$C§WifiRouãrCålRawSdioDeöôüli£ReqH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

2775 
	}
}

2778 
	$C§WifiRouãrCålRawSdioInôüli£ReqH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

2781 
	}
}

2784 
	$uf_£nd_ba_îr_wq
(
w‹k_°ru˘
 *
w‹k
)

2786 
ba_£ssi⁄_rx_°ru˘
 *
ba_£ssi⁄
 = 
	`c⁄èöî_of
(
w‹k
, ba_£ssi⁄_rx_°ru˘, 
£nd_ba_îr_èsk
);

2787 
unifi_¥iv_t
 *
¥iv
;

2789 i‡(!
ba_£ssi⁄
)

2794 i‡(!
ba_£ssi⁄
->
öãrÁ˚Priv
)

2799 
¥iv
 = 
ba_£ssi⁄
->
öãrÁ˚Priv
->
¥ivPå
;

2801 i‡(
ba_£ssi⁄
->
öãrÁ˚Priv
->
I¡îÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
)

2803 
	`unifi_îr‹
(
¥iv
, "%s: invÆid i¡îÁ˚Tag\n", 
__FUNCTION__
);

2807 
	`unifi_w¨nög
(
¥iv
, "%s: Calling CsrWifiRouterCtrlBlockAckErrorIndSend(%d, %d, %d, %d, %x:%x:%x:%x:%x:%x, %d)\n",

2808 
__FUNCTION__
,

2809 
¥iv
->
CSR_WIFI_SME_IFACEQUEUE
,

2811 
ba_£ssi⁄
->
öãrÁ˚Priv
->
I¡îÁ˚Tag
,

2812 
ba_£ssi⁄
->
tID
,

2813 
ba_£ssi⁄
->
macAddªss
.
a
[0],

2814 
ba_£ssi⁄
->
macAddªss
.
a
[1],

2815 
ba_£ssi⁄
->
macAddªss
.
a
[2],

2816 
ba_£ssi⁄
->
macAddªss
.
a
[3],

2817 
ba_£ssi⁄
->
macAddªss
.
a
[4],

2818 
ba_£ssi⁄
->
macAddªss
.
a
[5],

2819 
CSR_RESULT_SUCCESS


2821 
	`C§WifiRouãrCålBlockAckEº‹IndSíd
(
¥iv
->
CSR_WIFI_SME_IFACEQUEUE
,

2823 
ba_£ssi⁄
->
öãrÁ˚Priv
->
I¡îÁ˚Tag
,

2824 
ba_£ssi⁄
->
tID
,

2825 
ba_£ssi⁄
->
macAddªss
,

2826 
CSR_RESULT_SUCCESS
);

2827 
	}
}

2830 
	$ba_£ssi⁄_ãrmö©e_timî_func
(
d©a
)

2832 
ba_£ssi⁄_rx_°ru˘
 *
ba_£ssi⁄
 = (ba_£ssi⁄_rx_°ru˘ *)
d©a
;

2833 
unifi_¥iv
 *
¥iv
;

2835 i‡(!
ba_£ssi⁄
)

2840 i‡(!
ba_£ssi⁄
->
öãrÁ˚Priv
)

2845 
¥iv
 = 
ba_£ssi⁄
->
öãrÁ˚Priv
->
¥ivPå
;

2847 i‡(
ba_£ssi⁄
->
öãrÁ˚Priv
->
I¡îÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
)

2849 
	`unifi_îr‹
(
¥iv
, "%s: invÆid i¡îÁ˚Tag\n", 
__FUNCTION__
);

2853 
	`queue_w‹k
(
¥iv
->
unifi_w‹kqueue
, &
ba_£ssi⁄
->
£nd_ba_îr_èsk
);

2854 
	}
}

2857 
C§Boﬁ
 
	$blockack_£ssi⁄_°›
(
unifi_¥iv_t
 *
¥iv
,

2858 
C§Uöt16
 
öãrÁ˚Tag
,

2859 
C§WifiRouãrCålBlockAckRﬁe
 
rﬁe
,

2860 
C§Uöt16
 
tID
,

2861 
C§WifiMacAddªss
 
macAddªss
)

2863 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
;

2864 
ba_£ssi⁄_rx_°ru˘
 *
ba_£ssi⁄_rx
 = 
NULL
;

2865 
ba_£ssi⁄_tx_°ru˘
 *
ba_£ssi⁄_tx
 = 
NULL
;

2866 
C§Uöt8
 
ba_£ssi⁄_idx
 = 0;

2867 
i
;

2869 i‡(
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
)

2871 
	`unifi_îr‹
(
¥iv
, "%s: bad i¡îÁ˚Tag = %d\n", 
__FUNCTION__
, 
öãrÁ˚Tag
);

2872  
FALSE
;

2875 
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

2877 i‡(!
öãrÁ˚Priv
)

2879 
	`unifi_îr‹
(
¥iv
, "%s: bad i¡îÁ˚Priv\n", 
__FUNCTION__
);

2880  
FALSE
;

2883 i‡(
tID
 > 15)

2885 
	`unifi_îr‹
(
¥iv
, "%s: badÅID = %d\n", 
__FUNCTION__
, 
tID
);

2886  
FALSE
;

2889 i‡((
rﬁe
 !
CSR_WIFI_ROUTER_CTRL_BLOCK_ACK_ORIGINATOR
) &&

2890 (
rﬁe
 !
CSR_WIFI_ROUTER_CTRL_BLOCK_ACK_RECIPIENT
))

2892 
	`unifi_îr‹
(
¥iv
, "%s: badÑﬁê%d\n", 
__FUNCTION__
, 
rﬁe
);

2893  
FALSE
;

2896 
	`unifi_w¨nög
(
¥iv
, "%s: st›pög ba_£ssi⁄ f‹Öì∏%02x:%02x:%02x:%02x:%02x:%02xÑﬁê%dÅID = %d\n", 
__FUNCTION__
,

2897 
macAddªss
.
a
[0], macAddress.a[1], macAddress.a[2],

2898 
macAddªss
.
a
[3], macAddress.a[4], macAddress.a[5],

2899 
rﬁe
,

2900 
tID
);

2903 i‡(
rﬁe
 =
CSR_WIFI_ROUTER_CTRL_BLOCK_ACK_RECIPIENT
)

2905 
ba_£ssi⁄_idx
 = 0; ba_£ssi⁄_idx < 
MAX_SUPPORTED_BA_SESSIONS_RX
; ba_session_idx++)

2907 
ba_£ssi⁄_rx
 = 
öãrÁ˚Priv
->ba_£ssi⁄_rx[
ba_£ssi⁄_idx
];

2909 i‡(
ba_£ssi⁄_rx
)

2911 i‡((!
	`memcmp
(
ba_£ssi⁄_rx
->
macAddªss
.
a
, macAddªss.a, 
ETH_ALEN
)Ë&& (ba_£ssi⁄_rx->
tID
 ==ÅID))

2918 i‡(!
ba_£ssi⁄_rx
 || (
ba_£ssi⁄_idx
 =
MAX_SUPPORTED_BA_SESSIONS_RX
))

2920 
	`unifi_îr‹
(
¥iv
, "%s: bad ba_£ssi⁄ f‹ Rx [tID=%d]\n", 
__FUNCTION__
, 
tID
);

2921  
FALSE
;

2925 i‡(
ba_£ssi⁄_rx
->
timeout
)

2927 
	`dñ_timî_sync
(&
ba_£ssi⁄_rx
->
timî
);

2929 
	`ˇn˚l_w‹k_sync
(&
ba_£ssi⁄_rx
->
£nd_ba_îr_èsk
);

2930 
i
 = 0; i < 
ba_£ssi⁄_rx
->
wöd_size
; i++)

2932 i‡(
ba_£ssi⁄_rx
->
buf„r
[
i
].
a˘ive
)

2934 
‰ame_desc_°ru˘
 *
‰ame_desc
 = &
ba_£ssi⁄_rx
->
buf„r
[
i
];

2935 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
‰ame_desc
->
bulkd©a
.
d
[0]);

2938 
	`k‰ì
(
ba_£ssi⁄_rx
->
buf„r
);

2940 
öãrÁ˚Priv
->
ba_£ssi⁄_rx
[
ba_£ssi⁄_idx
] = 
NULL
;

2941 
	`k‰ì
(
ba_£ssi⁄_rx
);

2943 i‡(
rﬁe
 =
CSR_WIFI_ROUTER_CTRL_BLOCK_ACK_ORIGINATOR
)

2945 
ba_£ssi⁄_idx
 = 0; ba_£ssi⁄_idx < 
MAX_SUPPORTED_BA_SESSIONS_TX
; ba_session_idx++)

2947 
ba_£ssi⁄_tx
 = 
öãrÁ˚Priv
->ba_£ssi⁄_tx[
ba_£ssi⁄_idx
];

2948 i‡(
ba_£ssi⁄_tx
)

2950 i‡((!
	`memcmp
(
ba_£ssi⁄_tx
->
macAddªss
.
a
, macAddªss.a, 
ETH_ALEN
)Ë&& (ba_£ssi⁄_tx->
tID
 ==ÅID))

2957 i‡(!
ba_£ssi⁄_tx
 || (
ba_£ssi⁄_idx
 =
MAX_SUPPORTED_BA_SESSIONS_TX
))

2959 
	`unifi_îr‹
(
¥iv
, "%s: bad ba_£ssi⁄ f‹ Tx [tID=%d]\n", 
__FUNCTION__
, 
tID
);

2960  
FALSE
;

2962 
öãrÁ˚Priv
->
ba_£ssi⁄_tx
[
ba_£ssi⁄_idx
] = 
NULL
;

2963 
	`k‰ì
(
ba_£ssi⁄_tx
);

2966  
TRUE
;

2967 
	}
}

2970 
	$C§WifiRouãrCålBlockAckDißbÀReqH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

2972 
C§WifiRouãrCålBlockAckDißbÀReq
 *
ªq
 = (C§WifiRouãrCålBlockAckDißbÀReq *)
msg
;

2973 
C§Boﬁ
 
r
;

2974 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

2976 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "%s: i¿ok\n", 
__FUNCTION__
);

2978 
	`down
(&
¥iv
->
ba_muãx
);

2979 
r
 = 
	`blockack_£ssi⁄_°›
(
¥iv
,

2980 
ªq
->
öãrÁ˚Tag
,

2981 
ªq
->
rﬁe
,

2982 
ªq
->
åafficSåómID
,

2983 
ªq
->
macAddªss
);

2984 
	`up
(&
¥iv
->
ba_muãx
);

2986 
	`C§WifiRouãrCålBlockAckDißbÀCfmSíd
(
msg
->
sour˚
,

2987 
ªq
->
˛õ¡D©a
,

2988 
ªq
->
öãrÁ˚Tag
,

2989 
r
?
CSR_RESULT_SUCCESS
 : 
CSR_RESULT_FAILURE
);

2991 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "%s: ouàok\n", 
__FUNCTION__
);

2992 
	}
}

2995 
C§Boﬁ
 
	$blockack_£ssi⁄_°¨t
(
unifi_¥iv_t
 *
¥iv
,

2996 
C§Uöt16
 
öãrÁ˚Tag
,

2997 
C§Uöt16
 
tID
,

2998 
C§Uöt16
 
timeout
,

2999 
C§WifiRouãrCålBlockAckRﬁe
 
rﬁe
,

3000 
C§Uöt16
 
wöd_size
,

3001 
C§Uöt16
 
°¨t_¢
,

3002 
C§WifiMacAddªss
 
macAddªss


3005 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
;

3006 
ba_£ssi⁄_rx_°ru˘
 *
ba_£ssi⁄_rx
 = 
NULL
;

3007 
ba_£ssi⁄_tx_°ru˘
 *
ba_£ssi⁄_tx
 = 
NULL
;

3008 
C§Uöt8
 
ba_£ssi⁄_idx
 = 0;

3011 i‡(
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
)

3013 
	`unifi_îr‹
(
¥iv
, "%s: bad i¡îÁ˚Tag = %d\n", 
__FUNCTION__
, 
öãrÁ˚Tag
);

3014  
FALSE
;

3017 
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

3019 i‡(!
öãrÁ˚Priv
)

3021 
	`unifi_îr‹
(
¥iv
, "%s: bad i¡îÁ˚Priv\n", 
__FUNCTION__
);

3022  
FALSE
;

3025 i‡(
tID
 > 15)

3027 
	`unifi_îr‹
(
¥iv
, "%s: badÅID=%d\n", 
__FUNCTION__
, 
tID
);

3028  
FALSE
;

3031 i‡(
wöd_size
 > 
MAX_BA_WIND_SIZE
)

3033 
	`unifi_îr‹
(
¥iv
, "%s: bad wöd_sizê%d\n", 
__FUNCTION__
, 
wöd_size
);

3034  
FALSE
;

3037 i‡(
rﬁe
 !
CSR_WIFI_ROUTER_CTRL_BLOCK_ACK_ORIGINATOR
 &&

3038 
rﬁe
 !
CSR_WIFI_ROUTER_CTRL_BLOCK_ACK_RECIPIENT
)

3040 
	`unifi_îr‹
(
¥iv
, "%s: badÑﬁê%d\n", 
__FUNCTION__
, 
rﬁe
);

3041  
FALSE
;

3044 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "%s: b®£ssi⁄ wôhÖìr(%02x:%02x:%02x:%02x:%02x:%02x)\n", 
__FUNCTION__
,

3045 
macAddªss
.
a
[0], macAddress.a[1], macAddress.a[2],

3046 
macAddªss
.
a
[3], macAddress.a[4], macAddress.a[5]);

3048 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "%s: b®£ssi⁄ f‹ÅID=%dÅimeout=%dÑﬁe=%d wöd_size=%d sèπ_¢=%d\n", 
__FUNCTION__
,

3049 
tID
,

3050 
timeout
,

3051 
rﬁe
,

3052 
wöd_size
,

3053 
°¨t_¢
);

3058 i‡(
rﬁe
 =
CSR_WIFI_ROUTER_CTRL_BLOCK_ACK_ORIGINATOR
)

3060 
ba_£ssi⁄_idx
 = 0; ba_£ssi⁄_idx < 
MAX_SUPPORTED_BA_SESSIONS_TX
; ba_session_idx++)

3062 
ba_£ssi⁄_tx
 = 
öãrÁ˚Priv
->ba_£ssi⁄_tx[
ba_£ssi⁄_idx
];

3063 i‡(
ba_£ssi⁄_tx
)

3065 i‡((!
	`memcmp
(
ba_£ssi⁄_tx
->
macAddªss
.
a
, macAddªss.a, 
ETH_ALEN
)Ë&& (ba_£ssi⁄_tx->
tID
 ==ÅID))

3067 
	`unifi_w¨nög
(
¥iv
, "%s: ba_£ssi⁄ f‹ TxáÃódyÉxi°s\n", 
__FUNCTION__
);

3068  
TRUE
;

3074 
ba_£ssi⁄_tx
 = 
NULL
;

3077 
ba_£ssi⁄_idx
 = 0; ba_£ssi⁄_idx < 
MAX_SUPPORTED_BA_SESSIONS_TX
; ba_session_idx++)

3079 i‡(!(
öãrÁ˚Priv
->
ba_£ssi⁄_tx
[
ba_£ssi⁄_idx
]))

3084 i‡(
ba_£ssi⁄_idx
 =
MAX_SUPPORTED_BA_SESSIONS_TX
)

3086 
	`unifi_îr‹
(
¥iv
, "%s: AŒ ba_£ssi⁄ u£d f‹ Tx, NO fªê£ssi⁄ávaûabÀ\n", 
__FUNCTION__
);

3087  
FALSE
;

3091 
ba_£ssi⁄_tx
 = 
	`kmÆloc
((
ba_£ssi⁄_tx_°ru˘
), 
GFP_KERNEL
);

3092 i‡(!
ba_£ssi⁄_tx
)

3094 
	`unifi_îr‹
(
¥iv
, "%s: kmÆlo¯Áûed f‹ ba_£ssi⁄_tx\n", 
__FUNCTION__
);

3095  
FALSE
;

3097 
	`mem£t
(
ba_£ssi⁄_tx
, 0, (
ba_£ssi⁄_tx_°ru˘
));

3099 
ba_£ssi⁄_tx
->
öãrÁ˚Priv
 = interfacePriv;

3100 
ba_£ssi⁄_tx
->
tID
 =ÅID;

3101 
ba_£ssi⁄_tx
->
macAddªss
 = macAddress;

3103 
öãrÁ˚Priv
->
ba_£ssi⁄_tx
[
ba_£ssi⁄_idx
] = ba_session_tx;

3105 i‡(
rﬁe
 =
CSR_WIFI_ROUTER_CTRL_BLOCK_ACK_RECIPIENT
)

3107 
ba_£ssi⁄_idx
 = 0; ba_£ssi⁄_idx < 
MAX_SUPPORTED_BA_SESSIONS_RX
; ba_session_idx++)

3109 
ba_£ssi⁄_rx
 = 
öãrÁ˚Priv
->ba_£ssi⁄_rx[
ba_£ssi⁄_idx
];

3110 i‡(
ba_£ssi⁄_rx
)

3112 i‡((!
	`memcmp
(
ba_£ssi⁄_rx
->
macAddªss
.
a
, macAddªss.a, 
ETH_ALEN
)Ë&& (ba_£ssi⁄_rx->
tID
 ==ÅID))

3114 
	`unifi_w¨nög
(
¥iv
, "%s: ba_£ssi⁄ f‹ Rx[tID = %d]áÃódyÉxi°s\n", 
__FUNCTION__
, 
tID
);

3116 i‡(
ba_£ssi⁄_rx
->
wöd_size
 == wind_size &&

3117 
ba_£ssi⁄_rx
->
timeout
 ==Åimeout &&

3118 
ba_£ssi⁄_rx
->
ex≥˘ed_¢
 =
°¨t_¢
)

3120  
TRUE
;

3123 i‡(
ba_£ssi⁄_rx
->
timeout
)

3125 
	`dñ_timî_sync
(&
ba_£ssi⁄_rx
->
timî
);

3126 
ba_£ssi⁄_rx
->
timeout
 = 0;

3129 i‡(
ba_£ssi⁄_rx
->
wöd_size
 != wind_size)

3131 
	`blockack_£ssi⁄_°›
(
¥iv
, 
öãrÁ˚Tag
, 
rﬁe
, 
tID
, 
macAddªss
);

3135 i‡(
timeout
)

3137 
ba_£ssi⁄_rx
->
timeout
 =Åimeout;

3138 
ba_£ssi⁄_rx
->
timî
.
fun˘i⁄
 = 
ba_£ssi⁄_ãrmö©e_timî_func
;

3139 
ba_£ssi⁄_rx
->
timî
.
d©a
 = ()ba_session_rx;

3140 
	`öô_timî
(&
ba_£ssi⁄_rx
->
timî
);

3141 
	`mod_timî
(&
ba_£ssi⁄_rx
->
timî
, (
jiffõs
 + 
	`u£cs_to_jiffõs
((ba_£ssi⁄_rx->
timeout
) * 1024)));

3150 i‡(
ba_£ssi⁄_rx
->
°¨t_¢
 != start_sn)

3152 
	`s¸ﬁl_ba_wödow
(
¥iv
, 
öãrÁ˚Priv
, 
ba_£ssi⁄_rx
, 
°¨t_¢
);

3154  
TRUE
;

3163 
ba_£ssi⁄_rx
 = 
NULL
;

3166 
ba_£ssi⁄_idx
 = 0; ba_£ssi⁄_idx < 
MAX_SUPPORTED_BA_SESSIONS_RX
; ba_session_idx++)

3168 i‡(!(
öãrÁ˚Priv
->
ba_£ssi⁄_rx
[
ba_£ssi⁄_idx
]))

3173 i‡(
ba_£ssi⁄_idx
 =
MAX_SUPPORTED_BA_SESSIONS_RX
)

3175 
	`unifi_îr‹
(
¥iv
, "%s: AŒ ba_£ssi⁄ u£d f‹ Rx, NO fªê£ssi⁄ávaûabÀ\n", 
__FUNCTION__
);

3176  
FALSE
;

3189 i‡(
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_OPEN
 !
	`uf_sme_p‹t_°©e
(
¥iv
, 
macAddªss
.
a
, 
UF_CONTROLLED_PORT_Q
, 
öãrÁ˚Priv
->
I¡îÁ˚Tag
))

3191 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "blockack_session_start: ControlledÖortÇot opened, Reject BAÑequest\n");

3192  
FALSE
;

3195 
ba_£ssi⁄_rx
 = 
	`kmÆloc
((
ba_£ssi⁄_rx_°ru˘
), 
GFP_KERNEL
);

3196 i‡(!
ba_£ssi⁄_rx
)

3198 
	`unifi_îr‹
(
¥iv
, "%s: kmÆlo¯Áûed f‹ ba_£ssi⁄_rx\n", 
__FUNCTION__
);

3199  
FALSE
;

3201 
	`mem£t
(
ba_£ssi⁄_rx
, 0, (
ba_£ssi⁄_rx_°ru˘
));

3203 
ba_£ssi⁄_rx
->
wöd_size
 = wind_size;

3204 
ba_£ssi⁄_rx
->
°¨t_¢
 = ba_£ssi⁄_rx->
ex≥˘ed_¢
 = start_sn;

3205 
ba_£ssi⁄_rx
->
åiggî_ba_a·î_s¢
 = 
FALSE
;

3207 
ba_£ssi⁄_rx
->
buf„r
 = 
	`kmÆloc
(ba_£ssi⁄_rx->
wöd_size
 * (
‰ame_desc_°ru˘
), 
GFP_KERNEL
);

3208 i‡(!
ba_£ssi⁄_rx
->
buf„r
)

3210 
	`k‰ì
(
ba_£ssi⁄_rx
);

3211 
	`unifi_îr‹
(
¥iv
, "%s: kmÆlo¯Áûed f‹ buf„r\n", 
__FUNCTION__
);

3212  
FALSE
;

3215 
	`mem£t
(
ba_£ssi⁄_rx
->
buf„r
, 0, ba_£ssi⁄_rx->
wöd_size
 * (
‰ame_desc_°ru˘
));

3217 
	`INIT_WORK
(&
ba_£ssi⁄_rx
->
£nd_ba_îr_èsk
, 
uf_£nd_ba_îr_wq
);

3218 i‡(
timeout
)

3220 
ba_£ssi⁄_rx
->
timeout
 =Åimeout;

3221 
ba_£ssi⁄_rx
->
timî
.
fun˘i⁄
 = 
ba_£ssi⁄_ãrmö©e_timî_func
;

3222 
ba_£ssi⁄_rx
->
timî
.
d©a
 = ()ba_session_rx;

3223 
	`öô_timî
(&
ba_£ssi⁄_rx
->
timî
);

3224 
	`mod_timî
(&
ba_£ssi⁄_rx
->
timî
, (
jiffõs
 + 
	`u£cs_to_jiffõs
((ba_£ssi⁄_rx->
timeout
) * 1024)));

3227 
ba_£ssi⁄_rx
->
öãrÁ˚Priv
 = interfacePriv;

3228 
ba_£ssi⁄_rx
->
tID
 =ÅID;

3229 
ba_£ssi⁄_rx
->
macAddªss
 = macAddress;

3231 
öãrÁ˚Priv
->
ba_£ssi⁄_rx
[
ba_£ssi⁄_idx
] = ba_session_rx;

3233  
TRUE
;

3234 
	}
}

3237 
	$C§WifiRouãrCålBlockAckE«bÀReqH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

3239 
C§WifiRouãrCålBlockAckE«bÀReq
 *
ªq
 = (C§WifiRouãrCålBlockAckE«bÀReq *)
msg
;

3240 
C§Boﬁ
 
r
;

3241 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

3243 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, ">>%s\n", 
__FUNCTION__
);

3244 
	`down
(&
¥iv
->
ba_muãx
);

3245 
r
 = 
	`blockack_£ssi⁄_°¨t
(
¥iv
,

3246 
ªq
->
öãrÁ˚Tag
,

3247 
ªq
->
åafficSåómID
,

3248 
ªq
->
timeout
,

3249 
ªq
->
rﬁe
,

3250 
ªq
->
buf„rSize
,

3251 
ªq
->
s¢
,

3252 
ªq
->
macAddªss


3254 
	`up
(&
¥iv
->
ba_muãx
);

3256 
	`C§WifiRouãrCålBlockAckE«bÀCfmSíd
(
msg
->
sour˚
,

3257 
ªq
->
˛õ¡D©a
,

3258 
ªq
->
öãrÁ˚Tag
,

3259 
r
?
CSR_RESULT_SUCCESS
 : 
CSR_RESULT_FAILURE
);

3260 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "<<%s:Ñ=%d\n", 
__FUNCTION__
, 
r
);

3261 
	}
}

3264 
	$C§WifiRouãrCålW≠iMu…iˇ°FûãrReqH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

3266 #ifde‡
CSR_WIFI_SECURITY_WAPI_ENABLE


3267 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

3268 
C§WifiRouãrCålW≠iMu…iˇ°FûãrReq
 *
ªq
 = (C§WifiRouãrCålW≠iMu…iˇ°FûãrReq *)
msg
;

3269 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
ªq
->
öãrÁ˚Tag
];

3271 i‡(
CSR_WIFI_ROUTER_CTRL_MODE_STA
 =
öãrÁ˚Priv
->
öãrÁ˚Mode
)

3273 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, ">>%s\n", 
__FUNCTION__
);

3275 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "C§WifiRouãrCålW≠iMu…iˇ°FûãrReq:Ñeq->°©u†%d\n", 
ªq
->
°©us
);

3279 
¥iv
->
w≠i_mu…iˇ°_fûãr
 = 
ªq
->
°©us
;

3281 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "<<%s\n", 
__FUNCTION__
);

3285 
	`unifi_w¨nög
(
¥iv
, "%†i†NOTáµliˇbÀ f‹ i¡îÁ˚ modê- %d\n", 
__FUNCTION__
, 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

3287 #ñi‡
	`deföed
(
UNIFI_DEBUG
)

3289 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

3290 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlWapiMulticastFilterReqHandler: called when WAPI isn'tÉnabled\n");

3292 
	}
}

3295 
	$C§WifiRouãrCålW≠iUniˇ°FûãrReqH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

3297 #ifde‡
CSR_WIFI_SECURITY_WAPI_ENABLE


3298 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

3299 
C§WifiRouãrCålW≠iUniˇ°FûãrReq
 *
ªq
 = (C§WifiRouãrCålW≠iUniˇ°FûãrReq *)
msg
;

3300 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
ªq
->
öãrÁ˚Tag
];

3302 i‡(
CSR_WIFI_ROUTER_CTRL_MODE_STA
 =
öãrÁ˚Priv
->
öãrÁ˚Mode
)

3304 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, ">>%s\n", 
__FUNCTION__
);

3306 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "C§WifiRouãrCålW≠iUniˇ°FûãrReq:Ñeq->°©us%d\n", 
ªq
->
°©us
);

3308 i‡((
¥iv
->
w≠i_uniˇ°_fûãr
 =1Ë&& (
ªq
->
°©us
 == 0))

3311 
¥iv
->
w≠i_uniˇ°_queued_pkt_fûãr
 = 1;

3316 
¥iv
->
w≠i_uniˇ°_fûãr
 = 
ªq
->
°©us
;

3318 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "<<%s\n", 
__FUNCTION__
);

3322 
	`unifi_w¨nög
(
¥iv
, "%†i†NOTáµliˇbÀ f‹ i¡îÁ˚ modê- %d\n", 
__FUNCTION__
, 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

3324 #ñi‡
	`deföed
(
UNIFI_DEBUG
)

3326 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

3327 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlWapiUnicastFilterReqHandler: called when WAPI isn'tÉnabled\n");

3329 
	}
}

3332 
	$C§WifiRouãrCålW≠iRxPktReqH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

3334 #ifde‡
CSR_WIFI_SECURITY_WAPI_ENABLE


3335 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

3336 
C§WifiRouãrCålW≠iRxPktReq
 *
ªq
 = (C§WifiRouãrCålW≠iRxPktReq *)
msg
;

3337 
˛õ¡_id
, 
ª˚ivî_id
;

3338 
bulk_d©a_∑øm_t
 
bulkd©a
;

3339 
C§Resu…
 
ªs
;

3340 
ul_˛õ¡_t
 *
˛õ¡
;

3341 
CSR_SIGNAL
 
sig«l
;

3342 
CSR_MA_PACKET_INDICATION
 *
pkt_öd
;

3343 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
ªq
->
öãrÁ˚Tag
];

3345 i‡(
CSR_WIFI_ROUTER_CTRL_MODE_STA
 =
öãrÁ˚Priv
->
öãrÁ˚Mode
)

3347 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, ">>%s\n", 
__FUNCTION__
);

3349 i‡(
¥iv
 =
NULL
)

3351 
	`unifi_îr‹
(
¥iv
, "C§WifiRouãrCålW≠iRxPktReq : invÆidÖriv\n", 
__FUNCTION__
);

3355 i‡(
¥iv
->
smïriv
 =
NULL
)

3357 
	`unifi_îr‹
(
¥iv
, "C§WifiRouãrCålW≠iRxPktReq : invÆid smê¥iv\n", 
__FUNCTION__
);

3361 i‡(
ªq
->
d©aLígth
 =0 ||Ñeq->
d©a
 =
NULL
)

3363 
	`unifi_îr‹
(
¥iv
, "C§WifiRouãrCålW≠iRxPktReq: invÆidÑeque°\n", 
__FUNCTION__
);

3367 
ªs
 = 
	`unifi_√t_d©a_mÆloc
(
¥iv
, &
bulkd©a
.
d
[0], 
ªq
->
d©aLígth
);

3368 i‡(
ªs
 !
CSR_RESULT_SUCCESS
)

3370 
	`unifi_îr‹
(
¥iv
, "C§WifiRouãrCålW≠iRxPktReq: CouldÇŸáŒoˇãÇë d©a\n", 
__FUNCTION__
);

3376 
ªs
 = 
	`ªad_u≈ack_sig«l
(
ªq
->
sig«l
, &signal);

3377 i‡(
ªs
)

3379 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlWapiRxPktReqHandler: Received unknown or corrupted signal.\n");

3382 
pkt_öd
 = (
CSR_MA_PACKET_INDICATION
 *Ë(&((&
sig«l
)->
u
).
MaPackëIndiˇti⁄
);

3383 i‡(
pkt_öd
->
Re˚±i⁄Sètus
 !
CSR_MICHAEL_MIC_ERROR
)

3385 
	`unifi_îr‹
(
¥iv
, "C§WifiRouãrCålW≠iRxPktReqH™dÀr: Unknow¿sig«»wôhÑe˚±i⁄ sètu†%d\n", 
pkt_öd
->
Re˚±i⁄Sètus
);

3390 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "C§WifiRouãrCålW≠iRxPktReqH™dÀr: MIC vîifõd , RX_SUCCESS \n", 
__FUNCTION__
);

3391 
pkt_öd
->
Re˚±i⁄Sètus
 = 
CSR_RX_SUCCESS
;

3392 
	`wrôe_∑ck
(&
sig«l
, 
ªq
->sig«l, &‘eq->
sig«lLígth
));

3395 
	`mem˝y
((*)
bulkd©a
.
d
[0].
os_d©a_±r
, 
ªq
->
d©a
,Ñeq->
d©aLígth
);

3397 
ª˚ivî_id
 = 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
((
ªq
->
sig«l
Ë+ (
C§I¡16
)) & 0xFFF0;

3398 
˛õ¡_id
 = (
ª˚ivî_id
 & 0x0F00Ë>> 
UDI_SENDER_ID_SHIFT
;

3400 
˛õ¡
 = &
¥iv
->
ul_˛õ¡s
[
˛õ¡_id
];

3402 i‡(
˛õ¡
 && clõ¡->
evít_hook
)

3404 
	`unifi_åa˚
(
¥iv
, 
UDBG3
,

3407 
˛õ¡
->
˛õ¡_id
, clõ¡->
£ndî_id
, 
ª˚ivî_id
,

3408 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
(
ªq
->
sig«l
));

3410 
˛õ¡
->
	`evít_hook
(˛õ¡, 
ªq
->
sig«l
,Ñeq->
sig«lLígth
, &
bulkd©a
, 
UDI_TO_HOST
);

3414 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "No clientÅo giveÅheÖacketÅo\n");

3415 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
.
d
[0]);

3418 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "<<%s\n", 
__FUNCTION__
);

3422 
	`unifi_w¨nög
(
¥iv
, "%†i†NOTáµliˇbÀ f‹ i¡îÁ˚ modê- %d\n", 
__FUNCTION__
, 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

3424 #ñi‡
	`deföed
(
UNIFI_DEBUG
)

3426 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

3427 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlWapiRxPktReqHandler: called when WAPI isn'tÉnabled\n");

3429 
	}
}

3432 
	$C§WifiRouãrCålW≠iUniˇ°TxPktReqH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

3434 #i‡(
	`deföed
(
CSR_WIFI_SECURITY_WAPI_ENABLE
Ë&& deföed(
CSR_WIFI_SECURITY_WAPI_SW_ENCRYPTION
))

3435 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*Ë
drv¥iv
;

3436 
C§WifiRouãrCålW≠iUniˇ°TxPktReq
 *
ªq
 = (C§WifiRouãrCålW≠iUniˇ°TxPktReq *Ë
msg
;

3437 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
ªq
->
öãrÁ˚Tag
];

3438 
bulk_d©a_∑øm_t
 
bulkd©a
;

3439 
C§Uöt8
 
macHódîLígthInByãs
 = 
MAC_HEADER_SIZE
;

3441 
C§Uöt8
 
≠≥ndedCry±oFõlds
 = 1 + 1 + 16 + 16;

3442 
C§Resu…
 
ªsu…
;

3444 
CSR_MA_PACKET_REQUEST
 *
°‹edSig«lMAPktReq
 = &
öãrÁ˚Priv
->
w≠i_uniˇ°_ma_pkt_sig
.
u
.
MaPackëReque°
;

3446 i‡(
CSR_WIFI_ROUTER_CTRL_MODE_STA
 =
öãrÁ˚Priv
->
öãrÁ˚Mode
)

3448 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, ">>%s\n", 
__FUNCTION__
);

3450 i‡(
¥iv
 =
NULL
)

3452 
	`unifi_îr‹
(
¥iv
, "C§WifiRouãrCålW≠iUniˇ°TxPktReqH™dÀ∏: invÆidÖriv\n", 
__FUNCTION__
);

3455 i‡(
¥iv
->
smïriv
 =
NULL
)

3457 
	`unifi_îr‹
(
¥iv
, "C§WifiRouãrCålW≠iUniˇ°TxPktReqH™dÀ∏: invÆid smê¥iv\n", 
__FUNCTION__
);

3460 i‡(
ªq
->
d©a
 =
NULL
)

3462 
	`unifi_îr‹
(
¥iv
, "C§WifiRouãrCålW≠iUniˇ°TxPktReqH™dÀr: invÆidÑeque°\n", 
__FUNCTION__
);

3468 i‡((
ªq
->
d©a
[0] & 0x88) == 0x88)

3470 
macHódîLígthInByãs
 = macHódîLígthInByã†+ 
QOS_CONTROL_HEADER_SIZE
;

3473 i‡(!(
ªq
->
d©aLígth
 > (
macHódîLígthInByãs
 + 
≠≥ndedCry±oFõlds
)))

3475 
	`unifi_îr‹
(
¥iv
, "C§WifiRouãrCålW≠iUniˇ°TxPktReqH™dÀr: invÆid d©aLígth\n", 
__FUNCTION__
);

3488 
ªsu…
 = 
	`unifi_√t_d©a_mÆloc
(
¥iv
, &
bulkd©a
.
d
[0], 
ªq
->
d©aLígth
);

3489 i‡(
ªsu…
 !
CSR_RESULT_SUCCESS
)

3491 
	`unifi_îr‹
(
¥iv
, "C§WifiRouãrCålW≠iUniˇ°TxPktReqH™dÀr: CouldÇŸáŒoˇãÇë d©a\n", 
__FUNCTION__
);

3494 
	`mem˝y
((*)
bulkd©a
.
d
[0].
os_d©a_±r
, 
ªq
->
d©a
,Ñeq->
d©aLígth
);

3495 
bulkd©a
.
d
[0].
d©a_Àngth
 = 
ªq
->
d©aLígth
;

3496 
bulkd©a
.
d
[1].
os_d©a_±r
 = 
NULL
;

3497 
bulkd©a
.
d
[1].
d©a_Àngth
 = 0;

3501 
ªsu…
 = 
	`uf_¥o˚ss_ma_∑ckë_ªq
(
¥iv
,

3502 
°‹edSig«lMAPktReq
->
Ra
.
x
,

3503 
°‹edSig«lMAPktReq
->
Ho°Tag
,

3504 
ªq
->
öãrÁ˚Tag
,

3505 
°‹edSig«lMAPktReq
->
Tønsmissi⁄C⁄åﬁ
,

3506 
°‹edSig«lMAPktReq
->
TønsmôR©e
,

3507 
°‹edSig«lMAPktReq
->
Pri‹ôy
,

3508 
öãrÁ˚Priv
->
w≠i_uniˇ°_ma_pkt_sig
.
Sig«lPrimôiveHódî
.
SídîPro˚ssId
,

3509 &
bulkd©a
);

3511 i‡(
ªsu…
 =
NETDEV_TX_OK
)

3513 (
¥iv
->
√tdev
[
ªq
->
öãrÁ˚Tag
])->
å™s_°¨t
 = 
jiffõs
;

3517 
öãrÁ˚Priv
->
°©s
.
tx_∑ckës
++;

3520 
öãrÁ˚Priv
->
°©s
.
tx_byãs
 +
ªq
->
d©aLígth
 - 
macHódîLígthInByãs
 - 
≠≥ndedCry±oFõlds
;

3521 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "C§WifiRouãrCålW≠iUniˇ°TxPktReqH™dÀr: (Packë Sít), síàcou¡ = %x\n", 
öãrÁ˚Priv
->
°©s
.
tx_∑ckës
);

3526 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "(HIP vÆid©i⁄ faûuªËResu… = %d\n", 
ªsu…
);

3527 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
.
d
[0]);

3529 
öãrÁ˚Priv
->
°©s
.
tx_dr›≥d
++;

3530 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "C§WifiRouãrCålW≠iUniˇ°TxPktReqH™dÀr: (Packë Dr›), dr›≥d cou¡ = %x\n", 
öãrÁ˚Priv
->
°©s
.
tx_dr›≥d
);

3533 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "<<%s\n", 
__FUNCTION__
);

3537 
	`unifi_w¨nög
(
¥iv
, "%†i†NOTáµliˇbÀ f‹ i¡îÁ˚ modê- %d\n", 
__FUNCTION__
, 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

3539 #ñi‡
	`deföed
(
UNIFI_DEBUG
)

3541 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

3542 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlWapiUnicastTxPktReqHandler: called when WAPI SW ENCRYPTION isn'tÉnabled\n");

3544 
	}
}

3547 
	$C§WifiRouãrCålW≠iFûãrReqH™dÀr
(*
drv¥iv
, 
C§WifiFsmEvít
 *
msg
)

3549 #ifde‡
CSR_WIFI_SECURITY_WAPI_ENABLE


3550 #ifde‡
CSR_WIFI_SECURITY_WAPI_QOSCTRL_MIC_WORKAROUND


3551 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

3552 
C§WifiRouãrCålW≠iFûãrReq
 *
ªq
 = (C§WifiRouãrCålW≠iFûãrReq *)
msg
;

3553 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
ªq
->
öãrÁ˚Tag
];

3555 i‡(
CSR_WIFI_ROUTER_CTRL_MODE_STA
 =
öãrÁ˚Priv
->
öãrÁ˚Mode
)

3557 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, ">>%s\n", 
__FUNCTION__
);

3559 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "C§WifiRouãrCålW≠iFûãrReq:Ñeq->isW≠iC⁄√˘ed [0/1] = %d \n", 
ªq
->
isW≠iC⁄√˘ed
);

3561 
¥iv
->
isW≠iC⁄√˘i⁄
 = 
ªq
->
isW≠iC⁄√˘ed
;

3563 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "<<%s\n", 
__FUNCTION__
);

3567 
	`unifi_w¨nög
(
¥iv
, "%†i†NOTáµliˇbÀ f‹ i¡îÁ˚ modê- %d\n", 
__FUNCTION__
, 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

3571 #ñi‡
	`deföed
(
UNIFI_DEBUG
)

3573 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_à*)
drv¥iv
;

3574 
	`unifi_îr‹
(
¥iv
, "CsrWifiRouterCtrlWapiFilterReq: called when WAPI isn'tÉnabled\n");

3576 
	}
}

	@sme_wext.c

16 
	~<löux/ty≥s.h
>

17 
	~<löux/ëhîdevi˚.h
>

18 
	~<löux/if_¨p.h
>

19 
	~<asm/uac˚ss.h
>

20 
	~<löux/˘y≥.h
>

21 
	~"unifi_¥iv.h
"

22 
	~<löux/π√éök.h
>

23 #ifde‡
CSR_WIFI_FW_RELOAD


24 
	~<löux/vmÆloc.h
>

25 
	~<löux/fúmw¨e.h
>

26 
	~"c§_wifi_hù_unifivîsi⁄.h
"

29 
	#CHECK_INITED
(
_¥iv
) \

31 i‡(
_¥iv
->
öô_¥ogªss
 !
UNIFI_INIT_COMPLETED
) { \

32 
	`unifi_åa˚
(
_¥iv
, 
UDBG2
, "%†unifònŸÑódy, faûög wexàˇŒ\n", 
__FUNCTION__
); \

33  -
ENODEV
; \

35 } 0)

	)

38 #i‚de‡
ANDROID_BUILD


39 
	#CSR_WIFI_WEXT_HANG_WORKAROUND


	)

42 #ifde‡
CSR_WIFI_WEXT_HANG_WORKAROUND


43 
	#UF_RTNL_LOCK
(Ë
	`π∆_lock
()

	)

44 
	#UF_RTNL_UNLOCK
(Ë
	`π∆_u∆ock
()

	)

46 
	#UF_RTNL_LOCK
()

	)

47 
	#UF_RTNL_UNLOCK
()

	)

72 
	$wext_‰eq_to_ch™√l
(
m
, 
e
)

74 
mhz
;

76 
mhz
 = 
m
;

77 
e
 < 6)

79 
mhz
 /= 10;

80 
e
++;

82 
e
 > 6)

84 
mhz
 *= 10;

85 
e
--;

88 i‡(
mhz
 >= 5000)

90  ((
mhz
 - 5000) / 5);

93 i‡(
mhz
 == 2482)

98 i‡(
mhz
 >= 2407)

100  ((
mhz
 - 2407) / 5);

104 
	}
}

107 
	$ch™√l_to_mhz
(
ch
, 
dŸ11a
)

109 i‡(
ch
 == 0)

113 i‡(
ch
 > 200)

119 i‡(
dŸ11a
)

121  (5000 + (5 * 
ch
));

125 i‡(
ch
 == 14)

130 i‡((
ch
 < 14) && (ch > 0))

132  (2407 + (5 * 
ch
));

136 
	}
}

139 #ifde‡
CSR_SUPPORT_WEXT_AP


140 
	$uf_sme_wext_≠_£t_deÁu…s
(
unifi_¥iv_t
 *
¥iv
)

142 
	`mem˝y
(
¥iv
->
≠_c⁄fig
.
ssid
.ssid, "defaultssid", ("defaultssid"));

144 
¥iv
->
≠_c⁄fig
.
ssid
.
Àngth
 = 8;

145 
¥iv
->
≠_c⁄fig
.
ch™√l
 = 6;

146 
¥iv
->
≠_c⁄fig
.
if_ödex
 = 1;

147 
¥iv
->
≠_c⁄fig
.
¸edítüls
.
authTy≥
 = 0;

148 
¥iv
->
≠_c⁄fig
.
max_c⁄√˘i⁄s
 = 8;

150 
¥iv
->
group_£c_c⁄fig
.
≠GroupkeyTimeout
 = 0;

151 
¥iv
->
group_£c_c⁄fig
.
≠Såi˘GtkRekey
 = 0;

152 
¥iv
->
group_£c_c⁄fig
.
≠GmkTimeout
 = 0;

153 
¥iv
->
group_£c_c⁄fig
.
≠Re•⁄£Timeout
 = 100;

154 
¥iv
->
group_£c_c⁄fig
.
≠RëønsLimô
 = 3;

158 
¥iv
->
≠_mac_c⁄fig
.
¥ómbÀ
 = 
CSR_WIFI_SME_USE_LONG_PREAMBLE
;

159 
¥iv
->
≠_mac_c⁄fig
.
sh‹tSlŸTimeE«bÀd
 = 
FALSE
;

160 
¥iv
->
≠_mac_c⁄fig
.
˘sPrŸe˘i⁄Ty≥
 = 
CSR_WIFI_SME_CTS_PROTECTION_AUTOMATIC
;

162 
¥iv
->
≠_mac_c⁄fig
.
wmmE«bÀd
 = 
TRUE
;

163 
¥iv
->
≠_mac_c⁄fig
.
wmmApP¨ams
[0].
cwMö
 = 4;

164 
¥iv
->
≠_mac_c⁄fig
.
wmmApP¨ams
[0].
cwMax
 = 10;

165 
¥iv
->
≠_mac_c⁄fig
.
wmmApP¨ams
[0].
aifs
 = 3;

166 
¥iv
->
≠_mac_c⁄fig
.
wmmApP¨ams
[0].
tx›Limô
 = 0;

167 
¥iv
->
≠_mac_c⁄fig
.
wmmApP¨ams
[0].
admissi⁄C⁄åﬁM™d©‹y
 = 
FALSE
;

168 
¥iv
->
≠_mac_c⁄fig
.
wmmApP¨ams
[1].
cwMö
 = 4;

169 
¥iv
->
≠_mac_c⁄fig
.
wmmApP¨ams
[1].
cwMax
 = 10;

170 
¥iv
->
≠_mac_c⁄fig
.
wmmApP¨ams
[1].
aifs
 = 7;

171 
¥iv
->
≠_mac_c⁄fig
.
wmmApP¨ams
[1].
tx›Limô
 = 0;

172 
¥iv
->
≠_mac_c⁄fig
.
wmmApP¨ams
[1].
admissi⁄C⁄åﬁM™d©‹y
 = 
FALSE
;

173 
¥iv
->
≠_mac_c⁄fig
.
wmmApP¨ams
[2].
cwMö
 = 3;

174 
¥iv
->
≠_mac_c⁄fig
.
wmmApP¨ams
[2].
cwMax
 = 4;

175 
¥iv
->
≠_mac_c⁄fig
.
wmmApP¨ams
[2].
aifs
 = 1;

176 
¥iv
->
≠_mac_c⁄fig
.
wmmApP¨ams
[2].
tx›Limô
 = 94;

177 
¥iv
->
≠_mac_c⁄fig
.
wmmApP¨ams
[2].
admissi⁄C⁄åﬁM™d©‹y
 = 
FALSE
;

178 
¥iv
->
≠_mac_c⁄fig
.
wmmApP¨ams
[3].
cwMö
 = 2;

179 
¥iv
->
≠_mac_c⁄fig
.
wmmApP¨ams
[3].
cwMax
 = 3;

180 
¥iv
->
≠_mac_c⁄fig
.
wmmApP¨ams
[3].
aifs
 = 1;

181 
¥iv
->
≠_mac_c⁄fig
.
wmmApP¨ams
[3].
tx›Limô
 = 47;

182 
¥iv
->
≠_mac_c⁄fig
.
wmmApP¨ams
[3].
admissi⁄C⁄åﬁM™d©‹y
 = 
FALSE
;

184 
¥iv
->
≠_mac_c⁄fig
.
wmmApBcP¨ams
[0].
cwMö
 = 4;

185 
¥iv
->
≠_mac_c⁄fig
.
wmmApBcP¨ams
[0].
cwMax
 = 10;

186 
¥iv
->
≠_mac_c⁄fig
.
wmmApBcP¨ams
[0].
aifs
 = 3;

187 
¥iv
->
≠_mac_c⁄fig
.
wmmApBcP¨ams
[0].
tx›Limô
 = 0;

188 
¥iv
->
≠_mac_c⁄fig
.
wmmApBcP¨ams
[0].
admissi⁄C⁄åﬁM™d©‹y
 = 
FALSE
;

189 
¥iv
->
≠_mac_c⁄fig
.
wmmApBcP¨ams
[1].
cwMö
 = 4;

190 
¥iv
->
≠_mac_c⁄fig
.
wmmApBcP¨ams
[1].
cwMax
 = 10;

191 
¥iv
->
≠_mac_c⁄fig
.
wmmApBcP¨ams
[1].
aifs
 = 7;

192 
¥iv
->
≠_mac_c⁄fig
.
wmmApBcP¨ams
[1].
tx›Limô
 = 0;

193 
¥iv
->
≠_mac_c⁄fig
.
wmmApBcP¨ams
[1].
admissi⁄C⁄åﬁM™d©‹y
 = 
FALSE
;

194 
¥iv
->
≠_mac_c⁄fig
.
wmmApBcP¨ams
[2].
cwMö
 = 3;

195 
¥iv
->
≠_mac_c⁄fig
.
wmmApBcP¨ams
[2].
cwMax
 = 4;

196 
¥iv
->
≠_mac_c⁄fig
.
wmmApBcP¨ams
[2].
aifs
 = 2;

197 
¥iv
->
≠_mac_c⁄fig
.
wmmApBcP¨ams
[2].
tx›Limô
 = 94;

198 
¥iv
->
≠_mac_c⁄fig
.
wmmApBcP¨ams
[2].
admissi⁄C⁄åﬁM™d©‹y
 = 
FALSE
;

199 
¥iv
->
≠_mac_c⁄fig
.
wmmApBcP¨ams
[3].
cwMö
 = 2;

200 
¥iv
->
≠_mac_c⁄fig
.
wmmApBcP¨ams
[3].
cwMax
 = 3;

201 
¥iv
->
≠_mac_c⁄fig
.
wmmApBcP¨ams
[3].
aifs
 = 2;

202 
¥iv
->
≠_mac_c⁄fig
.
wmmApBcP¨ams
[3].
tx›Limô
 = 47;

203 
¥iv
->
≠_mac_c⁄fig
.
wmmApBcP¨ams
[3].
admissi⁄C⁄åﬁM™d©‹y
 = 
FALSE
;

205 
¥iv
->
≠_mac_c⁄fig
.
ac˚ssTy≥
 = 
CSR_WIFI_AP_ACCESS_TYPE_NONE
;

206 
¥iv
->
≠_mac_c⁄fig
.
macAddªssLi°Cou¡
 = 0;

207 
¥iv
->
≠_mac_c⁄fig
.
macAddªssLi°
 = 
NULL
;

209 
¥iv
->
≠_mac_c⁄fig
.
≠HtP¨ams
.
rxStbc
 = 1;

210 
¥iv
->
≠_mac_c⁄fig
.
≠HtP¨ams
.
rifsModeAŒowed
 = 
TRUE
;

211 
¥iv
->
≠_mac_c⁄fig
.
≠HtP¨ams
.
gªífõldSuµ‹ãd
 = 
FALSE
;

212 
¥iv
->
≠_mac_c⁄fig
.
≠HtP¨ams
.
sh‹tGi20MHz
 = 
TRUE
;

213 
¥iv
->
≠_mac_c⁄fig
.
≠HtP¨ams
.
htPrŸe˘i⁄
 = 0;

214 
¥iv
->
≠_mac_c⁄fig
.
≠HtP¨ams
.
duÆCtsPrŸe˘i⁄
 = 
FALSE
;

216 
¥iv
->
≠_mac_c⁄fig
.
phySuµ‹ãdBôm≠
 =

217 (
CSR_WIFI_SME_AP_PHY_SUPPORT_B
 | 
CSR_WIFI_SME_AP_PHY_SUPPORT_G
 | 
CSR_WIFI_SME_AP_PHY_SUPPORT_N
);

218 
¥iv
->
≠_mac_c⁄fig
.
bóc⁄I¡îvÆ
 = 100;

219 
¥iv
->
≠_mac_c⁄fig
.
dtimPîiod
 = 3;

220 
¥iv
->
≠_mac_c⁄fig
.
maxLi°íI¡îvÆ
 = 0x00ff;

223 
¥iv
->
≠_mac_c⁄fig
.
suµ‹ãdR©esCou¡
 =

224 
	`uf_c⁄figuª_suµ‹ãd_øãs
(
¥iv
->
≠_mac_c⁄fig
.
suµ‹ãdR©es
,Öriv->≠_mac_c⁄fig.
phySuµ‹ãdBôm≠
);

225 
	}
}

244 
	$uf_sme_wext_£t_deÁu…s
(
unifi_¥iv_t
 *
¥iv
)

246 
	`mem£t
(&
¥iv
->
c⁄√˘i⁄_c⁄fig
, 0, (
C§WifiSmeC⁄√˘i⁄C⁄fig
));

248 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
bssTy≥
 = 
CSR_WIFI_SME_BSS_TYPE_INFRASTRUCTURE
;

249 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
authModeMask
 = 
CSR_WIFI_SME_AUTH_MODE_80211_OPEN
;

250 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
í¸y±i⁄ModeMask
 = 
CSR_WIFI_SME_ENCRYPTION_CIPHER_NONE
;

251 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
¥ivacyMode
 = 
CSR_WIFI_SME_80211_PRIVACY_MODE_DISABLED
;

252 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
wmmQosInfo
 = 0xFF;

253 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
ifIndex
 = 
CSR_WIFI_SME_RADIO_IF_BOTH
;

254 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
adhocJoöO∆y
 = 
FALSE
;

255 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
adhocCh™√l
 = 6;

257 
¥iv
->
sˇnInf‹m©i⁄EÀmítsLígth
 = 0;

258 
¥iv
->
sˇnInf‹m©i⁄EÀmíts
 = 
NULL
;

260 
¥iv
->
wï_tx_key_ödex
 = 0;

262 
¥iv
->
wext_wúñess_°©s
.
quÆ
.qual = 0;

263 
¥iv
->
wext_wúñess_°©s
.
quÆ
.
Àvñ
 = 0;

264 
¥iv
->
wext_wúñess_°©s
.
quÆ
.
noi£
 = 0;

265 
¥iv
->
wext_wúñess_°©s
.
quÆ
.
upd©ed
 = 0x70;

266 #ifde‡
CSR_SUPPORT_WEXT_AP


268 
	`uf_sme_wext_≠_£t_deÁu…s
(
¥iv
);

270 
	}
}

308 
	$iw¥ivsdefs
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

309 
iwªq_d©a
 *
wrqu
, *
exåa
)

311 
r
;

312 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

313 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

314 
C§WifiSmeMibC⁄fig
 
mibC⁄fig
;

315 
C§WifiSmePowîC⁄fig
 
powîC⁄fig
;

317 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "iwprivs80211defaults:Ñeload defaults\n");

319 
	`uf_sme_wext_£t_deÁu…s
(
¥iv
);

322 
r
 = 
	`sme_mgt_mib_c⁄fig_gë
(
¥iv
, &
mibC⁄fig
);

323 i‡(
r
)

325 
	`unifi_îr‹
(
¥iv
, "iwprivs80211defaults: Get CsrWifiSmeMibConfigValue failed.\n");

326  
r
;

328 
mibC⁄fig
.
dŸ11RtsThªshﬁd
 = 2347;

329 
mibC⁄fig
.
dŸ11Føgmíèti⁄Thªshﬁd
 = 2346;

330 
r
 = 
	`sme_mgt_mib_c⁄fig_£t
(
¥iv
, &
mibC⁄fig
);

331 i‡(
r
)

333 
	`unifi_îr‹
(
¥iv
, "iwprivs80211defaults: Set CsrWifiSmeMibConfigValue failed.\n");

334  
r
;

337 
powîC⁄fig
.
powîSaveLevñ
 = 
CSR_WIFI_SME_POWER_SAVE_LEVEL_LOW
;

338 
powîC⁄fig
.
li°íI¡îvÆTu
 = 100;

339 
powîC⁄fig
.
rxDtims
 = 1;

341 
r
 = 
	`sme_mgt_powî_c⁄fig_£t
(
¥iv
, &
powîC⁄fig
);

342 i‡(
r
)

344 
	`unifi_îr‹
(
¥iv
, "iwprivs80211defaults: Set unifi_PowerConfigValue failed.\n");

345  
r
;

349 
	}
}

352 
	$iw¥ivs80211ps
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

353 
iwªq_d©a
 *
wrqu
, *
exåa
)

355 
r
 = 0;

356 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

357 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

359 
ps_mode
 = ()(*
exåa
);

360 
C§WifiSmePowîC⁄fig
 
powîC⁄fig
;

362 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "iw¥ivs80211ps:Öowî savêmodê%d\n", 
ps_mode
);

364 
r
 = 
	`sme_mgt_powî_c⁄fig_gë
(
¥iv
, &
powîC⁄fig
);

365 i‡(
r
)

367 
	`unifi_îr‹
(
¥iv
, "iwprivs80211ps: Get unifi_PowerConfigValue failed.\n");

368  
r
;

371 
ps_mode
)

373 
CSR_PMM_ACTIVE_MODE
:

374 
powîC⁄fig
.
powîSaveLevñ
 = 
CSR_WIFI_SME_POWER_SAVE_LEVEL_LOW
;

376 
CSR_PMM_POWER_SAVE
:

377 
powîC⁄fig
.
powîSaveLevñ
 = 
CSR_WIFI_SME_POWER_SAVE_LEVEL_HIGH
;

379 
CSR_PMM_FAST_POWER_SAVE
:

380 
powîC⁄fig
.
powîSaveLevñ
 = 
CSR_WIFI_SME_POWER_SAVE_LEVEL_MED
;

383 
powîC⁄fig
.
powîSaveLevñ
 = 
CSR_WIFI_SME_POWER_SAVE_LEVEL_AUTO
;

387 
r
 = 
	`sme_mgt_powî_c⁄fig_£t
(
¥iv
, &
powîC⁄fig
);

388 i‡(
r
)

390 
	`unifi_îr‹
(
¥iv
, "iwprivs80211ps: Set unifi_PowerConfigValue failed.\n");

393  
r
;

394 
	}
}

397 
	$iw¥ivg80211ps
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

398 
iwªq_d©a
 *
wrqu
, *
exåa
)

400 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

401 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

403 
C§WifiSmePowîC⁄fig
 
powîC⁄fig
;

404 
r
;

406 
r
 = 
	`sme_mgt_powî_c⁄fig_gë
(
¥iv
, &
powîC⁄fig
);

407 i‡(
r
)

409 
	`unifi_îr‹
(
¥iv
, "iwprivg80211ps: Get 802.11Öower mode failed.\n");

410  
r
;

413 
powîC⁄fig
.
powîSaveLevñ
)

415 
CSR_WIFI_SME_POWER_SAVE_LEVEL_LOW
:

416 
	`¢¥ötf
(
exåa
, 
IWPRIV_POWER_SAVE_MAX_STRING
,

418 
powîC⁄fig
.
powîSaveLevñ
);

420 
CSR_WIFI_SME_POWER_SAVE_LEVEL_MED
:

421 
	`¢¥ötf
(
exåa
, 
IWPRIV_POWER_SAVE_MAX_STRING
,

423 
powîC⁄fig
.
powîSaveLevñ
);

425 
CSR_WIFI_SME_POWER_SAVE_LEVEL_HIGH
:

426 
	`¢¥ötf
(
exåa
, 
IWPRIV_POWER_SAVE_MAX_STRING
,

428 
powîC⁄fig
.
powîSaveLevñ
);

430 
CSR_WIFI_SME_POWER_SAVE_LEVEL_AUTO
:

431 
	`¢¥ötf
(
exåa
, 
IWPRIV_POWER_SAVE_MAX_STRING
,

433 
powîC⁄fig
.
powîSaveLevñ
);

436 
	`¢¥ötf
(
exåa
, 
IWPRIV_POWER_SAVE_MAX_STRING
,

438 
powîC⁄fig
.
powîSaveLevñ
);

442 
wrqu
->
d©a
.
Àngth
 = 
	`°æí
(
exåa
) + 1;

445 
	}
}

448 
	$iw¥ivssmedebug
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

449 
iwªq_d©a
 *
wrqu
, *
exåa
)

452 #i‡
	`deföed
 (
CSR_WIFI_HIP_DEBUG_OFFLINE
)

453 
	`unifi_debug_buf_dump
();

457 
	}
}

460 #ifde‡
CSR_SUPPORT_WEXT_AP


461 
	#PARAM_TYPE_INT
 0

	)

462 
	#PARAM_TYPE_STRING
 1

	)

463 
	#CSR_WIFI_MAX_SSID_LEN
 32

	)

464 
	#CSR_WIFI_MAX_SEC_LEN
 16

	)

465 
	#CSR_WIFI_MAX_KEY_LEN
 65

	)

467 
	$hex_look_up
(
x
)

469 i‡(
x
 >= '0' && x <= '9')

471  (
x
 - 48);

473 i‡(
x
 >= 'a' && x <= 'f')

475  (
x
 - 87);

478 
	}
}

481 
	$powî
(
a
, 
b
)

483 
i
;

484 
num
 = 1;

485 
i
 = 0; i < 
b
; i++)

487 
num
 *
a
;

489  
num
;

490 
	}
}

493 
	$decode_∑ømëî_‰om_°rög
(
unifi_¥iv_t
 *
¥iv
, **
°r_±r
,

494 c⁄° *
tokí
, 
∑øm_ty≥
,

495 *
d°
, 
∑øm_max_Àn
)

497 
C§Uöt8
 
öt_°r
[7] = "0";

498 
C§Uöt32
 
∑øm_°r_Àn
;

499 
C§Uöt8
 *
∑øm_°r_begö
, *
∑øm_°r_íd
;

500 
C§Uöt8
 *
‹ig_°r
 = *
°r_±r
;

502 i‡(!
	`°∫cmp
(*
°r_±r
, 
tokí
, 
	`°æí
(token)))

504 
	`°r£p
(
°r_±r
, "=,");

505 
∑øm_°r_begö
 = *
°r_±r
;

506 
	`°r£p
(
°r_±r
, "=,");

507 i‡(*
°r_±r
 =
NULL
)

509 
∑øm_°r_Àn
 = 
	`°æí
(
∑øm_°r_begö
);

513 
∑øm_°r_íd
 = *
°r_±r
 - 1;

514 
∑øm_°r_Àn
 = 
∑øm_°r_íd
 - 
∑øm_°r_begö
;

516 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "'tokí:%s',Üí:%d, ", 
tokí
, 
∑øm_°r_Àn
);

517 i‡(
∑øm_°r_Àn
 > 
∑øm_max_Àn
)

519 
	`unifi_nŸi˚
(
¥iv
, "exåa˘edÖ¨amÜí:%d i†> MAX:%d\n", 
∑øm_°r_Àn
, 
∑øm_max_Àn
);

520 
∑øm_°r_Àn
 = 
∑øm_max_Àn
;

522 
∑øm_ty≥
)

524 
PARAM_TYPE_INT
:

526 
C§Uöt32
 *
pd°_öt
 = 
d°
, 
num
 = 0;

527 
i
, 
j
 = 0;

528 i‡(
∑øm_°r_Àn
 > (
öt_°r
))

530 
∑øm_°r_Àn
 = (
öt_°r
);

532 
	`mem˝y
(
öt_°r
, 
∑øm_°r_begö
, 
∑øm_°r_Àn
);

533 
i
 = 
∑øm_°r_Àn
; i > 0; i--)

535 i‡(
öt_°r
[
i
 - 1] >= '0' && int_str[i - 1] <= '9')

537 
num
 +((
öt_°r
[
i
 - 1] - '0'Ë* 
	`powî
(10, 
j
));

538 
j
++;

542 
	`unifi_îr‹
(
¥iv
, "decode_∑ømëî_‰om_°rög:nŸáÇumbî %c\n", (
öt_°r
[
i
 - 1]));

546 *
pd°_öt
 = 
num
;

547 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "decode_∑ømëî_‰om_°rög:decoded i¡ = %d\n", *
pd°_öt
);

551 
	`mem˝y
(
d°
, 
∑øm_°r_begö
, 
∑øm_°r_Àn
);

552 *((*)
d°
 + 
∑øm_°r_Àn
) = 0;

553 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "decode_∑ømëî_‰om_°rög:decoded såög = %s\n", (*)
d°
);

559 
	`unifi_îr‹
(
¥iv
, "decode_∑ømëî_‰om_°rög: Tokí:%†nŸ found i¿%†\n", 
tokí
, 
‹ig_°r
);

563 
	}
}

566 
	$°‹e_≠_adv™˚d_c⁄fig_‰om_°rög
(
unifi_¥iv_t
 *
¥iv
, *
∑øm_°r
)

568 *
°r_±r
 = 
∑øm_°r
;

569 
ªt
 = 0, 
tmp_v¨
;

570 
phy_mode
[6];

571 
C§WifiSmeApMacC⁄fig
 *
≠_mac_c⁄fig
 = &
¥iv
->ap_mac_config;

574 
ªt
 = 
	`decode_∑ømëî_‰om_°rög
(
¥iv
, &
°r_±r
, "BI=",

575 
PARAM_TYPE_INT
, &
tmp_v¨
, 5);

576 i‡(
ªt
)

578 
	`unifi_îr‹
(
¥iv
, "store_ap_advanced_config_from_string: BIÇot found\n");

581 
≠_mac_c⁄fig
->
bóc⁄I¡îvÆ
 = 
tmp_v¨
;

582 
ªt
 = 
	`decode_∑ømëî_‰om_°rög
(
¥iv
, &
°r_±r
, "DTIM_PER=",

583 
PARAM_TYPE_INT
, &
tmp_v¨
, 5);

584 i‡(
ªt
)

586 
	`unifi_îr‹
(
¥iv
, "store_ap_advanced_config_from_string: DTIM_PERÇot found\n");

589 
≠_mac_c⁄fig
->
dtimPîiod
 = 
tmp_v¨
;

590 
ªt
 = 
	`decode_∑ømëî_‰om_°rög
(
¥iv
, &
°r_±r
, "WMM=",

591 
PARAM_TYPE_INT
, &
tmp_v¨
, 5);

592 i‡(
ªt
)

594 
	`unifi_îr‹
(
¥iv
, "store_ap_advanced_config_from_string: WMMÇot found\n");

597 
≠_mac_c⁄fig
->
wmmE«bÀd
 = 
tmp_v¨
;

598 
ªt
 = 
	`decode_∑ømëî_‰om_°rög
(
¥iv
, &
°r_±r
, "PHY=",

599 
PARAM_TYPE_STRING
, 
phy_mode
, 5);

600 i‡(
ªt
)

602 
	`unifi_îr‹
(
¥iv
, "store_ap_advanced_config_from_string: PHYÇot found\n");

606 i‡(
	`°r°r
(
phy_mode
, "b"))

608 
≠_mac_c⁄fig
->
phySuµ‹ãdBôm≠
 = 
CSR_WIFI_SME_AP_PHY_SUPPORT_B
;

610 i‡(
	`°r°r
(
phy_mode
, "g"))

612 
≠_mac_c⁄fig
->
phySuµ‹ãdBôm≠
 |
CSR_WIFI_SME_AP_PHY_SUPPORT_G
;

614 i‡(
	`°r°r
(
phy_mode
, "n"))

616 
≠_mac_c⁄fig
->
phySuµ‹ãdBôm≠
 |
CSR_WIFI_SME_AP_PHY_SUPPORT_N
;

618 
≠_mac_c⁄fig
->
suµ‹ãdR©esCou¡
 =

619 
	`uf_c⁄figuª_suµ‹ãd_øãs
(
≠_mac_c⁄fig
->
suµ‹ãdR©es
,áp_mac_c⁄fig->
phySuµ‹ãdBôm≠
);

621  
ªt
;

622 
	}
}

625 
	$°‹e_≠_c⁄fig_‰om_°rög
(
unifi_¥iv_t
 *
¥iv
, *
∑øm_°r
)

628 *
°r_±r
 = 
∑øm_°r
;

629 
sub_cmd
[16];

630 
£c
[
CSR_WIFI_MAX_SEC_LEN
];

631 
key
[
CSR_WIFI_MAX_KEY_LEN
];

632 
ªt
 = 0, 
tmp_v¨
;

633 
C§WifiSmeApC⁄fig_t
 *
≠_c⁄fig
 = &
¥iv
->ap_config;

634 
C§WifiSmeApMacC⁄fig
 *
≠_mac_c⁄fig
 = &
¥iv
->ap_mac_config;

635 
	`mem£t
(
sub_cmd
, 0, (sub_cmd));

636 i‡(!
	`°r°r
(
∑øm_°r
, "END"))

638 
	`unifi_îr‹
(
¥iv
, "°‹e_≠_c⁄fig_‰om_°rög:InvÆid c⁄fig såög:%s\n", 
∑øm_°r
);

641 i‡(
	`decode_∑ømëî_‰om_°rög
(
¥iv
, &
°r_±r
, "ASCII_CMD=",

642 
PARAM_TYPE_STRING
, 
sub_cmd
, 6) != 0)

646 i‡(
	`°∫cmp
(
sub_cmd
, "AP_CFG", 6))

648 i‡(!
	`°∫cmp
(
sub_cmd
, "ADVCFG", 6))

650  
	`°‹e_≠_adv™˚d_c⁄fig_‰om_°rög
(
¥iv
, 
°r_±r
);

652 
	`unifi_îr‹
(
¥iv
, "°‹e_≠_c⁄fig_‰om_°rög: sub_cmd:%†!'AP_CFG o∏ADVCFG'!\n", 
sub_cmd
);

655 
	`mem£t
(
≠_c⁄fig
, 0, (
C§WifiSmeApC⁄fig_t
));

656 
ªt
 = 
	`decode_∑ømëî_‰om_°rög
(
¥iv
, &
°r_±r
, "SSID=",

657 
PARAM_TYPE_STRING
, 
≠_c⁄fig
->
ssid
.ssid,

658 
CSR_WIFI_MAX_SSID_LEN
);

659 i‡(
ªt
)

661 
	`unifi_îr‹
(
¥iv
, "store_ap_config_from_string: SSIDÇot found\n");

664 
≠_c⁄fig
->
ssid
.
Àngth
 = 
	`°æí
(ap_config->ssid.ssid);

666 
ªt
 = 
	`decode_∑ømëî_‰om_°rög
(
¥iv
, &
°r_±r
, "SEC=",

667 
PARAM_TYPE_STRING
, 
£c
, 
CSR_WIFI_MAX_SEC_LEN
);

668 i‡(
ªt
)

670 
	`unifi_îr‹
(
¥iv
, "store_ap_config_from_string: SECÇot found\n");

673 
ªt
 = 
	`decode_∑ømëî_‰om_°rög
(
¥iv
, &
°r_±r
, "KEY=",

674 
PARAM_TYPE_STRING
, 
key
, 
CSR_WIFI_MAX_KEY_LEN
);

675 i‡(!
	`°rˇ£cmp
(
£c
, "open"))

677 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "store_ap_config_from_string: security open");

678 
≠_c⁄fig
->
¸edítüls
.
authTy≥
 = 
CSR_WIFI_SME_AP_AUTH_TYPE_OPEN_SYSTEM
;

679 i‡(
ªt
)

681 
	`unifi_nŸi˚
(
¥iv
, "store_ap_config_from_string: KEYÇot found:fine with Open\n");

684 i‡(!
	`°rˇ£cmp
(
£c
, "wpa2-psk"))

686 
i
, 
j
 = 0;

687 
C§WifiNmeApAuthPîs
 *
≥rs
 =

688 ((
C§WifiNmeApAuthPîs
 *)&(
≠_c⁄fig
->
¸edítüls
.
nmeAuthTy≥
.
authTy≥Pîs⁄Æ
));

689 
C§Uöt8
 *
psk
 = 
≥rs
->
authPîs_¸edítüls
.psk.psk;

691 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "store_ap_config_from_string: security WPA2");

692 i‡(
ªt
)

694 
	`unifi_îr‹
(
¥iv
, "store_ap_config_from_string: KEYÇot found for WPA2\n");

697 
≠_c⁄fig
->
¸edítüls
.
authTy≥
 = 
CSR_WIFI_SME_AP_AUTH_TYPE_PERSONAL
;

698 
≥rs
->
authSuµ‹t
 = 
CSR_WIFI_SME_RSN_AUTH_WPA2PSK
;

699 
≥rs
->
r¢C≠abûôõs
 = 0;

700 
≥rs
->
w≠iC≠abûôõs
 = 0;

701 
≥rs
->
pskOrPas•hø£
 = 
CSR_WIFI_NME_AP_CREDENTIAL_TYPE_PSK
;

702 
≥rs
->
authPîs_¸edítüls
.
psk
.
í¸y±i⁄Mode
 =

703 (
CSR_WIFI_NME_ENCRYPTION_CIPHER_PAIRWISE_CCMP
 | 
CSR_WIFI_NME_ENCRYPTION_CIPHER_GROUP_CCMP
);

704 
i
 = 0; i < 32; i++)

706 
psk
[
i
] = (16 * 
	`hex_look_up
(
key
[
j
])) + hex_look_up(key[j + 1]);

707 
j
 += 2;

712 
	`unifi_nŸi˚
(
¥iv
, "store_ap_config_from_string: Unknown security: Assuming Open");

713 
≠_c⁄fig
->
¸edítüls
.
authTy≥
 = 
CSR_WIFI_SME_AP_AUTH_TYPE_OPEN_SYSTEM
;

718 
ªt
 = 
	`decode_∑ømëî_‰om_°rög
(
¥iv
, &
°r_±r
, "CHANNEL=", 
PARAM_TYPE_INT
, &
tmp_v¨
, 5);

719 i‡(
ªt
)

723 
≠_c⁄fig
->
ch™√l
 = 
tmp_v¨
;

724 
ªt
 = 
	`decode_∑ømëî_‰om_°rög
(
¥iv
, &
°r_±r
, "PREAMBLE=", 
PARAM_TYPE_INT
, &
tmp_v¨
, 5);

725 i‡(
ªt
)

729 
≠_mac_c⁄fig
->
¥ómbÀ
 = 
tmp_v¨
;

730 
ªt
 = 
	`decode_∑ømëî_‰om_°rög
(
¥iv
, &
°r_±r
, "MAX_SCB=", 
PARAM_TYPE_INT
, &
tmp_v¨
, 5);

731 
≠_c⁄fig
->
max_c⁄√˘i⁄s
 = 
tmp_v¨
;

732  
ªt
;

733 
	}
}

736 
	$iw¥ivßp°¨t
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

737 
iwªq_d©a
 *
wrqu
, *
exåa
)

739 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

740 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

741 
r
;

743 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "iwprivsapstart\n");

744 #ifde‡
CSR_WIFI_FW_RELOAD


745 i‡(
öãrÁ˚Priv
->
∑tchMode
 != 1)

747 
	`unifi_îr‹
(
¥iv
, "%†: InvÆidÖ©chÜﬂded (%d). NŸ sèπög AP\n", 
__FUNCTION__
, 
öãrÁ˚Priv
->
∑tchMode
);

748  -
EINVAL
;

752 
r
 = 
	`sme_≠_°¨t
(
¥iv
, 
öãrÁ˚Priv
->
I¡îÁ˚Tag
, &¥iv->
≠_c⁄fig
);

753 i‡(
r
)

755 
	`unifi_îr‹
(
¥iv
, "iw¥ivßp°¨àAP START faûed : %d\n", -
r
);

757  
r
;

758 
	}
}

761 
	$iw¥ivßpc⁄fig
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

762 
iwªq_d©a
 *
wrqu
, *
exåa
)

764 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

765 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

766 *
cfg_°r
 = 
NULL
;

767 
r
;

769 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "iwprivsapconfig\n");

770 i‡(
wrqu
->
d©a
.
Àngth
 != 0)

772 *
°r
;

773 i‡(!(
cfg_°r
 = 
	`kmÆloc
(
wrqu
->
d©a
.
Àngth
 + 1, 
GFP_KERNEL
)))

775  -
ENOMEM
;

777 i‡(
	`c›y_‰om_u£r
(
cfg_°r
, 
wrqu
->
d©a
.
poöãr
, wrqu->d©a.
Àngth
))

779 
	`k‰ì
(
cfg_°r
);

780  -
EFAULT
;

782 
cfg_°r
[
wrqu
->
d©a
.
Àngth
] = 0;

783 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "Àngth:%d\n", 
wrqu
->
d©a
.
Àngth
);

784 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "AP c⁄figuøti⁄ såög:%s\n", 
cfg_°r
);

785 
°r
 = 
cfg_°r
;

786 i‡((
r
 = 
	`°‹e_≠_c⁄fig_‰om_°rög
(
¥iv
, 
°r
)))

788 
	`unifi_îr‹
(
¥iv
, "iw¥ivßpc⁄fig:FaûedÅÿdecodêthê°rög %d\n", 
r
);

789 
	`k‰ì
(
cfg_°r
);

790  -
EIO
;

795 
	`unifi_îr‹
(
¥iv
, "iwprivsapconfigárgumentÜength = 0 \n");

796  -
EIO
;

798 
r
 = 
	`sme_≠_c⁄fig
(
¥iv
, &¥iv->
≠_mac_c⁄fig
, &¥iv->
group_£c_c⁄fig
);

799 i‡(
r
)

801 
	`unifi_îr‹
(
¥iv
, "iw¥ivßp°› AP C⁄fig faûed : %d\n", -
r
);

803 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
 ||

804 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
)

806 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "iwprivsapconfig: StartingÅhe AP");

807 
r
 = 
	`sme_≠_°¨t
(
¥iv
, 
öãrÁ˚Priv
->
I¡îÁ˚Tag
, &¥iv->
≠_c⁄fig
);

808 i‡(
r
)

810 
	`unifi_îr‹
(
¥iv
, "iw¥ivßp°¨àAP START faûed : %d\n", -
r
);

813 
	`k‰ì
(
cfg_°r
);

814  
r
;

815 
	}
}

818 
	$iw¥ivßp°›
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

819 
iwªq_d©a
 *
wrqu
, *
exåa
)

821 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

822 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

823 
r
;

824 
C§Uöt16
 
öãrÁ˚_èg
 = 
öãrÁ˚Priv
->
I¡îÁ˚Tag
;

826 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "iwprivsapstop\n");

827 
r
 = 
	`sme_≠_°›
(
¥iv
, 
öãrÁ˚_èg
);

828 i‡(
r
)

830 
	`unifi_îr‹
(
¥iv
, "iw¥ivßp°› AP STOP faûed : %d\n", -
r
);

832  
r
;

833 
	}
}

835 #ifde‡
CSR_WIFI_FW_RELOAD


836 
	#UNIFI_MAX_FW_PATH_LEN
 32

	)

837 
	#HW_INIT_RETRY_LIMIT
 100

	)

838 
	$iw¥ivsfwªlﬂd
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

839 
iwªq_d©a
 *
wrqu
, *
exåa
)

841 
r
 = 0;

842 #i‡
	`deföed
(
CSR_WIFI_FW_RELOAD
Ë&& deföed(
CSR_WIFI_SPLIT_PATCH
)

843 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

844 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

845 
iw_poöt
 *
mode
 = &
wrqu
->
d©a
;

846 
C§WifiRouãrCålVîsi⁄s
 
vîsi⁄s
;

847 c⁄° 
fúmw¨e
 *
fw_íåy
;

848 *
°r
 = 
NULL
;

849 
fw_«me
[32];

851 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "%s\n", 
__FUNCTION__
);

853 i‡(
¥iv
->
öô_¥ogªss
 !
UNIFI_INIT_COMPLETED
)

855 
	`unifi_îr‹
(
¥iv
, "%†unifònŸÑódy, faûög wexàˇŒ\n", 
__FUNCTION__
);

856  -
ENODEV
;

859 
¥iv
->
öô_¥ogªss
 = 
UNIFI_INIT_IN_PROGRESS
;

861 i‡(!
mode
)

863 
	`unifi_îr‹
(
¥iv
, "%†: invÆidÖ¨amëîs\n", 
__FUNCTION__
);

864  -
EINVAL
;

867 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
)

869 
	`unifi_îr‹
(
¥iv
, "%s, FW RELOADÇŸáŒowed i¿thi†modê: %d\n", 
__FUNCTION__
, 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

870  -
EINVAL
;

873 
°r
 = 
	`kmÆloc
(
wrqu
->
d©a
.
Àngth
 + 1, 
GFP_KERNEL
);

874 i‡(!
°r
)

876 
	`unifi_îr‹
(
¥iv
, "%s, memáŒo¯Áûed\n", 
__FUNCTION__
);

877  -
ENOMEM
;

881 i‡(
	`c›y_‰om_u£r
(
°r
, 
wrqu
->
d©a
.
poöãr
, wrqu->d©a.
Àngth
))

883 
	`unifi_îr‹
(
¥iv
, "EFUALT-- \n");

884 
	`k‰ì
(
°r
);

885  -
EFAULT
;

887 
°r
[
wrqu
->
d©a
.
Àngth
] = '\0';

890 
	`unifi_åa˚
(
¥iv
, 
UDBG0
, "%†: modê¨g†%s\n", 
__FUNCTION__
, 
°r
);

891 
mode
->
Êags
 = 
°r
[0] - 0x30;

892 
	`k‰ì
(
°r
);

894 #ifde‡
ANDROID_BUILD


895 
	`wake_lock
(&
unifi_sdio_wake_lock
);

897 i‡(
¥iv
->
mib_d©a
.
Àngth
)

899 
	`v‰ì
(
¥iv
->
mib_d©a
.
d©a
);

900 
¥iv
->
mib_d©a
.
d©a
 = 
NULL
;

901 
¥iv
->
mib_d©a
.
Àngth
 = 0;

904 
	`uf_ªÀa£_fúmw¨e
(
¥iv
, &¥iv->
fw_°a
);

906 
	`unifi_îr‹
(
¥iv
, "%s,Ñeque°Ö©ch = %d\n", 
__FUNCTION__
, 
mode
->
Êags
);

907 
	`s˙¥ötf
(
fw_«me
, 
UNIFI_MAX_FW_PATH_LEN
, "unifi-sdio/%s",

908 (
mode
->
Êags
 == 0)?"staonly.xbv" : "ap.xbv");

910 
r
 = 
	`ªque°_fúmw¨e
(&
fw_íåy
, 
fw_«me
, 
¥iv
->
unifi_devi˚
);

912 i‡(
r
 == 0)

914 
¥iv
->
fw_°a
.
dl_d©a
 = 
fw_íåy
->
d©a
;

915 
¥iv
->
fw_°a
.
dl_Àn
 = 
fw_íåy
->
size
;

916 
¥iv
->
fw_°a
.
fw_desc
 = (*)
fw_íåy
;

917 
	`unifi_îr‹
(
¥iv
, "%†: Fúmw¨êfûê%†avaûabÀ\n", 
__FUNCTION__
, 
fw_«me
);

921 
	`unifi_îr‹
(
¥iv
, "%†: Fúmw¨êfûê%†nŸávaûabÀ\n", 
__FUNCTION__
, 
fw_«me
);

922 
r
 = -
ENOENT
;

923 
ªÀa£_wakñock
;

927 
¥iv
->
bh_thªad
.
block_thªad
 = 1;

932 
öãrÁ˚Priv
->
∑tchMode
 = 
mode
->
Êags
;

935 
r
 = 
	`uf_öô_hw
(
¥iv
);

936 i‡(
r
)

938 
	`unifi_îr‹
(
¥iv
, "%†: h¨dw¨êöô faûed : %d\n", 
__FUNCTION__
, 
r
);

939 
r
 = -
EIO
;

940 
ªÀa£_wakñock
;

944 
¥iv
->
bh_thªad
.
block_thªad
 = 0;

947 
	`unifi_ˇrd_öfo
(
¥iv
->
ˇrd
, &¥iv->
ˇrd_öfo
);

950 
vîsi⁄s
.
chùId
 = 
¥iv
->
ˇrd_öfo
.
chù_id
;

951 
vîsi⁄s
.
chùVîsi⁄
 = 
¥iv
->
ˇrd_öfo
.
chù_vîsi⁄
;

952 
vîsi⁄s
.
fúmw¨eBuûd
 = 
¥iv
->
ˇrd_öfo
.
fw_buûd
;

953 
vîsi⁄s
.
fúmw¨eHù
 = 
¥iv
->
ˇrd_öfo
.
fw_hù_vîsi⁄
;

954 
vîsi⁄s
.
rouãrBuûd
 = (
C§Ch¨Såög
 *)
CSR_WIFI_VERSION
;

955 
vîsi⁄s
.
rouãrHù
 = (
UNIFI_HIP_MAJOR_VERSION
 << 8Ë| 
UNIFI_HIP_MINOR_VERSION
;

961 
	`C§WifiRouãrCålWifiOnIndSíd
(
CSR_WIFI_SME_IFACEQUEUE
, 0, 
CSR_RESULT_SUCCESS
, 
vîsi⁄s
, 1);

963 
¥iv
->
öô_¥ogªss
 !
UNIFI_INIT_COMPLETED
)

965 
ªåy
 = 
HW_INIT_RETRY_LIMIT
;

967 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "%†: HW inôÇŸ d⁄ê.. waôög\n", 
__FUNCTION__
);

968 
	`m¶ìp
(100);

969 i‡(!
ªåy
--)

971 
	`unifi_îr‹
(
¥iv
, "%†: HW inô stû»nŸ d⁄ê.. givêup\n", 
__FUNCTION__
);

972  -
EIO
;

976 
ªÀa£_wakñock
:

977 #ifde‡
ANDROID_BUILD


978 
	`wake_u∆ock
(&
unifi_sdio_wake_lock
);

981  
r
;

982 
	}
}

985 #ifde‡
ANDROID_BUILD


986 
	$iw¥ivs°ack°¨t
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

987 
iwªq_d©a
 *
wrqu
, *
exåa
)

989 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

990 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

991 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "iwprivsstackstart\n");

993 
	}
}

996 
	$iw¥ivs°ack°›
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

997 
iwªq_d©a
 *
wrqu
, *
exåa
)

999 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

1000 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

1001 
r
 = 0;

1002 
C§Uöt16
 
öãrÁ˚_èg
 = 
öãrÁ˚Priv
->
I¡îÁ˚Tag
;

1004 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "iwprivsstackstop\n");

1006 
öãrÁ˚Priv
->
öãrÁ˚Mode
)

1008 
CSR_WIFI_ROUTER_CTRL_MODE_STA
:

1009 
CSR_WIFI_ROUTER_CTRL_MODE_P2PCLI
:

1010 
CSR_WIFI_ROUTER_CTRL_MODE_IBSS
:

1011 
r
 = 
	`sme_mgt_disc⁄√˘
(
¥iv
);

1013 
CSR_WIFI_ROUTER_CTRL_MODE_AP
:

1014 
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
:

1015 
r
 = 
	`sme_≠_°›
(
¥iv
, 
öãrÁ˚_èg
);

1021 i‡(
r
)

1023 
	`unifi_îr‹
(
¥iv
, "iw¥ivs°ack°› Sèck st› faûed : %d\n", -
r
);

1026 
	}
}

1031 #ifde‡
CSR_WIFI_SECURITY_WAPI_ENABLE


1032 
	$iw¥ivsc⁄fw≠i
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

1033 
iwªq_d©a
 *
wrqu
, *
exåa
)

1035 
C§Uöt8
 
íabÀ
;

1036 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

1037 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

1038 
	`func_íãr
();

1040 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "iwprivsconfwapi\n");

1042 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
 ||

1043 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
)

1045 
	`unifi_îr‹
(
¥iv
, "iwprivsconfwapi:ÇotÖermitted in Mode %d\n",

1046 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

1047  -
EPERM
;

1050 
íabÀ
 = *(
C§Uöt8
 *)(
exåa
);

1052 i‡(
íabÀ
)

1054 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
authModeMask
 = 
CSR_WIFI_SME_AUTH_MODE_80211_OPEN
;

1055 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
authModeMask
 |(
CSR_WIFI_SME_AUTH_MODE_WAPI_WAIPSK
 | 
CSR_WIFI_SME_AUTH_MODE_WAPI_WAI
);

1056 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
í¸y±i⁄ModeMask
 |=

1057 
CSR_WIFI_SME_ENCRYPTION_CIPHER_PAIRWISE_SMS4
 | 
CSR_WIFI_SME_ENCRYPTION_CIPHER_GROUP_SMS4
;

1061 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
authModeMask
 &~(
CSR_WIFI_SME_AUTH_MODE_WAPI_WAIPSK
 | 
CSR_WIFI_SME_AUTH_MODE_WAPI_WAI
);

1062 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
í¸y±i⁄ModeMask
 &=

1063 ~(
CSR_WIFI_SME_ENCRYPTION_CIPHER_PAIRWISE_SMS4
 | 
CSR_WIFI_SME_ENCRYPTION_CIPHER_GROUP_SMS4
);

1066 
	`func_exô
();

1068 
	}
}

1071 
	$iw¥ivswpikey
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

1072 
iwªq_d©a
 *
wrqu
, *
exåa
)

1074 
r
 = 0, 
i
;

1075 
C§WifiSmeKey
 
key
;

1076 
unifiio_w≠i_key_t
 
öKey
;

1077 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

1078 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

1079 
	`func_íãr
();

1081 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "iwprivswpikey\n");

1083 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
 ||

1084 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
)

1086 
	`unifi_îr‹
(
¥iv
, "iwprivswpikey:ÇotÖermitted in Mode %d\n",

1087 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

1088  -
EPERM
;

1091 
öKey
 = *(
unifiio_w≠i_key_t
 *)(
exåa
);

1093 i‡(
öKey
.
uniˇ°Key
)

1095 
key
.
keyTy≥
 = 
CSR_WIFI_SME_KEY_TYPE_PAIRWISE
;

1099 
key
.
keyTy≥
 = 
CSR_WIFI_SME_KEY_TYPE_GROUP
;

1102 
key
.
keyIndex
 = 
öKey
.keyIndex;

1105 
i
 = 0; i < 16; i += 2)

1107 
key
.
keyRsc
[
i
 / 2] = 
öKey
.keyRsc[i + 1] << 8 | inKey.keyRsc[i];

1110 
	`mem˝y
(
key
.
addªss
.
a
, 
öKey
.address, 6);

1111 
key
.
keyLígth
 = 32;

1112 
	`mem˝y
(
key
.key, 
öKey
.key, 32);

1113 
key
.
authítiˇt‹
 = 0;

1114 
key
.
wïTxKey
 = 0;

1116 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "keyType = %d, keyIndex = %d, wepTxKey = %d, keyRsc = %x:%x,áuth = %d,áddress = %x:%x, "

1117 "keyÀngth = %d, key = %x:%x\n", 
key
.
keyTy≥
, key.
keyIndex
, key.
wïTxKey
,

1118 
key
.
keyRsc
[0], key.keyRsc[7], key.
authítiˇt‹
,

1119 
key
.
addªss
.
a
[0], key.addªss.a[5], key.
keyLígth
, key.key[0],

1120 
key
.key[15]);

1122 
r
 = 
	`sme_mgt_key
(
¥iv
, &
key
, 
CSR_WIFI_SME_LIST_ACTION_ADD
);

1123 i‡(
r
)

1125 
	`unifi_îr‹
(
¥iv
, "SETKEYSÑeque° wa†ªje˘ed wôhÑesu… %d\n", 
r
);

1126  
	`c⁄vît_sme_îr‹
(
r
);

1129 
	`func_exô
();

1130  
r
;

1131 
	}
}

1137 
	$unifi_giw«me
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

1138 
iwªq_d©a
 *
wrqu
, *
exåa
)

1140 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

1141 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

1142 *
«me
 = 
wrqu
->name;

1143 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "unifi_giwname\n");

1145 i‡(
¥iv
->
if_ödex
 =
CSR_INDEX_5G
)

1147 
	`°r˝y
(
«me
, "IEEE 802.11-a");

1151 
	`°r˝y
(
«me
, "IEEE 802.11-bgn");

1154 
	}
}

1157 
	$unifi_siw‰eq
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

1158 
iwªq_d©a
 *
wrqu
, *
exåa
)

1160 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

1161 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

1162 
iw_‰eq
 *
‰eq
 = (iw_‰eq *)
wrqu
;

1164 
	`func_íãr
();

1165 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "unifi_siwfreq\n");

1167 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
 ||

1168 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
)

1170 
	`unifi_îr‹
(
¥iv
, "unifi_siwfreq:ÇotÖermitted in Mode %d\n",

1171 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

1172  -
EPERM
;

1180 i‡((
‰eq
->
e
 =0Ë&& (‰eq->
m
 <= 1000))

1182 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
adhocCh™√l
 = 
‰eq
->
m
;

1186 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
adhocCh™√l
 = 
	`wext_‰eq_to_ch™√l
(
‰eq
->
m
, fªq->
e
);

1189 
	`func_exô
();

1191 
	}
}

1194 
	$unifi_giw‰eq
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

1195 
iwªq_d©a
 *
wrqu
, *
exåa
)

1197 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

1198 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

1199 
iw_‰eq
 *
‰eq
 = (iw_‰eq *)
wrqu
;

1200 
îr
 = 0;

1201 
C§WifiSmeC⁄√˘i⁄Info
 
c⁄√˘i⁄Info
;

1203 
	`func_íãr
();

1204 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "unifi_giwfreq\n");

1205 
	`CHECK_INITED
(
¥iv
);

1207 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
 ||

1208 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
)

1210 
	`unifi_îr‹
(
¥iv
, "unifi_giwfreq:ÇotÖermitted in Mode %d\n",

1211 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

1212  -
EPERM
;

1216 
	`UF_RTNL_UNLOCK
();

1217 
îr
 = 
	`sme_mgt_c⁄√˘i⁄_öfo_gë
(
¥iv
, &
c⁄√˘i⁄Info
);

1218 
	`UF_RTNL_LOCK
();

1220 
‰eq
->
m
 = 
	`ch™√l_to_mhz
(
c⁄√˘i⁄Info
.
ch™√lNumbî
,

1221 (
c⁄√˘i⁄Info
.
√tw‹kTy≥80211
 =
CSR_WIFI_SME_RADIO_IF_GHZ_5_0
));

1222 
‰eq
->
e
 = 6;

1224 
	`func_exô
();

1225  
	`c⁄vît_sme_îr‹
(
îr
);

1226 
	}
}

1229 
	$unifi_siwmode
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

1230 
iwªq_d©a
 *
wrqu
, *
exåa
)

1232 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

1233 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

1235 
	`func_íãr
();

1236 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "unifi_siwmode\n");

1238 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
 ||

1239 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
)

1241 
	`unifi_îr‹
(
¥iv
, "unifi_siwmode:ÇotÖermitted in Mode %d\n",

1242 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

1243  -
EPERM
;

1247 
wrqu
->
mode
)

1249 
IW_MODE_ADHOC
:

1250 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
bssTy≥
 = 
CSR_WIFI_SME_BSS_TYPE_ADHOC
;

1252 
IW_MODE_INFRA
:

1253 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
bssTy≥
 = 
CSR_WIFI_SME_BSS_TYPE_INFRASTRUCTURE
;

1255 
IW_MODE_AUTO
:

1256 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
bssTy≥
 = 
CSR_WIFI_SME_BSS_TYPE_ANY_BSS
;

1259 
	`unifi_nŸi˚
(
¥iv
, "Unknown IW MODE value.\n");

1263 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
ssid
.
Àngth
 = 0;

1264 
	`mem£t
(
¥iv
->
c⁄√˘i⁄_c⁄fig
.
bssid
.
a
, 0xFF, 
ETH_ALEN
);

1266 
	`func_exô
();

1268 
	}
}

1271 
	$unifi_giwmode
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

1272 
iwªq_d©a
 *
wrqu
, *
exåa
)

1274 
r
 = 0;

1275 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

1276 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

1277 
C§WifiSmeC⁄√˘i⁄C⁄fig
 
c⁄√˘i⁄C⁄fig
;

1279 
	`func_íãr
();

1280 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "unifi_giwmode\n");

1281 
	`CHECK_INITED
(
¥iv
);

1283 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "unifi_giwmode: Exisitng mode = 0x%x\n",

1284 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

1285 
öãrÁ˚Priv
->
öãrÁ˚Mode
)

1287 
CSR_WIFI_ROUTER_CTRL_MODE_STA
:

1288 
CSR_WIFI_ROUTER_CTRL_MODE_P2PCLI
:

1289 
wrqu
->
mode
 = 
IW_MODE_INFRA
;

1291 
CSR_WIFI_ROUTER_CTRL_MODE_AP
:

1292 
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
:

1293 
wrqu
->
mode
 = 
IW_MODE_MASTER
;

1295 
CSR_WIFI_ROUTER_CTRL_MODE_IBSS
:

1296 
wrqu
->
mode
 = 
IW_MODE_ADHOC
;

1298 
CSR_WIFI_ROUTER_CTRL_MODE_P2P
:

1299 
CSR_WIFI_ROUTER_CTRL_MODE_NONE
:

1300 
	`UF_RTNL_UNLOCK
();

1301 
r
 = 
	`sme_mgt_c⁄√˘i⁄_c⁄fig_gë
(
¥iv
, &
c⁄√˘i⁄C⁄fig
);

1302 
	`UF_RTNL_LOCK
();

1303 i‡(
r
 == 0)

1305 
c⁄√˘i⁄C⁄fig
.
bssTy≥
)

1307 
CSR_WIFI_SME_BSS_TYPE_ADHOC
:

1308 
wrqu
->
mode
 = 
IW_MODE_ADHOC
;

1310 
CSR_WIFI_SME_BSS_TYPE_INFRASTRUCTURE
:

1311 
wrqu
->
mode
 = 
IW_MODE_INFRA
;

1314 
wrqu
->
mode
 = 
IW_MODE_AUTO
;

1315 
	`unifi_nŸi˚
(
¥iv
, "Unknown IW MODE value.\n");

1320 
wrqu
->
mode
 = 
IW_MODE_AUTO
;

1321 
	`unifi_nŸi˚
(
¥iv
, "Unknown IW MODE value.\n");

1323 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "unifi_giwmode: modê0x%x\n", 
wrqu
->
mode
);

1324 
	`func_exô
();

1325  
r
;

1326 
	}
}

1329 
	$unifi_giwønge
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

1330 
iwªq_d©a
 *
wrqu
, *
exåa
)

1332 
iw_poöt
 *
dwrq
 = &
wrqu
->
d©a
;

1333 
iw_ønge
 *
ønge
 = (iw_øngê*Ë
exåa
;

1334 
i
;

1336 
	`unifi_åa˚
(
NULL
, 
UDBG2
, "unifi_giwrange\n");

1338 
dwrq
->
Àngth
 = (
iw_ønge
);

1339 
	`mem£t
(
ønge
, 0, (*range));

1340 
ønge
->
mö_nwid
 = 0x0000;

1341 
ønge
->
max_nwid
 = 0x0000;

1349 
ønge
->
max_quÆ
.
quÆ
 = 40;

1350 
ønge
->
max_quÆ
.
Àvñ
 = -120;

1351 
ønge
->
max_quÆ
.
noi£
 = -120;

1355 
i
 = 0;

1356 #i‡
WIRELESS_EXT
 > 15

1357 
ønge
->
bôøã
[
i
++] = 2 * 500000;

1358 
ønge
->
bôøã
[
i
++] = 4 * 500000;

1359 
ønge
->
bôøã
[
i
++] = 11 * 500000;

1360 
ønge
->
bôøã
[
i
++] = 22 * 500000;

1361 
ønge
->
bôøã
[
i
++] = 12 * 500000;

1362 
ønge
->
bôøã
[
i
++] = 18 * 500000;

1363 
ønge
->
bôøã
[
i
++] = 24 * 500000;

1364 
ønge
->
bôøã
[
i
++] = 36 * 500000;

1365 
ønge
->
bôøã
[
i
++] = 48 * 500000;

1366 
ønge
->
bôøã
[
i
++] = 72 * 500000;

1367 
ønge
->
bôøã
[
i
++] = 96 * 500000;

1368 
ønge
->
bôøã
[
i
++] = 108 * 500000;

1370 
ønge
->
bôøã
[
i
++] = 2 * 500000;

1371 
ønge
->
bôøã
[
i
++] = 4 * 500000;

1372 
ønge
->
bôøã
[
i
++] = 11 * 500000;

1373 
ønge
->
bôøã
[
i
++] = 22 * 500000;

1374 
ønge
->
bôøã
[
i
++] = 24 * 500000;

1375 
ønge
->
bôøã
[
i
++] = 48 * 500000;

1376 
ønge
->
bôøã
[
i
++] = 96 * 500000;

1377 
ønge
->
bôøã
[
i
++] = 108 * 500000;

1379 
ønge
->
num_bôøãs
 = 
i
;

1381 
ønge
->
max_ícodög_tokís
 = 
NUM_WEPKEYS
;

1382 
ønge
->
num_ícodög_sizes
 = 2;

1383 
ønge
->
ícodög_size
[0] = 5;

1384 
ønge
->
ícodög_size
[1] = 13;

1386 
ønge
->
we_vîsi⁄_sour˚
 = 20;

1387 
ønge
->
we_vîsi⁄_compûed
 = 
WIRELESS_EXT
;

1390 
ønge
->
num_ch™√ls
 = 14;

1392 
ønge
->
num_‰equícy
 = 14;

1393 
i
 = 0; (ò< 
ønge
->
num_‰equícy
Ë&& (ò< 
IW_MAX_FREQUENCIES
); i++)

1395 
ch™
 = 
i
 + 1;

1396 
ønge
->
‰eq
[
i
].ò
ch™
;

1397 
ønge
->
‰eq
[
i
].
m
 = 
	`ch™√l_to_mhz
(
ch™
, 0);

1398 
ønge
->
‰eq
[
i
].
e
 = 6;

1400 i‡((
i
 + 3Ë< 
IW_MAX_FREQUENCIES
)

1402 
ønge
->
‰eq
[
i
].i = 36;

1403 
ønge
->
‰eq
[
i
].
m
 = 
	`ch™√l_to_mhz
(36, 1);

1404 
ønge
->
‰eq
[
i
].
e
 = 6;

1405 
ønge
->
‰eq
[
i
 + 1].i = 40;

1406 
ønge
->
‰eq
[
i
 + 1].
m
 = 
	`ch™√l_to_mhz
(40, 1);

1407 
ønge
->
‰eq
[
i
 + 1].
e
 = 6;

1408 
ønge
->
‰eq
[
i
 + 2].i = 44;

1409 
ønge
->
‰eq
[
i
 + 2].
m
 = 
	`ch™√l_to_mhz
(44, 1);

1410 
ønge
->
‰eq
[
i
 + 2].
e
 = 6;

1411 
ønge
->
‰eq
[
i
 + 3].i = 48;

1412 
ønge
->
‰eq
[
i
 + 3].
m
 = 
	`ch™√l_to_mhz
(48, 1);

1413 
ønge
->
‰eq
[
i
 + 3].
e
 = 6;

1416 #i‡
WIRELESS_EXT
 > 16

1418 
ønge
->
evít_ˇ∑
[0] = (
IW_EVENT_CAPA_K_0
 |

1419 
	`IW_EVENT_CAPA_MASK
(
SIOCGIWTHRSPY
) |

1420 
	`IW_EVENT_CAPA_MASK
(
SIOCGIWAP
) |

1421 
	`IW_EVENT_CAPA_MASK
(
SIOCGIWSCAN
));

1422 
ønge
->
evít_ˇ∑
[1] = 
IW_EVENT_CAPA_K_1
;

1423 
ønge
->
evít_ˇ∑
[4] = (
	`IW_EVENT_CAPA_MASK
(
IWEVTXDROP
) |

1424 
	`IW_EVENT_CAPA_MASK
(
IWEVCUSTOM
) |

1425 
	`IW_EVENT_CAPA_MASK
(
IWEVREGISTERED
) |

1426 
	`IW_EVENT_CAPA_MASK
(
IWEVEXPIRED
));

1429 #i‡
WIRELESS_EXT
 > 17

1430 
ønge
->
íc_ˇ∑
 = 
IW_ENC_CAPA_WPA
 | 
IW_ENC_CAPA_WPA2
 |

1431 
IW_ENC_CAPA_CIPHER_TKIP
 | 
IW_ENC_CAPA_CIPHER_CCMP
;

1436 
	}
}

1439 
	$unifi_siw≠
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

1440 
iwªq_d©a
 *
wrqu
, *
exåa
)

1442 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

1443 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

1444 
îr
 = 0;

1445 c⁄° 
zîo_bssid
[
ETH_ALEN
] = {

1450 
	`func_íãr
();

1452 
	`CHECK_INITED
(
¥iv
);

1454 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
 ||

1455 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
)

1457 
	`unifi_îr‹
(
¥iv
, "unifi_siwap:ÇotÖermitted in Mode %d\n",

1458 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

1459  -
EPERM
;

1462 #ifde‡
CSR_WIFI_FW_RELOAD


1463 i‡(
öãrÁ˚Priv
->
∑tchMode
 != 0)

1465 
	`unifi_îr‹
(
¥iv
, "%†: InvÆidÖ©chÜﬂded (%d). NŸ c⁄√˘ög\n", 
__FUNCTION__
, 
öãrÁ˚Priv
->
∑tchMode
);

1466  -
EINVAL
;

1469 i‡(
wrqu
->
≠_addr
.
ß_Ámûy
 !
ARPHRD_ETHER
)

1471  -
EINVAL
;

1474 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "unifi_siwap:ásked for %02X:%02X:%02X:%02X:%02X:%02X\n",

1475 (
u8
)
wrqu
->
≠_addr
.
ß_d©a
[0],

1476 (
u8
)
wrqu
->
≠_addr
.
ß_d©a
[1],

1477 (
u8
)
wrqu
->
≠_addr
.
ß_d©a
[2],

1478 (
u8
)
wrqu
->
≠_addr
.
ß_d©a
[3],

1479 (
u8
)
wrqu
->
≠_addr
.
ß_d©a
[4],

1480 (
u8
)
wrqu
->
≠_addr
.
ß_d©a
[5]);

1482 i‡(!
	`memcmp
(
wrqu
->
≠_addr
.
ß_d©a
, 
zîo_bssid
, 
ETH_ALEN
))

1484 
¥iv
->
ign‹e_bssid_joö
 = 
FALSE
;

1485 
îr
 = 
	`sme_mgt_disc⁄√˘
(
¥iv
);

1486 i‡(
îr
)

1488 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "unifi_siw≠: Disc⁄√˘ faûed, sètu†%d\n", 
îr
);

1493 i‡(
¥iv
->
ign‹e_bssid_joö
)

1495 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "unifi_siwap: ignoring second join\n");

1496 
¥iv
->
ign‹e_bssid_joö
 = 
FALSE
;

1500 
	`mem˝y
(
¥iv
->
c⁄√˘i⁄_c⁄fig
.
bssid
.
a
, 
wrqu
->
≠_addr
.
ß_d©a
, 
ETH_ALEN
);

1501 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "unifi_siwap: Joining %X:%X:%X:%X:%X:%X\n",

1502 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
bssid
.
a
[0],

1503 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
bssid
.
a
[1],

1504 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
bssid
.
a
[2],

1505 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
bssid
.
a
[3],

1506 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
bssid
.
a
[4],

1507 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
bssid
.
a
[5]);

1508 
îr
 = 
	`sme_mgt_c⁄√˘
(
¥iv
);

1509 i‡(
îr
)

1511 
	`unifi_îr‹
(
¥iv
, "unifi_siw≠: Joö faûed, sètu†%d\n", 
îr
);

1512 
	`func_exô
();

1513  
	`c⁄vît_sme_îr‹
(
îr
);

1516 
	`func_exô
();

1519 
	}
}

1522 
	$unifi_giw≠
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

1523 
iwªq_d©a
 *
wrqu
, *
exåa
)

1525 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

1526 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

1527 
C§WifiSmeC⁄√˘i⁄Info
 
c⁄√˘i⁄Info
;

1528 
r
 = 0;

1529 
C§Uöt8
 *
bssid
;

1531 
	`func_íãr
();

1533 
	`CHECK_INITED
(
¥iv
);

1534 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "unifi_giwap\n");

1536 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
 ||

1537 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
)

1539 
	`unifi_îr‹
(
¥iv
, "iwprivswpikey:ÇotÖermitted in Mode %d\n",

1540 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

1541  -
EPERM
;

1544 
	`UF_RTNL_UNLOCK
();

1545 
r
 = 
	`sme_mgt_c⁄√˘i⁄_öfo_gë
(
¥iv
, &
c⁄√˘i⁄Info
);

1546 
	`UF_RTNL_LOCK
();

1548 i‡(
r
 == 0)

1550 
bssid
 = 
c⁄√˘i⁄Info
.bssid.
a
;

1551 
wrqu
->
≠_addr
.
ß_Ámûy
 = 
ARPHRD_ETHER
;

1552 
	`unifi_åa˚
(
¥iv
, 
UDBG4
,

1554 
bssid
[0], bssid[1], bssid[2],

1555 
bssid
[3], bssid[4], bssid[5]);

1557 
	`mem˝y
(
wrqu
->
≠_addr
.
ß_d©a
, 
bssid
, 
ETH_ALEN
);

1561 
	`mem£t
(
wrqu
->
≠_addr
.
ß_d©a
, 0, 
ETH_ALEN
);

1564 
	`func_exô
();

1566 
	}
}

1569 
	$unifi_siwsˇn
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

1570 
iwªq_d©a
 *
wrqu
, *
exåa
)

1572 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

1573 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

1574 
sˇ¡y≥
;

1575 
r
;

1576 
C§WifiSsid
 
sˇn_ssid
;

1577 *
ch™√l_li°
 = 
NULL
;

1578 
ch™s_good
 = 0;

1579 #i‡
WIRELESS_EXT
 > 17

1580 
iw_poöt
 *
d©a
 = &
wrqu
->data;

1581 
iw_sˇn_ªq
 *
ªq
 = (iw_sˇn_ªq *Ë
exåa
;

1584 
	`func_íãr
();

1586 
	`CHECK_INITED
(
¥iv
);

1588 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
 ||

1589 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
)

1591 
	`unifi_îr‹
(
¥iv
, "unifi_siwscan:ÇotÖermitted in Mode %d\n",

1592 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

1593  -
EPERM
;

1597 
sˇ¡y≥
 = 
UNIFI_SCAN_ACTIVE
;

1599 #i‡
WIRELESS_EXT
 > 17

1601 i‡(
ªq
)

1603 i‡((
ªq
->
num_ch™√ls
 > 0Ë&& (ªq->num_ch™√l†< 
IW_MAX_FREQUENCIES
))

1605 
ch™√l_li°
 = 
	`kmÆloc
(
ªq
->
num_ch™√ls
, 
GFP_KERNEL
);

1606 i‡(
ch™√l_li°
)

1608 
i
;

1609 
i
 = 0; i < 
ªq
->
num_ch™√ls
; i++)

1612 
ch
 = 
	`wext_‰eq_to_ch™√l
(
ªq
->
ch™√l_li°
[
i
].
m
,

1613 
ªq
->
ch™√l_li°
[
i
].
e
);

1614 i‡(
ch
)

1616 
ch™√l_li°
[
ch™s_good
++] = 
ch
;

1619 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,

1620 "SIWSCAN: Sˇ¬ög %d ch™√ls\n", 
ch™s_good
);

1625 
	`unifi_îr‹
(
¥iv
, "SIWSCAN: Can'tálloc channel_list (%d)\n",

1626 
ªq
->
num_ch™√ls
);

1631 i‡(
ªq
 && (
d©a
->
Êags
 & 
IW_SCAN_THIS_ESSID
))

1633 
	`mem˝y
(
sˇn_ssid
.
ssid
, 
ªq
->
essid
,Ñeq->
essid_Àn
);

1634 
sˇn_ssid
.
Àngth
 = 
ªq
->
essid_Àn
;

1635 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,

1637 
sˇn_ssid
.
Àngth
, sˇn_ssid.
ssid
);

1642 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "SIWSCAN: Scanning foráll APs\n");

1643 
sˇn_ssid
.
Àngth
 = 0;

1646 
r
 = 
	`sme_mgt_sˇn_fuŒ
(
¥iv
, &
sˇn_ssid
, 
ch™s_good
, 
ch™√l_li°
);

1647 i‡(
r
)

1649 
	`unifi_îr‹
(
¥iv
, "SIWSCAN: Sˇ¿ªtu∫edÉº‹ %d\n", 
r
);

1653 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "SIWSCAN: Scan done\n");

1654 
	`wext_£nd_sˇn_ªsu…s_evít
(
¥iv
);

1657 i‡(
ch™√l_li°
)

1659 
	`k‰ì
(
ch™√l_li°
);

1662 
	`func_exô
();

1663  
r
;

1664 
	}
}

1667 c⁄° * 
	$unifi_föd_öfo_ñemít
(
id
, c⁄° *
öfo
, 
Àn
)

1669 c⁄° *
õ
 = 
öfo
;

1671 
Àn
 > 1)

1673 
e_id
, 
e_Àn
;

1674 
e_id
 = 
õ
[0];

1675 
e_Àn
 = 
õ
[1];

1678 i‡(
e_id
 =
id
)

1680  
õ
;

1683 
Àn
 -(
e_Àn
 + 2);

1684 
õ
 +(
e_Àn
 + 2);

1687  
NULL
;

1688 
	}
}

1695 
	$unifi_å™¶©e_sˇn
(
√t_devi˚
 *
dev
,

1696 
iw_ªque°_öfo
 *
öfo
,

1697 *
cuºít_ev
, *
íd_buf
,

1698 
C§WifiSmeSˇnResu…
 *
sˇn_d©a
,

1699 
sˇn_ödex
)

1701 
iw_evít
 
iwe
;

1702 *
öfo_ñems
;

1703 
öfo_ñem_Àn
;

1704 c⁄° *
ñem
;

1705 
u16
 
ˇ∑bûôõs
;

1706 
sig«l
, 
noi£
, 
¢r
;

1707 *
°¨t_buf
 = 
cuºít_ev
;

1708 *
cuºít_vÆ
;

1709 
i
, 
r
;

1711 
öfo_ñems
 = 
sˇn_d©a
->
öf‹m©i⁄EÀmíts
;

1712 
öfo_ñem_Àn
 = 
sˇn_d©a
->
öf‹m©i⁄EÀmítsLígth
;

1714 i‡(!
sˇn_d©a
->
öf‹m©i⁄EÀmítsLígth
 || !sˇn_d©a->
öf‹m©i⁄EÀmíts
)

1716 
	`unifi_îr‹
(
NULL
, "*** NULL SCAN IEs ***\n");

1717  -
EIO
;

1721 
ˇ∑bûôõs
 = 
sˇn_d©a
->
ˇ∑bûôyInf‹m©i⁄
;

1723 
	`unifi_åa˚
(
NULL
, 
UDBG5
, "C≠abûôõs: 0x%x\n", 
ˇ∑bûôõs
);

1726 
	`mem£t
(&
iwe
, 0, (iwe));

1727 
iwe
.
cmd
 = 
SIOCGIWAP
;

1728 
iwe
.
u
.
≠_addr
.
ß_Ámûy
 = 
ARPHRD_ETHER
;

1729 
	`mem˝y
(
iwe
.
u
.
≠_addr
.
ß_d©a
, 
sˇn_d©a
->
bssid
.
a
, 
ETH_ALEN
);

1730 
iwe
.
Àn
 = 
IW_EV_ADDR_LEN
;

1731 
r
 = 
	`uf_iwe_°ªam_add_evít
(
öfo
, 
°¨t_buf
, 
íd_buf
, &
iwe
, 
IW_EV_ADDR_LEN
);

1732 i‡(
r
 < 0)

1734  
r
;

1736 
°¨t_buf
 +
r
;

1742 
ñem
 = 
	`unifi_föd_öfo_ñemít
(
IE_SSID_ID
, 
öfo_ñems
, 
öfo_ñem_Àn
);

1743 i‡(
ñem
)

1745 
e_Àn
 = 
ñem
[1];

1746 c⁄° *
e_±r
 = 
ñem
 + 2;

1747 
buf
[33];

1749 
	`mem£t
(&
iwe
, 0, (iwe));

1750 
iwe
.
cmd
 = 
SIOCGIWESSID
;

1751 
iwe
.
u
.
essid
.
Àngth
 = 
e_Àn
;

1752 i‡(
iwe
.
u
.
essid
.
Àngth
 > 32)

1754 
iwe
.
u
.
essid
.
Àngth
 = 32;

1756 
iwe
.
u
.
essid
.
Êags
 = 
sˇn_ödex
;

1757 
	`mem˝y
(
buf
, 
e_±r
, 
iwe
.
u
.
essid
.
Àngth
);

1758 
buf
[
iwe
.
u
.
essid
.
Àngth
] = '\0';

1759 
r
 = 
	`uf_iwe_°ªam_add_poöt
(
öfo
, 
°¨t_buf
, 
íd_buf
, &
iwe
, 
buf
);

1760 i‡(
r
 < 0)

1762  
r
;

1764 
°¨t_buf
 +
r
;

1768 
	`mem£t
(&
iwe
, 0, (iwe));

1769 
iwe
.
cmd
 = 
SIOCGIWMODE
;

1770 i‡(
sˇn_d©a
->
bssTy≥
 =
CSR_WIFI_SME_BSS_TYPE_INFRASTRUCTURE
)

1772 
iwe
.
u
.
mode
 = 
IW_MODE_INFRA
;

1776 
iwe
.
u
.
mode
 = 
IW_MODE_ADHOC
;

1778 
iwe
.
Àn
 = 
IW_EV_UINT_LEN
;

1779 
r
 = 
	`uf_iwe_°ªam_add_evít
(
öfo
, 
°¨t_buf
, 
íd_buf
, &
iwe
, 
IW_EV_UINT_LEN
);

1780 i‡(
r
 < 0)

1782  
r
;

1784 
°¨t_buf
 +
r
;

1787 
	`mem£t
(&
iwe
, 0, (iwe));

1788 
iwe
.
cmd
 = 
SIOCGIWFREQ
;

1789 
iwe
.
u
.
‰eq
.
m
 = 
sˇn_d©a
->
ch™√lFªquícy
;

1790 
iwe
.
u
.
‰eq
.
e
 = 6;

1791 
r
 = 
	`uf_iwe_°ªam_add_evít
(
öfo
, 
°¨t_buf
, 
íd_buf
, &
iwe
, 
IW_EV_FREQ_LEN
);

1792 i‡(
r
 < 0)

1794  
r
;

1796 
°¨t_buf
 +
r
;

1800 
iwe
.
cmd
 = 
IWEVQUAL
;

1807 
sig«l
 = 
sˇn_d©a
->
rssi
;

1809 
¢r
 = (
sˇn_d©a
->snr > 0)?scan_data->snr : 0;

1810 
¢r
 = (snr < 255)?snr : 255;

1811 
noi£
 = 
sig«l
 - 
¢r
;

1814 
sig«l
 = (signal < 63)?signal : 63;

1815 
sig«l
 = (signal > -192)?signal : -192;

1818 
noi£
 = (noise < 63)?noise : 63;

1819 
noi£
 = (noise > -192)?noise : -192;

1822 
sig«l
 = (signal < 0)?signal + 0x100 : signal;

1823 
noi£
 = (noise < 0)?noise + 0x100 :Çoise;

1825 
iwe
.
u
.
quÆ
.
Àvñ
 = (
u8
)
sig«l
;

1826 
iwe
.
u
.
quÆ
.
noi£
 = (
u8
)noise;

1827 
iwe
.
u
.
quÆ
.quÆ = 
¢r
;

1828 
iwe
.
u
.
quÆ
.
upd©ed
 = 0;

1829 #i‡
WIRELESS_EXT
 > 16

1830 
iwe
.
u
.
quÆ
.
upd©ed
 |
IW_QUAL_LEVEL_UPDATED
 | 
IW_QUAL_NOISE_UPDATED
 |

1831 
IW_QUAL_QUAL_UPDATED
;

1832 #i‡
WIRELESS_EXT
 > 18

1833 
iwe
.
u
.
quÆ
.
upd©ed
 |
IW_QUAL_DBM
;

1836 
r
 = 
	`uf_iwe_°ªam_add_evít
(
öfo
, 
°¨t_buf
, 
íd_buf
, &
iwe
, 
IW_EV_QUAL_LEN
);

1837 i‡(
r
 < 0)

1839  
r
;

1841 
°¨t_buf
 +
r
;

1844 
iwe
.
cmd
 = 
SIOCGIWENCODE
;

1845 i‡(
ˇ∑bûôõs
 & 
SIG_CAP_PRIVACY
)

1847 
iwe
.
u
.
d©a
.
Êags
 = 
IW_ENCODE_ENABLED
 | 
IW_ENCODE_NOKEY
;

1851 
iwe
.
u
.
d©a
.
Êags
 = 
IW_ENCODE_DISABLED
;

1853 
iwe
.
u
.
d©a
.
Àngth
 = 0;

1854 
iwe
.
Àn
 = 
IW_EV_POINT_LEN
 + iwe.
u
.
d©a
.
Àngth
;

1855 
r
 = 
	`uf_iwe_°ªam_add_poöt
(
öfo
, 
°¨t_buf
, 
íd_buf
, &
iwe
, "");

1856 i‡(
r
 < 0)

1858  
r
;

1860 
°¨t_buf
 +
r
;

1867 
cuºít_vÆ
 = 
°¨t_buf
 + 
IW_EV_LCP_LEN
;

1869 
iwe
.
cmd
 = 
SIOCGIWRATE
;

1871 
iwe
.
u
.
bôøã
.
fixed
 = iwe.u.bôøã.
dißbÀd
 = 0;

1873 
ñem
 = 
	`unifi_föd_öfo_ñemít
(
IE_SUPPORTED_RATES_ID
,

1874 
öfo_ñems
, 
öfo_ñem_Àn
);

1875 i‡(
ñem
)

1877 
e_Àn
 = 
ñem
[1];

1878 c⁄° *
e_±r
 = 
ñem
 + 2;

1885 
i
 = 0; i < 
e_Àn
; i++)

1887 i‡(
e_±r
[
i
] == 0)

1892 
iwe
.
u
.
bôøã
.
vÆue
 = ((
e_±r
[
i
] & 0x7f) * 500000);

1894 
r
 = 
	`uf_iwe_°ªam_add_vÆue
(
öfo
, 
°¨t_buf
, 
cuºít_vÆ
, 
íd_buf
, &
iwe
, 
IW_EV_PARAM_LEN
);

1895 i‡(
r
 < 0)

1897  
r
;

1899 
cuºít_vÆ
 +
r
;

1902 
ñem
 = 
	`unifi_föd_öfo_ñemít
(
IE_EXTENDED_SUPPORTED_RATES_ID
,

1903 
öfo_ñems
, 
öfo_ñem_Àn
);

1904 i‡(
ñem
)

1906 
e_Àn
 = 
ñem
[1];

1907 c⁄° *
e_±r
 = 
ñem
 + 2;

1914 
i
 = 0; i < 
e_Àn
; i++)

1916 i‡(
e_±r
[
i
] == 0)

1921 
iwe
.
u
.
bôøã
.
vÆue
 = ((
e_±r
[
i
] & 0x7f) * 500000);

1923 
r
 = 
	`uf_iwe_°ªam_add_vÆue
(
öfo
, 
°¨t_buf
, 
cuºít_vÆ
, 
íd_buf
, &
iwe
, 
IW_EV_PARAM_LEN
);

1924 i‡(
r
 < 0)

1926  
r
;

1928 
cuºít_vÆ
 +
r
;

1932 i‡((
cuºít_vÆ
 - 
°¨t_buf
Ë> 
IW_EV_LCP_LEN
)

1934 
°¨t_buf
 = 
cuºít_vÆ
;

1938 #i‡
WIRELESS_EXT
 > 17

1939 
	`mem£t
(&
iwe
, 0, (iwe));

1940 
iwe
.
cmd
 = 
IWEVGENIE
;

1941 
iwe
.
u
.
d©a
.
Àngth
 = 
öfo_ñem_Àn
;

1943 
r
 = 
	`uf_iwe_°ªam_add_poöt
(
öfo
, 
°¨t_buf
, 
íd_buf
, &
iwe
, 
öfo_ñems
);

1944 i‡(
r
 < 0)

1946  
r
;

1949 
°¨t_buf
 +
r
;

1952  (
°¨t_buf
 - 
cuºít_ev
);

1953 
	}
}

1956 
	$unifi_giwsˇn
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

1957 
iwªq_d©a
 *
wrqu
, *
exåa
)

1959 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

1960 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

1961 
iw_poöt
 *
dwrq
 = &
wrqu
->
d©a
;

1962 
r
;

1964 
	`CHECK_INITED
(
¥iv
);

1966 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
 ||

1967 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
)

1969 
	`unifi_îr‹
(
¥iv
, "unifi_giwscan:ÇotÖermitted in Mode %d\n",

1970 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

1971  -
EPERM
;

1975 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,

1977 
dwrq
->
Àngth
);

1978 
	`UF_RTNL_UNLOCK
();

1979 
r
 = 
	`sme_mgt_sˇn_ªsu…s_gë_async
(
¥iv
, 
öfo
, 
exåa
, 
dwrq
->
Àngth
);

1980 
	`UF_RTNL_LOCK
();

1981 i‡(
r
 < 0)

1983 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,

1985 
dwrq
->
Àngth
);

1986  
r
;

1989 
dwrq
->
Àngth
 = 
r
;

1990 
dwrq
->
Êags
 = 0;

1993 
	}
}

2014 
	$unifi_siwessid
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

2015 
iw_poöt
 *
d©a
, *
essid
)

2017 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

2018 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

2019 
Àn
;

2020 
îr
 = 0;

2022 
	`func_íãr
();

2023 
	`CHECK_INITED
(
¥iv
);

2025 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
 ||

2026 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
)

2028 
	`unifi_îr‹
(
¥iv
, "unifi_siwessid:ÇotÖermitted in Mode %d\n",

2029 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

2030  -
EPERM
;

2033 #ifde‡
CSR_WIFI_FW_RELOAD


2034 i‡(
öãrÁ˚Priv
->
∑tchMode
 != 0)

2036 
	`unifi_îr‹
(
¥iv
, "%†: InvÆidÖ©chÜﬂded (%d). NŸ sèπög AP\n", 
__FUNCTION__
, 
öãrÁ˚Priv
->
∑tchMode
);

2037  -
EINVAL
;

2040 
Àn
 = 0;

2041 i‡(
d©a
->
Êags
 & 1)

2044 
Àn
 = 
d©a
->
Àngth
;

2045 i‡(
Àn
 > 
UNIFI_MAX_SSID_LEN
)

2047 
Àn
 = 
UNIFI_MAX_SSID_LEN
;

2051 #ifde‡
UNIFI_DEBUG


2053 
essid_°r
[
UNIFI_MAX_SSID_LEN
 + 1];

2054 
i
;

2056 
i
 = 0; i < 
Àn
; i++)

2058 
essid_°r
[
i
] = (
	`i•röt
(
essid
[i])?essid[i] : '?');

2060 
essid_°r
[
i
] = '\0';

2062 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "unifi_siwessid:ásked f‹ '%*s' (%d)\n", 
Àn
, 
essid_°r
,Üen);

2063 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, " wôháuthModeMask = %d",Öriv->
c⁄√˘i⁄_c⁄fig
.
authModeMask
);

2067 
	`mem£t
(
¥iv
->
c⁄√˘i⁄_c⁄fig
.
bssid
.
a
, 0xFF, 
ETH_ALEN
);

2068 i‡(
Àn
)

2070 i‡(
essid
[
Àn
 - 1] == 0)

2072 
Àn
--;

2075 
	`mem˝y
(
¥iv
->
c⁄√˘i⁄_c⁄fig
.
ssid
.ssid, 
essid
, 
Àn
);

2076 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
ssid
.
Àngth
 = 
Àn
;

2080 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
ssid
.
Àngth
 = 0;

2083 
	`UF_RTNL_UNLOCK
();

2084 
îr
 = 
	`sme_mgt_c⁄√˘
(
¥iv
);

2085 
	`UF_RTNL_LOCK
();

2086 i‡(
îr
)

2090 i‡(
Àn
 != 32)

2091 
	`unifi_îr‹
(
¥iv
, "unifi_siwessid: Joö faûed, sètu†%d\n", 
îr
);

2092 
	`func_exô
();

2093  
	`c⁄vît_sme_îr‹
(
îr
);

2096 
	`func_exô
();

2098 
	}
}

2101 
	$unifi_giwessid
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

2102 
iwªq_d©a
 *
wrqu
, *
essid
)

2104 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

2105 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

2106 
iw_poöt
 *
d©a
 = &
wrqu
->
essid
;

2107 
C§WifiSmeC⁄√˘i⁄Info
 
c⁄√˘i⁄Info
;

2108 
r
 = 0;

2110 
	`func_íãr
();

2111 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "unifi_giwessid\n");

2112 
	`CHECK_INITED
(
¥iv
);

2124 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
)

2126 
	`unifi_îr‹
(
¥iv
, "unifi_giwessid:ÇotÖermitted in Mode %d\n",

2127 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

2128  -
EPERM
;

2131 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
)

2134 
d©a
->
Àngth
 = 
¥iv
->
≠_c⁄fig
.
ssid
.length;

2135 if(
d©a
->
Àngth
 > 0)

2137 
	`°∫˝y
(
essid
,
¥iv
->
≠_c⁄fig
.
ssid
.ssid,
d©a
->
Àngth
);

2138 
d©a
->
Êags
 = 1;

2144 
	`UF_RTNL_UNLOCK
();

2145 
r
 = 
	`sme_mgt_c⁄√˘i⁄_öfo_gë
(
¥iv
, &
c⁄√˘i⁄Info
);

2146 
	`UF_RTNL_LOCK
();

2148 i‡(
r
 == 0)

2150 
d©a
->
Àngth
 = 
c⁄√˘i⁄Info
.
ssid
.length;

2151 
	`°∫˝y
(
essid
,

2152 
c⁄√˘i⁄Info
.
ssid
.ssid,

2153 
d©a
->
Àngth
);

2154 
d©a
->
Êags
 = 1;

2156 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "unifi_giwessid: %.*s\n",

2157 
d©a
->
Àngth
, 
essid
);

2161 
	`func_exô
();

2164 
	}
}

2167 
	$unifi_siwøã
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

2168 
iwªq_d©a
 *
wrqu
, *
exåa
)

2170 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

2171 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

2172 
iw_∑øm
 *
¨gs
 = &
wrqu
->
bôøã
;

2173 
C§WifiSmeMibC⁄fig
 
mibC⁄fig
;

2174 
r
;

2176 
	`func_íãr
();

2178 
	`CHECK_INITED
(
¥iv
);

2179 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "unifi_siwrate\n");

2188 
	`UF_RTNL_UNLOCK
();

2189 
r
 = 
	`sme_mgt_mib_c⁄fig_gë
(
¥iv
, &
mibC⁄fig
);

2190 
	`UF_RTNL_LOCK
();

2191 i‡(
r
)

2193 
	`unifi_îr‹
(
¥iv
, "unifi_siwrate: Get CsrWifiSmeMibConfigValue failed.\n");

2194  
r
;

2199 
mibC⁄fig
.
unifiFixTxD©aR©e
 = 0;

2201 i‡(
¨gs
->
vÆue
 != -1)

2203 
mibC⁄fig
.
unifiFixTxD©aR©e
 = 
¨gs
->
vÆue
 / 500000;

2207 i‡(
¨gs
->
fixed
 == 1)

2209 
mibC⁄fig
.
unifiFixMaxTxD©aR©e
 = 0;

2213 
mibC⁄fig
.
unifiFixMaxTxD©aR©e
 = 1;

2215 
	`UF_RTNL_UNLOCK
();

2216 
r
 = 
	`sme_mgt_mib_c⁄fig_£t
(
¥iv
, &
mibC⁄fig
);

2217 
	`UF_RTNL_LOCK
();

2218 i‡(
r
)

2220 
	`unifi_îr‹
(
¥iv
, "unifi_siwrate: Set CsrWifiSmeMibConfigValue failed.\n");

2221  
r
;

2224 
	`func_exô
();

2227 
	}
}

2230 
	$unifi_giwøã
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

2231 
iwªq_d©a
 *
wrqu
, *
exåa
)

2233 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

2234 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

2235 
iw_∑øm
 *
¨gs
 = &
wrqu
->
bôøã
;

2236 
r
;

2237 
bôøã
, 
Êag
;

2238 
C§WifiSmeMibC⁄fig
 
mibC⁄fig
;

2239 
C§WifiSmeC⁄√˘i⁄Sèts
 
c⁄√˘i⁄Sèts
;

2241 
	`func_íãr
();

2242 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "unifi_giwrate\n");

2243 
	`CHECK_INITED
(
¥iv
);

2245 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
 ||

2246 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
)

2248 
	`unifi_îr‹
(
¥iv
, "unifi_giwrate:ÇotÖermitted in Mode %d\n",

2249 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

2250  -
EPERM
;

2253 
Êag
 = 0;

2254 
bôøã
 = 0;

2255 
	`UF_RTNL_UNLOCK
();

2256 
r
 = 
	`sme_mgt_mib_c⁄fig_gë
(
¥iv
, &
mibC⁄fig
);

2257 
	`UF_RTNL_LOCK
();

2258 i‡(
r
)

2260 
	`unifi_îr‹
(
¥iv
, "unifi_giwrate: Get CsrWifiSmeMibConfigValue failed.\n");

2261  
r
;

2264 
bôøã
 = 
mibC⁄fig
.
unifiFixTxD©aR©e
;

2265 
Êag
 = 
mibC⁄fig
.
unifiFixMaxTxD©aR©e
;

2268 i‡(
bôøã
 == 0)

2270 
	`UF_RTNL_UNLOCK
();

2271 
r
 = 
	`sme_mgt_c⁄√˘i⁄_°©s_gë
(
¥iv
, &
c⁄√˘i⁄Sèts
);

2272 
	`UF_RTNL_LOCK
();

2274 i‡(
r
 == 0)

2276 
bôøã
 = 
c⁄√˘i⁄Sèts
.
unifiTxD©aR©e
;

2280 
¨gs
->
vÆue
 = 
bôøã
 * 500000;

2281 
¨gs
->
fixed
 = !
Êag
;

2283 
	`func_exô
();

2286 
	}
}

2289 
	$unifi_siwπs
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

2290 
iwªq_d©a
 *
wrqu
, *
exåa
)

2292 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

2293 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

2294 
vÆ
 = 
wrqu
->
πs
.
vÆue
;

2295 
r
 = 0;

2296 
C§WifiSmeMibC⁄fig
 
mibC⁄fig
;

2298 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "unifi_siwrts\n");

2299 
	`CHECK_INITED
(
¥iv
);

2301 i‡(
wrqu
->
πs
.
dißbÀd
)

2303 
vÆ
 = 2347;

2306 i‡((
vÆ
 < 0) || (val > 2347))

2308  -
EINVAL
;

2312 
	`UF_RTNL_UNLOCK
();

2313 
r
 = 
	`sme_mgt_mib_c⁄fig_gë
(
¥iv
, &
mibC⁄fig
);

2314 
	`UF_RTNL_LOCK
();

2315 i‡(
r
)

2317 
	`unifi_îr‹
(
¥iv
, "unifi_siwrts: Get CsrWifiSmeMibConfigValue failed.\n");

2318  
r
;

2320 
mibC⁄fig
.
dŸ11RtsThªshﬁd
 = 
vÆ
;

2321 
	`UF_RTNL_UNLOCK
();

2322 
r
 = 
	`sme_mgt_mib_c⁄fig_£t
(
¥iv
, &
mibC⁄fig
);

2323 
	`UF_RTNL_LOCK
();

2324 i‡(
r
)

2326 
	`unifi_îr‹
(
¥iv
, "unifi_siwrts: Set CsrWifiSmeMibConfigValue failed.\n");

2327  
r
;

2331 
	}
}

2334 
	$unifi_giwπs
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

2335 
iwªq_d©a
 *
wrqu
, *
exåa
)

2337 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

2338 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

2339 
r
;

2340 
πs_thªsh
;

2341 
C§WifiSmeMibC⁄fig
 
mibC⁄fig
;

2343 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "unifi_giwrts\n");

2344 
	`CHECK_INITED
(
¥iv
);

2346 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
 ||

2347 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
)

2349 
	`unifi_îr‹
(
¥iv
, "unifi_giwrts:ÇotÖermitted in Mode %d\n",

2350 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

2351  -
EPERM
;

2354 
	`UF_RTNL_UNLOCK
();

2355 
r
 = 
	`sme_mgt_mib_c⁄fig_gë
(
¥iv
, &
mibC⁄fig
);

2356 
	`UF_RTNL_LOCK
();

2357 i‡(
r
)

2359 
	`unifi_îr‹
(
¥iv
, "unifi_giwrts: Get CsrWifiSmeMibConfigValue failed.\n");

2360  
r
;

2363 
πs_thªsh
 = 
mibC⁄fig
.
dŸ11RtsThªshﬁd
;

2364 i‡(
πs_thªsh
 > 2347)

2366 
πs_thªsh
 = 2347;

2369 
wrqu
->
πs
.
vÆue
 = 
πs_thªsh
;

2370 
wrqu
->
πs
.
dißbÀd
 = (
πs_thªsh
 == 2347);

2371 
wrqu
->
πs
.
fixed
 = 1;

2374 
	}
}

2377 
	$unifi_siw‰ag
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

2378 
iwªq_d©a
 *
wrqu
, *
exåa
)

2380 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

2381 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

2382 
vÆ
 = 
wrqu
->
‰ag
.
vÆue
;

2383 
r
 = 0;

2384 
C§WifiSmeMibC⁄fig
 
mibC⁄fig
;

2386 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "unifi_siwfrag\n");

2387 
	`CHECK_INITED
(
¥iv
);

2389 i‡(
wrqu
->
‰ag
.
dißbÀd
)

2391 
vÆ
 = 2346;

2394 i‡((
vÆ
 < 256) || (val > 2347))

2396  -
EINVAL
;

2400 
	`UF_RTNL_UNLOCK
();

2401 
r
 = 
	`sme_mgt_mib_c⁄fig_gë
(
¥iv
, &
mibC⁄fig
);

2402 
	`UF_RTNL_LOCK
();

2403 i‡(
r
)

2405 
	`unifi_îr‹
(
¥iv
, "unifi_siwfrag: Get CsrWifiSmeMibConfigValue failed.\n");

2406  
r
;

2409 
mibC⁄fig
.
dŸ11Føgmíèti⁄Thªshﬁd
 = (
vÆ
 & ~0x1);

2410 
	`UF_RTNL_UNLOCK
();

2411 
r
 = 
	`sme_mgt_mib_c⁄fig_£t
(
¥iv
, &
mibC⁄fig
);

2412 
	`UF_RTNL_LOCK
();

2413 i‡(
r
)

2415 
	`unifi_îr‹
(
¥iv
, "unifi_siwfrag: Set CsrWifiSmeMibConfigValue failed.\n");

2416  
r
;

2420 
	}
}

2423 
	$unifi_giw‰ag
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

2424 
iwªq_d©a
 *
wrqu
, *
exåa
)

2426 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

2427 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

2428 
r
;

2429 
‰ag_thªsh
;

2430 
C§WifiSmeMibC⁄fig
 
mibC⁄fig
;

2432 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "unifi_giwfrag\n");

2433 
	`CHECK_INITED
(
¥iv
);

2435 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
 ||

2436 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
)

2438 
	`unifi_îr‹
(
¥iv
, "unifi_giwfrag:ÇotÖermitted in Mode %d\n",

2439 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

2440  -
EPERM
;

2443 
	`UF_RTNL_UNLOCK
();

2444 
r
 = 
	`sme_mgt_mib_c⁄fig_gë
(
¥iv
, &
mibC⁄fig
);

2445 
	`UF_RTNL_LOCK
();

2446 i‡(
r
)

2448 
	`unifi_îr‹
(
¥iv
, "unifi_giwfrag: Get CsrWifiSmeMibConfigValue failed.\n");

2449  
r
;

2452 
‰ag_thªsh
 = 
mibC⁄fig
.
dŸ11Føgmíèti⁄Thªshﬁd
;

2455 
wrqu
->
‰ag
.
vÆue
 = 
‰ag_thªsh
;

2456 
wrqu
->
‰ag
.
dißbÀd
 = (
‰ag_thªsh
 >= 2346);

2457 
wrqu
->
‰ag
.
fixed
 = 1;

2460 
	}
}

2463 
	$unifi_siwícode
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

2464 
iwªq_d©a
 *
wrqu
, *
exåa
)

2466 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

2467 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

2468 
iw_poöt
 *
îq
 = &
wrqu
->
ícodög
;

2469 
ödex
;

2470 
rc
 = 0;

2471 
¥ivacy
 = -1;

2472 
C§WifiSmeKey
 
sme_key
;

2474 
	`func_íãr
();

2475 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "unifi_siwencode\n");

2477 
	`CHECK_INITED
(
¥iv
);

2479 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
 ||

2480 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
)

2482 
	`unifi_îr‹
(
¥iv
, "unifi_siwencode:ÇotÖermitted in Mode %d\n",

2483 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

2484  -
EPERM
;

2494 
ödex
 = (
îq
->
Êags
 & 
IW_ENCODE_INDEX
);

2495 i‡((
ödex
 < 0) || (index > 4))

2497 
	`unifi_îr‹
(
¥iv
, "unifi_siwícode: Reque°Åÿ£à™ invÆid key (ödex:%d)", 
ödex
);

2498  -
EINVAL
;

2506 i‡(
îq
->
Àngth
 > 0)

2509 i‡((
îq
->
Àngth
 > 
LARGE_KEY_SIZE
Ë|| (îq->Àngth < 
SMALL_KEY_SIZE
))

2511 
	`unifi_îr‹
(
¥iv
, "unifi_siwencode: RequestÅo setán invalid key (length:%d)",

2512 
îq
->
Àngth
);

2513  -
EINVAL
;

2517 i‡((
ödex
 < 1) || (index > 4))

2520 i‡(!
¥iv
->
wï_tx_key_ödex
)

2522 
¥iv
->
wï_tx_key_ödex
 = 1;

2524 
ödex
 = 
¥iv
->
wï_tx_key_ödex
;

2528 i‡(!
¥iv
->
wï_tx_key_ödex
)

2530 
¥iv
->
wï_tx_key_ödex
 = 
ödex
;

2533 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "Tx key Index i†%d\n",Öriv->
wï_tx_key_ödex
);

2535 
¥ivacy
 = 1;

2538 i‡((
îq
->
Êags
 & 
IW_ENCODE_NOKEY
) == 0)

2540 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "New %s key (len=%d, index=%d)\n",

2541 (
¥iv
->
wï_tx_key_ödex
 =
ödex
)?"tx" : "",

2542 
îq
->
Àngth
, 
ödex
);

2544 
sme_key
.
wïTxKey
 = (
¥iv
->
wï_tx_key_ödex
 =
ödex
);

2545 i‡(
¥iv
->
wï_tx_key_ödex
 =
ödex
)

2547 
sme_key
.
keyTy≥
 = 
CSR_WIFI_SME_KEY_TYPE_PAIRWISE
;

2551 
sme_key
.
keyTy≥
 = 
CSR_WIFI_SME_KEY_TYPE_GROUP
;

2554 
sme_key
.
keyIndex
 = (
ödex
 - 1);

2555 
sme_key
.
keyLígth
 = 
îq
->
Àngth
;

2556 
sme_key
.
authítiˇt‹
 = 0;

2557 
	`mem£t
(
sme_key
.
addªss
.
a
, 0xFF, 
ETH_ALEN
);

2558 
	`mem˝y
(
sme_key
.
key
, 
exåa
, 
îq
->
Àngth
);

2560 
	`UF_RTNL_UNLOCK
();

2561 
rc
 = 
	`sme_mgt_key
(
¥iv
, &
sme_key
, 
CSR_WIFI_SME_LIST_ACTION_ADD
);

2562 
	`UF_RTNL_LOCK
();

2563 i‡(
rc
)

2565 
	`unifi_îr‹
(
¥iv
, "unifi_siwícode: Së key faûed (%d)", 
rc
);

2566  
	`c⁄vît_sme_îr‹
(
rc
);

2570 
¥iv
->
wï_keys
[
ödex
 - 1].
Àn
 = 
îq
->
Àngth
;

2571 
	`mem˝y
(
¥iv
->
wï_keys
[
ödex
 - 1].
key
, 
exåa
, 
îq
->
Àngth
);

2580 i‡(
ödex
 != 0)

2582 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "Tx key Index i†%d\n", 
ödex
 - 1);

2585 
¥iv
->
wï_tx_key_ödex
 = 
ödex
;

2587 
sme_key
.
wïTxKey
 = 1;

2588 
sme_key
.
keyTy≥
 = 
CSR_WIFI_SME_KEY_TYPE_PAIRWISE
;

2591 
sme_key
.
keyIndex
 = (
ödex
 - 1);

2592 
sme_key
.
keyLígth
 = 0;

2593 
sme_key
.
authítiˇt‹
 = 0;

2594 
	`UF_RTNL_UNLOCK
();

2595 
rc
 = 
	`sme_mgt_key
(
¥iv
, &
sme_key
, 
CSR_WIFI_SME_LIST_ACTION_ADD
);

2596 
	`UF_RTNL_LOCK
();

2597 i‡(
rc
)

2599 
	`unifi_îr‹
(
¥iv
, "unifi_siwícode: Së key faûed (%d)", 
rc
);

2600  
	`c⁄vît_sme_îr‹
(
rc
);

2604 
¥ivacy
 = 1;

2609 i‡(
îq
->
Êags
 & 
IW_ENCODE_DISABLED
)

2612 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "disable WEPÉncryption\n");

2613 
¥ivacy
 = 0;

2615 
¥iv
->
wï_tx_key_ödex
 = 0;

2617 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "IW_ENCODE_DISABLED: CSR_WIFI_SME_AUTH_MODE_80211_OPEN\n");

2618 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
authModeMask
 = 
CSR_WIFI_SME_AUTH_MODE_80211_OPEN
;

2621 i‡(
îq
->
Êags
 & 
IW_ENCODE_RESTRICTED
)

2624 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "IW_ENCODE_RESTRICTED: CSR_WIFI_SME_AUTH_MODE_80211_SHARED\n");

2625 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
authModeMask
 = 
CSR_WIFI_SME_AUTH_MODE_80211_SHARED
;

2628 
¥ivacy
 = 1;

2630 i‡(
îq
->
Êags
 & 
IW_ENCODE_OPEN
)

2632 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "IW_ENCODE_OPEN: CSR_WIFI_SME_AUTH_MODE_80211_OPEN\n");

2633 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
authModeMask
 = 
CSR_WIFI_SME_AUTH_MODE_80211_OPEN
;

2637 i‡(
¥ivacy
 != -1)

2639 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
¥ivacyMode
 = 
¥ivacy
?
CSR_WIFI_SME_80211_PRIVACY_MODE_ENABLED
 : 
CSR_WIFI_SME_80211_PRIVACY_MODE_DISABLED
;

2640 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
í¸y±i⁄ModeMask
 = 
¥ivacy
?(
CSR_WIFI_SME_ENCRYPTION_CIPHER_PAIRWISE_WEP40
 |

2641 
CSR_WIFI_SME_ENCRYPTION_CIPHER_PAIRWISE_WEP104
 |

2642 
CSR_WIFI_SME_ENCRYPTION_CIPHER_GROUP_WEP40
 |

2643 
CSR_WIFI_SME_ENCRYPTION_CIPHER_GROUP_WEP104
) :

2644 
CSR_WIFI_SME_ENCRYPTION_CIPHER_NONE
;

2647 
	`func_exô_r
(
rc
);

2648  
	`c⁄vît_sme_îr‹
(
rc
);

2649 
	}
}

2652 
	$unifi_giwícode
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

2653 
iwªq_d©a
 *
wrqu
, *
exåa
)

2655 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

2656 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

2657 
iw_poöt
 *
îq
 = &
wrqu
->
ícodög
;

2659 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "unifi_giwencode\n");

2661 
	`CHECK_INITED
(
¥iv
);

2663 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
 ||

2664 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
)

2666 
	`unifi_îr‹
(
¥iv
, "unifi_giwencode:ÇotÖermitted in Mode %d\n",

2667 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

2668  -
EPERM
;

2672 i‡(
¥iv
->
c⁄√˘i⁄_c⁄fig
.
authModeMask
 =
CSR_WIFI_SME_AUTH_MODE_80211_SHARED
)

2674 
îq
->
Êags
 = 
IW_ENCODE_RESTRICTED
;

2678 i‡(
¥iv
->
c⁄√˘i⁄_c⁄fig
.
¥ivacyMode
 =
CSR_WIFI_SME_80211_PRIVACY_MODE_DISABLED
)

2680 
îq
->
Êags
 = 
IW_ENCODE_DISABLED
;

2684 
îq
->
Êags
 = 
IW_ENCODE_OPEN
;

2688 
îq
->
Àngth
 = 0;

2690 i‡(
îq
->
Êags
 !
IW_ENCODE_DISABLED
)

2692 
ödex
 = 
¥iv
->
wï_tx_key_ödex
;

2694 i‡((
ödex
 > 0Ë&& (ödex <
NUM_WEPKEYS
))

2696 
îq
->
Êags
 |(
ödex
 & 
IW_ENCODE_INDEX
);

2697 
îq
->
Àngth
 = 
¥iv
->
wï_keys
[
ödex
 - 1].
Àn
;

2698 
	`mem˝y
(
exåa
, 
¥iv
->
wï_keys
[
ödex
 - 1].
key
, 
îq
->
Àngth
);

2702 
	`unifi_nŸi˚
(
¥iv
, "unifi_giwencode: Surprise, doÇot haveá valid key index (%d)\n",

2703 
ödex
);

2708 
	}
}

2711 
	$unifi_siwpowî
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

2712 
iwªq_d©a
 *
wrqu
, *
exåa
)

2714 
iw_∑øm
 *
¨gs
 = &
wrqu
->
powî
;

2715 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

2716 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

2717 
li°í_öãrvÆ
, 
wake_f‹_dtim
;

2718 
r
 = 0;

2719 
C§WifiSmePowîC⁄fig
 
powîC⁄fig
;

2721 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "unifi_siwpower\n");

2723 
	`CHECK_INITED
(
¥iv
);

2725 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
 ||

2726 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
)

2728 
	`unifi_îr‹
(
¥iv
, "unifi_siwpower:ÇotÖermitted in Mode %d\n",

2729 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

2730  -
EPERM
;

2733 
	`UF_RTNL_UNLOCK
();

2734 
r
 = 
	`sme_mgt_powî_c⁄fig_gë
(
¥iv
, &
powîC⁄fig
);

2735 
	`UF_RTNL_LOCK
();

2736 i‡(
r
)

2738 
	`unifi_îr‹
(
¥iv
, "unifi_siwpower: Get unifi_PowerConfigValue failed.\n");

2739  
r
;

2742 
li°í_öãrvÆ
 = -1;

2743 
wake_f‹_dtim
 = -1;

2744 i‡(
¨gs
->
dißbÀd
)

2746 
powîC⁄fig
.
powîSaveLevñ
 = 
CSR_WIFI_SME_POWER_SAVE_LEVEL_LOW
;

2750 
powîC⁄fig
.
powîSaveLevñ
 = 
CSR_WIFI_SME_POWER_SAVE_LEVEL_HIGH
;

2752 
¨gs
->
Êags
 & 
IW_POWER_TYPE
)

2757 
IW_POWER_PERIOD
:

2758 
li°í_öãrvÆ
 = 
¨gs
->
vÆue
 / 1000;

2761  -
EINVAL
;

2764 
¨gs
->
Êags
 & 
IW_POWER_MODE
)

2769 
IW_POWER_UNICAST_R
:

2771 
wake_f‹_dtim
 = 0;

2773 
IW_POWER_ALL_R
:

2775 
wake_f‹_dtim
 = 1;

2778  -
EINVAL
;

2782 i‡(
li°í_öãrvÆ
 > 0)

2784 
powîC⁄fig
.
li°íI¡îvÆTu
 = 
li°í_öãrvÆ
;

2785 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "unifi_siwpower:Çew Listen Interval = %d.\n",

2786 
powîC⁄fig
.
li°íI¡îvÆTu
);

2789 i‡(
wake_f‹_dtim
 >= 0)

2791 
powîC⁄fig
.
rxDtims
 = 
wake_f‹_dtim
;

2793 
	`UF_RTNL_UNLOCK
();

2794 
r
 = 
	`sme_mgt_powî_c⁄fig_£t
(
¥iv
, &
powîC⁄fig
);

2795 
	`UF_RTNL_LOCK
();

2796 i‡(
r
)

2798 
	`unifi_îr‹
(
¥iv
, "unifi_siwpower: Set unifi_PowerConfigValue failed.\n");

2799  
r
;

2803 
	}
}

2806 
	$unifi_giwpowî
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

2807 
iwªq_d©a
 *
wrqu
, *
exåa
)

2809 
iw_∑øm
 *
¨gs
 = &
wrqu
->
powî
;

2810 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

2811 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

2812 
C§WifiSmePowîC⁄fig
 
powîC⁄fig
;

2813 
r
;

2815 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "unifi_giwpower\n");

2817 
	`CHECK_INITED
(
¥iv
);

2819 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
 ||

2820 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
)

2822 
	`unifi_îr‹
(
¥iv
, "unifi_giwpower:ÇotÖermitted in Mode %d\n",

2823 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

2824  -
EPERM
;

2828 
¨gs
->
Êags
 = 0;

2829 
	`UF_RTNL_UNLOCK
();

2830 
r
 = 
	`sme_mgt_powî_c⁄fig_gë
(
¥iv
, &
powîC⁄fig
);

2831 
	`UF_RTNL_LOCK
();

2832 i‡(
r
)

2834 
	`unifi_îr‹
(
¥iv
, "unifi_giwpower: Get unifi_PowerConfigValue failed.\n");

2835  
r
;

2838 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "unifi_giwpower: mode=%d\n",

2839 
powîC⁄fig
.
powîSaveLevñ
);

2841 
¨gs
->
dißbÀd
 = (
powîC⁄fig
.
powîSaveLevñ
 =
CSR_WIFI_SME_POWER_SAVE_LEVEL_LOW
);

2842 i‡(
¨gs
->
dißbÀd
)

2844 
¨gs
->
Êags
 = 0;

2848 
¨gs
->
vÆue
 = 
powîC⁄fig
.
li°íI¡îvÆTu
 * 1000;

2849 
¨gs
->
Êags
 |
IW_POWER_PERIOD
;

2851 i‡(
powîC⁄fig
.
rxDtims
)

2853 
¨gs
->
Êags
 |
IW_POWER_ALL_R
;

2857 
¨gs
->
Êags
 |
IW_POWER_UNICAST_R
;

2861 
	}
}

2881 
	$unifi_siwcommô
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

2882 
iwªq_d©a
 *
wrqu
, *
exåa
)

2885 
	}
}

2888 
	$unifi_siwmlme
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

2889 
iwªq_d©a
 *
wrqu
, *
exåa
)

2891 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

2892 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

2893 
iw_mlme
 *
mlme
 = (iw_mlmê*)
exåa
;

2894 
	`func_íãr
();

2896 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "unifi_siwmlme\n");

2897 
	`CHECK_INITED
(
¥iv
);

2899 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
 ||

2900 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
)

2902 
	`unifi_îr‹
(
¥iv
, "unifi_siwmlme:ÇotÖermitted in Mode %d\n",

2903 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

2904  -
EPERM
;

2908 
mlme
->
cmd
)

2910 
IW_MLME_DEAUTH
:

2911 
IW_MLME_DISASSOC
:

2912 
	`UF_RTNL_UNLOCK
();

2913 
	`sme_mgt_disc⁄√˘
(
¥iv
);

2914 
	`UF_RTNL_LOCK
();

2917 
	`func_exô_r
(-
EOPNOTSUPP
);

2918  -
EOPNOTSUPP
;

2921 
	`func_exô
();

2923 
	}
}

2955 
	$unifi_siwgíõ
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

2956 
iwªq_d©a
 *
wrqu
, *
exåa
)

2958 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

2959 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

2960 
Àn
;

2962 
	`func_íãr
();

2963 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "unifi_siwgenie\n");

2965 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
 ||

2966 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
)

2968 
	`unifi_îr‹
(
¥iv
, "unifi_siwgenie:ÇotÖermitted in Mode %d\n",

2969 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

2970  -
EPERM
;

2976 i‡(0x5343 =
wrqu
->
d©a
.
Êags
)

2978 i‡(
¥iv
->
sˇnInf‹m©i⁄EÀmíts
)

2980 
	`k‰ì
(
¥iv
->
sˇnInf‹m©i⁄EÀmíts
);

2982 
¥iv
->
sˇnInf‹m©i⁄EÀmítsLígth
 = 0;

2983 
¥iv
->
sˇnInf‹m©i⁄EÀmíts
 = 
NULL
;

2985 
Àn
 = 
wrqu
->
d©a
.
Àngth
;

2986 i‡(
Àn
 == 0)

2988 
	`func_exô
();

2992 
¥iv
->
sˇnInf‹m©i⁄EÀmíts
 = 
	`kmÆloc
(
Àn
, 
GFP_KERNEL
);

2993 i‡(
¥iv
->
sˇnInf‹m©i⁄EÀmíts
 =
NULL
)

2995 
	`func_exô
();

2996  -
ENOMEM
;

2999 
¥iv
->
sˇnInf‹m©i⁄EÀmítsLígth
 = 
Àn
;

3000 
	`mem˝y
(
¥iv
->
sˇnInf‹m©i⁄EÀmíts
, 
exåa
, 
Àn
);

3004 i‡(
¥iv
->
c⁄√˘i⁄_c⁄fig
.
mlmeAssocüãReqInf‹m©i⁄EÀmíts
)

3006 
	`k‰ì
(
¥iv
->
c⁄√˘i⁄_c⁄fig
.
mlmeAssocüãReqInf‹m©i⁄EÀmíts
);

3008 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
mlmeAssocüãReqInf‹m©i⁄EÀmítsLígth
 = 0;

3009 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
mlmeAssocüãReqInf‹m©i⁄EÀmíts
 = 
NULL
;

3011 
Àn
 = 
wrqu
->
d©a
.
Àngth
;

3012 i‡(
Àn
 == 0)

3014 
	`func_exô
();

3018 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
mlmeAssocüãReqInf‹m©i⁄EÀmíts
 = 
	`kmÆloc
(
Àn
, 
GFP_KERNEL
);

3019 i‡(
¥iv
->
c⁄√˘i⁄_c⁄fig
.
mlmeAssocüãReqInf‹m©i⁄EÀmíts
 =
NULL
)

3021 
	`func_exô
();

3022  -
ENOMEM
;

3025 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
mlmeAssocüãReqInf‹m©i⁄EÀmítsLígth
 = 
Àn
;

3026 
	`mem˝y
(
¥iv
->
c⁄√˘i⁄_c⁄fig
.
mlmeAssocüãReqInf‹m©i⁄EÀmíts
, 
exåa
, 
Àn
);

3029 
	`func_exô
();

3031 
	}
}

3034 
	$unifi_giwgíõ
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

3035 
iwªq_d©a
 *
wrqu
, *
exåa
)

3037 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

3038 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

3039 
Àn
;

3041 
	`func_íãr
();

3042 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "unifi_giwgenie\n");

3044 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
 ||

3045 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
)

3047 
	`unifi_îr‹
(
¥iv
, "unifi_giwgenie:ÇotÖermitted in Mode %d\n",

3048 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

3049  -
EPERM
;

3053 
Àn
 = 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
mlmeAssocüãReqInf‹m©i⁄EÀmítsLígth
;

3055 i‡(
Àn
 == 0)

3057 
wrqu
->
d©a
.
Àngth
 = 0;

3061 i‡(
wrqu
->
d©a
.
Àngth
 < 
Àn
)

3063  -
E2BIG
;

3066 
wrqu
->
d©a
.
Àngth
 = 
Àn
;

3067 
	`mem˝y
(
exåa
, 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
mlmeAssocüãReqInf‹m©i⁄EÀmíts
, 
Àn
);

3069 
	`func_exô
();

3071 
	}
}

3089 
	$_unifi_siwauth
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

3090 
iwªq_d©a
 *
wrqu
, *
exåa
)

3092 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

3093 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

3094 
C§WifiSmeAuthModeMask
 
√w_auth
;

3096 
	`func_íãr
();

3097 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "unifi_siwauth\n");

3099 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
 ||

3100 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
)

3102 
	`unifi_îr‹
(
¥iv
, "unifi_siwauth:ÇotÖermitted in Mode %d\n",

3103 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

3104  -
EPERM
;

3113 
wrqu
->
∑øm
.
Êags
 & 
IW_AUTH_INDEX
)

3115 
IW_AUTH_WPA_ENABLED
:

3116 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "IW_AUTH_WPA_ENABLED: %d\n", 
wrqu
->
∑øm
.
vÆue
);

3118 i‡(
wrqu
->
∑øm
.
vÆue
 == 0)

3120 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "IW_AUTH_WPA_ENABLED: CSR_WIFI_SME_AUTH_MODE_80211_OPEN\n");

3121 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
authModeMask
 = 
CSR_WIFI_SME_AUTH_MODE_80211_OPEN
;

3125 
IW_AUTH_PRIVACY_INVOKED
:

3126 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "IW_AUTH_PRIVACY_INVOKED: %d\n", 
wrqu
->
∑øm
.
vÆue
);

3128 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
¥ivacyMode
 = 
wrqu
->
∑øm
.
vÆue
?
CSR_WIFI_SME_80211_PRIVACY_MODE_ENABLED
 : 
CSR_WIFI_SME_80211_PRIVACY_MODE_DISABLED
;

3129 i‡(
wrqu
->
∑øm
.
vÆue
 =
CSR_WIFI_SME_80211_PRIVACY_MODE_DISABLED
)

3131 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
í¸y±i⁄ModeMask
 = 
CSR_WIFI_SME_ENCRYPTION_CIPHER_NONE
;

3135 
IW_AUTH_80211_AUTH_ALG
:

3141 
√w_auth
 = 0;

3142 i‡(
wrqu
->
∑øm
.
vÆue
 & 
IW_AUTH_ALG_OPEN_SYSTEM
)

3144 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "IW_AUTH_80211_AUTH_ALG: %d (IW_AUTH_ALG_OPEN_SYSTEM)\n", 
wrqu
->
∑øm
.
vÆue
);

3145 
√w_auth
 |
CSR_WIFI_SME_AUTH_MODE_80211_OPEN
;

3147 i‡(
wrqu
->
∑øm
.
vÆue
 & 
IW_AUTH_ALG_SHARED_KEY
)

3149 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "IW_AUTH_80211_AUTH_ALG: %d (IW_AUTH_ALG_SHARED_KEY)\n", 
wrqu
->
∑øm
.
vÆue
);

3150 
√w_auth
 |
CSR_WIFI_SME_AUTH_MODE_80211_SHARED
;

3152 i‡(
wrqu
->
∑øm
.
vÆue
 & 
IW_AUTH_ALG_LEAP
)

3155 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "IW_AUTH_80211_AUTH_ALG: %d (IW_AUTH_ALG_LEAP)\n", 
wrqu
->
∑øm
.
vÆue
);

3156 
√w_auth
 |
CSR_WIFI_SME_AUTH_MODE_8021X_OTHER1X
;

3158 i‡(
√w_auth
 == 0)

3160 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "IW_AUTH_80211_AUTH_ALG: invalid value %d\n",

3161 
wrqu
->
∑øm
.
vÆue
);

3162  -
EINVAL
;

3166 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
authModeMask
 = 
√w_auth
;

3170 
IW_AUTH_WPA_VERSION
:

3171 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "IW_AUTH_WPA_VERSION: %d\n", 
wrqu
->
∑øm
.
vÆue
);

3172 
¥iv
->
ign‹e_bssid_joö
 = 
TRUE
;

3179 i‡(!(
wrqu
->
∑øm
.
vÆue
 & 
IW_AUTH_WPA_VERSION_DISABLED
))

3181 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
authModeMask
 = 
CSR_WIFI_SME_AUTH_MODE_80211_OPEN
;

3183 i‡(
wrqu
->
∑øm
.
vÆue
 & 
IW_AUTH_WPA_VERSION_WPA
)

3185 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "IW_AUTH_WPA_VERSION: WPA, WPA-PSK\n");

3186 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
authModeMask
 |(
CSR_WIFI_SME_AUTH_MODE_8021X_WPA
 | 
CSR_WIFI_SME_AUTH_MODE_8021X_WPAPSK
);

3188 i‡(
wrqu
->
∑øm
.
vÆue
 & 
IW_AUTH_WPA_VERSION_WPA2
)

3190 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "IW_AUTH_WPA_VERSION: WPA2, WPA2-PSK\n");

3191 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
authModeMask
 |(
CSR_WIFI_SME_AUTH_MODE_8021X_WPA2
 | 
CSR_WIFI_SME_AUTH_MODE_8021X_WPA2PSK
);

3196 
IW_AUTH_CIPHER_PAIRWISE
:

3197 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "IW_AUTH_CIPHER_PAIRWISE: %d\n", 
wrqu
->
∑øm
.
vÆue
);

3207 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
í¸y±i⁄ModeMask
 = 
CSR_WIFI_SME_ENCRYPTION_CIPHER_NONE
;

3209 i‡(
wrqu
->
∑øm
.
vÆue
 & 
IW_AUTH_CIPHER_WEP40
)

3211 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
í¸y±i⁄ModeMask
 |=

3212 
CSR_WIFI_SME_ENCRYPTION_CIPHER_PAIRWISE_WEP40
 | 
CSR_WIFI_SME_ENCRYPTION_CIPHER_GROUP_WEP40
;

3214 i‡(
wrqu
->
∑øm
.
vÆue
 & 
IW_AUTH_CIPHER_WEP104
)

3216 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
í¸y±i⁄ModeMask
 |=

3217 
CSR_WIFI_SME_ENCRYPTION_CIPHER_PAIRWISE_WEP104
 | 
CSR_WIFI_SME_ENCRYPTION_CIPHER_GROUP_WEP104
;

3219 i‡(
wrqu
->
∑øm
.
vÆue
 & 
IW_AUTH_CIPHER_TKIP
)

3221 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
í¸y±i⁄ModeMask
 |=

3222 
CSR_WIFI_SME_ENCRYPTION_CIPHER_PAIRWISE_TKIP
 | 
CSR_WIFI_SME_ENCRYPTION_CIPHER_GROUP_TKIP
;

3224 i‡(
wrqu
->
∑øm
.
vÆue
 & 
IW_AUTH_CIPHER_CCMP
)

3226 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
í¸y±i⁄ModeMask
 |=

3227 
CSR_WIFI_SME_ENCRYPTION_CIPHER_PAIRWISE_CCMP
 | 
CSR_WIFI_SME_ENCRYPTION_CIPHER_GROUP_CCMP
;

3232 
IW_AUTH_CIPHER_GROUP
:

3233 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "IW_AUTH_CIPHER_GROUP: %d\n", 
wrqu
->
∑øm
.
vÆue
);

3240 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
í¸y±i⁄ModeMask
 &~(
CSR_WIFI_SME_ENCRYPTION_CIPHER_GROUP_WEP40
 |

3241 
CSR_WIFI_SME_ENCRYPTION_CIPHER_GROUP_WEP104
 |

3242 
CSR_WIFI_SME_ENCRYPTION_CIPHER_GROUP_TKIP
 |

3243 
CSR_WIFI_SME_ENCRYPTION_CIPHER_GROUP_CCMP
);

3244 i‡(
wrqu
->
∑øm
.
vÆue
 & 
IW_AUTH_CIPHER_WEP40
)

3246 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
í¸y±i⁄ModeMask
 |
CSR_WIFI_SME_ENCRYPTION_CIPHER_GROUP_WEP40
;

3248 i‡(
wrqu
->
∑øm
.
vÆue
 & 
IW_AUTH_CIPHER_WEP104
)

3250 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
í¸y±i⁄ModeMask
 |
CSR_WIFI_SME_ENCRYPTION_CIPHER_GROUP_WEP104
;

3252 i‡(
wrqu
->
∑øm
.
vÆue
 & 
IW_AUTH_CIPHER_TKIP
)

3254 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
í¸y±i⁄ModeMask
 |
CSR_WIFI_SME_ENCRYPTION_CIPHER_GROUP_TKIP
;

3256 i‡(
wrqu
->
∑øm
.
vÆue
 & 
IW_AUTH_CIPHER_CCMP
)

3258 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
í¸y±i⁄ModeMask
 |
CSR_WIFI_SME_ENCRYPTION_CIPHER_GROUP_CCMP
;

3263 
IW_AUTH_KEY_MGMT
:

3264 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "IW_AUTH_KEY_MGMT: %d\n", 
wrqu
->
∑øm
.
vÆue
);

3269 i‡(
¥iv
->
c⁄√˘i⁄_c⁄fig
.
authModeMask
 & (
CSR_WIFI_SME_AUTH_MODE_8021X_WPA
 | 
CSR_WIFI_SME_AUTH_MODE_8021X_WPAPSK
))

3272 i‡(
wrqu
->
∑øm
.
vÆue
 =
IW_AUTH_KEY_MGMT_802_1X
)

3274 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
authModeMask
 &~
CSR_WIFI_SME_AUTH_MODE_8021X_WPAPSK
;

3276 i‡(
wrqu
->
∑øm
.
vÆue
 =
IW_AUTH_KEY_MGMT_PSK
)

3278 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
authModeMask
 &~
CSR_WIFI_SME_AUTH_MODE_8021X_WPA
;

3280 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "IW_AUTH_KEY_MGMT: WPA: %d\n",

3281 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
authModeMask
);

3283 i‡(
¥iv
->
c⁄√˘i⁄_c⁄fig
.
authModeMask
 & (
CSR_WIFI_SME_AUTH_MODE_8021X_WPA2
 | 
CSR_WIFI_SME_AUTH_MODE_8021X_WPA2PSK
))

3286 i‡(
wrqu
->
∑øm
.
vÆue
 =
IW_AUTH_KEY_MGMT_802_1X
)

3288 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
authModeMask
 &~
CSR_WIFI_SME_AUTH_MODE_8021X_WPA2PSK
;

3290 i‡(
wrqu
->
∑øm
.
vÆue
 =
IW_AUTH_KEY_MGMT_PSK
)

3292 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
authModeMask
 &~
CSR_WIFI_SME_AUTH_MODE_8021X_WPA2
;

3294 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "IW_AUTH_KEY_MGMT: WPA2: %d\n",

3295 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
authModeMask
);

3299 
IW_AUTH_TKIP_COUNTERMEASURES
:

3304 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "IW_AUTH_TKIP_COUNTERMEASURES: %d\n", 
wrqu
->
∑øm
.
vÆue
);

3307 
IW_AUTH_DROP_UNENCRYPTED
:

3315 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "IW_AUTH_DROP_UNENCRYPTED: %d\n", 
wrqu
->
∑øm
.
vÆue
);

3318 
IW_AUTH_RX_UNENCRYPTED_EAPOL
:

3326 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "IW_AUTH_RX_UNENCRYPTED_EAPOL: %d\n", 
wrqu
->
∑øm
.
vÆue
);

3329 
IW_AUTH_ROAMING_CONTROL
:

3330 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "IW_AUTH_ROAMING_CONTROL: %d\n", 
wrqu
->
∑øm
.
vÆue
);

3334 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "UnsupportedáuthÖaram %dÅo 0x%X\n",

3335 
wrqu
->
∑øm
.
Êags
 & 
IW_AUTH_INDEX
,

3336 
wrqu
->
∑øm
.
vÆue
);

3337  -
EOPNOTSUPP
;

3340 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "authModeMask = %d",Öriv->
c⁄√˘i⁄_c⁄fig
.
authModeMask
);

3341 
	`func_exô
();

3344 
	}
}

3347 
	$unifi_siwauth
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

3348 
iwªq_d©a
 *
wrqu
, *
exåa
)

3350 
îr
 = 0;

3352 
	`UF_RTNL_UNLOCK
();

3353 
îr
 = 
	`_unifi_siwauth
(
dev
, 
öfo
, 
wrqu
, 
exåa
);

3354 
	`UF_RTNL_LOCK
();

3356  
îr
;

3357 
	}
}

3360 
	$unifi_giwauth
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

3361 
iwªq_d©a
 *
wrqu
, *
exåa
)

3363 
	`unifi_åa˚
(
NULL
, 
UDBG2
, "unifi_giwauth\n");

3364  -
EOPNOTSUPP
;

3365 
	}
}

3388 
	$_unifi_siwícodìxt
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

3389 
iwªq_d©a
 *
wrqu
, *
exåa
)

3391 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

3392 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

3393 
iw_ícode_ext
 *
ext
 = (iw_ícode_exà*)
exåa
;

3394 
r
 = 0;

3395 *
keyd©a
;

3396 
tkù_key
[32];

3397 
keyid
;

3398 *
a
 = (*)
ext
->
addr
.
ß_d©a
;

3399 
C§WifiSmeKey
 
sme_key
;

3400 
C§WifiSmeKeyTy≥
 
key_ty≥
;

3401 
îr
 = 0;

3403 
	`func_íãr
();

3405 
	`CHECK_INITED
(
¥iv
);

3407 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
 ||

3408 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
)

3410 
	`unifi_îr‹
(
¥iv
, "unifi_siwencodeext:ÇotÖermitted in Mode %d\n",

3411 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

3412  -
EPERM
;

3415 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "siwencodeext: flags=0x%X,álg=%d,Éxt_flags=0x%X,Üen=%d, index=%d,\n",

3416 
wrqu
->
ícodög
.
Êags
, 
ext
->
Æg
,Éxt->
ext_Êags
,

3417 
ext
->
key_Àn
, (
wrqu
->
ícodög
.
Êags
 & 
IW_ENCODE_INDEX
));

3418 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "áddr=%02X:%02X:%02X:%02X:%02X:%02X\n",

3419 
a
[0],á[1],á[2],á[3],á[4],á[5]);

3421 i‡((
ext
->
key_Àn
 =0Ë&& (ext->
ext_Êags
 & 
IW_ENCODE_EXT_SET_TX_KEY
))

3425 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, 
KERN_ERR
 "unifi_siwencodeext: NYI should changeÅx key id here!!\n");

3426  -
ENOTSUPP
;

3429 
	`mem£t
(&
sme_key
, 0, (sme_key));

3431 
keyd©a
 = (*)(
ext
 + 1);

3432 
keyid
 = (
wrqu
->
ícodög
.
Êags
 & 
IW_ENCODE_INDEX
);

3438 i‡(
ext
->
Æg
 =
IW_ENCODE_ALG_NONE
)

3440 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "Deleting %s key %d\n",

3441 (
ext
->
ext_Êags
 & 
IW_ENCODE_EXT_GROUP_KEY
)?"GROUP" : "PAIRWISE",

3442 
keyid
);

3444 i‡(
ext
->
ext_Êags
 & 
IW_ENCODE_EXT_GROUP_KEY
)

3446 
sme_key
.
keyTy≥
 = 
CSR_WIFI_SME_KEY_TYPE_GROUP
;

3450 
sme_key
.
keyTy≥
 = 
CSR_WIFI_SME_KEY_TYPE_PAIRWISE
;

3452 
sme_key
.
keyIndex
 = (
keyid
 - 1);

3453 
sme_key
.
keyLígth
 = 0;

3454 
sme_key
.
authítiˇt‹
 = 0;

3455 
	`mem˝y
(
sme_key
.
addªss
.
a
,á, 
ETH_ALEN
);

3456 
	`UF_RTNL_UNLOCK
();

3457 
r
 = 
	`sme_mgt_key
(
¥iv
, &
sme_key
, 
CSR_WIFI_SME_LIST_ACTION_REMOVE
);

3458 
	`UF_RTNL_LOCK
();

3459 i‡(
r
)

3461 
	`unifi_îr‹
(
¥iv
, "DñëêkeyÑeque° wa†ªje˘ed wôhÑesu… %d\n", 
r
);

3462  
	`c⁄vît_sme_îr‹
(
r
);

3473 i‡(
ext
->
Æg
 =
IW_ENCODE_ALG_WEP
)

3478 i‡(!((
ext
->
key_Àn
 == 5) || (ext->key_len == 13)))

3480 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, 
KERN_ERR
 "InvÆidÜígth f‹ WEP key: %d\n", 
ext
->
key_Àn
);

3481 
ext
->
key_Àn
 = 5;

3482 
îr
 = 1;

3485 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "Setting WEP key %dÅx:%d\n",

3486 
keyid
, 
ext
->
ext_Êags
 & 
IW_ENCODE_EXT_SET_TX_KEY
);

3488 i‡(
ext
->
ext_Êags
 & 
IW_ENCODE_EXT_SET_TX_KEY
)

3490 
sme_key
.
wïTxKey
 = 
TRUE
;

3491 
sme_key
.
keyTy≥
 = 
CSR_WIFI_SME_KEY_TYPE_PAIRWISE
;

3495 
sme_key
.
wïTxKey
 = 
FALSE
;

3496 
sme_key
.
keyTy≥
 = 
CSR_WIFI_SME_KEY_TYPE_GROUP
;

3498 
sme_key
.
keyIndex
 = (
keyid
 - 1);

3499 
sme_key
.
keyLígth
 = 
ext
->
key_Àn
;

3500 
sme_key
.
authítiˇt‹
 = 0;

3501 
	`mem£t
(
sme_key
.
addªss
.
a
, 0xFF, 
ETH_ALEN
);

3502 
	`mem˝y
(
sme_key
.
key
, 
keyd©a
, 
ext
->
key_Àn
);

3503 
	`UF_RTNL_UNLOCK
();

3504 
r
 = 
	`sme_mgt_key
(
¥iv
, &
sme_key
, 
CSR_WIFI_SME_LIST_ACTION_ADD
);

3505 
	`UF_RTNL_LOCK
();

3507 i‡(
îr
)

3509  -
EINVAL
;

3511 i‡(
r
)

3513 
	`unifi_îr‹
(
¥iv
, "siwícodìxt: Së key faûed (%d)", 
r
);

3514  
	`c⁄vît_sme_îr‹
(
r
);

3525 i‡(
ext
->
key_Àn
 > 32)

3527  -
EINVAL
;

3534 i‡((
ext
->
Æg
 =
IW_ENCODE_ALG_TKIP
Ë&& (ext->
key_Àn
 == 32))

3536 
	`mem˝y
(
tkù_key
, 
keyd©a
, 16);

3537 
	`mem˝y
(
tkù_key
 + 16, 
keyd©a
 + 24, 8);

3538 
	`mem˝y
(
tkù_key
 + 24, 
keyd©a
 + 16, 8);

3539 
keyd©a
 = 
tkù_key
;

3542 
key_ty≥
 = (
ext
->
ext_Êags
 & 
IW_ENCODE_EXT_GROUP_KEY
)?

3543 
CSR_WIFI_SME_KEY_TYPE_GROUP
 :

3544 
CSR_WIFI_SME_KEY_TYPE_PAIRWISE
;

3546 
sme_key
.
keyTy≥
 = 
key_ty≥
;

3547 
sme_key
.
keyIndex
 = (
keyid
 - 1);

3548 
sme_key
.
keyLígth
 = 
ext
->
key_Àn
;

3549 
sme_key
.
authítiˇt‹
 = 0;

3550 
	`mem˝y
(
sme_key
.
addªss
.
a
, 
ext
->
addr
.
ß_d©a
, 
ETH_ALEN
);

3551 i‡(
ext
->
ext_Êags
 & 
IW_ENCODE_EXT_RX_SEQ_VALID
)

3553 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "RSC first 6 bytes = %02X:%02X:%02X:%02X:%02X:%02X\n",

3554 
ext
->
rx_£q
[0],Éxt->rx_seq[1],Éxt->rx_seq[2],Éxt->rx_seq[3],Éxt->rx_seq[4],Éxt->rx_seq[5]);

3557 
sme_key
.
keyRsc
[0] = 
ext
->
rx_£q
[1] << 8 |Éxt->rx_seq[0];

3558 
sme_key
.
keyRsc
[1] = 
ext
->
rx_£q
[3] << 8 |Éxt->rx_seq[2];

3559 
sme_key
.
keyRsc
[2] = 
ext
->
rx_£q
[5] << 8 |Éxt->rx_seq[4];

3560 
sme_key
.
keyRsc
[3] = 
ext
->
rx_£q
[7] << 8 |Éxt->rx_seq[6];

3563 
	`mem˝y
(
sme_key
.
key
, 
keyd©a
, 
ext
->
key_Àn
);

3564 
	`UF_RTNL_UNLOCK
();

3565 
r
 = 
	`sme_mgt_key
(
¥iv
, &
sme_key
, 
CSR_WIFI_SME_LIST_ACTION_ADD
);

3566 
	`UF_RTNL_LOCK
();

3567 i‡(
r
)

3569 
	`unifi_îr‹
(
¥iv
, "SETKEYSÑeque° wa†ªje˘ed wôhÑesu… %d\n", 
r
);

3570  
	`c⁄vît_sme_îr‹
(
r
);

3573 
	`func_exô
();

3574  
r
;

3575 
	}
}

3578 
	$unifi_siwícodìxt
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

3579 
iwªq_d©a
 *
wrqu
, *
exåa
)

3581 
îr
 = 0;

3583 
îr
 = 
	`_unifi_siwícodìxt
(
dev
, 
öfo
, 
wrqu
, 
exåa
);

3585  
îr
;

3586 
	}
}

3589 
	$unifi_giwícodìxt
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

3590 
iwªq_d©a
 *
wrqu
, *
exåa
)

3592  -
EOPNOTSUPP
;

3593 
	}
}

3616 
	#UNIFI_PMKID_KEY_SIZE
 16

	)

3617 
	$unifi_siwpmkß
(
√t_devi˚
 *
dev
, 
iw_ªque°_öfo
 *
öfo
,

3618 
iwªq_d©a
 *
wrqu
, *
exåa
)

3620 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

3621 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

3622 
iw_pmkß
 *
pmkß
 = (iw_pmkß *)
exåa
;

3623 
C§Resu…
 
r
 = 0;

3624 
C§WifiSmePmkidLi°
 
pmkid_li°
;

3625 
C§WifiSmePmkid
 
pmkid
;

3626 
C§WifiSmeLi°A˘i⁄
 
a˘i⁄
;

3628 
	`CHECK_INITED
(
¥iv
);

3630 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
 ||

3631 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
)

3633 
	`unifi_îr‹
(
¥iv
, "unifi_siwpmksa:ÇotÖermitted in Mode %d\n",

3634 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

3635  -
EPERM
;

3639 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "SIWPMKSA: cmd %d, %02x:%02x:%02x:%02x:%02x:%02x\n",

3640 
pmkß
->
cmd
,

3641 
pmkß
->
bssid
.
ß_d©a
[0],

3642 
pmkß
->
bssid
.
ß_d©a
[1],

3643 
pmkß
->
bssid
.
ß_d©a
[2],

3644 
pmkß
->
bssid
.
ß_d©a
[3],

3645 
pmkß
->
bssid
.
ß_d©a
[4],

3646 
pmkß
->
bssid
.
ß_d©a
[5]);

3648 
pmkid_li°
.
pmkids
 = 
NULL
;

3649 
pmkß
->
cmd
)

3651 
IW_PMKSA_ADD
:

3652 
pmkid_li°
.
pmkids
 = &
pmkid
;

3653 
a˘i⁄
 = 
CSR_WIFI_SME_LIST_ACTION_ADD
;

3654 
pmkid_li°
.
pmkidsCou¡
 = 1;

3655 
	`mem˝y
(
pmkid
.
bssid
.
a
, 
pmkß
->bssid.
ß_d©a
, 
ETH_ALEN
);

3656 
	`mem˝y
(
pmkid
.pmkid, 
pmkß
->pmkid, 
UNIFI_PMKID_KEY_SIZE
);

3658 
IW_PMKSA_REMOVE
:

3659 
pmkid_li°
.
pmkids
 = &
pmkid
;

3660 
a˘i⁄
 = 
CSR_WIFI_SME_LIST_ACTION_REMOVE
;

3661 
pmkid_li°
.
pmkidsCou¡
 = 1;

3662 
	`mem˝y
(
pmkid
.
bssid
.
a
, 
pmkß
->bssid.
ß_d©a
, 
ETH_ALEN
);

3663 
	`mem˝y
(
pmkid
.pmkid, 
pmkß
->pmkid, 
UNIFI_PMKID_KEY_SIZE
);

3665 
IW_PMKSA_FLUSH
:

3667 
pmkid_li°
.
pmkidsCou¡
 = 0;

3668 
a˘i⁄
 = 
CSR_WIFI_SME_LIST_ACTION_FLUSH
;

3671 
	`unifi_nŸi˚
(
¥iv
, "SIWPMKSA: Unknow¿comm™d (0x%x)\n", 
pmkß
->
cmd
);

3672  -
EINVAL
;

3676 
	`UF_RTNL_UNLOCK
();

3677 
r
 = 
	`sme_mgt_pmkid
(
¥iv
, 
a˘i⁄
, &
pmkid_li°
);

3678 
	`UF_RTNL_LOCK
();

3679 i‡(
r
)

3681 
	`unifi_îr‹
(
¥iv
, "SIWPMKSA: Set PMKID's Failed.\n");

3684  
r
;

3685 
	}
}

3701 
iw_°©i°ics
* 
	$unifi_gë_wúñess_°©s
(
√t_devi˚
 *
dev
)

3703 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = (√tI¡îÁ˚_¥iv_à*)
	`√tdev_¥iv
(
dev
);

3704 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

3706 i‡(
¥iv
->
öô_¥ogªss
 !
UNIFI_INIT_COMPLETED
)

3708  
NULL
;

3711 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
 ||

3712 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
)

3714 
	`unifi_îr‹
(
¥iv
, "unifi_get_wireless_stats:ÇotÖermitted in Mode %d\n",

3715 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

3716  
NULL
;

3719  &
¥iv
->
wext_wúñess_°©s
;

3720 
	}
}

3727 c⁄° 
iw_¥iv_¨gs
 
	gunifi_¥iv©e_¨gs
[] = {

3729 { 
SIOCIWS80211POWERSAVEPRIV
, 
IW_PRIV_TYPE_BYTE
 | 
IW_PRIV_SIZE_FIXED
 | 1,

3730 
IW_PRIV_TYPE_NONE
, "iwprivs80211ps" },

3731 { 
SIOCIWG80211POWERSAVEPRIV
, 
IW_PRIV_TYPE_NONE
,

3732 
IW_PRIV_TYPE_CHAR
 | 
IW_PRIV_SIZE_FIXED
 | 
IWPRIV_POWER_SAVE_MAX_STRING
, "iwprivg80211ps" },

3733 { 
SIOCIWS80211RELOADDEFAULTSPRIV
, 
IW_PRIV_TYPE_NONE
,

3734 
IW_PRIV_TYPE_NONE
, "iwprivsdefs" },

3735 { 
SIOCIWSSMEDEBUGPRIV
, 
IW_PRIV_TYPE_CHAR
 | 
IWPRIV_SME_DEBUG_MAX_STRING
, 
IW_PRIV_TYPE_NONE
, "iwprivssmedebug" },

3736 #ifde‡
CSR_WIFI_SECURITY_WAPI_ENABLE


3737 { 
SIOCIWSCONFWAPIPRIV
, 
IW_PRIV_TYPE_BYTE
 | 
IW_PRIV_SIZE_FIXED
 | 1,

3738 
IW_PRIV_TYPE_NONE
, "iwprivsconfwapi" },

3739 { 
SIOCIWSWAPIKEYPRIV
, 
IW_PRIV_TYPE_BYTE
 | 
IW_PRIV_SIZE_FIXED
 | (
unifiio_w≠i_key_t
),

3740 
IW_PRIV_TYPE_NONE
, "iwprivswpikey" },

3742 #ifde‡
CSR_SUPPORT_WEXT_AP


3743 { 
SIOCIWSAPCFGPRIV
, 
IW_PRIV_TYPE_CHAR
 | 256, 
IW_PRIV_TYPE_NONE
, "AP_SET_CFG" },

3744 { 
SIOCIWSAPSTARTPRIV
, 0, 
IW_PRIV_TYPE_CHAR
 | 
IW_PRIV_SIZE_FIXED
 | 
IWPRIV_SME_MAX_STRING
, "AP_BSS_START" },

3745 { 
SIOCIWSAPSTOPPRIV
, 
IW_PRIV_TYPE_CHAR
 | 
IW_PRIV_SIZE_FIXED
 | 0,

3746 
IW_PRIV_TYPE_CHAR
 | 
IW_PRIV_SIZE_FIXED
 | 0, "AP_BSS_STOP" },

3747 { 
SIOCIWSFWRELOADPRIV
, 
IW_PRIV_TYPE_CHAR
 | 256,

3748 
IW_PRIV_TYPE_CHAR
 | 
IW_PRIV_SIZE_FIXED
 | 0, "WL_FW_RELOAD" },

3749 #ifde‡
ANDROID_BUILD


3750 { 
SIOCIWSSTACKSTART
, 0,

3751 
IW_PRIV_TYPE_CHAR
 | 
IW_PRIV_SIZE_FIXED
 | 
IWPRIV_SME_MAX_STRING
, "START" },

3752 { 
SIOCIWSSTACKSTOP
, 0,

3753 
IW_PRIV_TYPE_CHAR
 | 
IW_PRIV_SIZE_FIXED
 | 
IWPRIV_SME_MAX_STRING
, "STOP" },

3758 c⁄° 
iw_h™dÀr
 
	gunifi_h™dÀr
[] =

3760 (
iw_h™dÀr
Ë
unifi_siwcommô
,

3761 (
iw_h™dÀr
Ë
unifi_giw«me
,

3762 (
iw_h™dÀr
Ë
NULL
,

3763 (
iw_h™dÀr
Ë
NULL
,

3764 (
iw_h™dÀr
Ë
unifi_siw‰eq
,

3765 (
iw_h™dÀr
Ë
unifi_giw‰eq
,

3766 (
iw_h™dÀr
Ë
unifi_siwmode
,

3767 (
iw_h™dÀr
Ë
unifi_giwmode
,

3768 (
iw_h™dÀr
Ë
NULL
,

3769 (
iw_h™dÀr
Ë
NULL
,

3770 (
iw_h™dÀr
Ë
NULL
,

3771 (
iw_h™dÀr
Ë
unifi_giwønge
,

3772 (
iw_h™dÀr
Ë
NULL
,

3773 (
iw_h™dÀr
Ë
NULL
,

3774 (
iw_h™dÀr
Ë
NULL
,

3775 (
iw_h™dÀr
Ë
NULL
,

3776 (
iw_h™dÀr
Ë
NULL
,

3777 (
iw_h™dÀr
Ë
NULL
,

3778 (
iw_h™dÀr
Ë
NULL
,

3779 (
iw_h™dÀr
Ë
NULL
,

3780 (
iw_h™dÀr
Ë
unifi_siw≠
,

3781 (
iw_h™dÀr
Ë
unifi_giw≠
,

3782 #i‡
WIRELESS_EXT
 > 17

3784 
unifi_siwmlme
,

3786 (
iw_h™dÀr
Ë
NULL
,

3788 (
iw_h™dÀr
Ë
NULL
,

3789 (
iw_h™dÀr
Ë
unifi_siwsˇn
,

3790 (
iw_h™dÀr
Ë
unifi_giwsˇn
,

3791 (
iw_h™dÀr
Ë
unifi_siwessid
,

3792 (
iw_h™dÀr
Ë
unifi_giwessid
,

3793 (
iw_h™dÀr
Ë
NULL
,

3794 (
iw_h™dÀr
Ë
NULL
,

3795 (
iw_h™dÀr
Ë
NULL
,

3796 (
iw_h™dÀr
Ë
NULL
,

3797 
unifi_siwøã
,

3798 
unifi_giwøã
,

3799 
unifi_siwπs
,

3800 
unifi_giwπs
,

3801 
unifi_siw‰ag
,

3802 
unifi_giw‰ag
,

3803 (
iw_h™dÀr
Ë
NULL
,

3804 (
iw_h™dÀr
Ë
NULL
,

3805 (
iw_h™dÀr
Ë
NULL
,

3806 (
iw_h™dÀr
Ë
NULL
,

3807 
unifi_siwícode
,

3808 
unifi_giwícode
,

3809 
unifi_siwpowî
,

3810 
unifi_giwpowî
,

3811 #i‡
WIRELESS_EXT
 > 17

3812 (
iw_h™dÀr
Ë
NULL
,

3813 (
iw_h™dÀr
Ë
NULL
,

3816 
unifi_siwgíõ
,

3817 
unifi_giwgíõ
,

3820 
unifi_siwauth
,

3821 
unifi_giwauth
,

3824 
unifi_siwícodìxt
,

3825 
unifi_giwícodìxt
,

3828 
unifi_siwpmkß
,

3829 (
iw_h™dÀr
Ë
NULL
,

3834 c⁄° 
iw_h™dÀr
 
	gunifi_¥iv©e_h™dÀr
[] =

3836 
iw¥ivs80211ps
,

3837 
iw¥ivg80211ps
,

3838 
iw¥ivsdefs
,

3839 (
iw_h™dÀr
Ë
NULL
,

3840 #ifde‡
CSR_WIFI_SECURITY_WAPI_ENABLE


3841 
iw¥ivsc⁄fw≠i
,

3842 (
iw_h™dÀr
Ë
NULL
,

3843 
iw¥ivswpikey
,

3845 (
iw_h™dÀr
Ë
NULL
,

3846 (
iw_h™dÀr
Ë
NULL
,

3847 (
iw_h™dÀr
Ë
NULL
,

3849 (
iw_h™dÀr
Ë
NULL
,

3850 
iw¥ivssmedebug
,

3851 #ifde‡
CSR_SUPPORT_WEXT_AP


3852 (
iw_h™dÀr
Ë
NULL
,

3853 
iw¥ivßpc⁄fig
,

3854 (
iw_h™dÀr
Ë
NULL
,

3855 
iw¥ivßp°¨t
,

3856 (
iw_h™dÀr
Ë
NULL
,

3857 
iw¥ivßp°›
,

3858 (
iw_h™dÀr
Ë
NULL
,

3859 #ifde‡
CSR_WIFI_FW_RELOAD


3860 
iw¥ivsfwªlﬂd
,

3862 (
iw_h™dÀr
Ë
NULL
,

3864 #ifde‡
ANDROID_BUILD


3865 (
iw_h™dÀr
Ë
NULL
,

3866 
iw¥ivs°ack°¨t
,

3867 (
iw_h™dÀr
Ë
NULL
,

3868 
iw¥ivs°ack°›
,

3870 (
iw_h™dÀr
Ë
NULL
,

3871 (
iw_h™dÀr
Ë
NULL
,

3872 (
iw_h™dÀr
Ë
NULL
,

3873 (
iw_h™dÀr
Ë
NULL
,

3876 (
iw_h™dÀr
Ë
NULL
,

3877 (
iw_h™dÀr
Ë
NULL
,

3878 (
iw_h™dÀr
Ë
NULL
,

3879 (
iw_h™dÀr
Ë
NULL
,

3880 (
iw_h™dÀr
Ë
NULL
,

3881 (
iw_h™dÀr
Ë
NULL
,

3882 (
iw_h™dÀr
Ë
NULL
,

3883 (
iw_h™dÀr
Ë
NULL
,

3884 (
iw_h™dÀr
Ë
NULL
,

3885 (
iw_h™dÀr
Ë
NULL
,

3886 (
iw_h™dÀr
Ë
NULL
,

3887 (
iw_h™dÀr
Ë
NULL
,

3891 
iw_h™dÀr_def
 
	gunifi_iw_h™dÀr_def
 =

3893 .
num_°™d¨d
 = (
unifi_h™dÀr
Ë/ (
iw_h™dÀr
),

3894 .
	gnum_¥iv©e
 = (
unifi_¥iv©e_h™dÀr
Ë/ (
iw_h™dÀr
),

3895 .
	gnum_¥iv©e_¨gs
 = (
unifi_¥iv©e_¨gs
Ë/ (
iw_¥iv_¨gs
),

3896 .
	g°™d¨d
 = (
iw_h™dÀr
 *Ë
unifi_h™dÀr
,

3897 .
	g¥iv©e
 = (
iw_h™dÀr
 *Ë
unifi_¥iv©e_h™dÀr
,

3898 .
	g¥iv©e_¨gs
 = (
iw_¥iv_¨gs
 *Ë
unifi_¥iv©e_¨gs
,

3899 #i‡
IW_HANDLER_VERSION
 >= 6

3900 .
	ggë_wúñess_°©s
 = 
unifi_gë_wúñess_°©s
,

	@ul_int.c

15 
	~"c§_wifi_hù_unifi.h
"

16 
	~"c§_wifi_hù_c⁄vîsi⁄s.h
"

17 
	~"unifi_¥iv.h
"

18 
	~"unifiio.h
"

19 
	~"unifi_os.h
"

21 
‰ì_bulkd©a_buf„rs
(
unifi_¥iv_t
 *
¥iv
, 
bulk_d©a_∑øm_t
 *
bulkd©a
);

22 
ª£t_drivî_°©us
(
unifi_¥iv_t
 *
¥iv
);

42 
	$ul_öô_˛õ¡s
(
unifi_¥iv_t
 *
¥iv
)

44 
id
;

45 
ul_˛õ¡_t
 *
ul_˛õ¡s
;

47 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 37)

48 
	`£ma_öô
(&
¥iv
->
udi_loggög_muãx
, 1);

50 
	`öô_MUTEX
(&
¥iv
->
udi_loggög_muãx
);

52 
¥iv
->
loggög_˛õ¡
 = 
NULL
;

54 
ul_˛õ¡s
 = 
¥iv
->ul_clients;

56 
id
 = 0; id < 
MAX_UDI_CLIENTS
; id++) {

57 
	`mem£t
(&
ul_˛õ¡s
[
id
], 0, (
ul_˛õ¡_t
));

59 
ul_˛õ¡s
[
id
].
˛õ¡_id
 = id;

60 
ul_˛õ¡s
[
id
].
£ndî_id
 = 
UDI_SENDER_ID_BASE
 + (id << 
UDI_SENDER_ID_SHIFT
);

61 
ul_˛õ¡s
[
id
].
ö°™˚
 = -1;

62 
ul_˛õ¡s
[
id
].
evít_hook
 = 
NULL
;

64 
	`INIT_LIST_HEAD
(&
ul_˛õ¡s
[
id
].
udi_log
);

65 
	`öô_waôqueue_hód
(&
ul_˛õ¡s
[
id
].
udi_wq
);

66 
	`£ma_öô
(&
ul_˛õ¡s
[
id
].
udi_£m
, 1);

68 
ul_˛õ¡s
[
id
].
wake_up_wq_id
 = 0;

69 
ul_˛õ¡s
[
id
].
£q_no
 = 0;

70 
ul_˛õ¡s
[
id
].
wake_£q_no
 = 0;

71 
ul_˛õ¡s
[
id
].
¢≠_fûãr
.
cou¡
 = 0;

73 
	}
}

91 
ul_˛õ¡_t
 *

92 
	$ul_ªgi°î_˛õ¡
(
unifi_¥iv_t
 *
¥iv
, 
c⁄figuøti⁄
,

93 
udi_evít_t
 
udi_evít_˛bk
)

95 
id
, 
ªf
;

96 
ul_˛õ¡_t
 *
ul_˛õ¡s
;

98 
ul_˛õ¡s
 = 
¥iv
->ul_clients;

101 
id
 = 0; id < 
MAX_UDI_CLIENTS
; id++) {

102 i‡(
ul_˛õ¡s
[
id
].
udi_íabÀd
 == 0) {

103 
ul_˛õ¡s
[
id
].
ö°™˚
 = 
¥iv
->instance;

104 
ul_˛õ¡s
[
id
].
udi_íabÀd
 = 1;

105 
ul_˛õ¡s
[
id
].
c⁄figuøti⁄
 = configuration;

108 
ul_˛õ¡s
[
id
].
ª∂y_sig«l
 = (
CSR_SIGNAL
*Ë
	`C§PmemAŒoc
((CSR_SIGNAL));

109 i‡(
ul_˛õ¡s
[
id
].
ª∂y_sig«l
 =
NULL
) {

110 
	`unifi_îr‹
(
¥iv
, "FailedÅoállocateÑeply signal for client.\n");

111  
NULL
;

114 
ªf
 = 0;Ñe‡< 
UNIFI_MAX_DATA_REFERENCES
;Ñef ++) {

115 
ul_˛õ¡s
[
id
].
ª∂y_bulkd©a
[
ªf
] =

116 (
bulk_d©a_t
*Ë
	`C§PmemAŒoc
((bulk_data_t));

118 i‡(
ul_˛õ¡s
[
id
].
ª∂y_bulkd©a
[
ªf
] =
NULL
) {

119 ; 
ªf
 > 0;Ñef --) {

120 
	`C§PmemFªe
(
ul_˛õ¡s
[
id
].
ª∂y_bulkd©a
[
ªf
 - 1]);

122 
	`C§PmemFªe
(
ul_˛õ¡s
[
id
].
ª∂y_sig«l
);

123 
	`unifi_îr‹
(
¥iv
, "FailedÅoállocate bulk data buffers for client.\n");

124  
NULL
;

129 
ul_˛õ¡s
[
id
].
evít_hook
 = 
udi_evít_˛bk
;

131 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "UDI %d (0x%x)Ñegistered. configuration = 0x%x\n",

132 
id
, &
ul_˛õ¡s
[id], 
c⁄figuøti⁄
);

133  &
ul_˛õ¡s
[
id
];

136  
NULL
;

137 
	}
}

154 
	$ul_dîegi°î_˛õ¡
(
ul_˛õ¡_t
 *
ul_˛õ¡
)

156 
li°_hód
 *
pos
, *
n
;

157 
udi_log_t
 *
log±r
;

158 
unifi_¥iv_t
 *
¥iv
 = 
	`uf_föd_ö°™˚
(
ul_˛õ¡
->
ö°™˚
);

159 
ªf
;

161 
ul_˛õ¡
->
ö°™˚
 = -1;

162 
ul_˛õ¡
->
evít_hook
 = 
NULL
;

163 
ul_˛õ¡
->
udi_íabÀd
 = 0;

164 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "UDI (0x%xËdîegi°îed.\n", 
ul_˛õ¡
);

167 
	`C§PmemFªe
(
ul_˛õ¡
->
ª∂y_sig«l
);

168 
ªf
 = 0;Ñe‡< 
UNIFI_MAX_DATA_REFERENCES
;Ñef ++) {

169 
	`C§PmemFªe
(
ul_˛õ¡
->
ª∂y_bulkd©a
[
ªf
]);

172 i‡(
ul_˛õ¡
->
¢≠_fûãr
.
cou¡
) {

173 
ul_˛õ¡
->
¢≠_fûãr
.
cou¡
 = 0;

174 
	`C§PmemFªe
(
ul_˛õ¡
->
¢≠_fûãr
.
¥Ÿocﬁs
);

178 
	`down
(&
ul_˛õ¡
->
udi_£m
);

179 
	`li°_f‹_óch_ß„
(
pos
, 
n
, &
ul_˛õ¡
->
udi_log
)

181 
log±r
 = 
	`li°_íåy
(
pos
, 
udi_log_t
, 
q
);

182 
	`li°_dñ
(
pos
);

183 
	`k‰ì
(
log±r
);

185 
	`up
(&
ul_˛õ¡
->
udi_£m
);

188 
	}
}

215 
	$loggög_h™dÀr
(*
o•riv
,

216 
C§Uöt8
 *
sigd©a
, 
C§Uöt32
 
sig«l_Àn
,

217 c⁄° 
bulk_d©a_∑øm_t
 *
bulkd©a
,

218 
udi_log_dúe˘i⁄
 
dúe˘i⁄
)

220 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
o•riv
;

221 
ul_˛õ¡_t
 *
˛õ¡
;

222 
dú
;

224 
dú
 = (
dúe˘i⁄
 =
UDI_LOG_FROM_HOST
Ë? 
UDI_FROM_HOST
 : 
UDI_TO_HOST
;

226 
	`down
(&
¥iv
->
udi_loggög_muãx
);

227 
˛õ¡
 = 
¥iv
->
loggög_˛õ¡
;

228 i‡(
˛õ¡
 !
NULL
) {

229 
˛õ¡
->
	`evít_hook
(˛õ¡, 
sigd©a
, 
sig«l_Àn
,

230 
bulkd©a
, 
dú
);

232 
	`up
(&
¥iv
->
udi_loggög_muãx
);

234 
	}
}

255 
	$ul_log_c⁄fig_öd
(
unifi_¥iv_t
 *
¥iv
, 
u8
 *
c⁄f_∑øm
, 
Àn
)

257 #ifde‡
CSR_SUPPORT_SME


258 i‡(
¥iv
->
smïriv
 =
NULL
)

262 i‡((
CONFIG_IND_ERROR
 =(*
c⁄f_∑øm
)Ë&& (
¥iv
->
wifi_⁄_°©e
 =
wifi_⁄_ö_¥ogªss
)) {

263 
	`unifi_nŸi˚
(
¥iv
, "ul_log_config_ind: wifi on inÖrogress, suppressÉrror\n");

266 
	`C§WifiRouãrCålWifiOffIndSíd
(
¥iv
->
CSR_WIFI_SME_IFACEQUEUE
,0, (
C§WifiRouãrCålC⁄åﬁIndiˇti⁄
)(*
c⁄f_∑øm
));

268 #ifde‡
CSR_WIFI_HIP_DEBUG_OFFLINE


269 
	`unifi_debug_buf_dump
();

272 
bulk_d©a_∑øm_t
 
bulkd©a
;

279 i‡(!
¥iv
) {

280 
	`unifi_nŸi˚
(
NULL
, "uf_sme_event_ind: NULLÖriv\n");

285 
bulkd©a
.
d
[0].
d©a_Àngth
 = 0;

286 
bulkd©a
.
d
[1].
d©a_Àngth
 = 0;

288 
	`sme_«tive_log_evít
(
¥iv
->
sme_˛i
, 
c⁄f_∑øm
, (
C§Uöt8
),

289 &
bulkd©a
, 
UDI_CONFIG_IND
);

293 
	}
}

311 
	$‰ì_bulkd©a_buf„rs
(
unifi_¥iv_t
 *
¥iv
, 
bulk_d©a_∑øm_t
 *
bulkd©a
)

313 
i
;

315 i‡(
bulkd©a
) {

316 
i
 = 0; i < 
UNIFI_MAX_DATA_REFERENCES
; ++i) {

317 i‡(
bulkd©a
->
d
[
i
].
d©a_Àngth
 != 0) {

318 
	`unifi_√t_d©a_‰ì
(
¥iv
, (
bulk_d©a_desc_t
 *)(&
bulkd©a
->
d
[
i
]));

324 
	}
}

327 
	$_Æign_bulk_d©a_buf„rs
(
unifi_¥iv_t
 *
¥iv
, 
C§Uöt8
 *
sig«l
,

328 
bulk_d©a_∑øm_t
 *
bulkd©a
)

330 
i
;

332 i‡((
bulkd©a
 =
NULL
Ë|| (
CSR_WIFI_ALIGN_BYTES
 == 0)) {

336 
i
 = 0; i < 
UNIFI_MAX_DATA_REFERENCES
; i++)

338 
sk_buff
 *
skb
;

343 
C§Uöt32
 
Æign_off£t
 = (C§Uöt32)()(
bulkd©a
->
d
[
i
].
os_d©a_±r
Ë& (
CSR_WIFI_ALIGN_BYTES
-1);

344 i‡(
Æign_off£t
)

346 
skb
 = (
sk_buff
*)
bulkd©a
->
d
[
i
].
os_√t_buf_±r
;

347 i‡(
skb
 =
NULL
) {

348 
	`unifi_w¨nög
(
¥iv
,

350 
Æign_off£t
);

351  -
EINVAL
;

353 i‡(
bulkd©a
->
d
[
i
].
d©a_Àngth
 == 0) {

354 
	`unifi_w¨nög
(
¥iv
,

356 
Æign_off£t
);

357  
CSR_RESULT_SUCCESS
;

359 
	`unifi_åa˚
(
¥iv
, 
UDBG5
,

361 
bulkd©a
->
d
[
i
].
os_d©a_±r
, 
Æign_off£t
, 
skb
->
d©a
);

365 i‡(
	`u∆ikñy
(
	`skb_hódroom
(
skb
Ë< 
Æign_off£t
))

367 
sk_buff
 *
tmp
 = 
skb
;

369 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "HeadroomÇotÉnough -Ñealloc it\n");

370 
skb
 = 
	`skb_ªÆloc_hódroom
(skb, 
Æign_off£t
);

371 i‡(
skb
 =
NULL
) {

372 
	`unifi_îr‹
(
¥iv
,

374  -
EFAULT
;

377 
	`k‰ì_skb
(
tmp
);

379 
bulkd©a
->
d
[
i
].
os_√t_buf_±r
 = (c⁄° *)
skb
;

380 
bulkd©a
->
d
[
i
].
os_d©a_±r
 = (c⁄° *)
skb
->
d©a
;

383 
	`skb_push
(
skb
, 
Æign_off£t
);

387 
sig«l
[
SIZEOF_SIGNAL_HEADER
 + (
i
 * 
SIZEOF_DATAREF
Ë+ 1] = 
Æign_off£t
;

391 
	}
}

417 
	$ul_£nd_sig«l_u≈acked
(
unifi_¥iv_t
 *
¥iv
, 
CSR_SIGNAL
 *
sig±r
,

418 
bulk_d©a_∑øm_t
 *
bulkd©a
)

420 
C§Uöt8
 
sigbuf
[
UNIFI_PACKED_SIGBUF_SIZE
];

421 
C§Uöt16
 
∑cked_sigÀn
;

422 
C§Resu…
 
c§Resu…
;

423 
lock_Êags
;

424 
r
;

427 
c§Resu…
 = 
	`wrôe_∑ck
(
sig±r
, 
sigbuf
, &
∑cked_sigÀn
);

428 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

429 
	`unifi_îr‹
(
¥iv
, "Malformed HIP signal in ul_send_signal_unpacked()\n");

430  
	`C§HùResu…ToSètus
(
c§Resu…
);

432 
r
 = 
	`_Æign_bulk_d©a_buf„rs
(
¥iv
, 
sigbuf
, (
bulk_d©a_∑øm_t
*)
bulkd©a
);

433 i‡(
r
) {

434  
r
;

437 
	`•ö_lock_úqßve
(&
¥iv
->
£nd_sig«l_lock
, 
lock_Êags
);

438 
c§Resu…
 = 
	`unifi_£nd_sig«l
(
¥iv
->
ˇrd
, 
sigbuf
, 
∑cked_sigÀn
, 
bulkd©a
);

439 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

441 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
£nd_sig«l_lock
, 
lock_Êags
);

442  
	`C§HùResu…ToSètus
(
c§Resu…
);

444 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
£nd_sig«l_lock
, 
lock_Êags
);

447 
	}
}

465 
	$ª£t_drivî_°©us
(
unifi_¥iv_t
 *
¥iv
)

467 
¥iv
->
°a_wmm_ˇ∑bûôõs
 = 0;

468 #ifde‡
CSR_NATIVE_LINUX


469 #ifde‡
CSR_SUPPORT_WEXT


470 
¥iv
->
wext_c⁄f
.
Êag_assocüãd
 = 0;

471 
¥iv
->
wext_c⁄f
.
block_c⁄åﬁÀd_p‹t
 = 
CSR_WIFI_ROUTER_PORT_ACTION_8021X_PORT_OPEN
;

472 
¥iv
->
wext_c⁄f
.
bss_wmm_ˇ∑bûôõs
 = 0;

473 
¥iv
->
wext_c⁄f
.
dißbÀ_joö_⁄_ssid_£t
 = 0;

476 
	}
}

496 
	$ul_£nd_sig«l_øw
(
unifi_¥iv_t
 *
¥iv
, *
sig±r
, 
sigÀn
,

497 
bulk_d©a_∑øm_t
 *
bulkd©a
)

499 
C§Resu…
 
c§Resu…
;

500 
lock_Êags
;

501 
r
;

507 
r
 = 
	`_Æign_bulk_d©a_buf„rs
(
¥iv
, (
C§Uöt8
*)
sig±r
, 
bulkd©a
);

508 i‡(
r
) {

509  
r
;

512 
	`•ö_lock_úqßve
(&
¥iv
->
£nd_sig«l_lock
, 
lock_Êags
);

513 
c§Resu…
 = 
	`unifi_£nd_sig«l
(
¥iv
->
ˇrd
, 
sig±r
, 
sigÀn
, 
bulkd©a
);

514 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

515 
	`‰ì_bulkd©a_buf„rs
(
¥iv
, 
bulkd©a
);

516 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
£nd_sig«l_lock
, 
lock_Êags
);

517  
	`C§HùResu…ToSètus
(
c§Resu…
);

519 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
£nd_sig«l_lock
, 
lock_Êags
);

526 i‡(
	`GET_SIGNAL_ID
(
sig±r
Ë=
CSR_MLME_RESET_REQUEST_ID
) {

527 
	`ª£t_drivî_°©us
(
¥iv
);

531 
	}
}

	@unifi_clients.h

17 #i‚de‡
__LINUX_UNIFI_CLIENTS_H__


18 
	#__LINUX_UNIFI_CLIENTS_H__
 1

	)

20 
	~<löux/kî√l.h
>

22 
	#MAX_UDI_CLIENTS
 8

	)

25 
	#UDI_SENDER_ID_BASE
 0xC000

	)

26 
	#UDI_SENDER_ID_SHIFT
 8

	)

33 
li°_hód
 
	mq
;

36 
udi_msg_t
 
	mmsg
;

40 } 
	tudi_log_t
;

44 
ul_˛õ¡
 
	tul_˛õ¡_t
;

46 (*
	tudi_evít_t
)(
	tul_˛õ¡_t
 *
	t˛õ¡
,

47 c⁄° 
	tu8
 *
	tsigd©a
, 
	tsig«l_Àn
,

48 c⁄° 
	tbulk_d©a_∑øm_t
 *
	tbulkd©a
,

49 
	tdú
);

51 
	`loggög_h™dÀr
(*
o•riv
,

52 
C§Uöt8
 *
sigd©a
, 
C§Uöt32
 
sig«l_Àn
,

53 c⁄° 
bulk_d©a_∑øm_t
 *
bulkd©a
,

54 
udi_log_dúe˘i⁄
 
dúe˘i⁄
);

61 
	s_bulk_d©a


63 
±r
[2000];

64 
Àngth
;

65 } 
	tbulk_d©a_t
;

68 
	sul_˛õ¡
 {

70 
˛õ¡_id
;

73 
ö°™˚
;

76 
udi_íabÀd
;

79 
£ndî_id
;

82 
c⁄figuøti⁄
;

84 
udi_evít_t
 
evít_hook
;

87 
li°_hód
 
udi_log
;

90 
£m≠h‹e
 
udi_£m
;

97 
waô_queue_hód_t
 
udi_wq
;

98 
CSR_SIGNAL
* 
ª∂y_sig«l
;

99 
bulk_d©a_t
* 
ª∂y_bulkd©a
[
UNIFI_MAX_DATA_REFERENCES
];

101 
C§Uöt16
 
sig«l_fûãr
[
SIG_FILTER_SIZE
];

108 
wake_up_wq_id
;

116 
£q_no
;

123 
wake_£q_no
;

125 
unifiio_¢≠_fûãr_t
 
¢≠_fûãr
;

	@unifi_config.h

17 #i‚de‡
__UNIFI_CONFIG_H__


18 
	#__UNIFI_CONFIG_H__
 1

	)

26 
	#CSR_WIFI_HIP_SDIO_BLOCK_SIZE
 64

	)

31 
	#CSR_WIFI_HIP_NUM_COREDUMP_BUFFERS
 5

	)

	@unifi_dbg.c

15 
	~"unifi_¥iv.h
"

32 
	$debug_°rög_ödiˇti⁄
(
unifi_¥iv_t
 *
¥iv
, c⁄° *
exåa
, 
exåÆí
)

34 c⁄° 
maxÀn
 = (
¥iv
->
œ°_debug_°rög
) - 1;

36 i‡(
exåÆí
 > 
maxÀn
) {

37 
exåÆí
 = 
maxÀn
;

40 
	`°∫˝y
(
¥iv
->
œ°_debug_°rög
, 
exåa
, 
exåÆí
);

43 
¥iv
->
œ°_debug_°rög
[
exåÆí
] = '\0';

45 
	`unifi_öfo
(
¥iv
, "unifòdebug: %s\n",Öriv->
œ°_debug_°rög
);

47 
	}
}

52 
	$debug_w‹d16_ödiˇti⁄
(
unifi_¥iv_t
 *
¥iv
, c⁄° 
CSR_SIGNAL
 *
sig±r
)

54 
i
;

56 i‡(
¥iv
 =
NULL
) {

57 
	`unifi_öfo
(
¥iv
, "Priv is NULL\n");

61 
i
 = 0; i < 16; i++) {

62 
¥iv
->
œ°_debug_w‹d16
[
i
] =

63 
sig±r
->
u
.
DebugW‹d16Indiˇti⁄
.
DebugW‹ds
[
i
];

66 i‡(
¥iv
->
œ°_debug_w‹d16
[0] == 0xFA11) {

67 
ts
;

68 
ts
 = (
¥iv
->
œ°_debug_w‹d16
[6] << 16) |Öriv->last_debug_word16[5];

69 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, " %10lu: %s fault %04x,árg %04x (x%d)\n",

70 
ts
,

71 
¥iv
->
œ°_debug_w‹d16
[3] == 0x8000 ? "MAC" :

72 
¥iv
->
œ°_debug_w‹d16
[3] == 0x4000 ? "PHY" :

74 
¥iv
->
œ°_debug_w‹d16
[1],

75 
¥iv
->
œ°_debug_w‹d16
[2],

76 
¥iv
->
œ°_debug_w‹d16
[4]);

78 i‡(
¥iv
->
œ°_debug_w‹d16
[0] != 0xDBAC)

81 
	`unifi_öfo
(
¥iv
, "unifi debug: %04X %04X %04X %04X %04X %04X %04X %04X\n",

82 
¥iv
->
œ°_debug_w‹d16
[0],Öriv->last_debug_word16[1],

83 
¥iv
->
œ°_debug_w‹d16
[2],Öriv->last_debug_word16[3],

84 
¥iv
->
œ°_debug_w‹d16
[4],Öriv->last_debug_word16[5],

85 
¥iv
->
œ°_debug_w‹d16
[6],Öriv->last_debug_word16[7]);

86 
	`unifi_öfo
(
¥iv
, " %04X %04X %04X %04X %04X %04X %04X %04X\n",

87 
¥iv
->
œ°_debug_w‹d16
[8],Öriv->last_debug_word16[9],

88 
¥iv
->
œ°_debug_w‹d16
[10],Öriv->last_debug_word16[11],

89 
¥iv
->
œ°_debug_w‹d16
[12],Öriv->last_debug_word16[13],

90 
¥iv
->
œ°_debug_w‹d16
[14],Öriv->last_debug_word16[15]);

93 
	}
}

97 
	$debug_gíîic_ödiˇti⁄
(
unifi_¥iv_t
 *
¥iv
, c⁄° 
CSR_SIGNAL
 *
sig±r
)

99 
	`unifi_öfo
(
¥iv
, "debug: %04X %04X %04X %04X %04X %04X %04X %04X\n",

100 
sig±r
->
u
.
DebugGíîicIndiˇti⁄
.
DebugW‹ds
[0],

101 
sig±r
->
u
.
DebugGíîicIndiˇti⁄
.
DebugW‹ds
[1],

102 
sig±r
->
u
.
DebugGíîicIndiˇti⁄
.
DebugW‹ds
[2],

103 
sig±r
->
u
.
DebugGíîicIndiˇti⁄
.
DebugW‹ds
[3],

104 
sig±r
->
u
.
DebugGíîicIndiˇti⁄
.
DebugW‹ds
[4],

105 
sig±r
->
u
.
DebugGíîicIndiˇti⁄
.
DebugW‹ds
[5],

106 
sig±r
->
u
.
DebugGíîicIndiˇti⁄
.
DebugW‹ds
[6],

107 
sig±r
->
u
.
DebugGíîicIndiˇti⁄
.
DebugW‹ds
[7]);

109 
	}
}

	@unifi_event.c

31 
	~"c§_wifi_hù_unifi.h
"

32 
	~"c§_wifi_hù_c⁄vîsi⁄s.h
"

33 
	~"unifi_¥iv.h
"

57 
	$£nd_to_˛õ¡
(
unifi_¥iv_t
 *
¥iv
, 
ul_˛õ¡_t
 *
˛õ¡
,

58 
ª˚ivî_id
,

59 *
sigd©a
, 
sigÀn
,

60 c⁄° 
bulk_d©a_∑øm_t
 *
bulkd©a
)

62 i‡(
˛õ¡
 && clõ¡->
evít_hook
) {

68 
˛õ¡
->
	`evít_hook
(˛õ¡, 
sigd©a
, 
sigÀn
, 
bulkd©a
, 
UDI_TO_HOST
);

70 
	}
}

94 
C§Boﬁ
 
	$check_routög_pkt_d©a_öd
(
unifi_¥iv_t
 *
¥iv
,

95 
C§Uöt8
 *
sigd©a
,

96 c⁄° 
bulk_d©a_∑øm_t
* 
bulkd©a
,

97 
C§Boﬁ
 *
‰ìBulkD©a
,

98 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
)

100 
C§Uöt16
 
‰mCål
, 
ª˚±i⁄Sètus
, 
‰mCålSubTy≥
;

101 
C§Uöt8
 *
macHdrLoˇti⁄
;

102 
C§Uöt8
 
öãrÁ˚Tag
;

103 
C§Boﬁ
 
isD©aFøme
;

104 
C§Boﬁ
 
isPrŸocﬁVîInvÆid
 = 
FALSE
;

105 
C§Boﬁ
 
isD©aFømeSubTy≥NoD©a
 = 
FALSE
;

107 #ifde‡
CSR_WIFI_SECURITY_WAPI_ENABLE


108 c⁄° 
C§Uöt8
 
w≠iPrŸocﬁIdSNAPHódî
[] = {0x88,0xb4};

109 c⁄° 
C§Uöt8
 
w≠iPrŸocﬁIdSNAPHódîOff£t
 = 6;

110 
C§Uöt8
 *
de°Addr
;

111 
C§Uöt8
 *
§cAddr
;

112 
C§Boﬁ
 
isW≠iUniˇ°Pkt
 = 
FALSE
;

114 #ifde‡
CSR_WIFI_SECURITY_WAPI_QOSCTRL_MIC_WORKAROUND


115 
C§Uöt16
 
qosC⁄åﬁ
;

118 
C§Uöt8
 
ŒcS«pHódîOff£t
 = 0;

120 
de°Addr
 = (
C§Uöt8
 *Ë
bulkd©a
->
d
[0].
os_d©a_±r
 + 
MAC_HEADER_ADDR1_OFFSET
;

121 
§cAddr
 = (
C§Uöt8
 *Ë
bulkd©a
->
d
[0].
os_d©a_±r
 + 
MAC_HEADER_ADDR2_OFFSET
;

124 
isW≠iUniˇ°Pkt
 = (!(
de°Addr
[0] & 0x01)Ë? 
TRUE
 : 
FALSE
;

127 
	#CSR_WIFI_MA_PKT_IND_RECEPTION_STATUS_OFFSET
 (
CSR_SIGNAL_PRIMITIVE_HEADER
Ë+ 22

	)

129 *
‰ìBulkD©a
 = 
FALSE
;

132 
macHdrLoˇti⁄
 = (
C§Uöt8
 *Ë
bulkd©a
->
d
[0].
os_d©a_±r
;

134 
‰mCål
 = 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
(
macHdrLoˇti⁄
);

137 
öãrÁ˚Tag
 = (
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
(
sigd©a
 + 14)) & 0xff;

140 
ª˚±i⁄Sètus
 = 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
(
sigd©a
 + 
CSR_WIFI_MA_PKT_IND_RECEPTION_STATUS_OFFSET
);

143 
isD©aFøme
 = ((
‰mCål
 & 
IEEE80211_FC_TYPE_MASK
Ë=(
IEEE802_11_FC_TYPE_DATA
 & IEEE80211_FC_TYPE_MASK)Ë? 
TRUE
 : 
FALSE
;

145 
isPrŸocﬁVîInvÆid
 = (
‰mCål
 & 
IEEE80211_FC_PROTO_VERSION_MASK
Ë? 
TRUE
 : 
FALSE
;

146 
‰mCålSubTy≥
 = (
‰mCål
 & 
IEEE80211_FC_SUBTYPE_MASK
Ë>> 
FRAME_CONTROL_SUBTYPE_FIELD_OFFSET
;

148 
isD©aFømeSubTy≥NoD©a
 = (((
‰mCålSubTy≥
>0x03)&&(‰mCålSubTy≥<0x08)Ë|| (‰mCålSubTy≥>0x0B)Ë? 
TRUE
 : 
FALSE
;

149 i‡((
ª˚±i⁄Sètus
 =
CSR_MICHAEL_MIC_ERROR
) &&

150 ((!
isD©aFøme
Ë|| 
isPrŸocﬁVîInvÆid
 || (isD©aFømê&& 
isD©aFømeSubTy≥NoD©a
))) {

154 *
‰ìBulkD©a
 = 
TRUE
;

155 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "DiscardingÅhis frameánd ignoringÅhe MIC failureásÅhis isá garbage/non-data/no data frame\n");

156  
FALSE
;

159 #ifde‡
CSR_WIFI_SECURITY_WAPI_ENABLE


161 i‡(
ª˚±i⁄Sètus
 =
CSR_MICHAEL_MIC_ERROR
) {

163 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_STA
) {

165 #ifde‡
CSR_WIFI_SECURITY_WAPI_QOSCTRL_MIC_WORKAROUND


166 i‡((
isD©aFøme
) &&

167 ((
IEEE802_11_FC_TYPE_QOS_DATA
 & 
IEEE80211_FC_SUBTYPE_MASK
Ë=(
‰mCål
 & IEEE80211_FC_SUBTYPE_MASK)) &&

168 (
¥iv
->
isW≠iC⁄√˘i⁄
))

170 
qosC⁄åﬁ
 = 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
(
macHdrLoˇti⁄
 + (((
‰mCål
 & 
IEEE802_11_FC_TO_DS_MASK
Ë&& (‰mCå»& 
IEEE802_11_FC_FROM_DS_MASK
)) ? 30 : 24) );

172 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "check_routög_pkt_d©a_öd(Ë:: VÆuêo‡thêQoS c⁄åﬁ fõld - 0x%04x \n", 
qosC⁄åﬁ
);

174 i‡(
qosC⁄åﬁ
 & 
IEEE802_11_QC_NON_TID_BITS_MASK
)

176 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "IgnoreÅhe MIC failureándÖassÅhe MPDUÅoÅhe stack whenány of bits [4-15] is set inÅhe QoS control field\n");

179 ((
bulk_d©a_∑øm_t
*)
bulkd©a
)->
d
[0].
d©a_Àngth
 = bulkdata->d[0].data_length - 32;

182 *(
sigd©a
 + 
CSR_WIFI_MA_PKT_IND_RECEPTION_STATUS_OFFSET
) = 0x00;

183 *(
sigd©a
 + 
CSR_WIFI_MA_PKT_IND_RECEPTION_STATUS_OFFSET
+1) = 0x00;

185 *
‰ìBulkD©a
 = 
FALSE
;

187  
FALSE
;

196 #i‚de‡
CSR_WIFI_SECURITY_WAPI_SW_ENCRYPTION


197 i‡((
¥iv
->
w≠i_mu…iˇ°_fûãr
 =0Ë|| 
isW≠iUniˇ°Pkt
) {

201 i‡–((
¥iv
->
w≠i_mu…iˇ°_fûãr
 =0Ë&& !
isW≠iUniˇ°Pkt
) ||

202 ((
¥iv
->
w≠i_uniˇ°_fûãr
 =0Ë&& 
isW≠iUniˇ°Pkt
) ) {

205 *
‰ìBulkD©a
 = 
TRUE
;

206 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "DiscardingÅhe contents ofÅhe frame with MIC failure \n");

208 i‡(
isW≠iUniˇ°Pkt
 &&

209 ((
	`uf_sme_p‹t_°©e
(
¥iv
,
§cAddr
,
UF_CONTROLLED_PORT_Q
,
öãrÁ˚Tag
Ë!
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_OPEN
)||

210 #i‚de‡
CSR_WIFI_SECURITY_WAPI_SW_ENCRYPTION


211 (
¥iv
->
w≠i_uniˇ°_fûãr
) ||

213 (
¥iv
->
w≠i_uniˇ°_queued_pkt_fûãr
))) {

222 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "IgnoringÅhe MIC failureásÉitherá. CONTROL PORT isn't OPEN or b. Unicast filter is set or c. WAPI AP using old key for bufferedÖkts\n");

225  
FALSE
;

229 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "check_routing_pkt_data_ind - MIC FAILURE : interfaceTag %x Src Addr %x:%x:%x:%x:%x:%x\n",

230 
öãrÁ˚Tag
, 
§cAddr
[0], srcAddr[1], srcAddr[2], srcAddr[3], srcAddr[4], srcAddr[5]);

231 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "check_routing_pkt_data_ind - MIC FAILURE : Dest Addr %x:%x:%x:%x:%x:%x\n",

232 
de°Addr
[0], destAddr[1], destAddr[2], destAddr[3], destAddr[4], destAddr[5]);

233 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "check_routing_pkt_data_ind - MIC FAILURE : Control Port State - 0x%.4X \n",

234 
	`uf_sme_p‹t_°©e
(
¥iv
,
§cAddr
,
UF_CONTROLLED_PORT_Q
,
öãrÁ˚Tag
));

236 
	`unifi_îr‹
(
¥iv
, "MIC faûuª i¿%s\n", 
__FUNCTION__
);

239  
TRUE
;

244 *
‰ìBulkD©a
 = 
TRUE
;

245 
	`unifi_îr‹
(
¥iv
, "MIC faûuª i¿%s\n", 
__FUNCTION__
);

246  
TRUE
;

250 i‡(
ª˚±i⁄Sètus
 =
CSR_MICHAEL_MIC_ERROR
) {

251 *
‰ìBulkD©a
 = 
TRUE
;

252 
	`unifi_îr‹
(
¥iv
, "MIC faûuª i¿%s\n", 
__FUNCTION__
);

253  
TRUE
;

257 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "frmCtrl = 0x%04x %s\n",

258 
‰mCål
,

259 (((
‰mCål
 & 0x000c)>>
FRAME_CONTROL_TYPE_FIELD_OFFSET
Ë=
IEEE802_11_FRAMETYPE_MANAGEMENT
) ?

262 #ifde‡
CSR_WIFI_SECURITY_WAPI_ENABLE


266 i‡((
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_STA
)&&

267 
isW≠iUniˇ°Pkt
 &&

268 (
ª˚±i⁄Sètus
 =
CSR_RX_SUCCESS
) &&

269 (
¥iv
->
w≠i_uniˇ°_queued_pkt_fûãr
==1)) {

271 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "check_routing_pkt_data_ind(): WAPI unicastÖktÑeceived whenÅhe (wapi_unicast_queued_pkt_filter) is set\n");

273 i‡(
isD©aFøme
) {

274 
‰mCål
 & 
IEEE80211_FC_SUBTYPE_MASK
) {

275 
IEEE802_11_FC_TYPE_QOS_DATA
 & 
IEEE80211_FC_SUBTYPE_MASK
:

276 
ŒcS«pHódîOff£t
 = 
MAC_HEADER_SIZE
 + 2;

278 
IEEE802_11_FC_TYPE_QOS_NULL
 & 
IEEE80211_FC_SUBTYPE_MASK
:

279 
IEEE802_11_FC_TYPE_NULL
 & 
IEEE80211_FC_SUBTYPE_MASK
:

282 
ŒcS«pHódîOff£t
 = 
MAC_HEADER_SIZE
;

286 i‡(
ŒcS«pHódîOff£t
 > 0) {

288 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "check_routög_pkt_d©a_öd(): SNAP hódî found & it†off£à%d\n",
ŒcS«pHódîOff£t
);

289 i‡(
	`memcmp
((
C§Uöt8
 *)(
bulkd©a
->
d
[0].
os_d©a_±r
+
ŒcS«pHódîOff£t
+
w≠iPrŸocﬁIdSNAPHódîOff£t
),

290 
w≠iPrŸocﬁIdSNAPHódî
,(wapiProtocolIdSNAPHeader))) {

292 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "check_routing_pkt_data_ind(): This isá data & NOTá WAIÖrotocolÖacket\n");

294 
¥iv
->
w≠i_uniˇ°_queued_pkt_fûãr
 = 0;

295 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "check_routing_pkt_data_ind(): WAPI AP has started usingÅheÇew unicast key,Ço more MIC failuresÉxpected (reset filter)\n");

298 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "check_routing_pkt_data_ind(): WAPI - This isá WAIÖrotocolÖacket\n");

305 (
‰mCål
 & 0x000c)>>
FRAME_CONTROL_TYPE_FIELD_OFFSET
) {

306 
IEEE802_11_FRAMETYPE_MANAGEMENT
:

307 *
‰ìBulkD©a
 = 
TRUE
;

310 if((
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2P
)&&\

311 ((
	`CSR_WIFI_80211_GET_FRAME_SUBTYPE
(
macHdrLoˇti⁄
)Ë=
CSR_WIFI_80211_FRAME_SUBTYPE_BEACON
)){

313 
C§Uöt8
 *
pSsid
, *
pSsidLí
;

314 
C§Uöt8
 
P2PWûdC¨dSsid
[
CSR_WIFI_P2P_WILDCARD_SSID_LENGTH
] = {'D', 'I', 'R', 'E', 'C', 'T', '-'};

316 
pSsidLí
 = 
macHdrLoˇti⁄
 + 
MAC_HEADER_SIZE
 + 
CSR_WIFI_BEACON_FIXED_LENGTH
;

317 
pSsid
 = 
pSsidLí
 + 2;

319 if(*(
pSsidLí
 + 1Ë>
CSR_WIFI_P2P_WILDCARD_SSID_LENGTH
){

320 if(
	`memcmp
(
pSsid
, 
P2PWûdC¨dSsid
, 
CSR_WIFI_P2P_WILDCARD_SSID_LENGTH
) == 0){

321 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "Receivedá P2P Beacon,Öass itÅo SME\n");

322  
TRUE
;

325 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "Receivedá Legacy AP beacon in P2P mode, drop it\n");

326  
FALSE
;

328  
TRUE
;

329 
IEEE802_11_FRAMETYPE_DATA
:

330 
IEEE802_11_FRAMETYPE_CONTROL
:

331 *
‰ìBulkD©a
 = 
FALSE
;

332  
FALSE
;

334 
	`unifi_îr‹
(
¥iv
, "Unh™dÀd fømêty≥ %04x\n", 
‰mCål
);

335 *
‰ìBulkD©a
 = 
TRUE
;

336  
FALSE
;

338 
	}
}

369 
	$unifi_¥o˚ss_ª˚ive_evít
(*
o•riv
,

370 
C§Uöt8
 *
sigd©a
, 
C§Uöt32
 
sigÀn
,

371 c⁄° 
bulk_d©a_∑øm_t
 *
bulkd©a
)

373 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
o•riv
;

374 
i
, 
ª˚ivî_id
;

375 
˛õ¡_id
;

376 
C§I¡16
 
sig«l_id
;

377 
C§Boﬁ
 
pktIndToSme
 = 
FALSE
, 
‰ìBulkD©a
 = FALSE;

379 
	`func_íãr
();

381 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "unifi_process_receive_event: "

383 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
((
sigd©a
Ë+ (
C§I¡16
)*0) & 0xFFFF,

384 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
((
sigd©a
Ë+ (
C§I¡16
)*1) & 0xFFFF,

385 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
((
sigd©a
Ë+ (
C§I¡16
)*2) & 0xFFFF,

386 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
((
sigd©a
Ë+ (
C§I¡16
)*3) & 0xFFFF,

387 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
((
sigd©a
Ë+ (
C§I¡16
)*4) & 0xFFFF,

388 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
((
sigd©a
Ë+ (
C§I¡16
)*5) & 0xFFFF,

389 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
((
sigd©a
Ë+ (
C§I¡16
)*6) & 0xFFFF,

390 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
((
sigd©a
Ë+ (
C§I¡16
)*7) & 0xFFFF,

391 
sigÀn
);

393 
ª˚ivî_id
 = 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
((
sigd©a
Ë+ (
C§I¡16
)) & 0xFF00;

394 
˛õ¡_id
 = (
ª˚ivî_id
 & 0x0F00Ë>> 
UDI_SENDER_ID_SHIFT
;

395 
sig«l_id
 = 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
(
sigd©a
);

400 i‡(
sig«l_id
 =
CSR_MA_PACKET_INDICATION_ID
)

402 
	#CSR_MA_PACKET_INDICATION_INTERFACETAG_OFFSET
 14

	)

403 
C§Uöt8
 
öãrÁ˚Tag
;

404 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
;

407 
öãrÁ˚Tag
 = (
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
(
sigd©a
 + 
CSR_MA_PACKET_INDICATION_INTERFACETAG_OFFSET
)) & 0xff;

408 
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

411 #ifde‡
CSR_SUPPORT_SME


412 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_IBSS
)

414 
C§Uöt8
 *
ßddr
;

416 
ßddr
 = (
C§Uöt8
 *Ë
bulkd©a
->
d
[0].
os_d©a_±r
 + 
MAC_HEADER_ADDR2_OFFSET
;

417 
	`unifi_åa˚
(
¥iv
, 
UDBG5
,

419 
öãrÁ˚Tag
, 
ßddr
[0], saddr[1], saddr[2], saddr[3], saddr[4], saddr[5]);

421 
	`uf_upd©e_°a_a˘ivôy
(
¥iv
, 
öãrÁ˚Tag
, 
ßddr
);

425 
pktIndToSme
 = 
	`check_routög_pkt_d©a_öd
(
¥iv
, 
sigd©a
, 
bulkd©a
, &
‰ìBulkD©a
, 
öãrÁ˚Priv
);

427 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "RX:ÖackëÉ¡ryÖoöàtÿdrivî from HIP,pkàtÿSME ?(%sË\n", (
pktIndToSme
)? "YES":"NO");

431 i‡(
pktIndToSme
)

434 if(
sigd©a
 !
NULL
 && 
bulkd©a
 != NULL){

435 
	`£nd_to_˛õ¡
(
¥iv
,Öriv->
sme_˛i
, 
ª˚ivî_id
, 
sigd©a
, 
sigÀn
, 
bulkd©a
);

438 
	`unifi_îr‹
(
¥iv
, "unifi_receive_event2: sigdata or Bulkdata is NULL \n");

440 #ifde‡
CSR_NATIVE_LINUX


441 
	`£nd_to_˛õ¡
(
¥iv
,Öriv->
wext_˛õ¡
,

442 
ª˚ivî_id
,

443 
sigd©a
, 
sigÀn
, 
bulkd©a
);

451 i‡(!
ª˚ivî_id
) {

452 if(
sig«l_id
 =
CSR_MA_VIF_AVAILABILITY_INDICATION_ID
) {

453 
	`uf_¥o˚ss_ma_vif_avaûibûôy_öd
(
¥iv
, 
sigd©a
, 
sigÀn
);

455 i‡(
sig«l_id
 !
CSR_MA_PACKET_INDICATION_ID
) {

456 
	`£nd_to_˛õ¡
(
¥iv
,Öriv->
sme_˛i
, 
ª˚ivî_id
, 
sigd©a
, 
sigÀn
, 
bulkd©a
);

457 #ifde‡
CSR_NATIVE_LINUX


458 
	`£nd_to_˛õ¡
(
¥iv
,Öriv->
wext_˛õ¡
,

459 
ª˚ivî_id
,

460 
sigd©a
, 
sigÀn
, 
bulkd©a
);

466 #i‡(
	`deföed
(
CSR_SUPPORT_SME
Ë&& deföed(
CSR_WIFI_SECURITY_WAPI_ENABLE
))

467 
	#CSR_MA_PACKET_INDICATION_RECEPTION_STATUS_OFFSET
 (
CSR_SIGNAL_PRIMITIVE_HEADER
Ë+ 22

	)

468 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
;

469 
C§Uöt8
 
öãrÁ˚Tag
;

470 
C§Uöt16
 
ª˚±i⁄Sètus
 = 
CSR_RX_SUCCESS
;

473 
öãrÁ˚Tag
 = (
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
(
sigd©a
 + 
CSR_MA_PACKET_INDICATION_INTERFACETAG_OFFSET
)) & 0xff;

474 
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

477 
ª˚±i⁄Sètus
 = 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
(
sigd©a
 + 
CSR_MA_PACKET_INDICATION_RECEPTION_STATUS_OFFSET
);

480 i‡((!
‰ìBulkD©a
) &&

481 (
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_STA
) &&

482 (
ª˚±i⁄Sètus
 =
CSR_MICHAEL_MIC_ERROR
) &&

483 ((
¥iv
->
w≠i_mu…iˇ°_fûãr
 == 1)

484 #ifde‡
CSR_WIFI_SECURITY_WAPI_SW_ENCRYPTION


485 || (
¥iv
->
w≠i_uniˇ°_fûãr
 == 1)

489 
CSR_SIGNAL
 
sig«l
;

490 
C§Uöt8
 *
de°Addr
;

491 
C§Resu…
 
ªs
;

492 
C§Uöt16
 
öãrÁ˚Tag
 = 0;

493 
C§Boﬁ
 
isMˇ°Pkt
 = 
TRUE
;

495 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "Receivedá WAPI dataÖacket whenÅhe Unicast/Multicast filter is set\n");

496 
ªs
 = 
	`ªad_u≈ack_sig«l
(
sigd©a
, &
sig«l
);

497 i‡(
ªs
) {

498 
	`unifi_îr‹
(
¥iv
, "Received unknown or corrupted signal (0x%x).\n",

499 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
(
sigd©a
));

504 
de°Addr
 = (
C§Uöt8
 *Ë
bulkd©a
->
d
[0].
os_d©a_±r
 + 
MAC_HEADER_ADDR1_OFFSET
;

505 
isMˇ°Pkt
 = (
de°Addr
[0] & 0x01Ë? 
TRUE
 : 
FALSE
;

506 
	`unifi_åa˚
(
¥iv
, 
UDBG6
,

508 ((
isMˇ°Pkt
) ? "Multiast":"Unicast"),

509 ((
¥iv
->
w≠i_mu…iˇ°_fûãr
) ? "Enabled":"Disabled"),

510 ((
¥iv
->
w≠i_uniˇ°_fûãr
) ? "Enabled":"Disabled"));

512 i‡(((
isMˇ°Pkt
Ë&& (
¥iv
->
w≠i_mu…iˇ°_fûãr
 == 1))

513 #ifde‡
CSR_WIFI_SECURITY_WAPI_SW_ENCRYPTION


514 || ((!
isMˇ°Pkt
Ë&& (
¥iv
->
w≠i_uniˇ°_fûãr
 == 1))

518 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "SendingÅhe WAPI MPDU for MIC check\n");

519 
	`C§WifiRouãrCålW≠iRxMicCheckIndSíd
(
¥iv
->
CSR_WIFI_SME_IFACEQUEUE
, 0, 
öãrÁ˚Tag
, 
sigÀn
, 
sigd©a
, 
bulkd©a
->
d
[0].
d©a_Àngth
, (
C§Uöt8
*)bulkd©a->d[0].
os_d©a_±r
);

521 
i
 = 0; i < 
UNIFI_MAX_DATA_REFERENCES
; i++) {

522 i‡(
bulkd©a
->
d
[
i
].
d©a_Àngth
 != 0) {

523 
	`unifi_√t_d©a_‰ì
(
¥iv
, (*)&
bulkd©a
->
d
[
i
]);

526 
	`func_exô
();

541 if(!
‰ìBulkD©a
){

542 i‡((
˛õ¡_id
 < 
MAX_UDI_CLIENTS
) &&

543 (&
¥iv
->
ul_˛õ¡s
[
˛õ¡_id
] !¥iv->
loggög_˛õ¡
)) {

544 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "CallÅheÑegistered clients handler callback func\n");

545 
	`£nd_to_˛õ¡
(
¥iv
, &¥iv->
ul_˛õ¡s
[
˛õ¡_id
],

546 
ª˚ivî_id
,

547 
sigd©a
, 
sigÀn
, 
bulkd©a
);

555 
sig«l_id
)

557 #ifde‡
UNIFI_SNIFF_ARPHRD


558 
CSR_MA_SNIFFDATA_INDICATION_ID
:

562 
CSR_MA_PACKET_INDICATION_ID
:

563 i‡(!
‰ìBulkD©a
)

569 
i
 = 0; i < 
UNIFI_MAX_DATA_REFERENCES
; i++) {

570 i‡(
bulkd©a
->
d
[
i
].
d©a_Àngth
 != 0) {

571 
	`unifi_√t_d©a_‰ì
(
¥iv
, (*)&
bulkd©a
->
d
[
i
]);

576 
	`func_exô
();

577 
	}
}

580 #ifde‡
CSR_WIFI_RX_PATH_SPLIT


581 
C§Boﬁ
 
	$sig«l_buf„r_is_fuŒ
(
unifi_¥iv_t
* 
¥iv
)

583  (((
¥iv
->
rxSig«lBuf„r
.
wrôePoöãr
 + 1)%Öriv->rxSig«lBuf„r.
size
Ë=’riv->rxSig«lBuf„r.
ªadPoöãr
));

584 
	}
}

586 
	$unifi_rx_queue_Êush
(*
o•riv
)

588 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
o•riv
;

590 
	`func_íãr
();

591 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "rx_wq_handler: RdPtr = %d WritePtr = %d\n",

592 
¥iv
->
rxSig«lBuf„r
.
ªadPoöãr
,¥iv->rxSig«lBuf„r.
wrôePoöãr
);

593 if(
¥iv
 !
NULL
) {

594 
C§Uöt8
 
ªadPoöãr
 = 
¥iv
->
rxSig«lBuf„r
.readPointer;

595 
ªadPoöãr
 !
¥iv
->
rxSig«lBuf„r
.
wrôePoöãr
)

597 
rx_buff_°ru˘_t
 *
buf
 = &
¥iv
->
rxSig«lBuf„r
.
rx_buff
[
ªadPoöãr
];

598 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "rx_wq_handler: RdPtr = %d WritePtr = %d\n",

599 
ªadPoöãr
,
¥iv
->
rxSig«lBuf„r
.
wrôePoöãr
);

600 
	`unifi_¥o˚ss_ª˚ive_evít
(
¥iv
, 
buf
->
buÂå
, buf->
sig_Àn
, &buf->
d©a_±rs
);

601 
ªadPoöãr
 ++;

602 if(
ªadPoöãr
 >
¥iv
->
rxSig«lBuf„r
.
size
) {

603 
ªadPoöãr
 = 0;

606 
¥iv
->
rxSig«lBuf„r
.
ªadPoöãr
 =ÑeadPointer;

608 #ifde‡
CSR_WIFI_NAPI_ENABLE


609 
	`«pi_scheduÀ_√w_∑ckës
(
¥iv
);

612 
	`func_exô
();

613 
	}
}

615 
	$rx_wq_h™dÀr
(
w‹k_°ru˘
 *
w‹k
)

617 
unifi_¥iv_t
 *
¥iv
 = 
	`c⁄èöî_of
(
w‹k
, unifi_¥iv_t, 
rx_w‹k_°ru˘
);

618 
	`unifi_rx_queue_Êush
(
¥iv
);

619 
	}
}

653 
	$unifi_ª˚ive_evít
(*
o•riv
,

654 
C§Uöt8
 *
sigd©a
, 
C§Uöt32
 
sigÀn
,

655 c⁄° 
bulk_d©a_∑øm_t
 *
bulkd©a
)

657 #ifde‡
CSR_WIFI_RX_PATH_SPLIT


658 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
o•riv
;

659 
C§Uöt8
 
wrôePoöãr
;

660 
i
;

661 
rx_buff_°ru˘_t
 * 
rx_buff
;

662 
	`func_íãr
();

664 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "unifi_receive_event: "

666 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
((
sigd©a
Ë+ (
C§I¡16
)*0) & 0xFFFF,

667 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
((
sigd©a
Ë+ (
C§I¡16
)*1) & 0xFFFF,

668 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
((
sigd©a
Ë+ (
C§I¡16
)*2) & 0xFFFF,

669 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
((
sigd©a
Ë+ (
C§I¡16
)*3) & 0xFFFF,

670 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
((
sigd©a
Ë+ (
C§I¡16
)*4) & 0xFFFF,

671 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
((
sigd©a
Ë+ (
C§I¡16
)*5) & 0xFFFF,

672 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
((
sigd©a
Ë+ (
C§I¡16
)*6) & 0xFFFF,

673 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
((
sigd©a
Ë+ (
C§I¡16
)*7Ë& 0xFFFF, 
sigÀn
);

674 if(
	`sig«l_buf„r_is_fuŒ
(
¥iv
)) {

675 
	`unifi_îr‹
(
¥iv
,"TO HOST signal queue FULL droppingÅhe PDU\n");

676 
i
 = 0; i < 
UNIFI_MAX_DATA_REFERENCES
; i++) {

677 i‡(
bulkd©a
->
d
[
i
].
d©a_Àngth
 != 0) {

678 
	`unifi_√t_d©a_‰ì
(
¥iv
, (*)&
bulkd©a
->
d
[
i
]);

683 
wrôePoöãr
 = 
¥iv
->
rxSig«lBuf„r
.writePointer;

684 
rx_buff
 = &
¥iv
->
rxSig«lBuf„r
.rx_buff[
wrôePoöãr
];

685 
	`mem˝y
(
rx_buff
->
buÂå
,
sigd©a
,
sigÀn
);

686 
rx_buff
->
sig_Àn
 = 
sigÀn
;

687 
rx_buff
->
d©a_±rs
 = *
bulkd©a
;

688 
wrôePoöãr
++;

689 if(
wrôePoöãr
 >
¥iv
->
rxSig«lBuf„r
.
size
) {

690 
wrôePoöãr
 =0;

692 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "unifi_ª˚ive_evít:wrôePå = %d\n",¥iv->
rxSig«lBuf„r
.
wrôePoöãr
);

693 
¥iv
->
rxSig«lBuf„r
.
wrôePoöãr
 = writePointer;

695 #i‚de‡
CSR_WIFI_RX_PATH_SPLIT_DONT_USE_WQ


696 
	`queue_w‹k
(
¥iv
->
rx_w‹kqueue
, &¥iv->
rx_w‹k_°ru˘
);

700 
	`unifi_¥o˚ss_ª˚ive_evít
(
o•riv
, 
sigd©a
, 
sigÀn
, 
bulkd©a
);

702 
	`func_exô
();

703 
	}
}

	@unifi_os.h

17 #i‚de‡
__UNIFI_OS_LINUX_H__


18 
	#__UNIFI_OS_LINUX_H__
 1

	)

20 
	~<löux/kî√l.h
>

21 
	~<löux/time.h
>

22 
	~<löux/li°.h
>

23 
	~<löux/dñay.h
>

24 
	~<löux/°rög.h
>

29 
	~<°ddef.h
>

33 
	#INLINE
 
ölöe


	)

36 
C§Resu…
 
unifi_√t_d©a_mÆloc
(*
o•riv
, 
bulk_d©a_desc_t
 *
bulk_d©a_¶Ÿ
, 
size
);

37 
unifi_√t_d©a_‰ì
(*
o•riv
, 
bulk_d©a_desc_t
 *
bulk_d©a_¶Ÿ
);

38 
	#CSR_WIFI_ALIGN_BYTES
 4

	)

39 
C§Resu…
 
unifi_√t_dma_Æign
(*
o•riv
, 
bulk_d©a_desc_t
 *
bulk_d©a_¶Ÿ
);

45 #ifde‡
__KERNEL__


46 
	#unifi2ho°_16
(
n
Ë(
	`__À16_to_˝u
(“)))

	)

47 
	#unifi2ho°_32
(
n
Ë(
	`__À32_to_˝u
(“)))

	)

48 
	#ho°2unifi_16
(
n
Ë(
	`__˝u_to_À16
(“)))

	)

49 
	#ho°2unifi_32
(
n
Ë(
	`__˝u_to_À32
(“)))

	)

53 
unifi_debug
;

56 #ifde‡
UNIFI_DEBUG


64 
	#func_íãr
() \

66 i‡(
unifi_debug
 >= 5) { \

67 
	`¥ötk
("unifi: => %s\n", 
__FUNCTION__
); \

69 } 0)

	)

70 
	#func_exô
() \

72 i‡(
unifi_debug
 >= 5) { \

73 
	`¥ötk
("unifi: <%s\n", 
__FUNCTION__
); \

75 } 0)

	)

76 
	#func_exô_r
(
_rc
) \

78 i‡(
unifi_debug
 >= 5) { \

79 
	`¥ötk
("unifi: <%†%d\n", 
__FUNCTION__
, ()(
_rc
)); \

81 } 0)

	)

84 
	#ASSERT
(
c⁄d
) \

86 i‡(!(
c⁄d
)) { \

87 
	`¥ötk
("Assertion failed in %sát %s:%d: %s\n", \

88 
__FUNCTION__
, 
__FILE__
, 
__LINE__
, #cond); \

90 } 0)

	)

93 
unifi_dump
(*
o•riv
, 
lvl
, c⁄° *
msg
, *
mem
, 
C§Uöt16
 
Àn
);

94 
dump
(*
mem
, 
C§Uöt16
 
Àn
);

95 
dump16
(*
mem
, 
C§Uöt16
 
Àn
);

96 #ifde‡
CSR_WIFI_HIP_DEBUG_OFFLINE


97 
dump_°r
(*
mem
, 
C§Uöt16
 
Àn
);

100 
unifi_îr‹
(* 
o•riv
, c⁄° *
fmt
, ...);

101 
unifi_w¨nög
(* 
o•riv
, c⁄° *
fmt
, ...);

102 
unifi_nŸi˚
(* 
o•riv
, c⁄° *
fmt
, ...);

103 
unifi_öfo
(* 
o•riv
, c⁄° *
fmt
, ...);

105 
unifi_åa˚
(* 
o•riv
, 
Àvñ
, c⁄° *
fmt
, ...);

110 
	#func_íãr
()

	)

111 
	#func_exô
()

	)

112 
	#func_exô_r
(
_rc
)

	)

114 
	#ASSERT
(
c⁄d
)

	)

116 
ölöe
 
	$unifi_dump
(*
o•riv
, 
lvl
, c⁄° *
msg
, *
mem
, 
C§Uöt16
 
Àn
Ë{
	}
}

117 
ölöe
 
	$dump
(*
mem
, 
C§Uöt16
 
Àn
Ë{
	}
}

118 
ölöe
 
	$dump16
(*
mem
, 
C§Uöt16
 
Àn
Ë{
	}
}

119 #ifde‡
CSR_WIFI_HIP_DEBUG_OFFLINE


120 
ölöe
 
	$dump_°r
(*
mem
, 
C§Uöt16
 
Àn
Ë{
	}
}

123 
unifi_îr‹_n›
(* 
o•riv
, c⁄° *
fmt
, ...);

124 
unifi_åa˚_n›
(* 
o•riv
, 
Àvñ
, c⁄° *
fmt
, ...);

125 
	#unifi_îr‹
 if(1);
unifi_îr‹_n›


	)

126 
	#unifi_w¨nög
 if(1);
unifi_îr‹_n›


	)

127 
	#unifi_nŸi˚
 if(1);
unifi_îr‹_n›


	)

128 
	#unifi_öfo
 if(1);
unifi_îr‹_n›


	)

129 
	#unifi_åa˚
 if(1);
unifi_åa˚_n›


	)

135 
	#UDBG0
 0

	)

136 
	#UDBG1
 1

	)

137 
	#UDBG2
 2

	)

138 
	#UDBG3
 3

	)

139 
	#UDBG4
 4

	)

140 
	#UDBG5
 5

	)

141 
	#UDBG6
 6

	)

142 
	#UDBG7
 7

	)

	@unifi_pdu_processing.c

18 
	~<löux/ty≥s.h
>

19 
	~<löux/ëhîdevi˚.h
>

20 
	~<löux/vmÆloc.h
>

22 
	~"c§_wifi_hù_unifi.h
"

23 
	~"c§_wifi_hù_c⁄vîsi⁄s.h
"

24 
	~"c§_time.h
"

25 
	~"unifi_¥iv.h
"

26 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,13)

27 
	~<√t/iw_h™dÀr.h
>

29 
	~<√t/pkt_sched.h
>

31 #ifde‡
CSR_SUPPORT_SME


32 
	$_upd©e_buf„ªd_pkt_∑øms_a·î_Æignmít
(
unifi_¥iv_t
 *
¥iv
, 
bulk_d©a_∑øm_t
 *
bulkd©a
,

33 
tx_buf„ªd_∑ckës_t
* 
buf„ªd_pkt
)

35 
sk_buff
 *
skb
 ;

36 
C§Uöt32
 
Æign_off£t
;

38 i‡(
¥iv
 =
NULL
 || 
bulkd©a
 =NULL || 
buf„ªd_pkt
 == NULL){

42 
skb
 = (
sk_buff
*)
bulkd©a
->
d
[0].
os_√t_buf_±r
;

43 
Æign_off£t
 = (
C§Uöt32
)()(
bulkd©a
->
d
[0].
os_d©a_±r
Ë& (
CSR_WIFI_ALIGN_BYTES
-1);

44 if(
Æign_off£t
){

45 
	`skb_puŒ
(
skb
,
Æign_off£t
);

48 
buf„ªd_pkt
->
bulkd©a
.
os_d©a_±r
 = bulkd©a->
d
[0].os_data_ptr;

49 
buf„ªd_pkt
->
bulkd©a
.
d©a_Àngth
 = bulkd©a->
d
[0].data_length;

50 
buf„ªd_pkt
->
bulkd©a
.
os_√t_buf_±r
 = bulkd©a->
d
[0].os_net_buf_ptr;

51 
buf„ªd_pkt
->
bulkd©a
.
√t_buf_Àngth
 = bulkd©a->
d
[0].net_buf_length;

52 
	}
}

56 
	$unifi_‰ame_ma_∑ckë_ªq
(
unifi_¥iv_t
 *
¥iv
, 
CSR_PRIORITY
 
¥i‹ôy
,

57 
CSR_RATE
 
TønsmôR©e
, 
CSR_CLIENT_TAG
 
ho°Tag
,

58 
C§Uöt16
 
öãrÁ˚Tag
, 
CSR_TRANSMISSION_CONTROL
 
å™smissi⁄C⁄åﬁ
,

59 
CSR_PROCESS_ID
 
ÀSídîPro˚ssId
, 
C§Uöt8
 *
≥îMacAddªss
,

60 
CSR_SIGNAL
 *
sig«l
)

63 
CSR_MA_PACKET_REQUEST
 *
ªq
 = &
sig«l
->
u
.
MaPackëReque°
;

64 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
;

65 
C§Uöt8
 
ba_£ssi⁄_idx
 = 0;

66 
ba_£ssi⁄_tx_°ru˘
 *
ba_£ssi⁄
 = 
NULL
;

67 
C§Uöt8
 *
ba_addr
 = 
NULL
;

69 
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

71 
	`UF_TRACE_MAC
(
¥iv
, 
UDBG5
, "I¿unifi_‰ame_ma_∑ckë_ªq, Fømêf‹ Pìr:", 
≥îMacAddªss
);

72 
sig«l
->
Sig«lPrimôiveHódî
.
Sig«lId
 = 
CSR_MA_PACKET_REQUEST_ID
;

73 
sig«l
->
Sig«lPrimôiveHódî
.
Re˚ivîPro˚ssId
 = 0;

74 
sig«l
->
Sig«lPrimôiveHódî
.
SídîPro˚ssId
 = 
ÀSídîPro˚ssId
;

77 
ªq
->
Pri‹ôy
 = 
¥i‹ôy
;

78 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "Tx Fømêwôh Pri‹ôy: 0x%x\n", 
ªq
->
Pri‹ôy
);

84 
ªq
->
TønsmôR©e
 = TransmitRate;

89 
ªq
->
Tønsmissi⁄C⁄åﬁ
 = 
å™smissi⁄C⁄åﬁ
;

90 
ªq
->
VútuÆI¡îÁ˚Idítifõr
 =

91 
	`uf_gë_vif_idítifõr
(
öãrÁ˚Priv
->
öãrÁ˚Mode
,
öãrÁ˚Tag
);

92 
	`mem˝y
(
ªq
->
Ra
.
x
, 
≥îMacAddªss
, 
ETH_ALEN
);

94 i‡(
ho°Tag
 == 0xffffffff) {

95 
ªq
->
Ho°Tag
 = 
öãrÁ˚Priv
->
èg
++;

96 
ªq
->
Ho°Tag
 |= 0x40000000;

97 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "√w ho°Åagássig√d = 0x%x\n", 
ªq
->
Ho°Tag
);

98 
öãrÁ˚Priv
->
èg
 &= 0x0fffffff;

100 
ªq
->
Ho°Tag
 = 
ho°Tag
;

101 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "ho°Åag gŸ from SME = 0x%x\n", 
ªq
->
Ho°Tag
);

104 if(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
 ||

105 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
){

106 
ba_addr
 = 
≥îMacAddªss
;

108 
ba_addr
 = 
öãrÁ˚Priv
->
bssid
.
a
;

110 
ba_£ssi⁄_idx
=0; ba_£ssi⁄_idx < 
MAX_SUPPORTED_BA_SESSIONS_TX
; ba_session_idx++){

111 
ba_£ssi⁄
 = 
öãrÁ˚Priv
->
ba_£ssi⁄_tx
[
ba_£ssi⁄_idx
];

112 i‡(
ba_£ssi⁄
){

113 i‡((!
	`memcmp
(
ba_£ssi⁄
->
macAddªss
.
a
, 
ba_addr
, 
ETH_ALEN
)Ë&& (ba_£ssi⁄->
tID
 =
¥i‹ôy
)){

114 
ªq
->
Tønsmissi⁄C⁄åﬁ
 |
CSR_ALLOW_BA
;

120 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "leaving unifi_frame_ma_packet_req\n");

121 
	}
}

123 #ifde‡
CSR_SUPPORT_SME


125 
	#TRANSMISSION_CONTROL_TRIGGER_MASK
 0x0001

	)

126 
	#TRANSMISSION_CONTROL_EOSP_MASK
 0x0002

	)

129 
	$‰ame_™d_£nd_queued_pdu
(
unifi_¥iv_t
* 
¥iv
,
tx_buf„ªd_∑ckës_t
* 
buf„ªd_pkt
,

130 
C§WifiRouãrCålSèInfo_t
 *
°aRec‹d
,
C§Boﬁ
 
m‹eD©a
 , C§Boﬁ 
eo•
)

133 
CSR_SIGNAL
 
sig«l
;

134 
bulk_d©a_∑øm_t
 
bulkd©a
;

135 
ªsu…
;

136 
C§Uöt8
 
toDs
, 
‰omDs
, 
macHódîLígthInByãs
 = 
MAC_HEADER_SIZE
;

137 
C§Uöt8
 *
qc
;

138 
C§Uöt16
 *
fc
 = (C§Uöt16*)(
buf„ªd_pkt
->
bulkd©a
.
os_d©a_±r
);

139 
lock_Êags
;

140 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "‰ame_™d_£nd_queued_pdu wôh m‹eD©a: %d , EOSP: %d\n",
m‹eD©a
,
eo•
);

141 
	`unifi_‰ame_ma_∑ckë_ªq
(
¥iv
, 
buf„ªd_pkt
->
¥i‹ôy
, buf„ªd_pkt->
øã
, buf„ªd_pkt->
ho°Tag
,

142 
buf„ªd_pkt
->
öãrÁ˚Tag
, buf„ªd_pkt->
å™smissi⁄C⁄åﬁ
,

143 
buf„ªd_pkt
->
ÀSídîPro˚ssId
, buf„ªd_pkt->
≥îMacAddªss
.
a
, &
sig«l
);

144 
bulkd©a
.
d
[0].
os_d©a_±r
 = 
buf„ªd_pkt
->bulkdata.os_data_ptr;

145 
bulkd©a
.
d
[0].
d©a_Àngth
 = 
buf„ªd_pkt
->bulkdata.data_length;

146 
bulkd©a
.
d
[0].
os_√t_buf_±r
 = 
buf„ªd_pkt
->bulkdata.os_net_buf_ptr;

147 
bulkd©a
.
d
[0].
√t_buf_Àngth
 = 
buf„ªd_pkt
->bulkdata.net_buf_length;

148 
bulkd©a
.
d
[1].
os_d©a_±r
 = 
NULL
;

149 
bulkd©a
.
d
[1].
d©a_Àngth
 = 0;

150 
bulkd©a
.
d
[1].
os_√t_buf_±r
 =0;

151 
bulkd©a
.
d
[1].
√t_buf_Àngth
 =0;

153 if(
m‹eD©a
) {

154 *
fc
 |
	`˝u_to_À16
(
IEEE802_11_FC_MOREDATA_MASK
);

156 *
fc
 &
	`˝u_to_À16
(~
IEEE802_11_FC_MOREDATA_MASK
);

159 if((
°aRec‹d
 !
NULL
)&& (°aRec‹d->
wmmOrQosE«bÀd
 =
TRUE
))

161 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "‰ame_™d_£nd_queued_pdu WMM E«bÀd: %d \n",
°aRec‹d
->
wmmOrQosE«bÀd
);

163 
toDs
 = (*
fc
 & 
	`˝u_to_À16
(
IEEE802_11_FC_TO_DS_MASK
))?1 : 0;

164 
‰omDs
 = (*
fc
 & 
	`˝u_to_À16
(
IEEE802_11_FC_FROM_DS_MASK
))? 1: 0;

166 
	`À16_to_˝u
(*
fc
Ë& 
IEEE80211_FC_SUBTYPE_MASK
)

168 
IEEE802_11_FC_TYPE_QOS_DATA
 & 
IEEE80211_FC_SUBTYPE_MASK
:

169 
IEEE802_11_FC_TYPE_QOS_NULL
 & 
IEEE80211_FC_SUBTYPE_MASK
:

171 i‡(
‰omDs
 && 
toDs
) {

173 
macHódîLígthInByãs
 +(
QOS_CONTROL_HEADER_SIZE
 + 6);

175 
macHódîLígthInByãs
 +
QOS_CONTROL_HEADER_SIZE
;

179 i‡(*
fc
 & 
	`˝u_to_À16
(
IEEE80211_FC_ORDER_MASK
)) {

180 
macHódîLígthInByãs
 +
HT_CONTROL_HEADER_SIZE
;

181 
qc
 = (
C§Uöt8
*)(
buf„ªd_pkt
->
bulkd©a
.
os_d©a_±r
 + (
macHódîLígthInByãs
-6));

183 
qc
 = (
C§Uöt8
*)(
buf„ªd_pkt
->
bulkd©a
.
os_d©a_±r
 + (
macHódîLígthInByãs
-2));

185 *
qc
 = 
eo•
 ? *qc | (1 << 4) : *qc & (~(1 << 4));

188 i‡(
‰omDs
 && 
toDs
)

189 
macHódîLígthInByãs
 += 6;

193 
ªsu…
 = 
	`ul_£nd_sig«l_u≈acked
(
¥iv
, &
sig«l
, &
bulkd©a
);

194 if(
ªsu…
){

195 
	`_upd©e_buf„ªd_pkt_∑øms_a·î_Æignmít
(
¥iv
, &
bulkd©a
,
buf„ªd_pkt
);

199 i‡(
ªsu…
 !-
ENOSPC
) {

201 i‡(!
¥iv
->
noOfPktQueuedInDrivî
) {

202 
	`unifi_îr‹
(
¥iv
, "packets queued in driver 0 still decrementing\n");

204 
	`•ö_lock_úqßve
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

205 
¥iv
->
noOfPktQueuedInDrivî
--;

206 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

209 i‡(
°aRec‹d
) {

210 
	`•ö_lock_úqßve
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

211 i‡(!
°aRec‹d
->
noOfPktQueued
) {

212 
	`unifi_îr‹
(
¥iv
, "packets queued in driverÖer station is 0 still decrementing\n");

214 
°aRec‹d
->
noOfPktQueued
--;

217 i‡(
ªsu…
){

218 i‡(
°aRec‹d
->
nuŒD©aHo°Tag
 =
buf„ªd_pkt
->
ho°Tag
){

219 
°aRec‹d
->
nuŒD©aHo°Tag
 = 
INVALID_HOST_TAG
;

222 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

226  
ªsu…
;

227 
	}
}

228 #ifde‡
CSR_SUPPORT_SME


230 
	$£t_eo•_å™smô_˘æ
(
unifi_¥iv_t
 *
¥iv
, 
li°_hód
 *
txLi°
)

233 
tx_buf„ªd_∑ckës_t
 *
tx_q_ôem
 = 
NULL
;

234 
li°_hód
 *
li°Hód
;

235 
li°_hód
 *
∂a˚Hﬁdî
;

236 
lock_Êags
;

239 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "entering set_eosp_transmit_ctrl\n");

241 i‡(
	`li°_em±y
(
txLi°
)) {

242 
	`unifi_w¨nög
(
¥iv
, "In set_eosp_transmit_ctrl,ÅheÜist isÉmpty\n");

248 
	`•ö_lock_úqßve
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

249 
	`li°_f‹_óch_¥ev_ß„
(
li°Hód
, 
∂a˚Hﬁdî
, 
txLi°
) {

250 
tx_q_ôem
 = 
	`li°_íåy
(
li°Hód
, 
tx_buf„ªd_∑ckës_t
, 
q
);

251 
tx_q_ôem
->
å™smissi⁄C⁄åﬁ
 |
TRANSMISSION_CONTROL_EOSP_MASK
;

252 
tx_q_ôem
->
å™smissi⁄C⁄åﬁ
 = (tx_q_ôem->å™smissi⁄C⁄åﬁ & ~(
CSR_NO_CONFIRM_REQUIRED
));

253 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,

254 "£t_eo•_å™smô_˘æ Tønsmissi⁄ C⁄åﬁ = 0x%x ho°Tag = 0x%x \n",
tx_q_ôem
->
å™smissi⁄C⁄åﬁ
,tx_q_ôem->
ho°Tag
);

255 
	`unifi_åa˚
(
¥iv
,
UDBG3
,"ö së_eo•_å™smô_˘æÇo.o‡buf„ªd føme†%d\n",¥iv->
noOfPktQueuedInDrivî
);

258 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

259 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,"Li° Em±y %d\n",
	`li°_em±y
(
txLi°
));

260 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "leaving set_eosp_transmit_ctrl\n");

262 
	}
}

265 
	$£nd_vif_avaûibûôy_r•
(
unifi_¥iv_t
 *
¥iv
,
CSR_VIF_IDENTIFIER
 
vif
,
CSR_RESULT_CODE
 
ªsu…Code
)

267 
CSR_SIGNAL
 
sig«l
;

268 
CSR_MA_VIF_AVAILABILITY_RESPONSE
 *
r•
;

269 
bulk_d©a_∑øm_t
 *
bulkd©a
 = 
NULL
;

270 
r
;

272 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "£nd_vif_avaûibûôy_r• : invoked wôhÑesu…Codê%d \n", 
ªsu…Code
);

274 
	`mem£t
(&
sig«l
,0,(
CSR_SIGNAL
));

275 
r•
 = &
sig«l
.
u
.
MaVifAvaûabûôyRe•⁄£
;

276 
r•
->
VútuÆI¡îÁ˚Idítifõr
 = 
vif
;

277 
r•
->
Resu…Code
 = 
ªsu…Code
;

278 
sig«l
.
Sig«lPrimôiveHódî
.
Sig«lId
 = 
CSR_MA_VIF_AVAILABILITY_RESPONSE_ID
;

279 
sig«l
.
Sig«lPrimôiveHódî
.
Re˚ivîPro˚ssId
 = 0;

280 
sig«l
.
Sig«lPrimôiveHódî
.
SídîPro˚ssId
 = 
¥iv
->
√tdev_˛õ¡
->
£ndî_id
;

283 
r
 = 
	`ul_£nd_sig«l_u≈acked
(
¥iv
, &
sig«l
, 
bulkd©a
);

284 if(
r
) {

285 
	`unifi_îr‹
(
¥iv
,"AvaûibûôyÑe•⁄£ sídög faûed %x sètu†%d\n",
vif
,
r
);

288 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "£nd_vif_avaûibûôy_r• : sètu†%d \n", 
r
);

290 
	}
}

294 
	$vîify_™d_accomod©e_tx_∑ckë
(
unifi_¥iv_t
 *
¥iv
)

296 
tx_buf„ªd_∑ckës_t
 *
tx_q_ôem
;

297 
lock_Êags
;

298 
li°_hód
 *
li°Hód
, *
li°
;

299 
li°_hód
 *
∂a˚Hﬁdî
;

300 
C§Uöt8
 
i
, 
j
,
eo•Fømedñëed
=0;

301 
C§Boﬁ
 
thªshﬁdEx˚deDueToBrﬂdˇ°
 = 
TRUE
;

304 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->interfacePriv[0];

305 
C§WifiRouãrCålSèInfo_t
 *
°aInfo
 = 
NULL
;

307 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "entering verify_and_accomodate_tx_packet\n");

309 
i
 = 0; i < 
UNIFI_MAX_CONNECTIONS
; i++) {

310 
°aInfo
 = 
öãrÁ˚Priv
->°aInfo[
i
];

311 i‡(
°aInfo
 && (°aInfo->
noOfPktQueued
 >
CSR_WIFI_DRIVER_MAX_PKT_QUEUING_THRESHOLD_PER_PEER
)) {

316 
	`unifi_åa˚
(
¥iv
,
UDBG3
,"numbî o‡°©i⁄Ökt†queued %d f‹ sè id = %d\n", 
°aInfo
->
noOfPktQueued
, sèInfo->
aid
);

317 
j
 = 0; j < 
MAX_ACCESS_CATOGORY
; j++) {

318 
li°
 = &
°aInfo
->
d©aPdu
[
j
];

319 
	`•ö_lock_úqßve
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

320 
	`li°_f‹_óch_ß„
(
li°Hód
, 
∂a˚Hﬁdî
, 
li°
) {

321 
tx_q_ôem
 = 
	`li°_íåy
(
li°Hód
, 
tx_buf„ªd_∑ckës_t
, 
q
);

322 
	`li°_dñ
(
li°Hód
);

323 
thªshﬁdEx˚deDueToBrﬂdˇ°
 = 
FALSE
;

324 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
tx_q_ôem
->
bulkd©a
);

325 
	`k‰ì
(
tx_q_ôem
);

326 
tx_q_ôem
 = 
NULL
;

327 i‡(!
¥iv
->
noOfPktQueuedInDrivî
) {

328 
	`unifi_îr‹
(
¥iv
, "∑ckë†queued i¿drivî 0 stû»de¸emítög i¿%s\n", 
__FUNCTION__
);

331 
¥iv
->
noOfPktQueuedInDrivî
--;

335 i‡(!
°aInfo
->
noOfPktQueued
) {

336 
	`unifi_îr‹
(
¥iv
, "∑ckë†queued i¿drivîÖî sèti⁄ i†0 stû»de¸emítög i¿%s\n", 
__FUNCTION__
);

338 
	`•ö_lock
(&
¥iv
->
°aRec‹d_lock
);

339 
°aInfo
->
noOfPktQueued
--;

340 
	`•ö_u∆ock
(&
¥iv
->
°aRec‹d_lock
);

344 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

348 i‡(
thªshﬁdEx˚deDueToBrﬂdˇ°
 && 
öãrÁ˚Priv
->
noOfbrﬂdˇ°PktQueued
 > 
CSR_WIFI_DRIVER_MINIMUM_BROADCAST_PKT_THRESHOLD
 ) {

352 
	`•ö_lock_úqßve
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

353 
	`li°_f‹_óch_ß„
(
li°Hód
, 
∂a˚Hﬁdî
, &
öãrÁ˚Priv
->
gíîicMu…iˇ°OrBrﬂdCa°Fømes
) {

354 
tx_q_ôem
 = 
	`li°_íåy
(
li°Hód
, 
tx_buf„ªd_∑ckës_t
, 
q
);

355 if(
eo•Fømedñëed
){

356 
tx_q_ôem
->
å™smissi⁄C⁄åﬁ
 |
TRANSMISSION_CONTROL_EOSP_MASK
;

357 
tx_q_ôem
->
å™smissi⁄C⁄åﬁ
 = (tx_q_ôem->å™smissi⁄C⁄åﬁ & ~(
CSR_NO_CONFIRM_REQUIRED
));

358 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,"upd©ögÉo• f‹Çexà∑ckë ho°Tag:0x%x ",
tx_q_ôem
->
ho°Tag
);

359 
eo•Fømedñëed
 =0;

363 if(
tx_q_ôem
->
å™smissi⁄C⁄åﬁ
 & 
TRANSMISSION_CONTROL_EOSP_MASK
 ){

364 
eo•Fømedñëed
 = 1;

366 
	`unifi_åa˚
(
¥iv
,
UDBG1
, "‰ìög o‡mu…iˇ°Öackë†ToC = 0x%x ho°Tag = 0x%x \n",
tx_q_ôem
->
å™smissi⁄C⁄åﬁ
,tx_q_ôem->
ho°Tag
);

367 
	`li°_dñ
(
li°Hód
);

368 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
tx_q_ôem
->
bulkd©a
);

369 
	`k‰ì
(
tx_q_ôem
);

370 
¥iv
->
noOfPktQueuedInDrivî
--;

371 
	`•ö_lock
(&
¥iv
->
°aRec‹d_lock
);

372 
öãrÁ˚Priv
->
noOfbrﬂdˇ°PktQueued
--;

373 
	`•ö_u∆ock
(&
¥iv
->
°aRec‹d_lock
);

374 if(!
eo•Fømedñëed
){

378 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

380 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "leaving verify_and_accomodate_tx_packet\n");

381 
	}
}

384 
C§Resu…
 
	$íque_tx_d©a_pdu
(
unifi_¥iv_t
 *
¥iv
, 
bulk_d©a_∑øm_t
 *
bulkd©a
,

385 
li°_hód
 *
li°
, 
CSR_SIGNAL
 *
sig«l
,

386 
C§Boﬁ
 
ªqueueOnSamePos
)

390 
CSR_MA_PACKET_REQUEST
 *
ªq
 = &
sig«l
->
u
.
MaPackëReque°
;

391 
tx_buf„ªd_∑ckës_t
 *
tx_q_ôem
;

392 
lock_Êags
;

394 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "enteringÉnque_tx_data_pdu\n");

395 if(!
li°
) {

396 
	`unifi_îr‹
(
¥iv
,"List isÇot specified\n");

397  
CSR_RESULT_FAILURE
;

401 i‡(
¥iv
->
noOfPktQueuedInDrivî
 >
CSR_WIFI_DRIVER_SUPPORT_FOR_MAX_PKT_QUEUEING
) {

402 
	`unifi_åa˚
(
¥iv
,
UDBG3
,"numbî o‡pkt†queued %d \n",Öriv->
noOfPktQueuedInDrivî
);

403 
	`vîify_™d_accomod©e_tx_∑ckë
(
¥iv
);

408 
tx_q_ôem
 = (
tx_buf„ªd_∑ckës_t
 *)
	`kmÆloc
(—x_buf„ªd_∑ckës_t), 
GFP_ATOMIC
);

409 i‡(
tx_q_ôem
 =
NULL
) {

410 
	`unifi_îr‹
(
¥iv
,

412 (
tx_buf„ªd_∑ckës_t
));

413 
	`func_exô
();

414  
CSR_RESULT_FAILURE
;

418 
	`•ö_lock_úqßve
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

419 
	`INIT_LIST_HEAD
(&
tx_q_ôem
->
q
);

421 
tx_q_ôem
->
bulkd©a
.
os_d©a_±r
 = bulkd©a->
d
[0].os_data_ptr;

422 
tx_q_ôem
->
bulkd©a
.
d©a_Àngth
 = bulkd©a->
d
[0].data_length;

423 
tx_q_ôem
->
bulkd©a
.
os_√t_buf_±r
 = bulkd©a->
d
[0].os_net_buf_ptr;

424 
tx_q_ôem
->
bulkd©a
.
√t_buf_Àngth
 = bulkd©a->
d
[0].net_buf_length;

425 
tx_q_ôem
->
öãrÁ˚Tag
 = 
ªq
->
VútuÆI¡îÁ˚Idítifõr
 & 0xff;

426 
tx_q_ôem
->
ho°Tag
 = 
ªq
->
Ho°Tag
;

427 
tx_q_ôem
->
ÀSídîPro˚ssId
 = 
sig«l
->
Sig«lPrimôiveHódî
.
SídîPro˚ssId
;

428 
tx_q_ôem
->
å™smissi⁄C⁄åﬁ
 = 
ªq
->
Tønsmissi⁄C⁄åﬁ
;

429 
tx_q_ôem
->
¥i‹ôy
 = 
ªq
->
Pri‹ôy
;

430 
tx_q_ôem
->
øã
 = 
ªq
->
TønsmôR©e
;

431 
	`mem˝y
(
tx_q_ôem
->
≥îMacAddªss
.
a
, 
ªq
->
Ra
.
x
, 
ETH_ALEN
);

435 i‡(
ªqueueOnSamePos
) {

436 
	`li°_add
(&
tx_q_ôem
->
q
, 
li°
);

438 
	`li°_add_èû
(&
tx_q_ôem
->
q
, 
li°
);

442 
¥iv
->
noOfPktQueuedInDrivî
++;

443 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

444 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "leavingÉnque_tx_data_pdu\n");

445  
CSR_RESULT_SUCCESS
;

446 
	}
}

448 #ifde‡
CSR_WIFI_REQUEUE_PACKET_TO_HAL


449 
C§Resu…
 
	$unifi_ªque_ma_∑ckë_ªque°
 (*
o•riv
, 
C§Uöt32
 
ho°_èg
,

450 
C§Uöt16
 
txSètus
, 
bulk_d©a_desc_t
 *
bulkD©aDesc
)

452 
C§Resu…
 
°©us
 = 
CSR_RESULT_SUCCESS
;

453 
unifi_¥iv_t
 *
¥iv
 = (unifi_¥iv_t*)
o•riv
;

454 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
;

455 
li°_hód
 *
li°
 = 
NULL
;

456 
C§WifiRouãrCålSèInfo_t
 *
°aRec‹d
 = 
NULL
;

457 
bulk_d©a_∑øm_t
 
bulkD©a
;

458 
CSR_SIGNAL
 
sig«l
;

459 
CSR_PRIORITY
 
¥i‹ôy
 = 0;

460 
C§Uöt16
 
öãrÁ˚Tag
 = 0;

461 
unifi_TøfficQueue
 
¥i‹ôy_q
;

462 
C§Uöt16
 
‰ameC⁄åﬁ
 = 0, 
‰ameTy≥
 = 0;

463 
lock_Êags
;

465 
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

470 if(!((
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
) ||

471 (
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
))) {

472  
CSR_RESULT_FAILURE
;

475 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "unifi_ªque_ma_∑ckë_ªque°: ho°_èg = 0x%x\n", 
ho°_èg
);

477 
°aRec‹d
 = 
	`C§WifiRouãrCålGëSèti⁄Rec‹dFromPìrMacAddªss
(
¥iv
,

478 (((
C§Uöt8
 *Ë
bulkD©aDesc
->
os_d©a_±r
) + 4),

479 
öãrÁ˚Tag
);

480 i‡(
NULL
 =
°aRec‹d
) {

481 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "unifi_reque_ma_packet_request: Invalid STAÑecord \n");

482  
CSR_RESULT_FAILURE
;

488 i‡(
CSR_TX_RETRY_LIMIT
 =
txSètus
 || 
CSR_TX_NO_BSS
 ==ÅxStatus) {

489 i‡(
°aRec‹d
->
timSë
 =
CSR_WIFI_TIM_RESET
 || sèRec‹d->timSë =
CSR_WIFI_TIM_RESETTING
)

491 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "unifi_reque_ma_packet_request: CFM failed with Retry Limit or No BSS-->update TIM\n");

492 i‡(!
°aRec‹d
->
timReque°PídögFœg
) {

493 
	`upd©e_tim
(
¥iv
, 
°aRec‹d
->
aid
, 1, 
öãrÁ˚Tag
, sèRec‹d->
assig√dH™dÀ
);

499 
°aRec‹d
->
upd©eTimReqQueued
 = 1;

500 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "unifi_reque_ma_packet_request: One more UpdateTim Request(:%d)Queued for AID %x\n",

501 
°aRec‹d
->
upd©eTimReqQueued
, sèRec‹d->
aid
);

504  
CSR_RESULT_FAILURE
;

506 i‡((
CSR_TX_LIFETIME
 =
txSètus
Ë|| (
CSR_TX_BLOCK_ACK_TIMEOUT
 ==ÅxStatus) ||

507 (
CSR_TX_FAIL_TRANSMISSION_VIF_INTERRUPTED
 =
txSètus
) ||

508 (
CSR_TX_REJECTED_PEER_STATION_SLEEPING
 =
txSètus
) ||

509 (
CSR_TX_REJECTED_DTIM_STARTED
 =
txSètus
)) {

511 
‰ameC⁄åﬁ
 = 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
(
bulkD©aDesc
->
os_d©a_±r
);

512 
‰ameTy≥
 = ((
‰ameC⁄åﬁ
 & 
IEEE80211_FC_TYPE_MASK
Ë>> 
FRAME_CONTROL_TYPE_FIELD_OFFSET
);

517 i‡(
IEEE802_11_FRAMETYPE_MANAGEMENT
 =
‰ameTy≥
) {

518  
CSR_RESULT_FAILURE
;

520 i‡(
IEEE802_11_FRAMETYPE_DATA
 =
‰ameTy≥
) {

524 i‡((((
‰ameC⁄åﬁ
 & 
IEEE80211_FC_SUBTYPE_MASK
Ë>> 
FRAME_CONTROL_SUBTYPE_FIELD_OFFSET
Ë=
QOS_DATA_NULL
) ||

525 (((
‰ameC⁄åﬁ
 & 
IEEE80211_FC_SUBTYPE_MASK
Ë>> 
FRAME_CONTROL_SUBTYPE_FIELD_OFFSET
)=
DATA_NULL
 )) {

526  
CSR_RESULT_FAILURE
;

531 i‡(
TRUE
 =
°aRec‹d
->
wmmOrQosE«bÀd
) {

532 
C§Uöt16
 
qosC⁄åﬁ
 = 0;

533 
C§Uöt8
 
d©aFømeTy≥
 = 0;

535 
d©aFømeTy≥
 =((
‰ameC⁄åﬁ
 & 
IEEE80211_FC_SUBTYPE_MASK
) >> 4);

537 i‡(
d©aFømeTy≥
 =
QOS_DATA
) {

541 if((
‰ameC⁄åﬁ
 & 
IEEE802_11_FC_TO_DS_MASK
Ë&& (‰ameC⁄åﬁ & 
IEEE802_11_FC_FROM_DS_MASK
)) {

542 
qosC⁄åﬁ

	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
(
bulkD©aDesc
->
os_d©a_±r
 + 30);

545 
qosC⁄åﬁ
 = 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
(
bulkD©aDesc
->
os_d©a_±r
 + 24);

549 
¥i‹ôy
 = (
CSR_PRIORITY
)(
qosC⁄åﬁ
 & 
IEEE802_11_QC_TID_MASK
);

551 i‡(
¥i‹ôy
 < 
CSR_QOS_UP0
 ||Öri‹ôy > 
CSR_QOS_UP7
) {

552 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "unifi_ªque_ma_∑ckë_ªque°: InvÆidÖri‹ôy:%x \n", 
¥i‹ôy
);

553  
CSR_RESULT_FAILURE
;

557 
¥i‹ôy
 = 
CSR_CONTENTION
;

561 
bulkD©a
.
d
[0].
os_d©a_±r
 = 
bulkD©aDesc
->os_data_ptr;

562 
bulkD©a
.
d
[0].
d©a_Àngth
 = 
bulkD©aDesc
->data_length;

563 
bulkD©a
.
d
[0].
os_√t_buf_±r
 = 
bulkD©aDesc
->os_net_buf_ptr;

564 
bulkD©a
.
d
[0].
√t_buf_Àngth
 = 
bulkD©aDesc
->net_buf_length;

566 
bulkD©a
.
d
[1].
os_d©a_±r
 = 
NULL
;

567 
bulkD©a
.
d
[1].
os_√t_buf_±r
 = 
NULL
;

568 
bulkD©a
.
d
[1].
d©a_Àngth
 = bulkD©a.d[1].
√t_buf_Àngth
 = 0;

571 
	`mem£t
(&
sig«l
, 0, (
CSR_SIGNAL
));

574 
	`unifi_‰ame_ma_∑ckë_ªq
(
¥iv
, 
¥i‹ôy
, 0, 
ho°_èg
,

575 
öãrÁ˚Tag
, 
CSR_NO_CONFIRM_REQUIRED
,

576 
¥iv
->
√tdev_˛õ¡
->
£ndî_id
,

577 
°aRec‹d
->
≥îMacAddªss
.
a
, &
sig«l
);

580 
¥i‹ôy_q
 = 
	`unifi_‰ame_¥i‹ôy_to_queue
(
¥i‹ôy
);

581 
li°
 = &
°aRec‹d
->
d©aPdu
[
¥i‹ôy_q
];

584 
°©us
 = 
	`íque_tx_d©a_pdu
(
¥iv
, &
bulkD©a
, 
li°
, &
sig«l
, 
TRUE
);

587 i‡(!
°©us
) {

588 
	`•ö_lock_úqßve
(&
¥iv
->
°aRec‹d_lock
, 
lock_Êags
);

589 
°aRec‹d
->
noOfPktQueued
++;

590 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
°aRec‹d_lock
, 
lock_Êags
);

597  
CSR_RESULT_FAILURE
;

600  
°©us
;

601 
	}
}

604 
	$is_Æl_ac_dñivî_íabÀd_™d_m‹ed©a
(
C§WifiRouãrCålSèInfo_t
 *
°aRec‹d
, 
C§Uöt8
 *
ÆlDñivîyE«bÀd
, C§Uöt8 *
d©aAvaûabÀ
)

606 
C§Uöt8
 
i
;

607 *
ÆlDñivîyE«bÀd
 = 
TRUE
;

608 
i
 = 0 ;ò< 
MAX_ACCESS_CATOGORY
; i++) {

609 i‡(!
	`IS_DELIVERY_ENABLED
(
°aRec‹d
->
powîßveMode
[
i
])) {

611 *
ÆlDñivîyE«bÀd
 = 
FALSE
;

615 i‡(*
ÆlDñivîyE«bÀd
) {

616 *
d©aAvaûabÀ
 = (!
	`li°_em±y
(&
°aRec‹d
->
d©aPdu
[0]) || !list_empty(&staRecord->dataPdu[1])

617 ||!
	`li°_em±y
(&
°aRec‹d
->
d©aPdu
[2]) ||!list_empty(&staRecord->dataPdu[3])

618 ||!
	`li°_em±y
(&
°aRec‹d
->
mgtFømes
));

620 
	}
}

636 
	$uf_h™dÀ_tim_cfm
(
unifi_¥iv_t
 *
¥iv
, 
CSR_MLME_SET_TIM_CONFIRM
 *
cfm
, 
C§Uöt16
 
ª˚ivîPro˚ssId
)

638 
C§Uöt8
 
h™dÀ
 = 
	`CSR_WIFI_GET_STATION_HANDLE_FROM_RECEIVER_ID
(
ª˚ivîPro˚ssId
);

639 
C§Uöt8
 
timSëSètus
 = 
	`CSR_WIFI_GET_TIMSET_STATE_FROM_RECEIVER_ID
(
ª˚ivîPro˚ssId
);

640 
C§Uöt16
 
öãrÁ˚Tag
 = (
cfm
->
VútuÆI¡îÁ˚Idítifõr
 & 0xff);

641 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

642 
C§WifiRouãrCålSèInfo_t
 *
°aRec‹d
 = 
NULL
;

644 
C§Uöt16
 
timSëVÆue
 = 0;

646 
C§Uöt8
 
ªåyCou¡
 = 0;

647 
lock_Êags
;

648 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "íãrög %s, h™dÀ = %x,ÅimSëSètu†%x\n", 
__FUNCTION__
, 
h™dÀ
, 
timSëSètus
);

650 i‡(
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
) {

651 
	`unifi_w¨nög
(
¥iv
, "bad i¡îÁ˚Tag = %x\n", 
öãrÁ˚Tag
);

655 i‡((
h™dÀ
 !
CSR_WIFI_BROADCAST_OR_MULTICAST_HANDLE
Ë&& (h™dÀ >
UNIFI_MAX_CONNECTIONS
)) {

656 
	`unifi_w¨nög
(
¥iv
, "bad sèti⁄ H™dÀ = %x\n", 
h™dÀ
);

660 i‡(
h™dÀ
 !
CSR_WIFI_BROADCAST_OR_MULTICAST_HANDLE
) {

661 
	`•ö_lock_úqßve
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

662 i‡((
°aRec‹d
 = ((
C§WifiRouãrCålSèInfo_t
 *Ë(
öãrÁ˚Priv
->
°aInfo
[
h™dÀ
]))Ë=
NULL
) {

663 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

664 
	`unifi_w¨nög
(
¥iv
, "uf_h™dÀ_tim_cfm: sèti⁄Ñec‹d i†NULL h™dÀ = %x\n", 
h™dÀ
);

667 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

669 
timSëSètus
)

671 
CSR_WIFI_TIM_SETTING
:

672 
timSëVÆue
 = 
CSR_WIFI_TIM_SET
;

674 
CSR_WIFI_TIM_RESETTING
:

675 
timSëVÆue
 = 
CSR_WIFI_TIM_RESET
;

678 
	`unifi_w¨nög
(
¥iv
, "timSë sèã i†%x: Debug\n", 
timSëSètus
);

683 
cfm
->
Resu…Code
)

685 
CSR_RC_SUCCESS
:

686 i‡(
h™dÀ
 !
CSR_WIFI_BROADCAST_OR_MULTICAST_HANDLE
) {

688 i‡(
timSëSètus
 =
°aRec‹d
->
timSë
) {

689 
°aRec‹d
->
timSë
 = 
timSëVÆue
;

693 
ªåyCou¡
 = 0;

694 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "tim (%sËsuc˚ssfuŒy i¿fúmw¨e\n", (
timSëVÆue
)?"SET":"RESET");

696 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "receiverÖrocessID = %x, success:Ñequest & confirm statesáreÇot matching in TIM cfm: Debug status = %x, staRecord->timSet = %x, handle = %x\n",

697 
ª˚ivîPro˚ssId
, 
timSëSètus
, 
°aRec‹d
->
timSë
, 
h™dÀ
);

701 
°aRec‹d
->
timReque°PídögFœg
 = 
FALSE
;

706 i‡(0xFF !
°aRec‹d
->
upd©eTimReqQueued
)

709 i‡(
°aRec‹d
->
timSë
 !°aRec‹d->
upd©eTimReqQueued
)

711 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "uf_handle_tim_cfm : Processing Queued UpdateTimReq \n");

713 
	`upd©e_tim
(
¥iv
, 
°aRec‹d
->
aid
, sèRec‹d->
upd©eTimReqQueued
, 
öãrÁ˚Tag
, 
h™dÀ
);

715 
°aRec‹d
->
upd©eTimReqQueued
 = 0xFF;

720 
öãrÁ˚Priv
->
bcTimSë
 = 
timSëVÆue
;

724 
ªåyCou¡
 = 0;

725 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "tim (%sËsuc˚ssfuŒy f‹ brﬂdˇ° fømêö fúmw¨e\n", (
timSëVÆue
)?"SET":"RESET");

728 
öãrÁ˚Priv
->
bcTimSëReqPídögFœg
 = 
FALSE
;

733 i‡(0xFF !
öãrÁ˚Priv
->
bcTimSëReqQueued
)

736 i‡(
öãrÁ˚Priv
->
bcTimSë
 !öãrÁ˚Priv->
bcTimSëReqQueued
)

738 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "uf_handle_tim_cfm : Processing Queued UpdateDTimReq \n");

740 
	`upd©e_tim
(
¥iv
, 0, 
öãrÁ˚Priv
->
bcTimSëReqQueued
, 
öãrÁ˚Tag
, 0xFFFFFFFF);

742 
öãrÁ˚Priv
->
bcTimSëReqQueued
 = 0xFF;

748 
CSR_RC_INVALID_PARAMETERS
:

749 
CSR_RC_INSUFFICIENT_RESOURCE
:

754 i‡(
ªåyCou¡
 > 
UNIFI_MAX_RETRY_LIMIT
) {

755 
C§Boﬁ
 
m‹eD©a
 = 
FALSE
;

756 
ªåyCou¡
 = 0;

768 if(
°aRec‹d
) {

769 if(!
°aRec‹d
->
wmmOrQosE«bÀd
) {

770 
m‹eD©a
 = (!
	`li°_em±y
(&
°aRec‹d
->
d©aPdu
[
UNIFI_TRAFFIC_Q_CONTENTION
]) ||

771 !
	`li°_em±y
(&
°aRec‹d
->
d©aPdu
[
UNIFI_TRAFFIC_Q_VO
]) ||

772 !
	`li°_em±y
(&
°aRec‹d
->
mgtFømes
));

775 
C§Uöt8
 
ÆlDñivîyE«bÀd
 = 0, 
d©aAvaûabÀ
 = 0;

777 
	`is_Æl_ac_dñivî_íabÀd_™d_m‹ed©a
(
°aRec‹d
, &
ÆlDñivîyE«bÀd
, &
d©aAvaûabÀ
);

779 
m‹eD©a
 = (
	`uf_is_m‹e_d©a_f‹_n⁄_dñivîy_ac
(
°aRec‹d
Ë|| (
ÆlDñivîyE«bÀd
 && 
d©aAvaûabÀ
));

786 i‡(
m‹eD©a
) {

787 
°aRec‹d
->
timSë
 = 
CSR_WIFI_TIM_RESET
;

789 
°aRec‹d
->
timSë
 = 
CSR_WIFI_TIM_SET
;

793 
m‹eD©a
 = (!
	`li°_em±y
(&
öãrÁ˚Priv
->
gíîicMu…iˇ°OrBrﬂdCa°MgtFømes
) ||

794 !
	`li°_em±y
(&
öãrÁ˚Priv
->
gíîicMu…iˇ°OrBrﬂdCa°Fømes
));

795 i‡(
m‹eD©a
) {

796 
	`upd©e_tim
(
¥iv
, 0, 
CSR_WIFI_TIM_SET
, 
öãrÁ˚Tag
, 0xFFFFFFFF);

798 
	`upd©e_tim
(
¥iv
, 0, 
CSR_WIFI_TIM_RESET
, 
öãrÁ˚Tag
, 0xFFFFFFFF);

802 
	`unifi_îr‹
(
¥iv
, "no ofÉrror's for TIM setting crossedÅhe Limit: verify\n");

805 
ªåyCou¡
++;

807 i‡(
h™dÀ
 !
CSR_WIFI_BROADCAST_OR_MULTICAST_HANDLE
) {

808 i‡(
timSëSètus
 =
°aRec‹d
->
timSë
) {

809 
	`unifi_w¨nög
(
¥iv
, "timÑeque° faûed,Ñëry f‹ AID = %x\n", 
°aRec‹d
->
aid
);

810 
	`upd©e_tim
(
¥iv
, 
°aRec‹d
->
aid
, 
timSëVÆue
, 
öãrÁ˚Tag
, 
h™dÀ
);

812 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "failure:Ñequest & confirm statesáreÇot matching in TIM cfm: Debug status = %x, staRecord->timSet = %x\n",

813 
timSëSètus
, 
°aRec‹d
->
timSë
);

816 
	`unifi_w¨nög
(
¥iv
, "timÑequest failed,Ñetry for broadcast frames\n");

817 
	`upd©e_tim
(
¥iv
, 0, 
timSëVÆue
, 
öãrÁ˚Tag
, 0xFFFFFFFF);

821 
	`unifi_w¨nög
(
¥iv
, "tim upd©êªque° faûedÑesu…codê%x\n", 
cfm
->
Resu…Code
);

824 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "Àavög %s\n", 
__FUNCTION__
);

825 
	}
}

860 
	$upd©e_tim
(
unifi_¥iv_t
 * 
¥iv
, 
C§Uöt16
 
aid
, 
C§Uöt8
 
£tTim
, C§Uöt16 
öãrÁ˚Tag
, 
C§Uöt32
 
h™dÀ
)

862 
CSR_SIGNAL
 
sig«l
;

863 
C§I¡32
 
r
;

864 
CSR_MLME_SET_TIM_REQUEST
 *
ªq
 = &
sig«l
.
u
.
MlmeSëTimReque°
;

865 
bulk_d©a_∑øm_t
 *
bulkd©a
 = 
NULL
;

866 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

867 
C§Uöt8
 
£ndîIdLsb
 = 0;

868 
C§WifiRouãrCålSèInfo_t
 *
°aRec‹d
 = 
NULL
;

869 
C§Uöt32
 
ﬁdTimSëSètus
 = 0, 
timSëSètus
 = 0;

871 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "enteringÅhe update_timÑoutine\n");

874 i‡(
h™dÀ
 == 0xFFFFFFFF) {

875 
h™dÀ
 &
CSR_WIFI_BROADCAST_OR_MULTICAST_HANDLE
;

876 i‡(
£tTim
 =
öãrÁ˚Priv
->
bcTimSë
)

878 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "upd©e_tim, Dr›:Hdl=%x,ÅimvÆ=%d, globÆTim=%d\n", 
h™dÀ
, 
£tTim
, 
öãrÁ˚Priv
->
bcTimSë
);

881 } i‡((
h™dÀ
 !0xFFFFFFFFË&& (h™dÀ >
UNIFI_MAX_CONNECTIONS
)) {

882 
	`unifi_w¨nög
(
¥iv
, "bad sèti⁄ H™dÀ = %x\n", 
h™dÀ
);

886 i‡(
£tTim
) {

887 
timSëSètus
 = 
CSR_WIFI_TIM_SETTING
;

889 
timSëSètus
 = 
CSR_WIFI_TIM_RESETTING
;

892 i‡(
h™dÀ
 !
CSR_WIFI_BROADCAST_OR_MULTICAST_HANDLE
) {

893 i‡((
°aRec‹d
 = ((
C§WifiRouãrCålSèInfo_t
 *Ë(
öãrÁ˚Priv
->
°aInfo
[
h™dÀ
]))Ë=
NULL
) {

894 
	`unifi_w¨nög
(
¥iv
, "°©i⁄Ñec‹d i†NULL i¿ upd©e_tim: h™dÀ = %x :debug\n", 
h™dÀ
);

898 
ﬁdTimSëSètus
 = 
°aRec‹d
->
timSë
;

899 
°aRec‹d
->
timSë
 = 
timSëSètus
;

903 
£ndîIdLsb
 = 
	`CSR_WIFI_PACK_SENDER_ID_LSB_FOR_TIM_REQ
(
h™dÀ
, 
timSëSètus
);

906 
	`mem£t
(&
sig«l
, 0, (
CSR_SIGNAL
));

909 
sig«l
.
Sig«lPrimôiveHódî
.
Sig«lId
 = 
CSR_MLME_SET_TIM_REQUEST_ID
;

910 
sig«l
.
Sig«lPrimôiveHódî
.
Re˚ivîPro˚ssId
 = 0;

911 #ifde‡
__powîpc__


912 
sig«l
.
Sig«lPrimôiveHódî
.
SídîPro˚ssId
 = 
	`ht⁄s
–((
¥iv
->
√tdev_˛õ¡
->
£ndî_id
 & 0xff00Ë| 
£ndîIdLsb
));

914 
	`CSR_COPY_UINT16_TO_LITTLE_ENDIAN
(((
¥iv
->
√tdev_˛õ¡
->
£ndî_id
 & 0xff00Ë| 
£ndîIdLsb
),

915 (
u8
*)&
sig«l
.
Sig«lPrimôiveHódî
.
SídîPro˚ssId
);

919 
ªq
->
VútuÆI¡îÁ˚Idítifõr
 = 
	`uf_gë_vif_idítifõr
(
öãrÁ˚Priv
->
öãrÁ˚Mode
,
öãrÁ˚Tag
);

920 
ªq
->
Assocüti⁄Id
 = 
aid
;

921 
ªq
->
TimVÆue
 = 
£tTim
;

924 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "update_tim:AID %x,senderIdLsb = 0x%x, handle = 0x%x,ÅimSetStatus = %x, senderÖroceesID = %x \n",

925 
aid
,
£ndîIdLsb
, 
h™dÀ
, 
timSëSètus
, 
sig«l
.
Sig«lPrimôiveHódî
.
SídîPro˚ssId
);

928 
r
 = 
	`ul_£nd_sig«l_u≈acked
(
¥iv
, &
sig«l
, 
bulkd©a
);

929 i‡(
r
) {

931 
	`unifi_îr‹
(
¥iv
, "Error queueing CSR_MLME_SET_TIM_REQUEST signal\n");

932 i‡(
°aRec‹d
) {

933 
°aRec‹d
->
timSë
 = 
ﬁdTimSëSètus
 ;

938 
öãrÁ˚Priv
->
bcTimSë
 = !
£tTim
;

944 i‡(
°aRec‹d
) {

945 
°aRec‹d
->
timReque°PídögFœg
 = 
TRUE
;

952 
öãrÁ˚Priv
->
bcTimSëReqPídögFœg
 = 
TRUE
;

955 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "leavingÅhe update_timÑoutine\n");

956 
	}
}

959 
	$¥o˚ss_≥î_a˘ive_å™sôi⁄
(
unifi_¥iv_t
 * 
¥iv
,

960 
C§WifiRouãrCålSèInfo_t
 *
°aRec‹d
,

961 
C§Uöt16
 
öãrÁ˚Tag
)

963 
r
,
i
;

964 
C§Boﬁ
 
•a˚Avaû
[4] = {
TRUE
,TRUE,TRUE,TRUE};

965 
tx_buf„ªd_∑ckës_t
 * 
buf„ªd_pkt
 = 
NULL
;

966 
lock_Êags
;

967 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

969 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "enteringÖrocess_peer_active_transition\n");

971 if(
	`IS_DTIM_ACTIVE
(
öãrÁ˚Priv
->
dtimA˘ive
,öãrÁ˚Priv->
mu…iˇ°PduHo°Tag
)) {

973 
	`unifi_åa˚
(
¥iv
,
UDBG2
, "MulticastÅransmission is going on soÑesume unicastÅransmissionáfter DTIM over\n");

978 i‡(!
°aRec‹d
->
timReque°PídögFœg
){

979 if((
°aRec‹d
->
timSë
 =
CSR_WIFI_TIM_SET
Ë|| (°aRec‹d->timSë =
CSR_WIFI_TIM_SETTING
)){

980 
	`upd©e_tim
(
¥iv
, 
°aRec‹d
->
aid
, 0, 
öãrÁ˚Tag
, sèRec‹d->
assig√dH™dÀ
);

988 
°aRec‹d
->
upd©eTimReqQueued
 = 0;

989 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "upd©e_tim : O√ m‹êUpd©eTim Reque° (Tim vÆue:%dËQueued f‹ AID %x\n", 
°aRec‹d
->
upd©eTimReqQueued
,

990 
°aRec‹d
->
aid
);

994 (
buf„ªd_pkt
=
	`dequeue_tx_d©a_pdu
(
¥iv
, &
°aRec‹d
->
mgtFømes
))) {

995 
buf„ªd_pkt
->
å™smissi⁄C⁄åﬁ
 &=

996 ~(
TRANSMISSION_CONTROL_TRIGGER_MASK
|
TRANSMISSION_CONTROL_EOSP_MASK
);

997 if((
r
=
	`‰ame_™d_£nd_queued_pdu
(
¥iv
,
buf„ªd_pkt
,
°aRec‹d
,0,
FALSE
)Ë=-
ENOSPC
) {

998 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "p_p_a_t:(ENOSPC) Mgt Frame queueing \n");

1000 
	`•ö_lock_úqßve
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

1001 
	`li°_add
(&
buf„ªd_pkt
->
q
, &
°aRec‹d
->
mgtFømes
);

1002 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

1003 
¥iv
->
∑u£dSèH™dÀ
[3]=(
C§Uöt8
)(
°aRec‹d
->
assig√dH™dÀ
);

1004 
•a˚Avaû
[3] = 
FALSE
;

1007 if(
r
){

1008 
	`unifi_åa˚
 (
¥iv
, 
UDBG1
, " HIP validation failure : PDU sending failed \n");

1010 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
buf„ªd_pkt
->
bulkd©a
);

1012 
	`k‰ì
(
buf„ªd_pkt
);

1015 i‡(!
°aRec‹d
->
timReque°PídögFœg
) {

1016 i‡(
°aRec‹d
->
txSu•íd
) {

1017 if(
°aRec‹d
->
timSë
 =
CSR_WIFI_TIM_SET
) {

1018 
	`upd©e_tim
(
¥iv
,
°aRec‹d
->
aid
,0,
öãrÁ˚Tag
, sèRec‹d->
assig√dH™dÀ
);

1028 
°aRec‹d
->
upd©eTimReqQueued
 = 0;

1029 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "upd©e_tim : O√ m‹êUpd©eTim Reque° (Tim vÆue:%dËQueued f‹ AID %x\n", 
°aRec‹d
->
upd©eTimReqQueued
,

1030 
°aRec‹d
->
aid
);

1032 
i
=3;i>=0;i--) {

1033 if(!
•a˚Avaû
[
i
])

1035 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "p_p_a_t:d©®pkà£ndög f‹ AC %d \n",
i
);

1036 (
buf„ªd_pkt
=
	`dequeue_tx_d©a_pdu
(
¥iv
, &
°aRec‹d
->
d©aPdu
[
i
]))) {

1037 
buf„ªd_pkt
->
å™smissi⁄C⁄åﬁ
 &=

1038 ~(
TRANSMISSION_CONTROL_TRIGGER_MASK
|
TRANSMISSION_CONTROL_EOSP_MASK
);

1039 if((
r
=
	`‰ame_™d_£nd_queued_pdu
(
¥iv
,
buf„ªd_pkt
,
°aRec‹d
,0,
FALSE
)Ë=-
ENOSPC
) {

1042 
	`•ö_lock_úqßve
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

1043 
	`li°_add
(&
buf„ªd_pkt
->
q
, &
°aRec‹d
->
d©aPdu
[
i
]);

1044 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

1045 
¥iv
->
∑u£dSèH™dÀ
[
i
]=(
C§Uöt8
)(
°aRec‹d
->
assig√dH™dÀ
);

1048 if(
r
){

1049 
	`unifi_åa˚
 (
¥iv
, 
UDBG1
, " HIP validation failure : PDU sending failed \n");

1051 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
buf„ªd_pkt
->
bulkd©a
);

1053 
	`k‰ì
(
buf„ªd_pkt
);

1057 i‡(!
°aRec‹d
->
timReque°PídögFœg
){

1058 if((
°aRec‹d
->
timSë
 =
CSR_WIFI_TIM_SET
Ë|| (°aRec‹d->timSë =
CSR_WIFI_TIM_SETTING
)) {

1059 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "p_p_a_t:resettingÅim .....\n");

1060 
	`upd©e_tim
(
¥iv
,
°aRec‹d
->
aid
,0,
öãrÁ˚Tag
, sèRec‹d->
assig√dH™dÀ
);

1068 
°aRec‹d
->
upd©eTimReqQueued
 = 0;

1069 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "upd©e_tim : O√ m‹êUpd©eTim Reque° (Tim vÆue:%dËQueued f‹ AID %x\n", 
°aRec‹d
->
upd©eTimReqQueued
,

1070 
°aRec‹d
->
aid
);

1072 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "leavingÖrocess_peer_active_transition\n");

1073 
	}
}

1077 
	$uf_¥o˚ss_ma_pkt_cfm_f‹_≠
(
unifi_¥iv_t
 *
¥iv
,
C§Uöt16
 
öãrÁ˚Tag
, c⁄° 
CSR_MA_PACKET_CONFIRM
 *
pkt_cfm
)

1079 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
;

1080 
C§Uöt8
 
i
;

1081 
C§WifiRouãrCålSèInfo_t
 *
°aRec‹d
 = 
NULL
;

1082 
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

1085 if(
pkt_cfm
->
Ho°Tag
 =
öãrÁ˚Priv
->
mu…iˇ°PduHo°Tag
) {

1086 
	`unifi_åa˚
(
¥iv
,
UDBG2
,"CFM f‹ m¨ked Mu…iˇ° Tag = %x\n",
öãrÁ˚Priv
->
mu…iˇ°PduHo°Tag
);

1087 
öãrÁ˚Priv
->
mu…iˇ°PduHo°Tag
 = 0xffffffff;

1088 
	`ªsume_su•íded_u≠sd
(
¥iv
,
öãrÁ˚Tag
);

1089 
	`ªsume_uniˇ°_buf„ªd_‰ames
(
¥iv
,
öãrÁ˚Tag
);

1090 if(
	`li°_em±y
(&
öãrÁ˚Priv
->
gíîicMu…iˇ°OrBrﬂdCa°MgtFømes
) &&

1091 
	`li°_em±y
(&
öãrÁ˚Priv
->
gíîicMu…iˇ°OrBrﬂdCa°Fømes
)) {

1092 
	`unifi_åa˚
(
¥iv
,
UDBG1
,"Resetting multicastTIM");

1093 i‡(!
öãrÁ˚Priv
->
bcTimSëReqPídögFœg
)

1095 
	`upd©e_tim
(
¥iv
,0,
CSR_WIFI_TIM_RESET
,
öãrÁ˚Tag
, 0xFFFFFFFF);

1102 
öãrÁ˚Priv
->
bcTimSëReqQueued
 = 
CSR_WIFI_TIM_RESET
;

1103 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "uf_process_ma_pkt_cfm_for_ap : One more UpdateDTim Request(%d) Queued \n",

1104 
öãrÁ˚Priv
->
bcTimSëReqQueued
);

1114 
i
 =0; i < 
UNIFI_MAX_CONNECTIONS
; i++) {

1115 
°aRec‹d
 = (
C§WifiRouãrCålSèInfo_t
 *Ë(
öãrÁ˚Priv
->
°aInfo
[
i
]);

1116 i‡(
°aRec‹d
 && (°aRec‹d->
nuŒD©aHo°Tag
 =
pkt_cfm
->
Ho°Tag
)) {

1118 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "CFM for InactiveÖrobe Null frame (tag = %x, status = %d)\n",

1119 
pkt_cfm
->
Ho°Tag
,

1120 
pkt_cfm
->
Tønsmissi⁄Sètus


1122 
°aRec‹d
->
nuŒD©aHo°Tag
 = 
INVALID_HOST_TAG
;

1124 if(
pkt_cfm
->
Tønsmissi⁄Sètus
 =
CSR_TX_RETRY_LIMIT
){

1125 
C§Time
 
now
;

1126 
C§Time
 
öa˘ive_time
;

1128 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "NulldataÅoÖrobe STA ALIVE Failed withÑetryÜimit\n");

1134 i‡(
°aRec‹d
->
a˘ivôy_Êag
){

1137 
now
 = 
	`C§TimeGë
(
NULL
);

1139 i‡(
°aRec‹d
->
œ°A˘ivôy
 > 
now
)

1142 
öa˘ive_time
 = 
	`C§TimeAdd
((
C§Time
)
	`C§TimeSub
(
CSR_SCHED_TIME_MAX
, 
°aRec‹d
->
œ°A˘ivôy
),

1143 
now
);

1147 
öa˘ive_time
 = (
C§Time
)
	`C§TimeSub
(
now
, 
°aRec‹d
->
œ°A˘ivôy
);

1150 i‡(
öa˘ive_time
 >
STA_INACTIVE_TIMEOUT_VAL
)

1152 
li°_hód
 
£nd_cfm_li°
;

1153 
C§Uöt8
 
j
;

1161 
	`INIT_LIST_HEAD
(&
£nd_cfm_li°
);

1163 
	`uf_¥ï¨e_£nd_cfm_li°_f‹_queued_pkts
(
¥iv
,

1164 &
£nd_cfm_li°
,

1165 &(
°aRec‹d
->
mgtFømes
));

1167 
	`uf_Êush_li°
(
¥iv
, &(
°aRec‹d
->
mgtFømes
));

1169 
j
 = 0; j < 
MAX_ACCESS_CATOGORY
; j++){

1170 
	`uf_¥ï¨e_£nd_cfm_li°_f‹_queued_pkts
(
¥iv
,

1171 &
£nd_cfm_li°
,

1172 &(
°aRec‹d
->
d©aPdu
[
j
]));

1174 
	`uf_Êush_li°
(
¥iv
,&(
°aRec‹d
->
d©aPdu
[
j
]));

1177 
	`£nd_auto_ma_∑ckë_c⁄fúm
(
¥iv
, 
°aRec‹d
->
öãrÁ˚Priv
, &
£nd_cfm_li°
);

1181 
	`unifi_w¨nög
(
¥iv
, "uf_process_ma_pkt_cfm_for_ap: Router Disconnected IND Peer (%x-%x-%x-%x-%x-%x)\n",

1182 
°aRec‹d
->
≥îMacAddªss
.
a
[0],

1183 
°aRec‹d
->
≥îMacAddªss
.
a
[1],

1184 
°aRec‹d
->
≥îMacAddªss
.
a
[2],

1185 
°aRec‹d
->
≥îMacAddªss
.
a
[3],

1186 
°aRec‹d
->
≥îMacAddªss
.
a
[4],

1187 
°aRec‹d
->
≥îMacAddªss
.
a
[5]);

1189 
	`C§WifiRouãrCålC⁄√˘edIndSíd
(
¥iv
->
CSR_WIFI_SME_IFACEQUEUE
,

1191 
°aRec‹d
->
öãrÁ˚Priv
->
I¡îÁ˚Tag
,

1192 
°aRec‹d
->
≥îMacAddªss
,

1193 
CSR_WIFI_ROUTER_CTRL_PEER_DISCONNECTED
);

1197 i‡(
pkt_cfm
->
Tønsmissi⁄Sètus
 =
CSR_TX_SUCCESSFUL
)

1199 
°aRec‹d
->
a˘ivôy_Êag
 = 
TRUE
;

1203 
	}
}

1206 
C§Uöt16
 
	$uf_gë_vif_idítifõr
 (
C§WifiRouãrCålMode
 
mode
, 
C§Uöt16
 
èg
)

1208 
mode
)

1210 
CSR_WIFI_ROUTER_CTRL_MODE_STA
:

1211 
CSR_WIFI_ROUTER_CTRL_MODE_P2PCLI
:

1212  (0x02<<8|
èg
);

1214 
CSR_WIFI_ROUTER_CTRL_MODE_AP
:

1215 
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
:

1216  (0x03<<8|
èg
);

1218 
CSR_WIFI_ROUTER_CTRL_MODE_IBSS
:

1219  (0x01<<8|
èg
);

1221 
CSR_WIFI_ROUTER_CTRL_MODE_MONITOR
:

1222  (0x04<<8|
èg
);

1223 
CSR_WIFI_ROUTER_CTRL_MODE_AMP
:

1224  (0x05<<8|
èg
);

1226  
èg
;

1228 
	}
}

1230 #ifde‡
CSR_SUPPORT_SME


1258 
	$upd©e_machódî
(
unifi_¥iv_t
 *
¥iv
, 
sk_buff
 *
skb
,

1259 
sk_buff
 *
√wSkb
, 
CSR_PRIORITY
 *
¥i‹ôy
,

1260 
bulk_d©a_∑øm_t
 *
bulkd©a
, 
C§Uöt16
 
öãrÁ˚Tag
,

1261 
C§Uöt8
 
macHódîLígthInByãs
,

1262 
C§Uöt8
 
qosDe°ö©i⁄
)

1265 
C§Uöt16
 *
fc
 = 
NULL
;

1266 
C§Uöt8
 
dúe˘i⁄
 = 0, 
toDs
, 
‰omDs
;

1267 
C§Uöt8
 *
bufPå
 = 
NULL
;

1268 
C§Uöt8
 
ß
[
ETH_ALEN
], 
da
[ETH_ALEN];

1269 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

1270 
hódroom
;

1271 
C§Uöt8
 
macHódîBuf
[
IEEE802_11_DATA_FRAME_MAC_HEADER_SIZE
] = {0};

1273 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "enteringÅhe update_macheader function\n");

1276 
	`mem˝y
(
macHódîBuf
, 
skb
->
d©a
, 
macHódîLígthInByãs
);

1279 
	`skb_puŒ
(
skb
, 
macHódîLígthInByãs
);

1282 
hódroom
 = 
	`skb_hódroom
(
skb
);

1285 
fc
 = (
C§Uöt16
*Ë
macHódîBuf
;

1287 
toDs
 = (*
fc
 & 
	`˝u_to_À16
(
IEEE802_11_FC_TO_DS_MASK
))?1 : 0;

1288 
‰omDs
 = (*
fc
 & 
	`˝u_to_À16
(
IEEE802_11_FC_FROM_DS_MASK
))? 1: 0;

1289 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "I¿upd©e_machódî fun˘i⁄, fromD†%x,ÅoD†%x\n", 
‰omDs
, 
toDs
);

1290 
dúe˘i⁄
 = ((
‰omDs
 | (
toDs
 << 1)) & 0x3);

1293 
	`mem˝y
(
da
, 
macHódîBuf
+4+
toDs
*12, 
ETH_ALEN
);

1295 
	`mem˝y
(
ß
, 
macHódîBuf
+10+
‰omDs
*(6+
toDs
*8), 
ETH_ALEN
);

1297 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "upd©e_machódî:dúe˘i⁄ = %x\n", 
dúe˘i⁄
);

1299 
dúe˘i⁄
)

1306 *
fc
 &
	`˝u_to_À16
(~
IEEE802_11_FC_TO_DS_MASK
);

1307 *
fc
 |
	`˝u_to_À16
(
IEEE802_11_FC_FROM_DS_MASK
);

1309 
	`mem˝y
(
macHódîBuf
 + 4, 
da
, 
ETH_ALEN
);

1311 
	`mem˝y
(
macHódîBuf
 + 10, &
öãrÁ˚Priv
->
bssid
, 
ETH_ALEN
);

1313 
	`mem˝y
(
macHódîBuf
 + 16, 
ß
, 
ETH_ALEN
);

1316 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "when bothÅheÅoDs & fromDS set, NOT SUPPORTED\n");

1319 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "problem in decodingÖacket in update_macheader \n");

1326 
	`À16_to_˝u
(*
fc
Ë& 
IEEE80211_FC_SUBTYPE_MASK
)

1328 
IEEE802_11_FC_TYPE_QOS_DATA
 & 
IEEE80211_FC_SUBTYPE_MASK
:

1330 i‡(!
qosDe°ö©i⁄
) {

1335 i‡(*
fc
 & 
	`˝u_to_À16
(
IEEE80211_FC_ORDER_MASK
)) {

1339 
macHódîLígthInByãs
 -= 6;

1341 
macHódîLígthInByãs
 -= 2;

1344 *
fc
 &
	`˝u_to_À16
(~
IEEE80211_FC_SUBTYPE_MASK
);

1345 *
fc
 |
	`˝u_to_À16
(
IEEE802_11_FC_TYPE_DATA
);

1349 i‡(
hódroom
 < 
macHódîLígthInByãs
) {

1350 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, " sufficient headroomÇotÅhereÅoÖush updated mac header \n");

1353 
bufPå
 = (
C§Uöt8
 *Ë
	`skb_push
(
skb
, 
macHódîLígthInByãs
);

1356 
bulkd©a
->
d
[0].
os_d©a_±r
 = 
skb
->
d©a
;

1357 
bulkd©a
->
d
[0].
os_√t_buf_±r
 = (*)
skb
;

1358 
bulkd©a
->
d
[0].
d©a_Àngth
 = 
skb
->
Àn
;

1362 
C§Uöt8
 
qc
;

1363 i‡(*
fc
 & 
	`˝u_to_À16
(
IEEE80211_FC_ORDER_MASK
)) {

1364 
qc
 = *((
C§Uöt8
*)(
macHódîBuf
 + (
macHódîLígthInByãs
 - 4 - 2)));

1366 
qc
 = *((
C§Uöt8
*)(
macHódîBuf
 + (
macHódîLígthInByãs
 - 2)));

1369 i‡((
qc
 & 
IEEE802_11_QC_TID_MASK
) > 7) {

1370 *
¥i‹ôy
 = 7;

1372 *
¥i‹ôy
 = 
qc
 & 
IEEE802_11_QC_TID_MASK
;

1375 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "IncomögÖackëÖri‹ôy from QSTA i†%x\n", *
¥i‹ôy
);

1377 i‡(
hódroom
 < 
macHódîLígthInByãs
) {

1378 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, " sufficient headroomÇotÅhereÅoÖush updated mac header \n");

1381 
bufPå
 = (
C§Uöt8
 *Ë
	`skb_push
(
skb
, 
macHódîLígthInByãs
);

1386 
bulk_d©a_∑øm_t
 
d©a_±rs
;

1387 
C§Resu…
 
c§Resu…
;

1388 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "normal DataÖacket, NO QOS \n");

1390 i‡(
qosDe°ö©i⁄
) {

1391 
C§Uöt8
 
qc
 = 0;

1392 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "destination is QOS station \n");

1395 *
¥i‹ôy
 = 
CSR_QOS_UP0
;

1398 
qc
 |
CSR_QOS_UP0
;

1400 i‡(
da
[0] & 0x1) {

1402 
qc
 |= 1 << 5;

1406 
macHódîLígthInByãs
 += 2;

1409 *
fc
 &
	`˝u_to_À16
(~
IEEE80211_FC_SUBTYPE_MASK
);

1410 *
fc
 |
	`˝u_to_À16
(
IEEE802_11_FC_TYPE_QOS_DATA
);

1413 
macHódîBuf
[
macHódîLígthInByãs
 - 2] = 
qc
;

1415 
macHódîBuf
[
macHódîLígthInByãs
 - 1] = 0;

1416 i‡(
hódroom
 < 
macHódîLígthInByãs
) {

1417 
c§Resu…
 = 
	`unifi_√t_d©a_mÆloc
(
¥iv
, &
d©a_±rs
.
d
[0], 
skb
->
Àn
 + 
macHódîLígthInByãs
);

1419 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

1420 
	`unifi_îr‹
(
¥iv
, " failedÅoállocateÑequest_data. in update_macheader func\n");

1423 
√wSkb
 = (
sk_buff
 *)(
d©a_±rs
.
d
[0].
os_√t_buf_±r
);

1424 
√wSkb
->
Àn
 = 
skb
->À¿+ 
macHódîLígthInByãs
;

1426 
	`mem˝y
((*)
d©a_±rs
.
d
[0].
os_d©a_±r
 + 
macHódîLígthInByãs
,

1427 
skb
->
d©a
, skb->
Àn
);

1429 
bulkd©a
->
d
[0].
os_d©a_±r
 = 
√wSkb
->
d©a
;

1430 
bulkd©a
->
d
[0].
os_√t_buf_±r
 = (*)
√wSkb
;

1431 
bulkd©a
->
d
[0].
d©a_Àngth
 = 
√wSkb
->
Àn
;

1433 
bufPå
 = (
C§Uöt8
*)
d©a_±rs
.
d
[0].
os_d©a_±r
;

1436 
	`k‰ì_skb
(
skb
);

1439 
bufPå
 = (
C§Uöt8
*)
	`skb_push
(
skb
, 
macHódîLígthInByãs
);

1440 
bulkd©a
->
d
[0].
os_d©a_±r
 = 
skb
->
d©a
;

1441 
bulkd©a
->
d
[0].
os_√t_buf_±r
 = (*)
skb
;

1442 
bulkd©a
->
d
[0].
d©a_Àngth
 = 
skb
->
Àn
;

1445 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "destination isÇotá QSTA\n");

1446 i‡(
hódroom
 < 
macHódîLígthInByãs
) {

1447 
c§Resu…
 = 
	`unifi_√t_d©a_mÆloc
(
¥iv
, &
d©a_±rs
.
d
[0], 
skb
->
Àn
 + 
macHódîLígthInByãs
);

1449 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

1450 
	`unifi_îr‹
(
¥iv
, " failedÅoállocateÑequest_data. in update_macheader func\n");

1453 
√wSkb
 = (
sk_buff
 *)(
d©a_±rs
.
d
[0].
os_√t_buf_±r
);

1454 
√wSkb
->
Àn
 = 
skb
->À¿+ 
macHódîLígthInByãs
;

1456 
	`mem˝y
((*)
d©a_±rs
.
d
[0].
os_d©a_±r
 + 
macHódîLígthInByãs
,

1457 
skb
->
d©a
, skb->
Àn
);

1459 
bulkd©a
->
d
[0].
os_d©a_±r
 = 
√wSkb
->
d©a
;

1460 
bulkd©a
->
d
[0].
os_√t_buf_±r
 = (*)
√wSkb
;

1461 
bulkd©a
->
d
[0].
d©a_Àngth
 = 
√wSkb
->
Àn
;

1463 
bufPå
 = (
C§Uöt8
*)
d©a_±rs
.
d
[0].
os_d©a_±r
;

1466 
	`k‰ì_skb
(
skb
);

1469 
bufPå
 = (
C§Uöt8
*)
	`skb_push
(
skb
, 
macHódîLígthInByãs
);

1470 
bulkd©a
->
d
[0].
os_d©a_±r
 = 
skb
->
d©a
;

1471 
bulkd©a
->
d
[0].
os_√t_buf_±r
 = (*)
skb
;

1472 
bulkd©a
->
d
[0].
d©a_Àngth
 = 
skb
->
Àn
;

1479 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "upd©ed Ma¯Hódî: %d \n",
macHódîLígthInByãs
);

1480 
	`mem˝y
(
bufPå
, 
macHódîBuf
, 
macHódîLígthInByãs
);

1482 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "leavingÅhe update_macheader function\n");

1484 
	}
}

1508 
	$uf_≠_¥o˚ss_d©a_pdu
(
unifi_¥iv_t
 *
¥iv
, 
sk_buff
 *
skb
,

1509 
ëhhdr
 *
ehdr
, 
C§WifiRouãrCålSèInfo_t
 * 
§cSèInfo
,

1510 c⁄° 
CSR_SIGNAL
 *
sig«l
,

1511 
bulk_d©a_∑øm_t
 *
bulkd©a
,

1512 
C§Uöt8
 
macHódîLígthInByãs
)

1514 c⁄° 
CSR_MA_PACKET_INDICATION
 *
öd
 = &(
sig«l
->
u
.
MaPackëIndiˇti⁄
);

1515 
C§Uöt16
 
öãrÁ˚Tag
 = (
öd
->
VútuÆI¡îÁ˚Idítifõr
 & 0x00ff);

1516 
sk_buff
 *
√wSkb
 = 
NULL
;

1518 
sk_buff
 *
skbPå
 = 
skb
;

1519 
C§Boﬁ
 
£ndToNëdev
 = 
FALSE
;

1520 
C§Boﬁ
 
qosDe°ö©i⁄
 = 
FALSE
;

1521 
CSR_PRIORITY
 
¥i‹ôy
 = 
CSR_CONTENTION
;

1522 
C§WifiRouãrCålSèInfo_t
 *
d°SèInfo
 = 
NULL
;

1523 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
;

1525 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "íãrög uf_≠_¥o˚ss_d©a_pdu %d\n",
macHódîLígthInByãs
);

1527 i‡(
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
) {

1528 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "Interface Tag is Invalid in uf_ap_process_data_pdu\n");

1529 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
->
d
[0]);

1532 
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

1534 if((
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
) &&

1535 (
öãrÁ˚Priv
->
öåaBssE«bÀd
 =
FALSE
)) {

1536 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "uf_≠_¥o˚ss_d©a_pdu:P2P GO i¡øbssE«bÀd?%d\n", 
öãrÁ˚Priv
->
öåaBssE«bÀd
);

1540 
d°SèInfo
 = 
	`C§WifiRouãrCålGëSèti⁄Rec‹dFromPìrMacAddªss
(
¥iv
, 
ehdr
->
h_de°
, 
öãrÁ˚Tag
);

1541 i‡(
d°SèInfo
) {

1542 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
->
d
[0]);

1549 if(!
	`memcmp
(
ehdr
->
h_de°
, 
öãrÁ˚Priv
->
bssid
.
a
, 
ETH_ALEN
)) {

1552 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "destinationáddress is csr_ap\n");

1557 
d°SèInfo
 = 
	`C§WifiRouãrCålGëSèti⁄Rec‹dFromPìrMacAddªss
(
¥iv
, 
ehdr
->
h_de°
, 
öãrÁ˚Tag
);

1560 if(!
d°SèInfo
) {

1561 i‡(!(
ehdr
->
h_de°
[0] & 0x1)) {

1563 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "uniˇ° fømê& de°ö©i⁄Ñec‹dÇŸÉxi°, sídÅÿ√tdevÖrŸÿ%x\n", 
	`ht⁄s
(
skb
->
¥Ÿocﬁ
));

1568 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "skb_c›y, i¿ uf_≠_¥o˚ss_d©a_pdu,ÖrŸocﬁ = %x\n", 
	`ht⁄s
(
skb
->
¥Ÿocﬁ
));

1569 
skbPå
 = 
	`skb_c›y
(
skb
, 
GFP_KERNEL
);

1570 if(
skbPå
 =
NULL
) {

1572 
	`unifi_nŸi˚
(
¥iv
, "brﬂˇ°/mu…iˇ° fømêˇn'àbê£¡ i¿BSS Nÿmeme‹y:ÖrŸÿ%x\n", 
	`ht⁄s
(
skb
->
¥Ÿocﬁ
));

1575 
£ndToNëdev
 = 
TRUE
;

1580 i‡(
	`uf_¥o˚ss_°©i⁄_ªc‹ds_f‹_£ndög_d©a
(
¥iv
, 
öãrÁ˚Tag
, 
§cSèInfo
, 
d°SèInfo
)) {

1581 
	`unifi_nŸi˚
(
¥iv
, "uf_ap_process_data_pdu: stationÑecord validation failed \n");

1582 
öãrÁ˚Priv
->
°©s
.
rx_îr‹s
++;

1583 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
->
d
[0]);

1592 if(
£ndToNëdev
) {

1594 
qosDe°ö©i⁄
 = 
FALSE
;

1595 } if(
d°SèInfo
 && (d°SèInfo->
wmmOrQosE«bÀd
 =
TRUE
)) {

1596 
qosDe°ö©i⁄
 = 
TRUE
;

1599 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "uf_≠_¥o˚ss_d©a_pdu QoS de°ö©i⁄ = %s\n", (
qosDe°ö©i⁄
)? "TRUE": "FALSE");

1602 i‡(
	`upd©e_machódî
(
¥iv
, 
skbPå
, 
√wSkb
, &
¥i‹ôy
, 
bulkd©a
, 
öãrÁ˚Tag
, 
macHódîLígthInByãs
, 
qosDe°ö©i⁄
)) {

1603 
öãrÁ˚Priv
->
°©s
.
rx_îr‹s
++;

1604 
	`unifi_nŸi˚
(
¥iv
, "(Packet Drop) failedÅo updateÅhe Mac header in uf_ap_process_data_pdu\n");

1605 i‡(
£ndToNëdev
) {

1607 
bulkd©a
->
d
[0].
os_d©a_±r
 = 
skbPå
->
d©a
;

1608 
bulkd©a
->
d
[0].
os_√t_buf_±r
 = (*)
skbPå
;

1609 
bulkd©a
->
d
[0].
d©a_Àngth
 = 
skbPå
->
Àn
;

1610 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
->
d
[0]);

1615 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "Mac Header updated...calling uf_process_ma_packet_req \n");

1618 i‡(
	`uf_¥o˚ss_ma_∑ckë_ªq
(
¥iv
, 
ehdr
->
h_de°
, 0xffffffff, 
öãrÁ˚Tag
, 
CSR_NO_CONFIRM_REQUIRED
, (
CSR_RATE
)0,
¥i‹ôy
,Öriv->
√tdev_˛õ¡
->
£ndî_id
, 
bulkd©a
)) {

1619 i‡(
£ndToNëdev
) {

1620 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "In uf_ap_process_data_pdu, (Packet Drop) uf_process_ma_packet_req failed. freeing skb_copy data (original data sentÅo Netdev)\n");

1622 
bulkd©a
->
d
[0].
os_d©a_±r
 = 
skbPå
->
d©a
;

1623 
bulkd©a
->
d
[0].
os_√t_buf_±r
 = (*)
skbPå
;

1624 
bulkd©a
->
d
[0].
d©a_Àngth
 = 
skbPå
->
Àn
;

1625 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
->
d
[0]);

1628 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "In uf_ap_process_data_pdu, (Packet Drop). Unicast data so freeing original skb \n");

1629 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
->
d
[0]);

1632 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "leaving uf_ap_process_data_pdu\n");

1634 i‡(
£ndToNëdev
) {

1638 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "Packet will beÑoutedÅo NetDev\n");

1643 
	}
}

1647 
C§Resu…
 
	$uf_¥o˚ss_ma_∑ckë_ªq
(
unifi_¥iv_t
 *
¥iv
,

1648 
C§Uöt8
 *
≥îMacAddªss
,

1649 
CSR_CLIENT_TAG
 
ho°Tag
,

1650 
C§Uöt16
 
öãrÁ˚Tag
,

1651 
CSR_TRANSMISSION_CONTROL
 
å™smissi⁄C⁄åﬁ
,

1652 
CSR_RATE
 
TønsmôR©e
,

1653 
CSR_PRIORITY
 
¥i‹ôy
,

1654 
CSR_PROCESS_ID
 
ÀSídîPro˚ssId
,

1655 
bulk_d©a_∑øm_t
 *
bulkd©a
)

1657 
C§Resu…
 
°©us
 = 
CSR_RESULT_SUCCESS
;

1658 
CSR_SIGNAL
 
sig«l
;

1659 
ªsu…
;

1660 #ifde‡
CSR_SUPPORT_SME


1661 
C§WifiRouãrCålSèInfo_t
 *
°aRec‹d
 = 
NULL
;

1662 c⁄° 
C§Uöt8
 *
macHdrLoˇti⁄
 = 
bulkd©a
->
d
[0].
os_d©a_±r
;

1663 
C§WifiPackëTy≥
 
pktTy≥
;

1664 
‰ameTy≥
 = 0;

1665 
C§Boﬁ
 
queuePackëDozög
 = 
FALSE
;

1666 
C§Uöt32
 
¥i‹ôy_q
;

1667 
C§Uöt16
 
‰mCål
;

1668 
li°_hód
 * 
li°
 = 
NULL
;

1669 
C§Boﬁ
 
£tBcTim
=
FALSE
;

1670 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
;

1671 
C§Boﬁ
 
ªqueueOnSamePos
 = 
FALSE
;

1672 
C§Uöt32
 
h™dÀ
 = 0xFFFFFFFF;

1673 
lock_Êags
;

1675 
	`UF_TRACE_MAC
(
¥iv
, 
UDBG5
, "íãrög uf_¥o˚ss_ma_∑ckë_ªq,Öìr: ", 
≥îMacAddªss
);

1677 i‡(
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
) {

1678 
	`unifi_îr‹
(
¥iv
, "öãrÁ˚Tag >CSR_WIFI_NUM_INTERFACES, i¡îÁ˚èg = %d\n", 
öãrÁ˚Tag
);

1679  
CSR_RESULT_FAILURE
;

1681 
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

1685 i‡((
°aRec‹d
 = 
	`C§WifiRouãrCålGëSèti⁄Rec‹dFromPìrMacAddªss
(
¥iv
, 
≥îMacAddªss
, 
öãrÁ˚Tag
))) {

1686 
h™dÀ
 = 
°aRec‹d
->
assig√dH™dÀ
;

1690 
	`unifi_‰ame_ma_∑ckë_ªq
(
¥iv
, 
¥i‹ôy
, 
TønsmôR©e
, 
ho°Tag
,

1691 
öãrÁ˚Tag
, 
å™smissi⁄C⁄åﬁ
, 
ÀSídîPro˚ssId
,

1692 
≥îMacAddªss
, &
sig«l
);

1698 
öãrÁ˚Priv
->
öãrÁ˚Mode
)

1700 
CSR_WIFI_ROUTER_CTRL_MODE_AP
:

1701 
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
:

1706 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "I¿%s, i¡îÁ˚ modêi†%x \n", 
__FUNCTION__
, 
öãrÁ˚Priv
->
öãrÁ˚Mode
);

1707 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_NONE
) {

1708 
	`unifi_w¨nög
(
¥iv
, "I¿%s, i¡îÁ˚ modêNONE \n", 
__FUNCTION__
);

1710 i‡((
ªsu…
 = 
	`ul_£nd_sig«l_u≈acked
(
¥iv
, &
sig«l
, 
bulkd©a
))) {

1711 
°©us
 = 
CSR_RESULT_FAILURE
;

1713  
°©us
;

1719 
¥i‹ôy_q
 = 
	`unifi_‰ame_¥i‹ôy_to_queue
((
CSR_PRIORITY
Ë
¥i‹ôy
);

1722 i‡(
°aRec‹d
 && (°aRec‹d->
cuºítPìrSèã
 ==

1723 
CSR_WIFI_ROUTER_CTRL_PEER_CONNECTED_POWER_SAVE
)) {

1727 
queuePackëDozög
 = 
TRUE
;

1731 i‡(*
≥îMacAddªss
 & 0x1) {

1735 
pktTy≥
 = 
CSR_WIFI_MULTICAST_PDU
;

1737 
pktTy≥
 = 
CSR_WIFI_UNICAST_PDU
;

1741 
‰mCål
 = 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
(
macHdrLoˇti⁄
);

1744 
‰ameTy≥
 = ((
‰mCål
 & 0x000cË>> 
FRAME_CONTROL_TYPE_FIELD_OFFSET
);

1745 
‰ameTy≥
)

1747 
IEEE802_11_FRAMETYPE_MANAGEMENT
:

1749 
pktTy≥
)

1751 
CSR_WIFI_UNICAST_PDU
:

1752 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "management unicast PDU in uf_process_ma_packet_req \n");

1754 i‡(!
°aRec‹d
) {

1756 i‡(
	`li°_em±y
(&
öãrÁ˚Priv
->
gíîicMgtFømes
)) {

1757 #ifde‡
CSR_SUPPORT_SME


1758 if(!(
	`IS_DTIM_ACTIVE
(
öãrÁ˚Priv
->
dtimA˘ive
,öãrÁ˚Priv->
mu…iˇ°PduHo°Tag
))) {

1761 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "genericMgtFramesÜist isÉmpty uf_process_ma_packet_req \n");

1762 
ªsu…
 = 
	`ul_£nd_sig«l_u≈acked
(
¥iv
, &
sig«l
, 
bulkd©a
);

1764 if(
ªsu…
 =-
ENOSPC
) {

1766 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "(ENOSPC) Sending genericMgtFrames Failed so buffering\n");

1767 
li°
 = &
öãrÁ˚Priv
->
gíîicMgtFømes
;

1768 
ªqueueOnSamePos
 = 
TRUE
;

1770 #ifde‡
CSR_SUPPORT_SME


1772 
li°
 = &
öãrÁ˚Priv
->
gíîicMgtFømes
;

1773 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "gíîicMgtFøme†queuêem±yánd dtim sèπed\¿ho°èg i†0x%x,\n",
sig«l
.
u
.
MaPackëReque°
.
Ho°Tag
);

1774 
	`upd©e_eo•_to_hód_of_brﬂdˇ°_li°_hód
(
¥iv
,
öãrÁ˚Tag
);

1779 
li°
 = &
öãrÁ˚Priv
->
gíîicMgtFømes
;

1780 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "genericMgtFrames queueÇotÉmpty\n");

1784 i‡(
queuePackëDozög
 || !
	`li°_em±y
(&
°aRec‹d
->
mgtFømes
Ë|| 
	`IS_DTIM_ACTIVE
(
öãrÁ˚Priv
->
dtimA˘ive
,öãrÁ˚Priv->
mu…iˇ°PduHo°Tag
)) {

1787 
li°
 = &
°aRec‹d
->
mgtFømes
;

1789 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "staRecord->MgtFramesÜistÉmpty? = %s, handle = %d, queuePacketDozing = %d\n",

1790 (
	`li°_em±y
(&
°aRec‹d
->
mgtFømes
))? "YES": "NO", sèRec‹d->
assig√dH™dÀ
, 
queuePackëDozög
);

1791 if(
	`IS_DTIM_ACTIVE
(
öãrÁ˚Priv
->
dtimA˘ive
,öãrÁ˚Priv->
mu…iˇ°PduHo°Tag
)){

1792 
	`upd©e_eo•_to_hód_of_brﬂdˇ°_li°_hód
(
¥iv
,
öãrÁ˚Tag
);

1796 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "staRecord->mgtFramesÜist isÉmpty uf_process_ma_packet_req \n");

1797 
ªsu…
 = 
	`ul_£nd_sig«l_u≈acked
(
¥iv
, &
sig«l
, 
bulkd©a
);

1798 if(
ªsu…
 =-
ENOSPC
) {

1800 
li°
 = &
°aRec‹d
->
mgtFømes
;

1801 
ªqueueOnSamePos
 = 
TRUE
;

1802 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "(ENOSPCËSídög MgtFøme†Faûed h™dÀ = %d sÿbuf„rög\n",
°aRec‹d
->
assig√dH™dÀ
);

1803 
¥iv
->
∑u£dSèH™dÀ
[0]=(
C§Uöt8
)(
°aRec‹d
->
assig√dH™dÀ
);

1804 } i‡(
ªsu…
) {

1805 
°©us
 = 
CSR_RESULT_FAILURE
;

1810 
CSR_WIFI_MULTICAST_PDU
:

1811 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "management multicast/broadcast PDU in uf_process_ma_packet_req 'QUEUE it' \n");

1816 
li°
 = &
öãrÁ˚Priv
->
gíîicMu…iˇ°OrBrﬂdCa°MgtFømes
;

1817 if((
öãrÁ˚Priv
->
öãrÁ˚Mode
 !
CSR_WIFI_ROUTER_CTRL_MODE_IBSS
) &&

1818 (
	`li°_em±y
(&
öãrÁ˚Priv
->
gíîicMu…iˇ°OrBrﬂdCa°MgtFømes
))) {

1819 
£tBcTim
=
TRUE
;

1823 
	`unifi_îr‹
(
¥iv
, "conditionÇever meets:ÖacketÅype unrecognized\n");

1826 
IEEE802_11_FRAMETYPE_DATA
:

1827 
pktTy≥
)

1829 
CSR_WIFI_UNICAST_PDU
:

1830 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "data unicast PDU in uf_process_ma_packet_req \n");

1832 if(!
°aRec‹d
) {

1833 
	`unifi_îr‹
(
¥iv
, "I¿%†uniˇ° buà°aRec‹d = NULL\n", 
__FUNCTION__
);

1834  
CSR_RESULT_FAILURE
;

1835 } i‡(
queuePackëDozög
 || 
	`isRouãrBuf„rE«bÀd
(
¥iv
,
¥i‹ôy_q
)|| !
	`li°_em±y
(&
°aRec‹d
->
d©aPdu
[¥i‹ôy_q]Ë|| 
	`IS_DTIM_ACTIVE
(
öãrÁ˚Priv
->
dtimA˘ive
,öãrÁ˚Priv->
mu…iˇ°PduHo°Tag
)) {

1838 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "EnqueuedÅÿ°aRec‹d->d©aPdu[%d] queuePackëDozög=%d,\
É«bÀd = %d \n", 
¥i‹ôy_q
,
queuePackëDozög
,
	`isRouãrBuf„rE«bÀd
(priv,priority_q));

1840 
li°
 = &
°aRec‹d
->
d©aPdu
[
¥i‹ôy_q
];

1842 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "°aRec‹d->d©aPdu[%d]Üi° i†em±y uf_¥o˚ss_ma_∑ckë_ªq \n", 
¥i‹ôy_q
);

1844 
ªsu…
 = 
	`ul_£nd_sig«l_u≈acked
(
¥iv
, &
sig«l
, 
bulkd©a
);

1845 if(
ªsu…
 =-
ENOSPC
) {

1847 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "(ENOSPCËSídög Uniˇ° D©aPDUÅÿqueuê%d Faûed sÿbuf„rög\n",
¥i‹ôy_q
);

1848 
ªqueueOnSamePos
 = 
TRUE
;

1849 
li°
 = &
°aRec‹d
->
d©aPdu
[
¥i‹ôy_q
];

1850 
¥iv
->
∑u£dSèH™dÀ
[
¥i‹ôy_q
]=(
C§Uöt8
)(
°aRec‹d
->
assig√dH™dÀ
);

1851 if(!
	`isRouãrBuf„rE«bÀd
(
¥iv
,
¥i‹ôy_q
)) {

1852 
	`unifi_îr‹
(
¥iv
,"Buf„rög NŸÉ«bÀd f‹ queuê%d \n",
¥i‹ôy_q
);

1854 } i‡(
ªsu…
) {

1855 
°©us
 = 
CSR_RESULT_FAILURE
;

1859 
CSR_WIFI_MULTICAST_PDU
:

1860 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "data multicast/broadcast PDU in uf_process_ma_packet_req \n");

1864 
li°
 = &
öãrÁ˚Priv
->
gíîicMu…iˇ°OrBrﬂdCa°Fømes
;

1865 if(
	`li°_em±y
(&
öãrÁ˚Priv
->
gíîicMu…iˇ°OrBrﬂdCa°Fømes
)) {

1866 
£tBcTim
 = 
TRUE
;

1870 
	`unifi_îr‹
(
¥iv
, "conditionÇever meets:ÖacketÅype unÑecognized\n");

1874 
	`unifi_îr‹
(
¥iv
, "unrecognized frameÅype\n");

1876 if(
li°
) {

1877 
°©us
 = 
	`íque_tx_d©a_pdu
(
¥iv
, 
bulkd©a
,
li°
, &
sig«l
,
ªqueueOnSamePos
);

1879 i‡(
°aRec‹d
 && (
pktTy≥
 =
CSR_WIFI_UNICAST_PDU
Ë&& (!
°©us
)) {

1880 
	`•ö_lock_úqßve
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

1881 
°aRec‹d
->
noOfPktQueued
++;

1882 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

1884 i‡((
pktTy≥
 =
CSR_WIFI_MULTICAST_PDU
Ë&& (!
°©us
))

1887 
	`•ö_lock_úqßve
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

1888 
öãrÁ˚Priv
->
noOfbrﬂdˇ°PktQueued
++;

1889 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

1893 if(
£tBcTim
 && !
°©us
) {

1894 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "tim set dueÅo broadcastÖkt\n");

1895 i‡(!
öãrÁ˚Priv
->
bcTimSëReqPídögFœg
)

1897 
	`upd©e_tim
(
¥iv
,0,
CSR_WIFI_TIM_SET
,
öãrÁ˚Tag
, 
h™dÀ
);

1904 
öãrÁ˚Priv
->
bcTimSëReqQueued
 = 
CSR_WIFI_TIM_SET
;

1905 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "uf_process_ma_packet_req : One more UpdateDTim Request(:%d) Queued \n",

1906 
öãrÁ˚Priv
->
bcTimSëReqQueued
);

1908 } if(
°aRec‹d
 && sèRec‹d->
cuºítPìrSèã
 ==

1909 
CSR_WIFI_ROUTER_CTRL_PEER_CONNECTED_POWER_SAVE
) {

1910 if(
°aRec‹d
->
timSë
 =
CSR_WIFI_TIM_RESET
 || sèRec‹d->timSë =
CSR_WIFI_TIM_RESETTING
) {

1911 if(!
°aRec‹d
->
wmmOrQosE«bÀd
) {

1912 if(!
	`li°_em±y
(&
°aRec‹d
->
mgtFømes
) ||

1913 !
	`li°_em±y
(&
°aRec‹d
->
d©aPdu
[3]) ||

1914 !
	`li°_em±y
(&
°aRec‹d
->
d©aPdu
[
UNIFI_TRAFFIC_Q_CONTENTION
])) {

1915 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "tim set dueÅo unicastÖkt &Öeer inÖowersave\n");

1916 i‡(!
°aRec‹d
->
timReque°PídögFœg
){

1917 
	`upd©e_tim
(
¥iv
,
°aRec‹d
->
aid
,1,
öãrÁ˚Tag
, 
h™dÀ
);

1924 
°aRec‹d
->
upd©eTimReqQueued
 = 1;

1925 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "upd©e_tim : O√ m‹êUpd©eTim Reque° (Tim vÆue:%dËQueued f‹ AID %x\n", 
°aRec‹d
->
upd©eTimReqQueued
,

1926 
°aRec‹d
->
aid
);

1931 
C§Uöt8
 
ÆlDñivîyE«bÀd
 = 0, 
d©aAvaûabÀ
 = 0;

1933 
	`is_Æl_ac_dñivî_íabÀd_™d_m‹ed©a
(
°aRec‹d
, &
ÆlDñivîyE«bÀd
, &
d©aAvaûabÀ
);

1934 i‡(
	`uf_is_m‹e_d©a_f‹_n⁄_dñivîy_ac
(
°aRec‹d
Ë|| (
ÆlDñivîyE«bÀd
 && 
d©aAvaûabÀ
)

1935 || (!
	`li°_em±y
(&
°aRec‹d
->
mgtFømes
))) {

1936 i‡(!
°aRec‹d
->
timReque°PídögFœg
) {

1937 
	`upd©e_tim
(
¥iv
,
°aRec‹d
->
aid
,1,
öãrÁ˚Tag
, 
h™dÀ
);

1944 
°aRec‹d
->
upd©eTimReqQueued
 = 1;

1945 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "upd©e_tim : O√ m‹êUpd©eTim Reque° (Tim vÆue:%dËQueued f‹ AID %x\n", 
°aRec‹d
->
upd©eTimReqQueued
,

1946 
°aRec‹d
->
aid
);

1953 if((
li°
Ë&& (
pktTy≥
 =
CSR_WIFI_UNICAST_PDU
 && !
queuePackëDozög
Ë&& !(
	`isRouãrBuf„rE«bÀd
(
¥iv
,
¥i‹ôy_q
)Ë&& !(
	`IS_DTIM_ACTIVE
(
öãrÁ˚Priv
->
dtimA˘ive
,öãrÁ˚Priv->
mu…iˇ°PduHo°Tag
))) {

1954 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "buf„rög cÀ¨ed f‹ queuê%d Sÿª£ndög buf„ªd fømes\n",
¥i‹ôy_q
);

1955 
	`uf_£nd_buf„ªd_‰ames
(
¥iv
, 
¥i‹ôy_q
);

1957 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "leaving uf_process_ma_packet_req \n");

1958  
°©us
;

1960 #ifde‡
CSR_NATIVE_LINUX


1961 i‡(
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
) {

1962 
	`unifi_îr‹
(
¥iv
, "öãrÁ˚Tag >CSR_WIFI_NUM_INTERFACES, i¡îÁ˚èg = %d\n", 
öãrÁ˚Tag
);

1963  
CSR_RESULT_FAILURE
;

1966 
	`unifi_‰ame_ma_∑ckë_ªq
(
¥iv
, 
¥i‹ôy
, 
TønsmôR©e
, 
ho°Tag
, 
öãrÁ˚Tag
,

1967 
å™smissi⁄C⁄åﬁ
, 
ÀSídîPro˚ssId
,

1968 
≥îMacAddªss
, &
sig«l
);

1969 
ªsu…
 = 
	`ul_£nd_sig«l_u≈acked
(
¥iv
, &
sig«l
, 
bulkd©a
);

1970 i‡(
ªsu…
) {

1971  
CSR_RESULT_FAILURE
;

1974  
°©us
;

1976 
	}
}

1978 #ifde‡
CSR_SUPPORT_SME


1979 
C§I¡8
 
	$uf_gë_¥Ÿe˘i⁄_bô_‰om_öãrÁ˚mode
(
unifi_¥iv_t
 *
¥iv
, 
C§Uöt16
 
öãrÁ˚Tag
, c⁄° 
C§Uöt8
 *
daddr
)

1981 
C§I¡8
 
¥Ÿe˘i⁄
 = 0;

1982 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

1984 
öãrÁ˚Priv
->
öãrÁ˚Mode
)

1986 
CSR_WIFI_ROUTER_CTRL_MODE_STA
:

1987 
CSR_WIFI_ROUTER_CTRL_MODE_P2PCLI
:

1988 
CSR_WIFI_ROUTER_CTRL_MODE_AMP
:

1989 
CSR_WIFI_ROUTER_CTRL_MODE_IBSS
:

1990 
¥Ÿe˘i⁄
 = 
öãrÁ˚Priv
->
¥Ÿe˘
;

1992 
CSR_WIFI_ROUTER_CTRL_MODE_AP
:

1993 
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
:

1995 
C§WifiRouãrCålSèInfo_t
 *
d°SèInfo
 = 
NULL
;

1996 i‡(
daddr
[0] & 0x1) {

1997 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "broadcast/multicastÖacket in send_ma_pkt_request\n");

2001 
¥Ÿe˘i⁄
 = 
öãrÁ˚Priv
->
¥Ÿe˘
;

2004 
d°SèInfo
 = 
	`C§WifiRouãrCålGëSèti⁄Rec‹dFromPìrMacAddªss
(
¥iv
, 
daddr
, 
öãrÁ˚Tag
);

2005 i‡(!
d°SèInfo
) {

2006 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "peerÇot found in stationÑecord in send_ma_pkt_request\n");

2009 
¥Ÿe˘i⁄
 = 
d°SèInfo
->protection;

2014 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "mode unknown in send_ma_pkt_request\n");

2016  
¥Ÿe˘i⁄
;

2017 
	}
}

2019 #ifde‡
CSR_SUPPORT_SME


2020 
C§Uöt8
 
	$£nd_mu…iˇ°_‰ames
(
unifi_¥iv_t
 *
¥iv
, 
C§Uöt16
 
öãrÁ˚Tag
)

2022 
r
;

2023 
tx_buf„ªd_∑ckës_t
 * 
buf„ªd_pkt
 = 
NULL
;

2024 
C§Boﬁ
 
m‹eD©a
 = 
FALSE
;

2025 
C§Uöt8
 
pduSít
 =0;

2026 
lock_Êags
;

2027 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

2028 
C§Uöt32
 
ho°Tag
 = 0xffffffff;

2030 
	`func_íãr
();

2031 if(!
	`isRouãrBuf„rE«bÀd
(
¥iv
,
UNIFI_TRAFFIC_Q_VO
)) {

2032 (
öãrÁ˚Priv
->
dtimA˘ive
)&& (
buf„ªd_pkt
=
	`dequeue_tx_d©a_pdu
(
¥iv
,&öãrÁ˚Priv->
gíîicMu…iˇ°OrBrﬂdCa°MgtFømes
))) {

2033 
buf„ªd_pkt
->
å™smissi⁄C⁄åﬁ
 |(
TRANSMISSION_CONTROL_TRIGGER_MASK
);

2034 
m‹eD©a
 = (
buf„ªd_pkt
->
å™smissi⁄C⁄åﬁ
 & 
TRANSMISSION_CONTROL_EOSP_MASK
)?
FALSE
:
TRUE
;

2037 
	`unifi_åa˚
(
¥iv
,
UDBG2
,"DTIM Occuºed f‹ i¡îÁ˚:£ndög Mgà∑ckë %d\n",
öãrÁ˚Tag
);

2039 if((
r
=
	`‰ame_™d_£nd_queued_pdu
(
¥iv
,
buf„ªd_pkt
,
NULL
,
m‹eD©a
,
FALSE
)Ë=-
ENOSPC
) {

2040 
	`unifi_åa˚
(
¥iv
,
UDBG1
,"‰ame_™d_£nd_queued_pdu faûed wôh ENOSPC f‹ ho°Åag = %x\n", 
buf„ªd_pkt
->
ho°Tag
);

2042 
	`•ö_lock_úqßve
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

2043 
	`li°_add
(&
buf„ªd_pkt
->
q
, &
öãrÁ˚Priv
->
gíîicMu…iˇ°OrBrﬂdCa°MgtFømes
);

2044 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

2047 
	`unifi_åa˚
(
¥iv
,
UDBG1
,"send_multicast_frames: Send genericMulticastOrBroadCastMgtFrames (%x, %x)\n",

2048 
buf„ªd_pkt
->
ho°Tag
,

2049 
r
);

2050 if(
r
) {

2051 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
buf„ªd_pkt
->
bulkd©a
);

2053 if(!
m‹eD©a
) {

2055 
öãrÁ˚Priv
->
dtimA˘ive
 = 
FALSE
;

2056 if(!
r
) {

2057 
ho°Tag
 = 
buf„ªd_pkt
->hostTag;

2058 
pduSít
++;

2060 
	`£nd_vif_avaûibûôy_r•
(
¥iv
,
	`uf_gë_vif_idítifõr
(
öãrÁ˚Priv
->
öãrÁ˚Mode
,
öãrÁ˚Tag
),
CSR_RC_UNSPECIFIED_FAILURE
);

2064 
	`•ö_lock_úqßve
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

2065 
öãrÁ˚Priv
->
noOfbrﬂdˇ°PktQueued
--;

2066 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

2067 
	`k‰ì
(
buf„ªd_pkt
);

2072 if(!
	`isRouãrBuf„rE«bÀd
(
¥iv
,
UNIFI_TRAFFIC_Q_CONTENTION
)) {

2073 (
öãrÁ˚Priv
->
dtimA˘ive
)&& (
buf„ªd_pkt
=
	`dequeue_tx_d©a_pdu
(
¥iv
,&öãrÁ˚Priv->
gíîicMu…iˇ°OrBrﬂdCa°Fømes
))) {

2074 
buf„ªd_pkt
->
å™smissi⁄C⁄åﬁ
 |
TRANSMISSION_CONTROL_TRIGGER_MASK
;

2075 
m‹eD©a
 = (
buf„ªd_pkt
->
å™smissi⁄C⁄åﬁ
 & 
TRANSMISSION_CONTROL_EOSP_MASK
)?
FALSE
:
TRUE
;

2078 if((
r
=
	`‰ame_™d_£nd_queued_pdu
(
¥iv
,
buf„ªd_pkt
,
NULL
,
m‹eD©a
,
FALSE
)Ë=-
ENOSPC
) {

2080 
buf„ªd_pkt
->
å™smissi⁄C⁄åﬁ
 &~(
TRANSMISSION_CONTROL_TRIGGER_MASK
);

2082 
	`•ö_lock_úqßve
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

2083 
	`li°_add
(&
buf„ªd_pkt
->
q
, &
öãrÁ˚Priv
->
gíîicMu…iˇ°OrBrﬂdCa°Fømes
);

2084 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

2087 if(
r
) {

2088 
	`unifi_åa˚
(
¥iv
,
UDBG1
,"send_multicast_frames: Send genericMulticastOrBroadCastFrame failed (%x, %x)\n",

2089 
buf„ªd_pkt
->
ho°Tag
,

2090 
r
);

2091 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
buf„ªd_pkt
->
bulkd©a
);

2093 if(!
m‹eD©a
) {

2094 
öãrÁ˚Priv
->
dtimA˘ive
 = 
FALSE
;

2095 if(!
r
) {

2096 
pduSít
 ++;

2097 
ho°Tag
 = 
buf„ªd_pkt
->hostTag;

2099 
	`£nd_vif_avaûibûôy_r•
(
¥iv
,
	`uf_gë_vif_idítifõr
(
öãrÁ˚Priv
->
öãrÁ˚Mode
,
öãrÁ˚Tag
),
CSR_RC_UNSPECIFIED_FAILURE
);

2103 
	`•ö_lock_úqßve
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

2104 
öãrÁ˚Priv
->
noOfbrﬂdˇ°PktQueued
--;

2105 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

2106 
	`k‰ì
(
buf„ªd_pkt
);

2110 if((
öãrÁ˚Priv
->
dtimA˘ive
 =
FALSE
)) {

2112 
	`unifi_åa˚
(
¥iv
,
UDBG2
,"£nd_mu…iˇ°_‰ames: Rec‹ded ho°Tag o‡EOSPÖackë: = 0x%x\n",
ho°Tag
);

2113 
öãrÁ˚Priv
->
mu…iˇ°PduHo°Tag
 = 
ho°Tag
;

2115  
pduSít
;

2116 
	}
}

2118 
	$uf_¥o˚ss_ma_vif_avaûibûôy_öd
(
unifi_¥iv_t
 *
¥iv
,
C§Uöt8
 *
sigd©a
,

2119 
C§Uöt32
 
sigÀn
)

2121 #ifde‡
CSR_SUPPORT_SME


2122 
CSR_SIGNAL
 
sig«l
;

2123 
CSR_MA_VIF_AVAILABILITY_INDICATION
 *
öd
;

2124 
r
;

2125 
C§Uöt16
 
öãrÁ˚Tag
;

2126 
C§Uöt8
 
pduSít
 =0;

2127 
CSR_RESULT_CODE
 
ªsu…Code
 = 
CSR_RC_SUCCESS
;

2128 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
;

2130 
	`func_íãr
();

2131 
	`unifi_åa˚
(
¥iv
, 
UDBG3
,

2133 *((
C§Uöt16
*)
sigd©a
));

2135 
r
 = 
	`ªad_u≈ack_sig«l
(
sigd©a
, &
sig«l
);

2136 i‡(
r
) {

2137 
	`unifi_îr‹
(
¥iv
,

2139 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
(
sigd©a
));

2140 
	`func_exô
();

2143 
öd
 = &
sig«l
.
u
.
MaVifAvaûabûôyIndiˇti⁄
;

2144 
öãrÁ˚Tag
=
öd
->
VútuÆI¡îÁ˚Idítifõr
 & 0xff;

2146 i‡(
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
) {

2147 
	`unifi_îr‹
(
¥iv
, "in vif_availability_ind interfaceTag is wrong\n");

2151 
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

2153 if(
öd
->
Mu…iˇ°
) {

2154 if(
	`li°_em±y
(&
öãrÁ˚Priv
->
gíîicMu…iˇ°OrBrﬂdCa°Fømes
) &&

2155 
	`li°_em±y
(&
öãrÁ˚Priv
->
gíîicMu…iˇ°OrBrﬂdCa°MgtFømes
)) {

2159 
	`unifi_nŸi˚
(
¥iv
,"ma_vif_avaûibûôy_ödÑe˚võd f‹ mu…iˇ° buàqueue†¨êem±y%d\n",
öãrÁ˚Tag
);

2160 
	`£nd_vif_avaûibûôy_r•
(
¥iv
,
öd
->
VútuÆI¡îÁ˚Idítifõr
,
CSR_RC_NO_BUFFERED_BROADCAST_MULTICAST_FRAMES
);

2161 
öãrÁ˚Priv
->
dtimA˘ive
 = 
FALSE
;

2162 if(
öãrÁ˚Priv
->
mu…iˇ°PduHo°Tag
 == 0xffffffff) {

2163 
	`unifi_nŸi˚
(
¥iv
,"ma_vif_avaûibûôy_ödÑe˚võd f‹ mu…iˇ° buàqueue†¨êem±y%d\n",
öãrÁ˚Tag
);

2165 i‡(!
öãrÁ˚Priv
->
bcTimSëReqPídögFœg
)

2167 
	`upd©e_tim
(
¥iv
,0,
CSR_WIFI_TIM_RESET
,
öãrÁ˚Tag
, 0xFFFFFFFF);

2174 
öãrÁ˚Priv
->
bcTimSëReqQueued
 = 
CSR_WIFI_TIM_RESET
;

2175 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "uf_process_ma_vif_availibility_ind : One more UpdateDTim Request(%d) Queued \n",

2176 
öãrÁ˚Priv
->
bcTimSëReqQueued
);

2181 if(
öãrÁ˚Priv
->
dtimA˘ive
) {

2182 
	`unifi_åa˚
(
¥iv
,
UDBG2
,"DTIM Occuºed f‹áÃódyá˘ivêDTIM i¡îÁ˚ %d\n",
öãrÁ˚Tag
);

2185 
	`unifi_åa˚
(
¥iv
,
UDBG2
,"DTIM Occuºed f‹ i¡îÁ˚ %d\n",
öãrÁ˚Tag
);

2186 if(
	`li°_em±y
(&
öãrÁ˚Priv
->
gíîicMu…iˇ°OrBrﬂdCa°Fømes
)) {

2187 
	`£t_eo•_å™smô_˘æ
(
¥iv
,&
öãrÁ˚Priv
->
gíîicMu…iˇ°OrBrﬂdCa°MgtFømes
);

2189 
	`£t_eo•_å™smô_˘æ
(
¥iv
,&
öãrÁ˚Priv
->
gíîicMu…iˇ°OrBrﬂdCa°Fømes
);

2192 
öãrÁ˚Priv
->
dtimA˘ive
 = 
TRUE
;

2193 
pduSít
 = 
	`£nd_mu…iˇ°_‰ames
(
¥iv
,
öãrÁ˚Tag
);

2196 
	`unifi_îr‹
(
¥iv
,"I¡îÁ˚ swôchög i†nŸ suµ‹ãd %d\n",
öãrÁ˚Tag
);

2197 
ªsu…Code
 = 
CSR_RC_NOT_SUPPORTED
;

2198 
	`£nd_vif_avaûibûôy_r•
(
¥iv
,
öd
->
VútuÆI¡îÁ˚Idítifõr
,
CSR_RC_NOT_SUPPORTED
);

2201 
	}
}

2202 #ifde‡
CSR_SUPPORT_SME


2204 
	#GET_ACTIVE_INTERFACE_TAG
(
¥iv
Ë0

	)

2206 
C§Boﬁ
 
	$uf_is_m‹e_d©a_f‹_dñivîy_ac
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiRouãrCålSèInfo_t
 *
°aRec‹d
)

2208 
C§I¡8
 
i
;

2210 
i
=
UNIFI_TRAFFIC_Q_VO
; i >
UNIFI_TRAFFIC_Q_BK
; i--)

2212 if(((
°aRec‹d
->
powîßveMode
[
i
]==
CSR_WIFI_AC_DELIVERY_ONLY_ENABLE
)

2213 ||(
°aRec‹d
->
powîßveMode
[
i
]==
CSR_WIFI_AC_TRIGGER_AND_DELIVERY_ENABLED
))

2214 &&(!
	`li°_em±y
(&
°aRec‹d
->
d©aPdu
[
i
]))) {

2215 
	`unifi_åa˚
(
¥iv
,
UDBG2
,"uf_is_m‹e_d©a_f‹_dñivîy_ac: D©®AvaûabÀ AC = %d\n", 
i
);

2216  
TRUE
;

2220 
	`unifi_åa˚
(
¥iv
,
UDBG2
,"uf_is_more_data_for_delivery_ac: Data NOT Available \n");

2221  
FALSE
;

2222 
	}
}

2224 
C§Boﬁ
 
	$uf_is_m‹e_d©a_f‹_u•_dñivîy
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiRouãrCålSèInfo_t
 *
°aRec‹d
, 
unifi_TøfficQueue
 
queue
)

2226 
C§I¡8
 
i
;

2228 
i
 = 
queue
; i >
UNIFI_TRAFFIC_Q_BK
; i--)

2230 if(((
°aRec‹d
->
powîßveMode
[
i
]==
CSR_WIFI_AC_DELIVERY_ONLY_ENABLE
)

2231 ||(
°aRec‹d
->
powîßveMode
[
i
]==
CSR_WIFI_AC_TRIGGER_AND_DELIVERY_ENABLED
))

2232 &&(!
	`li°_em±y
(&
°aRec‹d
->
d©aPdu
[
i
]))) {

2233 
	`unifi_åa˚
(
¥iv
,
UDBG2
,"uf_is_m‹e_d©a_f‹_u•_dñivîy: D©®AvaûabÀ AC = %d\n", 
i
);

2234  
TRUE
;

2238 
	`unifi_åa˚
(
¥iv
,
UDBG2
,"uf_is_more_data_for_usp_delivery: Data NOT Available \n");

2239  
FALSE
;

2240 
	}
}

2262 
	$uf_£nd_buf„ªd_d©a_‰om_dñivîy_ac
(
unifi_¥iv_t
 *
¥iv
,

2263 
C§WifiRouãrCålSèInfo_t
 * 
°aInfo
,

2264 
C§Uöt8
 
queue
,

2265 
li°_hód
 *
txLi°
)

2268 
C§Uöt16
 
öãrÁ˚Tag
 = 
	`GET_ACTIVE_INTERFACE_TAG
(
¥iv
);

2269 
tx_buf„ªd_∑ckës_t
 * 
buf„ªd_pkt
 = 
NULL
;

2270 
lock_Êags
;

2271 
C§Boﬁ
 
eo•
=
FALSE
;

2272 
C§I¡8
 
r
 =0;

2273 
C§Boﬁ
 
m‹eD©a
 = 
FALSE
;

2274 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

2276 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "++uf_£nd_buf„ªd_d©a_‰om_dñivîy_ac,á˘ive=%x\n", 
°aInfo
->
u≠sdA˘ive
);

2278 i‡(
queue
 > 
UNIFI_TRAFFIC_Q_VO
)

2282 (
buf„ªd_pkt
=
	`dequeue_tx_d©a_pdu
(
¥iv
, 
txLi°
))) {

2283 if((
	`IS_DTIM_ACTIVE
(
öãrÁ˚Priv
->
dtimA˘ive
,öãrÁ˚Priv->
mu…iˇ°PduHo°Tag
))) {

2284 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "uf_send_buffered_data_from_delivery_ac: DTIM Active, suspend UAPSD, staId: 0x%x\n",

2285 
°aInfo
->
aid
);

2288 
	`•ö_lock_úqßve
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

2289 
°aInfo
->
u•Su•íd
 = 
TRUE
;

2290 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

2292 
	`•ö_lock_úqßve
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

2293 
	`li°_add
(&
buf„ªd_pkt
->
q
,
txLi°
);

2294 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

2298 
buf„ªd_pkt
->
å™smissi⁄C⁄åﬁ
 &=

2299 ~(
TRANSMISSION_CONTROL_TRIGGER_MASK
 | 
TRANSMISSION_CONTROL_EOSP_MASK
);

2302 if((
°aInfo
->
wmmOrQosE«bÀd
 =
TRUE
)&&(°aInfo->
u≠sdA˘ive
 == TRUE)) {

2304 
buf„ªd_pkt
->
å™smissi⁄C⁄åﬁ
 = 
TRANSMISSION_CONTROL_TRIGGER_MASK
;

2310 
m‹eD©a
 = (!
	`li°_em±y
(
txLi°
Ë|| 
	`uf_is_m‹e_d©a_f‹_u•_dñivîy
(
¥iv
, 
°aInfo
, 
queue
));

2312 if(
°aInfo
->
noOfSpFømesSít
 =(°aInfo->
maxSpLígth
 - 1)) {

2313 
m‹eD©a
 = 
FALSE
;

2316 if(
m‹eD©a
 =
FALSE
) {

2317 
eo•
 = 
TRUE
;

2318 
buf„ªd_pkt
->
å™smissi⁄C⁄åﬁ
 =

2319 (
TRANSMISSION_CONTROL_TRIGGER_MASK
 | 
TRANSMISSION_CONTROL_EOSP_MASK
);

2323 
	`unifi_w¨nög
(
¥iv
, "uf_send_buffered_data_from_delivery_ac:Çon U-APSD !!! \n");

2326 
	`unifi_åa˚
(
¥iv
,
UDBG2
,"uf_£nd_buf„ªd_d©a_‰om_dñivîy_a¯: M‹eD©a:%d, EOSP:%d\n",
m‹eD©a
,
eo•
);

2328 if((
r
=
	`‰ame_™d_£nd_queued_pdu
(
¥iv
,
buf„ªd_pkt
,
°aInfo
,
m‹eD©a
,
eo•
)Ë=-
ENOSPC
) {

2330 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "uf_£nd_buf„ªd_d©a_‰om_dñivîy_ac: UASPD su•íded, ENOSPC i¿hùQ=%x\n", 
queue
);

2333 
	`•ö_lock_úqßve
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

2334 
°aInfo
->
u•Su•íd
 = 
TRUE
;

2335 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

2337 
	`•ö_lock_úqßve
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

2338 
	`li°_add
(&
buf„ªd_pkt
->
q
,
txLi°
);

2339 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

2340 
¥iv
->
∑u£dSèH™dÀ
[
queue
]=(
C§Uöt8
)(
°aInfo
->
assig√dH™dÀ
);

2343 if(
r
){

2345 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
buf„ªd_pkt
->
bulkd©a
);

2347 
	`k‰ì
(
buf„ªd_pkt
);

2348 
	`•ö_lock_úqßve
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

2349 
°aInfo
->
noOfSpFømesSít
++;

2350 if((!
m‹eD©a
Ë|| (
°aInfo
->
noOfSpFømesSít
 =°aInfo->
maxSpLígth
)) {

2351 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "uf_send_buffered_data_from_delivery_ac: Terminating USP\n");

2352 
°aInfo
->
u≠sdA˘ive
 = 
FALSE
;

2353 
°aInfo
->
u•Su•íd
 = 
FALSE
;

2354 
°aInfo
->
noOfSpFømesSít
 = 0;

2355 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

2358 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

2361 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "--uf_£nd_buf„ªd_d©a_‰om_dñivîy_ac,á˘ive=%x\n", 
°aInfo
->
u≠sdA˘ive
);

2362 
	}
}

2364 
	$uf_£nd_buf„ªd_d©a_‰om_ac
(
unifi_¥iv_t
 *
¥iv
,

2365 
C§WifiRouãrCålSèInfo_t
 * 
°aInfo
,

2366 
C§Uöt8
 
queue
,

2367 
li°_hód
 *
txLi°
)

2369 
tx_buf„ªd_∑ckës_t
 * 
buf„ªd_pkt
 = 
NULL
;

2370 
lock_Êags
;

2371 
C§Boﬁ
 
eo•
=
FALSE
;

2372 
C§Boﬁ
 
m‹eD©a
 = 
FALSE
;

2373 
C§I¡8
 
r
 =0;

2375 
	`func_íãr
();

2377 
	`unifi_åa˚
(
¥iv
,
UDBG2
,"uf_send_buffered_data_from_ac :\n");

2379 !
	`isRouãrBuf„rE«bÀd
(
¥iv
,
queue
) &&

2380 ((
buf„ªd_pkt
=
	`dequeue_tx_d©a_pdu
(
¥iv
, 
txLi°
))!=
NULL
)){

2382 
buf„ªd_pkt
->
å™smissi⁄C⁄åﬁ
 &=

2383 ~(
TRANSMISSION_CONTROL_TRIGGER_MASK
|
TRANSMISSION_CONTROL_EOSP_MASK
);

2385 
	`unifi_åa˚
(
¥iv
,
UDBG3
,"uf_£nd_buf„ªd_d©a_‰om_a¯: M‹eD©a:%d, EOSP:%d\n",
m‹eD©a
,
eo•
);

2387 if((
r
=
	`‰ame_™d_£nd_queued_pdu
(
¥iv
,
buf„ªd_pkt
,
°aInfo
,
m‹eD©a
,
eo•
)Ë=-
ENOSPC
) {

2389 
	`•ö_lock_úqßve
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

2390 
	`li°_add
(&
buf„ªd_pkt
->
q
,
txLi°
);

2391 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

2392 if(
°aInfo
 !
NULL
){

2393 
¥iv
->
∑u£dSèH™dÀ
[
queue
]=(
C§Uöt8
)(
°aInfo
->
assig√dH™dÀ
);

2395 
	`unifi_åa˚
(
¥iv
,
UDBG3
," uf_£nd_buf„ªd_d©a_‰om_ac: PDU sídög faûed ..Çÿ•a˚ f‹ queuê%d \n",
queue
);

2397 if(
r
){

2399 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
buf„ªd_pkt
->
bulkd©a
);

2401 
	`k‰ì
(
buf„ªd_pkt
);

2405 
	`func_exô
();

2407 
	}
}

2409 
	$uf_£nd_buf„ªd_‰ames
(
unifi_¥iv_t
 *
¥iv
,
unifi_TøfficQueue
 
q
)

2411 
C§Uöt16
 
öãrÁ˚Tag
 = 
	`GET_ACTIVE_INTERFACE_TAG
(
¥iv
);

2412 
C§Uöt32
 
°¨tIndex
=0,
ídIndex
=0;

2413 
C§WifiRouãrCålSèInfo_t
 * 
°aInfo
 = 
NULL
;

2414 
C§Uöt8
 
queue
;

2415 
C§Boﬁ
 
m‹eD©a
 = 
FALSE
;

2417 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

2419 if(!((
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
) ||

2420 (
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
)))

2422 
	`func_íãr
();

2424 
queue
 = (
q
<=3)?q:0;

2426 if(
öãrÁ˚Priv
->
dtimA˘ive
) {

2428 
	`£nd_mu…iˇ°_‰ames
(
¥iv
,
öãrÁ˚Tag
);

2429 if(!
öãrÁ˚Priv
->
dtimA˘ive
) {

2430 
m‹eD©a
 = (!
	`li°_em±y
(&
öãrÁ˚Priv
->
gíîicMu…iˇ°OrBrﬂdCa°MgtFømes
) ||

2431 !
	`li°_em±y
(&
öãrÁ˚Priv
->
gíîicMu…iˇ°OrBrﬂdCa°Fømes
));

2432 if(!
m‹eD©a
) {

2433 i‡(!
öãrÁ˚Priv
->
bcTimSëReqPídögFœg
)

2435 
	`upd©e_tim
(
¥iv
,0,
CSR_WIFI_TIM_RESET
,
öãrÁ˚Tag
, 0XFFFFFFFF);

2442 
öãrÁ˚Priv
->
bcTimSëReqQueued
 = 
CSR_WIFI_TIM_RESET
;

2443 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "uf_send_buffered_frames : One more UpdateDTim Request(%d) Queued \n",

2444 
öãrÁ˚Priv
->
bcTimSëReqQueued
);

2448 
m‹eD©a
 = (!
	`li°_em±y
(&
öãrÁ˚Priv
->
gíîicMu…iˇ°OrBrﬂdCa°MgtFømes
) ||

2449 !
	`li°_em±y
(&
öãrÁ˚Priv
->
gíîicMu…iˇ°OrBrﬂdCa°Fømes
));

2450 if(!
m‹eD©a
) {

2452 
	`unifi_îr‹
(
¥iv
,"ERROR: No More Data but DTIM isáctive sending Response\n");

2453 
	`£nd_vif_avaûibûôy_r•
(
¥iv
,
	`uf_gë_vif_idítifõr
(
öãrÁ˚Priv
->
öãrÁ˚Mode
,
öãrÁ˚Tag
),
CSR_RC_NO_BUFFERED_BROADCAST_MULTICAST_FRAMES
);

2454 
öãrÁ˚Priv
->
dtimA˘ive
 = 
FALSE
;

2457 
	`func_exô
();

2460 if(
¥iv
->
∑u£dSèH™dÀ
[
queue
] > 7) {

2461 
¥iv
->
∑u£dSèH™dÀ
[
queue
] = 0;

2464 if(
queue
 =
UNIFI_TRAFFIC_Q_VO
) {

2467 
	`unifi_åa˚
(
¥iv
,
UDBG2
,"uf_£nd_buf„ªd_‰ame†:Åryög mgà‰om queue=%d\n",
queue
);

2468 
°¨tIndex
0; sèπIndex < 
UNIFI_MAX_CONNECTIONS
;startIndex++) {

2469 
°aInfo
 = 
	`C§WifiRouãrCålGëSèti⁄Rec‹dFromH™dÀ
(
¥iv
,
°¨tIndex
,
öãrÁ˚Tag
);

2470 if(!
°aInfo
 ) {

2472 } if((
°aInfo
->
cuºítPìrSèã
 =
CSR_WIFI_ROUTER_CTRL_PEER_CONNECTED_POWER_SAVE
)

2473 &&(
°aInfo
->
u≠sdA˘ive
 =
FALSE
) ) {

2477 if((
°aInfo
 !
NULL
)&&(°aInfo->
cuºítPìrSèã
 =
CSR_WIFI_ROUTER_CTRL_PEER_CONNECTED_ACTIVE
)

2478 &&(
°aInfo
->
u≠sdA˘ive
 =
FALSE
)){

2480 if(!
	`li°_em±y
(&
°aInfo
->
mgtFømes
)){

2481 
	`uf_£nd_buf„ªd_d©a_‰om_ac
(
¥iv
,
°aInfo
, 
UNIFI_TRAFFIC_Q_VO
, &°aInfo->
mgtFømes
);

2485 if(
	`isRouãrBuf„rE«bÀd
(
¥iv
,
queue
)) {

2486 
	`unifi_nŸi˚
(
¥iv
,"uf_£nd_buf„ªd_‰ame†: Nÿ•a˚ Le· f‹ queuê%d\n",
queue
);

2491 if(!
	`li°_em±y
(&
öãrÁ˚Priv
->
gíîicMgtFømes
)) {

2492 
	`unifi_åa˚
(
¥iv
,
UDBG2
,"uf_£nd_buf„ªd_‰ame†:Åryög gíîi¯mgà‰om queue=%d\n",
queue
);

2493 
	`uf_£nd_buf„ªd_d©a_‰om_ac
(
¥iv
,
°aInfo
, 
UNIFI_TRAFFIC_Q_VO
, &
öãrÁ˚Priv
->
gíîicMgtFømes
);

2498 
	`unifi_åa˚
(
¥iv
,
UDBG2
,"uf_£nd_buf„ªd_‰ame†: ResumêˇŒed f‹ Queue=%d\n",
queue
);

2499 
	`unifi_åa˚
(
¥iv
,
UDBG2
,"uf_£nd_buf„ªd_‰ame†: sèπ=%dÉnd=%d\n",
°¨tIndex
,
ídIndex
);

2501 
°¨tIndex
 = 
¥iv
->
∑u£dSèH™dÀ
[
queue
];

2502 
ídIndex
 = (
°¨tIndex
 + 
UNIFI_MAX_CONNECTIONS
 -1) % UNIFI_MAX_CONNECTIONS;

2504 
°¨tIndex
 !
ídIndex
) {

2505 
°aInfo
 = 
	`C§WifiRouãrCålGëSèti⁄Rec‹dFromH™dÀ
(
¥iv
,
°¨tIndex
,
öãrÁ˚Tag
);

2506 if(!
°aInfo
) {

2507 
°¨tIndex
 ++;

2508 if(
°¨tIndex
 >
UNIFI_MAX_CONNECTIONS
) {

2509 
°¨tIndex
 = 0;

2512 } if((
°aInfo
->
cuºítPìrSèã
 =
CSR_WIFI_ROUTER_CTRL_PEER_CONNECTED_POWER_SAVE
)

2513 &&(
°aInfo
->
u≠sdA˘ive
 =
FALSE
)) {

2514 
°¨tIndex
 ++;

2515 if(
°¨tIndex
 >
UNIFI_MAX_CONNECTIONS
) {

2516 
°¨tIndex
 = 0;

2521 
	`unifi_åa˚
(
¥iv
,
UDBG2
,"uf_£nd_buf„ªd_‰ame†:Åryög d©®‰om queue=%d\n",
queue
);

2524 if((
°aInfo
 !
NULL
)&&(°aInfo->
cuºítPìrSèã
 =
CSR_WIFI_ROUTER_CTRL_PEER_CONNECTED_ACTIVE
)

2525 &&(
°aInfo
->
u≠sdA˘ive
 =
FALSE
)) {

2526 if(!
	`li°_em±y
(&
°aInfo
->
d©aPdu
[
queue
])) {

2529 
	`uf_£nd_buf„ªd_d©a_‰om_ac
(
¥iv
, 
°aInfo
, 
queue
, (&°aInfo->
d©aPdu
[queue]));

2532 
°¨tIndex
 ++;

2533 if(
°¨tIndex
 >
UNIFI_MAX_CONNECTIONS
) {

2534 
°¨tIndex
 = 0;

2537 if(
	`isRouãrBuf„rE«bÀd
(
¥iv
,
queue
)) {

2538 
¥iv
->
∑u£dSèH™dÀ
[
queue
] = 
ídIndex
;

2540 
¥iv
->
∑u£dSèH™dÀ
[
queue
] = 0;

2546 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "c§WifiHùSídBuf„ªdFømes: UAPSD ResumêQ=%x\n", 
queue
);

2547 
	`ªsume_su•íded_u≠sd
(
¥iv
, 
öãrÁ˚Tag
);

2548 
	`func_exô
();

2549 
	}
}

2552 
C§Boﬁ
 
	$uf_is_m‹e_d©a_f‹_n⁄_dñivîy_ac
(
C§WifiRouãrCålSèInfo_t
 *
°aRec‹d
)

2554 
C§Uöt8
 
i
;

2556 
i
=0;i<=3;i++)

2558 if(((
°aRec‹d
->
powîßveMode
[
i
]==
CSR_WIFI_AC_TRIGGER_ONLY_ENABLED
)

2559 ||(
°aRec‹d
->
powîßveMode
[
i
]==
CSR_WIFI_AC_LEGACY_POWER_SAVE
))

2560 &&(!
	`li°_em±y
(&
°aRec‹d
->
d©aPdu
[
i
]))){

2562  
TRUE
;

2566 if(((
°aRec‹d
->
powîßveMode
[
UNIFI_TRAFFIC_Q_VO
]==
CSR_WIFI_AC_TRIGGER_ONLY_ENABLED
)

2567 ||(
°aRec‹d
->
powîßveMode
[
UNIFI_TRAFFIC_Q_VO
]==
CSR_WIFI_AC_LEGACY_POWER_SAVE
))

2568 &&(!
	`li°_em±y
(&
°aRec‹d
->
mgtFømes
))){

2570  
TRUE
;

2575  
FALSE
;

2576 
	}
}

2579 
	$uf_¥o˚ss_°©i⁄_ªc‹ds_f‹_£ndög_d©a
(
unifi_¥iv_t
 *
¥iv
,
C§Uöt16
 
öãrÁ˚Tag
,

2580 
C§WifiRouãrCålSèInfo_t
 *
§cSèInfo
,

2581 
C§WifiRouãrCålSèInfo_t
 *
d°SèInfo
)

2583 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

2585 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "entering uf_process_station_records_for_sending_data\n");

2587 i‡(
§cSèInfo
->
cuºítPìrSèã
 =
CSR_WIFI_ROUTER_CTRL_PEER_DISCONNECTED
) {

2588 
	`unifi_îr‹
(
¥iv
, "Peer StateÇot connected AID = %x, handle = %x, controlÖort state = %x\n",

2589 
§cSèInfo
->
aid
, srcSèInfo->
assig√dH™dÀ
, srcSèInfo->
≥îC⁄åﬁÀdP‹t
->
p‹t_a˘i⁄
);

2592 
öãrÁ˚Priv
->
öãrÁ˚Mode
)

2594 
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
:

2595 
CSR_WIFI_ROUTER_CTRL_MODE_AP
:

2596 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "mode is AP/P2PGO\n");

2599 
	`unifi_w¨nög
(
¥iv
, "mode isÇor APÇeither P2PGO,Öacket cant be xmit\n");

2603 
d°SèInfo
->
≥îC⁄åﬁÀdP‹t
->
p‹t_a˘i⁄
)

2605 
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_CLOSED_DISCARD
:

2606 
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_CLOSED_BLOCK
:

2607 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "destinationÖort is closed/blocked, discardingÅheÖacket\n");

2610 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "destinationÖort state is open\n");

2616 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "leaving uf_process_station_records_for_sending_data\n");

2618 
	}
}

2639 
	$uf_h™dÀ_u•‰ames_dñivîy
(
unifi_¥iv_t
 * 
¥iv
, 
C§WifiRouãrCålSèInfo_t
 *
°aInfo
, 
C§Uöt16
 
öãrÁ˚Tag
)

2642 
C§I¡8
 
i
;

2643 
C§Uöt8
 
ÆlDñivîyE«bÀd
 = 0, 
d©aAvaûabÀ
 = 0;

2644 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

2645 
lock_Êags
;

2647 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, " ++ uf_handle_uspframes_delivery, uapsdáctive=%x, suspended?=%x\n",

2648 
°aInfo
->
u≠sdA˘ive
, sèInfo->
u•Su•íd
);

2656 i‡(!
°aInfo
->
u•Su•íd
 && sèInfo->
u≠sdA˘ive
)

2658 
	`unifi_nŸi˚
(
¥iv
, "uf_handle_uspframes_delivery: U-APSDálreadyáctive! STA=%x:%x:%x:%x:%x:%x\n",

2659 
°aInfo
->
≥îMacAddªss
.
a
[0], staInfo->peerMacAddress.a[1],

2660 
°aInfo
->
≥îMacAddªss
.
a
[2], staInfo->peerMacAddress.a[3],

2661 
°aInfo
->
≥îMacAddªss
.
a
[4], staInfo->peerMacAddress.a[5]);

2665 
	`•ö_lock_úqßve
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

2666 
°aInfo
->
u≠sdA˘ive
 = 
TRUE
;

2667 
°aInfo
->
u•Su•íd
 = 
FALSE
;

2668 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

2670 if(((
°aInfo
->
powîßveMode
[
UNIFI_TRAFFIC_Q_VO
]==
CSR_WIFI_AC_TRIGGER_AND_DELIVERY_ENABLED
)||

2671 (
°aInfo
->
powîßveMode
[
UNIFI_TRAFFIC_Q_VO
]==
CSR_WIFI_AC_DELIVERY_ONLY_ENABLE
))

2672 && (!
	`li°_em±y
(&
°aInfo
->
mgtFømes
))) {

2675 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "uf_handle_uspframes_delivery: Sending buffered management frames\n");

2676 
	`uf_£nd_buf„ªd_d©a_‰om_dñivîy_ac
(
¥iv
, 
°aInfo
, 
UNIFI_TRAFFIC_Q_VO
, &°aInfo->
mgtFømes
);

2679 i‡(!
	`uf_is_m‹e_d©a_f‹_dñivîy_ac
(
¥iv
, 
°aInfo
)) {

2683 i‡(!
°aInfo
->
u•Su•íd
) {

2684 
	`•ö_lock_úqßve
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

2685 
°aInfo
->
u≠sdA˘ive
 = 
FALSE
;

2686 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

2688 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "uf_handle_uspframes_delivery: sending QNull forÅrigger\n");

2689 
	`uf_£nd_qos_nuŒ
(
¥iv
, 
öãrÁ˚Tag
, 
°aInfo
->
≥îMacAddªss
.
a
, (
CSR_PRIORITY
Ë°aInfo->
åiggîFømePri‹ôy
, staInfo);

2690 
°aInfo
->
åiggîFømePri‹ôy
 = 
CSR_QOS_UP0
;

2692 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "uf_handle_uspframes_delivery: MgtQ xfer suspended\n");

2695 
i
 = 
UNIFI_TRAFFIC_Q_VO
; i >
UNIFI_TRAFFIC_Q_BK
; i--) {

2696 if(((
°aInfo
->
powîßveMode
[
i
]==
CSR_WIFI_AC_DELIVERY_ONLY_ENABLE
)

2697 ||(
°aInfo
->
powîßveMode
[
i
]==
CSR_WIFI_AC_TRIGGER_AND_DELIVERY_ENABLED
))

2698 && (!
	`li°_em±y
(&
°aInfo
->
d©aPdu
[
i
]))) {

2700 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "uf_h™dÀ_u•‰ames_dñivîy: Buf„ªd d©®‰ame†‰om Queuê(%dËf‹ USP\n", 
i
);

2701 
	`uf_£nd_buf„ªd_d©a_‰om_dñivîy_ac
(
¥iv
, 
°aInfo
, 
i
, &°aInfo->
d©aPdu
[i]);

2704 i‡((!
°aInfo
->
u≠sdA˘ive
) ||

2705 (
°aInfo
->
u•Su•íd
 && 
	`IS_DTIM_ACTIVE
(
öãrÁ˚Priv
->
dtimA˘ive
,öãrÁ˚Priv->
mu…iˇ°PduHo°Tag
))) {

2709 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "uf_handle_uspframes_delivery: suspend=%x, DTIM=%x, USPÅerminated=%s\n",

2710 
°aInfo
->
u•Su•íd
, 
	`IS_DTIM_ACTIVE
(
öãrÁ˚Priv
->
dtimA˘ive
,öãrÁ˚Priv->
mu…iˇ°PduHo°Tag
),

2711 
°aInfo
->
u≠sdA˘ive
?"NO":"YES");

2720 
	`is_Æl_ac_dñivî_íabÀd_™d_m‹ed©a
(
°aInfo
, &
ÆlDñivîyE«bÀd
, &
d©aAvaûabÀ
);

2721 i‡((
ÆlDñivîyE«bÀd
 && !
d©aAvaûabÀ
)) {

2722 i‡((
°aInfo
->
timSë
 !
CSR_WIFI_TIM_RESET
Ë|| (°aInfo->timSë !
CSR_WIFI_TIM_RESETTING
)) {

2723 
°aInfo
->
upd©eTimReqQueued
 = (
C§Uöt8
Ë
CSR_WIFI_TIM_RESET
;

2724 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, " --uf_handle_uspframes_delivery, UAPSDÅimset\n");

2725 i‡(!
°aInfo
->
timReque°PídögFœg
) {

2726 
	`upd©e_tim
(
¥iv
, 
°aInfo
->
aid
, 0, 
öãrÁ˚Tag
, sèInfo->
assig√dH™dÀ
);

2730 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, " --uf_handle_uspframes_delivery, uapsdáctive=%x, suspend?=%x\n",

2731 
°aInfo
->
u≠sdA˘ive
, sèInfo->
u•Su•íd
);

2732 
	}
}

2734 
	$uf_¥o˚ss_wmm_dñivî_ac_u≠sd
(
unifi_¥iv_t
 * 
¥iv
,

2735 
C§WifiRouãrCålSèInfo_t
 * 
§cSèInfo
,

2736 
C§Uöt16
 
qosC⁄åﬁ
,

2737 
C§Uöt16
 
öãrÁ˚Tag
)

2739 
CSR_PRIORITY
 
¥i‹ôy
;

2740 
unifi_TøfficQueue
 
¥i‹ôy_q
;

2741 
lock_Êags
;

2743 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "++uf_¥o˚ss_wmm_dñivî_ac_u≠sd: u≠sda˘ive?=%x\n", 
§cSèInfo
->
u≠sdA˘ive
);

2747 
¥i‹ôy
 = (
CSR_PRIORITY
)(
qosC⁄åﬁ
 & 
IEEE802_11_QC_TID_MASK
);

2748 
¥i‹ôy_q
 = 
	`unifi_‰ame_¥i‹ôy_to_queue
((
CSR_PRIORITY
Ë
¥i‹ôy
);

2750 if((
§cSèInfo
->
powîßveMode
[
¥i‹ôy_q
]==
CSR_WIFI_AC_TRIGGER_ONLY_ENABLED
)

2751 ||(
§cSèInfo
->
powîßveMode
[
¥i‹ôy_q
]==
CSR_WIFI_AC_TRIGGER_AND_DELIVERY_ENABLED
)) {

2752 
	`•ö_lock_úqßve
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

2753 
§cSèInfo
->
åiggîFømePri‹ôy
 = 
¥i‹ôy
;

2754 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

2755 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "uf_¥o˚ss_wmm_dñivî_ac_u≠sd:Åriggî føme, Begö U-APSD,ÅriggîQ=%x\n", 
¥i‹ôy_q
);

2756 
	`uf_h™dÀ_u•‰ames_dñivîy
(
¥iv
, 
§cSèInfo
, 
öãrÁ˚Tag
);

2758 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "--uf_¥o˚ss_wmm_dñivî_ac_u≠sd: u≠sda˘ive?=%x\n", 
§cSèInfo
->
u≠sdA˘ive
);

2759 
	}
}

2762 
	$uf_£nd_qos_nuŒ
(
unifi_¥iv_t
 * 
¥iv
,
C§Uöt16
 
öãrÁ˚Tag
, c⁄° 
C§Uöt8
 *
da
,
CSR_PRIORITY
 
¥i‹ôy
,
C§WifiRouãrCålSèInfo_t
 * 
§cSèInfo
)

2764 
bulk_d©a_∑øm_t
 
bulkd©a
;

2765 
C§Resu…
 
c§Resu…
;

2766 
sk_buff
 *
skb
, *
√wSkb
 = 
NULL
;

2767 
C§WifiMacAddªss
 
≥îAddªss
;

2768 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

2769 
CSR_TRANSMISSION_CONTROL
 
å™smissi⁄C⁄åﬁ
 = (
TRANSMISSION_CONTROL_EOSP_MASK
 | 
TRANSMISSION_CONTROL_TRIGGER_MASK
);

2770 
r
;

2771 
CSR_SIGNAL
 
sig«l
;

2772 
C§Uöt32
 
¥i‹ôy_q
;

2773 
CSR_RATE
 
å™smôR©e
 = 0;

2776 
	`func_íãr
();

2779 
c§Resu…
 = 
	`unifi_√t_d©a_mÆloc
(
¥iv
, &
bulkd©a
.
d
[0], 
MAC_HEADER_SIZE
 + 
QOS_CONTROL_HEADER_SIZE
);

2781 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

2782 
	`unifi_îr‹
(
¥iv
, " failedÅoállocateÑequest_data. in uf_send_qos_null func\n");

2785 
skb
 = (
sk_buff
 *)(
bulkd©a
.
d
[0].
os_√t_buf_±r
);

2786 
skb
->
Àn
 = 0;

2787 
bulkd©a
.
d
[0].
os_d©a_±r
 = 
skb
->
d©a
;

2788 
bulkd©a
.
d
[0].
os_√t_buf_±r
 = (*)
skb
;

2789 
bulkd©a
.
d
[0].
√t_buf_Àngth
 = bulkd©a.d[0].
d©a_Àngth
 = 
skb
->
Àn
;

2790 
bulkd©a
.
d
[1].
os_d©a_±r
 = 
NULL
;

2791 
bulkd©a
.
d
[1].
os_√t_buf_±r
 = 
NULL
;

2792 
bulkd©a
.
d
[1].
√t_buf_Àngth
 = bulkd©a.d[1].
d©a_Àngth
 = 0;

2796 i‡(
	`¥ï¨e_™d_add_machódî
(
¥iv
, 
skb
, 
√wSkb
, 
¥i‹ôy
, &
bulkd©a
, 
öãrÁ˚Tag
, 
da
, 
öãrÁ˚Priv
->
bssid
.
a
, 0)) {

2797 
	`unifi_îr‹
(
¥iv
, "failedÅo create MAC header\n");

2798 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
.
d
[0]);

2801 
	`mem˝y
(
≥îAddªss
.
a
, ((
C§Uöt8
 *Ë
bulkd©a
.
d
[0].
os_d©a_±r
Ë+ 4, 
ETH_ALEN
);

2803 
¥i‹ôy_q
 = 
	`unifi_‰ame_¥i‹ôy_to_queue
((
CSR_PRIORITY
Ë
¥i‹ôy
);

2808 
öãrÁ˚Priv
->
öãrÁ˚Mode
)

2810 
CSR_WIFI_ROUTER_CTRL_MODE_AP
:

2811 
å™smôR©e
 = 2;

2813 
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
:

2814 
å™smôR©e
 = 12;

2817 
å™smôR©e
 = 0;

2819 
	`unifi_‰ame_ma_∑ckë_ªq
(
¥iv
, 
¥i‹ôy
, 
å™smôR©e
, 0xffffffff, 
öãrÁ˚Tag
,

2820 
å™smissi⁄C⁄åﬁ
, 
¥iv
->
√tdev_˛õ¡
->
£ndî_id
,

2821 
≥îAddªss
.
a
, &
sig«l
);

2823 
r
 = 
	`ul_£nd_sig«l_u≈acked
(
¥iv
, &
sig«l
, &
bulkd©a
);

2824 if(
r
) {

2825 
	`unifi_îr‹
(
¥iv
, "ÁûedÅÿ£nd QOS d©®nuŒÖackëÑesu…: %d\n",
r
);

2826 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
.
d
[0]);

2829 
	`func_exô
();

2832 
	}
}

2833 
	$uf_£nd_nuŒd©a
(
unifi_¥iv_t
 * 
¥iv
,
C§Uöt16
 
öãrÁ˚Tag
, c⁄° 
C§Uöt8
 *
da
,
CSR_PRIORITY
 
¥i‹ôy
,
C§WifiRouãrCålSèInfo_t
 * 
§cSèInfo
)

2835 
bulk_d©a_∑øm_t
 
bulkd©a
;

2836 
C§Resu…
 
c§Resu…
;

2837 
sk_buff
 *
skb
, *
√wSkb
 = 
NULL
;

2838 
C§WifiMacAddªss
 
≥îAddªss
;

2839 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

2840 
CSR_TRANSMISSION_CONTROL
 
å™smissi⁄C⁄åﬁ
 = 0;

2841 
r
;

2842 
CSR_SIGNAL
 
sig«l
;

2843 
C§Uöt32
 
¥i‹ôy_q
;

2844 
CSR_RATE
 
å™smôR©e
 = 0;

2845 
CSR_MA_PACKET_REQUEST
 *
ªq
 = &
sig«l
.
u
.
MaPackëReque°
;

2846 
lock_Êags
;

2848 
	`func_íãr
();

2850 
c§Resu…
 = 
	`unifi_√t_d©a_mÆloc
(
¥iv
, &
bulkd©a
.
d
[0], 
MAC_HEADER_SIZE
);

2852 i‡(
c§Resu…
 !
CSR_RESULT_SUCCESS
) {

2853 
	`unifi_îr‹
(
¥iv
, "uf_send_nulldata: FailedÅoállocate memory for NULL frame\n");

2856 
skb
 = (
sk_buff
 *)(
bulkd©a
.
d
[0].
os_√t_buf_±r
);

2857 
skb
->
Àn
 = 0;

2858 
bulkd©a
.
d
[0].
os_d©a_±r
 = 
skb
->
d©a
;

2859 
bulkd©a
.
d
[0].
os_√t_buf_±r
 = (*)
skb
;

2860 
bulkd©a
.
d
[0].
√t_buf_Àngth
 = bulkd©a.d[0].
d©a_Àngth
 = 
skb
->
Àn
;

2861 
bulkd©a
.
d
[1].
os_d©a_±r
 = 
NULL
;

2862 
bulkd©a
.
d
[1].
os_√t_buf_±r
 = 
NULL
;

2863 
bulkd©a
.
d
[1].
√t_buf_Àngth
 = bulkd©a.d[1].
d©a_Àngth
 = 0;

2866 i‡(
	`¥ï¨e_™d_add_machódî
(
¥iv
, 
skb
, 
√wSkb
, 
¥i‹ôy
, &
bulkd©a
, 
öãrÁ˚Tag
, 
da
, 
öãrÁ˚Priv
->
bssid
.
a
, 0)) {

2867 
	`unifi_îr‹
(
¥iv
, "uf_send_nulldata: FailedÅo create MAC header\n");

2868 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
.
d
[0]);

2871 
	`mem˝y
(
≥îAddªss
.
a
, ((
C§Uöt8
 *Ë
bulkd©a
.
d
[0].
os_d©a_±r
Ë+ 4, 
ETH_ALEN
);

2873 
¥i‹ôy_q
 = 
	`unifi_‰ame_¥i‹ôy_to_queue
((
CSR_PRIORITY
Ë
¥i‹ôy
);

2874 
å™smissi⁄C⁄åﬁ
 &~(
CSR_NO_CONFIRM_REQUIRED
);

2879 
öãrÁ˚Priv
->
öãrÁ˚Mode
)

2881 
CSR_WIFI_ROUTER_CTRL_MODE_AP
:

2882 
å™smôR©e
 = 2;

2884 
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
:

2885 
å™smôR©e
 = 12;

2888 
å™smôR©e
 = 0;

2890 
	`unifi_‰ame_ma_∑ckë_ªq
(
¥iv
, 
¥i‹ôy
, 
å™smôR©e
, 
INVALID_HOST_TAG
, 
öãrÁ˚Tag
,

2891 
å™smissi⁄C⁄åﬁ
, 
¥iv
->
√tdev_˛õ¡
->
£ndî_id
,

2892 
≥îAddªss
.
a
, &
sig«l
);

2895 
§cSèInfo
->
nuŒD©aHo°Tag
 = 
ªq
->
Ho°Tag
;

2896 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "uf_£nd_nuŒd©a: STA AID = %d ho°Tag = %x\n", 
§cSèInfo
->
aid
, 
ªq
->
Ho°Tag
);

2898 
r
 = 
	`ul_£nd_sig«l_u≈acked
(
¥iv
, &
sig«l
, &
bulkd©a
);

2900 if(
r
 =-
ENOSPC
) {

2901 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "uf_send_nulldata: ENOSPC RequeueÅhe Null frame\n");

2902 
	`íque_tx_d©a_pdu
(
¥iv
, &
bulkd©a
, &
§cSèInfo
->
d©aPdu
[
¥i‹ôy_q
], &
sig«l
, 1);

2903 
	`•ö_lock_úqßve
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

2904 
§cSèInfo
->
noOfPktQueued
++;

2905 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

2909 if(
r
 &&Ñ !-
ENOSPC
){

2910 
	`unifi_îr‹
(
¥iv
, "uf_£nd_nuŒd©a: FaûedÅÿ£nd NuŒ fømêEº‹ = %d\n",
r
);

2911 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
bulkd©a
.
d
[0]);

2912 
§cSèInfo
->
nuŒD©aHo°Tag
 = 
INVALID_HOST_TAG
;

2915 
	`func_exô
();

2917 
	}
}

2919 
C§Boﬁ
 
	$uf_check_brﬂdˇ°_bssid
(
unifi_¥iv_t
 *
¥iv
, c⁄° 
bulk_d©a_∑øm_t
 *
bulkd©a
)

2921 
C§Uöt8
 *
bssid
 = 
NULL
;

2922 c⁄° 
C§WifiMacAddªss
 
brﬂdˇ°_addªss
 = {{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}};

2923 
C§Uöt8
 
toDs
, 
‰omDs
;

2925 
toDs
 = (((
bulkd©a
->
d
[0].
os_d©a_±r
)[1]) & 0x01) ? 1 : 0;

2926 
‰omDs
 =(((
bulkd©a
->
d
[0].
os_d©a_±r
)[1]) & 0x02) ? 1 : 0;

2928 i‡(
toDs
 && 
‰omDs
)

2930 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "Address 4Öresent, Don'tÅryÅo find BSSID\n");

2931 
bssid
 = 
NULL
;

2933 if((
toDs
 =0Ë&& (
‰omDs
 ==0))

2936 
bssid
 = (
C§Uöt8
 *Ë(
bulkd©a
->
d
[0].
os_d©a_±r
 + 4 + (2 * 
ETH_ALEN
));

2938 if(
toDs
)

2941 
bssid
 = (
C§Uöt8
 *Ë(
bulkd©a
->
d
[0].
os_d©a_±r
 + 4);

2943 if(
‰omDs
)

2946 
bssid
 = (
C§Uöt8
 *Ë(
bulkd©a
->
d
[0].
os_d©a_±r
 + 4 + 
ETH_ALEN
);

2949 i‡(
	`memcmp
(
brﬂdˇ°_addªss
.
a
, 
bssid
, 
ETH_ALEN
)== 0)

2951  
TRUE
;

2955  
FALSE
;

2957 
	}
}

2960 
C§Boﬁ
 
	$uf_¥o˚ss_pm_bô_f‹_≥î
(
unifi_¥iv_t
 * 
¥iv
, 
C§WifiRouãrCålSèInfo_t
 * 
§cSèInfo
,

2961 
C§Uöt8
 
pmBô
,
C§Uöt16
 
öãrÁ˚Tag
)

2963 
C§Boﬁ
 
m‹eD©a
 = 
FALSE
;

2964 
C§Boﬁ
 
powîSaveCh™ged
 = 
FALSE
;

2965 
lock_Êags
;

2967 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "entering uf_process_pm_bit_for_peer\n");

2968 i‡(
pmBô
) {

2969 
¥iv
->
ÆlPìrDozög
 |(0x01 << (
§cSèInfo
->
assig√dH™dÀ
));

2971 
¥iv
->
ÆlPìrDozög
 &~(0x01 << (
§cSèInfo
->
assig√dH™dÀ
));

2973 if(
pmBô
) {

2974 if(
§cSèInfo
->
cuºítPìrSèã
 =
CSR_WIFI_ROUTER_CTRL_PEER_CONNECTED_ACTIVE
) {

2977 
	`•ö_lock_úqßve
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

2978 
§cSèInfo
->
cuºítPìrSèã
 =
CSR_WIFI_ROUTER_CTRL_PEER_CONNECTED_POWER_SAVE
;

2979 
powîSaveCh™ged
 = 
TRUE
;

2981 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

2983  
powîSaveCh™ged
;

2986 if(
§cSèInfo
->
cuºítPìrSèã
 =
CSR_WIFI_ROUTER_CTRL_PEER_CONNECTED_POWER_SAVE
) {

2988 
	`•ö_lock_úqßve
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

2989 
§cSèInfo
->
cuºítPìrSèã
 = 
CSR_WIFI_ROUTER_CTRL_PEER_CONNECTED_ACTIVE
;

2990 
powîSaveCh™ged
 = 
TRUE
;

2992 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

2994  
powîSaveCh™ged
;

2999 if(
§cSèInfo
->
cuºítPìrSèã
 =
CSR_WIFI_ROUTER_CTRL_PEER_CONNECTED_ACTIVE
) {

3000 
	`unifi_åa˚
(
¥iv
,
UDBG3
, "Pì∏wôh AID = %d i†a˘ivênow\n",
§cSèInfo
->
aid
);

3001 
	`¥o˚ss_≥î_a˘ive_å™sôi⁄
(
¥iv
,
§cSèInfo
,
öãrÁ˚Tag
);

3003 
	`unifi_åa˚
(
¥iv
,
UDBG3
, "Pì∏wôh AID = %d i†ö PS Now\n",
§cSèInfo
->
aid
);

3005 if(!
§cSèInfo
->
wmmOrQosE«bÀd
) {

3006 
m‹eD©a
 = (!
	`li°_em±y
(&
§cSèInfo
->
mgtFømes
) ||

3007 !
	`li°_em±y
(&
§cSèInfo
->
d©aPdu
[
UNIFI_TRAFFIC_Q_VO
])||

3008 !
	`li°_em±y
(&
§cSèInfo
->
d©aPdu
[
UNIFI_TRAFFIC_Q_CONTENTION
]));

3009 if(
m‹eD©a
 && (
§cSèInfo
->
timSë
 =
CSR_WIFI_TIM_RESET
)) {

3010 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "This condition shouldÇot occur\n");

3011 i‡(!
§cSèInfo
->
timReque°PídögFœg
){

3012 
	`upd©e_tim
(
¥iv
,
§cSèInfo
->
aid
,1,
öãrÁ˚Tag
, srcSèInfo->
assig√dH™dÀ
);

3019 
§cSèInfo
->
upd©eTimReqQueued
 = 1;

3020 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "upd©e_tim : O√ m‹êUpd©eTim Reque° (Tim vÆue:%dËQueued f‹ AID %x\n", 
§cSèInfo
->
upd©eTimReqQueued
,

3021 
§cSèInfo
->
aid
);

3026 
C§Uöt8
 
ÆlDñivîyE«bÀd
 = 0, 
d©aAvaûabÀ
 = 0;

3027 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "Qos in AP Mode\n");

3029 
	`is_Æl_ac_dñivî_íabÀd_™d_m‹ed©a
(
§cSèInfo
, &
ÆlDñivîyE«bÀd
, &
d©aAvaûabÀ
);

3031 
m‹eD©a
 = (
	`uf_is_m‹e_d©a_f‹_n⁄_dñivîy_ac
(
§cSèInfo
Ë|| (
ÆlDñivîyE«bÀd
 && 
d©aAvaûabÀ
));

3033 if(
m‹eD©a
 && (
§cSèInfo
->
timSë
 =
CSR_WIFI_TIM_RESET
)) {

3034 i‡(!
§cSèInfo
->
timReque°PídögFœg
){

3035 
	`upd©e_tim
(
¥iv
,
§cSèInfo
->
aid
,1,
öãrÁ˚Tag
, srcSèInfo->
assig√dH™dÀ
);

3042 
§cSèInfo
->
upd©eTimReqQueued
 = 1;

3043 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "upd©e_tim : O√ m‹êUpd©eTim Reque° (Tim vÆue:%dËQueued f‹ AID %x\n", 
§cSèInfo
->
upd©eTimReqQueued
,

3044 
§cSèInfo
->
aid
);

3049 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "leaving uf_process_pm_bit_for_peer\n");

3050  
powîSaveCh™ged
;

3051 
	}
}

3055 
	$uf_¥o˚ss_ps_pﬁl
(
unifi_¥iv_t
 *
¥iv
,
C§Uöt8
* 
ß
,C§Uöt8* 
da
,C§Uöt8 
pmBô
,
C§Uöt16
 
öãrÁ˚Tag
)

3057 
C§WifiRouãrCålSèInfo_t
 *
°aRec‹d
 =

3058 
	`C§WifiRouãrCålGëSèti⁄Rec‹dFromPìrMacAddªss
(
¥iv
, 
ß
, 
öãrÁ˚Tag
);

3059 
tx_buf„ªd_∑ckës_t
 * 
buf„ªd_pkt
 = 
NULL
;

3060 
C§WifiMacAddªss
 
≥îMacAddªss
;

3061 
lock_Êags
;

3062 
C§I¡8
 
r
 =0;

3063 
C§Boﬁ
 
m‹eD©a
 = 
FALSE
;

3064 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

3066 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "entering uf_process_ps_poll\n");

3067 if(!
°aRec‹d
) {

3068 
	`mem˝y
(
≥îMacAddªss
.
a
,
ß
,
ETH_ALEN
);

3069 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "In uf_process_ps_poll, staÑecordÇot found:unexpected frameáddr = %x:%x:%x:%x:%x:%x\n",

3070 
ß
[0], sa[1],sa[2], sa[3], sa[4],sa[5]);

3071 
	`C§WifiRouãrCålU√x≥˘edFømeIndSíd
(
¥iv
->
CSR_WIFI_SME_IFACEQUEUE
,0,
öãrÁ˚Tag
,
≥îMacAddªss
);

3075 
	`uf_¥o˚ss_pm_bô_f‹_≥î
(
¥iv
,
°aRec‹d
,
pmBô
,
öãrÁ˚Tag
);

3078 
°aRec‹d
->
a˘ivôy_Êag
 = 
TRUE
;

3081 if(!
pmBô
) {

3082 
	`unifi_nŸi˚
 (
¥iv
," PM bitÑeset in PS-POLL\n");

3086 if(
	`IS_DTIM_ACTIVE
(
öãrÁ˚Priv
->
dtimA˘ive
,öãrÁ˚Priv->
mu…iˇ°PduHo°Tag
)) {

3088 
	`unifi_nŸi˚
 (
¥iv
," multicastÅransmission is going on so don'tÅakeáction on PS-POLL\n");

3092 if(!
°aRec‹d
->
wmmOrQosE«bÀd
) {

3093 if((
buf„ªd_pkt
=
	`dequeue_tx_d©a_pdu
(
¥iv
, &
°aRec‹d
->
mgtFømes
))) {

3094 
buf„ªd_pkt
->
å™smissi⁄C⁄åﬁ
 |
TRANSMISSION_CONTROL_TRIGGER_MASK
;

3095 
m‹eD©a
 = (!
	`li°_em±y
(&
°aRec‹d
->
d©aPdu
[
UNIFI_TRAFFIC_Q_CONTENTION
]) ||

3096 !
	`li°_em±y
(&
°aRec‹d
->
d©aPdu
[
UNIFI_TRAFFIC_Q_VO
]) ||

3097 !
	`li°_em±y
(&
°aRec‹d
->
mgtFømes
));

3099 
buf„ªd_pkt
->
å™smissi⁄C⁄åﬁ
 |(
TRANSMISSION_CONTROL_TRIGGER_MASK
 | 
TRANSMISSION_CONTROL_EOSP_MASK
);

3100 if((
r
=
	`‰ame_™d_£nd_queued_pdu
(
¥iv
,
buf„ªd_pkt
,
°aRec‹d
,
m‹eD©a
,
FALSE
)Ë=-
ENOSPC
) {

3102 
buf„ªd_pkt
->
å™smissi⁄C⁄åﬁ
 &~(
TRANSMISSION_CONTROL_TRIGGER_MASK
 | 
TRANSMISSION_CONTROL_EOSP_MASK
);

3104 
	`•ö_lock_úqßve
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

3105 
	`li°_add
(&
buf„ªd_pkt
->
q
, &
°aRec‹d
->
mgtFømes
);

3106 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

3107 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "(ENOSPC) PS-POLLÑeceived : PDU sending failed \n");

3108 
¥iv
->
∑u£dSèH™dÀ
[3]=(
C§Uöt8
)(
°aRec‹d
->
assig√dH™dÀ
);

3110 if(
r
){

3111 
	`unifi_åa˚
 (
¥iv
, 
UDBG1
, " HIP validation failure : PDU sending failed \n");

3113 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
buf„ªd_pkt
->
bulkd©a
);

3115 
	`k‰ì
(
buf„ªd_pkt
);

3117 } if((
buf„ªd_pkt
=
	`dequeue_tx_d©a_pdu
(
¥iv
, &
°aRec‹d
->
d©aPdu
[
UNIFI_TRAFFIC_Q_VO
]))) {

3118 
buf„ªd_pkt
->
å™smissi⁄C⁄åﬁ
 |
TRANSMISSION_CONTROL_TRIGGER_MASK
;

3119 
m‹eD©a
 = (!
	`li°_em±y
(&
°aRec‹d
->
d©aPdu
[
UNIFI_TRAFFIC_Q_CONTENTION
]) ||

3120 !
	`li°_em±y
(&
°aRec‹d
->
d©aPdu
[
UNIFI_TRAFFIC_Q_VO
]));

3122 
buf„ªd_pkt
->
å™smissi⁄C⁄åﬁ
 |(
TRANSMISSION_CONTROL_TRIGGER_MASK
 | 
TRANSMISSION_CONTROL_EOSP_MASK
);

3123 if((
r
=
	`‰ame_™d_£nd_queued_pdu
(
¥iv
,
buf„ªd_pkt
,
°aRec‹d
,
m‹eD©a
,
FALSE
)Ë=-
ENOSPC
) {

3125 
buf„ªd_pkt
->
å™smissi⁄C⁄åﬁ
 &~(
TRANSMISSION_CONTROL_TRIGGER_MASK
 | 
TRANSMISSION_CONTROL_EOSP_MASK
);

3127 
	`•ö_lock_úqßve
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

3128 
	`li°_add
(&
buf„ªd_pkt
->
q
, &
°aRec‹d
->
d©aPdu
[
UNIFI_TRAFFIC_Q_VO
]);

3129 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

3130 
¥iv
->
∑u£dSèH™dÀ
[3]=(
C§Uöt8
)(
°aRec‹d
->
assig√dH™dÀ
);

3131 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "(ENOSPC) PS-POLLÑeceived : PDU sending failed \n");

3133 if(
r
){

3134 
	`unifi_åa˚
 (
¥iv
, 
UDBG1
, " HIP validation failure : PDU sending failed \n");

3136 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
buf„ªd_pkt
->
bulkd©a
);

3138 
	`k‰ì
(
buf„ªd_pkt
);

3140 } if((
buf„ªd_pkt
=
	`dequeue_tx_d©a_pdu
(
¥iv
, &
°aRec‹d
->
d©aPdu
[
UNIFI_TRAFFIC_Q_CONTENTION
]))) {

3141 
buf„ªd_pkt
->
å™smissi⁄C⁄åﬁ
 |
TRANSMISSION_CONTROL_TRIGGER_MASK
;

3142 
m‹eD©a
 = !
	`li°_em±y
(&
°aRec‹d
->
d©aPdu
[
UNIFI_TRAFFIC_Q_CONTENTION
]);

3144 
buf„ªd_pkt
->
å™smissi⁄C⁄åﬁ
 |(
TRANSMISSION_CONTROL_TRIGGER_MASK
 | 
TRANSMISSION_CONTROL_EOSP_MASK
);

3145 if((
r
=
	`‰ame_™d_£nd_queued_pdu
(
¥iv
,
buf„ªd_pkt
,
°aRec‹d
,
m‹eD©a
,
FALSE
)Ë=-
ENOSPC
) {

3147 
buf„ªd_pkt
->
å™smissi⁄C⁄åﬁ
 &~(
TRANSMISSION_CONTROL_TRIGGER_MASK
 | 
TRANSMISSION_CONTROL_EOSP_MASK
);

3149 
	`•ö_lock_úqßve
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

3150 
	`li°_add
(&
buf„ªd_pkt
->
q
, &
°aRec‹d
->
d©aPdu
[
UNIFI_TRAFFIC_Q_CONTENTION
]);

3151 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

3152 
¥iv
->
∑u£dSèH™dÀ
[0]=(
C§Uöt8
)(
°aRec‹d
->
assig√dH™dÀ
);

3153 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "(ENOSPC) PS-POLLÑeceived : PDU sending failed \n");

3155 if(
r
){

3156 
	`unifi_åa˚
 (
¥iv
, 
UDBG1
, " HIP validation failure : PDU sending failed \n");

3158 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
buf„ªd_pkt
->
bulkd©a
);

3160 
	`k‰ì
(
buf„ªd_pkt
);

3166 
m‹eD©a
 = (!
	`li°_em±y
(&
°aRec‹d
->
d©aPdu
[
UNIFI_TRAFFIC_Q_VO
]) ||

3167 !
	`li°_em±y
(&
°aRec‹d
->
d©aPdu
[
UNIFI_TRAFFIC_Q_CONTENTION
]) ||

3168 !
	`li°_em±y
(&
°aRec‹d
->
mgtFømes
));

3169 if(!
m‹eD©a
 && (
°aRec‹d
->
timSë
 =
CSR_WIFI_TIM_SET
)) {

3170 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "more data = NULL, setÅimÅo 0 in uf_process_ps_poll\n");

3171 i‡(!
°aRec‹d
->
timReque°PídögFœg
){

3172 
	`upd©e_tim
(
¥iv
,
°aRec‹d
->
aid
,0,
öãrÁ˚Tag
, sèRec‹d->
assig√dH™dÀ
);

3179 
°aRec‹d
->
upd©eTimReqQueued
 = 0;

3180 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "upd©e_tim : O√ m‹êUpd©eTim Reque° (Tim vÆue:%dËQueued f‹ AID %x\n", 
°aRec‹d
->
upd©eTimReqQueued
,

3181 
°aRec‹d
->
aid
);

3186 
C§Uöt8
 
ÆlDñivîyE«bÀd
 = 0, 
d©aAvaûabÀ
 = 0;

3187 
	`unifi_åa˚
(
¥iv
, 
UDBG3
,"Qos Support station.Processing PS-Poll\n");

3197 
	`is_Æl_ac_dñivî_íabÀd_™d_m‹ed©a
(
°aRec‹d
, &
ÆlDñivîyE«bÀd
, &
d©aAvaûabÀ
);

3199 i‡(
ÆlDñivîyE«bÀd
) {

3200 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "uf_process_ps_poll: All ACsáre deliveryÉnable so Sending QOS Null inÑesponse of Ps-poll\n");

3201 
	`uf_£nd_qos_nuŒ
(
¥iv
,
öãrÁ˚Tag
,
ß
,
CSR_QOS_UP0
,
°aRec‹d
);

3205 i‡(!
	`li°_em±y
(&
°aRec‹d
->
mgtFømes
)) {

3206 i‡((
buf„ªd_pkt
=
	`dequeue_tx_d©a_pdu
(
¥iv
, &
°aRec‹d
->
mgtFømes
))) {

3210 
m‹eD©a
 = 
	`uf_is_m‹e_d©a_f‹_n⁄_dñivîy_ac
(
°aRec‹d
);

3211 
buf„ªd_pkt
->
å™smissi⁄C⁄åﬁ
 |(
TRANSMISSION_CONTROL_TRIGGER_MASK
 | 
TRANSMISSION_CONTROL_EOSP_MASK
);

3214 if((
r
=
	`‰ame_™d_£nd_queued_pdu
(
¥iv
,
buf„ªd_pkt
,
°aRec‹d
,
m‹eD©a
,
FALSE
)Ë=-
ENOSPC
) {

3216 
buf„ªd_pkt
->
å™smissi⁄C⁄åﬁ
 &~(
TRANSMISSION_CONTROL_TRIGGER_MASK
 | 
TRANSMISSION_CONTROL_EOSP_MASK
);

3218 
	`•ö_lock_úqßve
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

3219 
	`li°_add
(&
buf„ªd_pkt
->
q
, &
°aRec‹d
->
mgtFømes
);

3220 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

3221 
¥iv
->
∑u£dSèH™dÀ
[0]=(
C§Uöt8
)(
°aRec‹d
->
assig√dH™dÀ
);

3222 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "(ENOSPC) PS-POLLÑeceived : PDU sending failed \n");

3224 if(
r
){

3225 
	`unifi_åa˚
 (
¥iv
, 
UDBG1
, " HIP validation failure : PDU sending failed \n");

3227 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
buf„ªd_pkt
->
bulkd©a
);

3229 
	`k‰ì
(
buf„ªd_pkt
);

3232 
	`unifi_îr‹
(
¥iv
, "uf_process_ps_poll: Mgt frameÜistÉmpty!! \n");

3236 
C§I¡8
 
i
;

3240 
i
= 3; i>=0; i--) {

3241 i‡(!
	`IS_DELIVERY_ENABLED
(
°aRec‹d
->
powîßveMode
[
i
])) {

3243 if((
buf„ªd_pkt
=
	`dequeue_tx_d©a_pdu
(
¥iv
, &
°aRec‹d
->
d©aPdu
[
i
]))) {

3244 
m‹eD©a
 = 
	`uf_is_m‹e_d©a_f‹_n⁄_dñivîy_ac
(
°aRec‹d
);

3246 
buf„ªd_pkt
->
å™smissi⁄C⁄åﬁ
 |(
TRANSMISSION_CONTROL_TRIGGER_MASK
 | 
TRANSMISSION_CONTROL_EOSP_MASK
);

3249 if((
r
=
	`‰ame_™d_£nd_queued_pdu
(
¥iv
,
buf„ªd_pkt
,
°aRec‹d
,
m‹eD©a
,
FALSE
)Ë=-
ENOSPC
) {

3251 
buf„ªd_pkt
->
å™smissi⁄C⁄åﬁ
 &~(
TRANSMISSION_CONTROL_TRIGGER_MASK
 | 
TRANSMISSION_CONTROL_EOSP_MASK
);

3253 
	`•ö_lock_úqßve
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

3254 
	`li°_add
(&
buf„ªd_pkt
->
q
, &
°aRec‹d
->
d©aPdu
[
i
]);

3255 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

3256 
¥iv
->
∑u£dSèH™dÀ
[0]=(
C§Uöt8
)(
°aRec‹d
->
assig√dH™dÀ
);

3257 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "(ENOSPC) PS-POLLÑeceived : PDU sending failed \n");

3259 if(
r
) {

3260 
	`unifi_åa˚
 (
¥iv
, 
UDBG1
, " HIP validation failure : PDU sending failed \n");

3262 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
buf„ªd_pkt
->
bulkd©a
);

3264 
	`k‰ì
(
buf„ªd_pkt
);

3272 
	`is_Æl_ac_dñivî_íabÀd_™d_m‹ed©a
(
°aRec‹d
, &
ÆlDñivîyE«bÀd
, &
d©aAvaûabÀ
);

3274 
m‹eD©a
 = (
	`uf_is_m‹e_d©a_f‹_n⁄_dñivîy_ac
(
°aRec‹d
Ë|| (
ÆlDñivîyE«bÀd
 && 
d©aAvaûabÀ
));

3275 if(!
m‹eD©a
 && (
°aRec‹d
->
timSë
 =
CSR_WIFI_TIM_SET
)) {

3276 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "more data = NULL, setÅimÅo 0 in uf_process_ps_poll\n");

3277 i‡(!
°aRec‹d
->
timReque°PídögFœg
){

3278 
	`upd©e_tim
(
¥iv
,
°aRec‹d
->
aid
,0,
öãrÁ˚Tag
, sèRec‹d->
assig√dH™dÀ
);

3285 
°aRec‹d
->
upd©eTimReqQueued
 = 0;

3286 
	`unifi_åa˚
(
¥iv
, 
UDBG6
, "upd©e_tim : O√ m‹êUpd©eTim Reque° (Tim vÆue:%dËQueued f‹ AID %x\n", 
°aRec‹d
->
upd©eTimReqQueued
,

3287 
°aRec‹d
->
aid
);

3293 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "leaving uf_process_ps_poll\n");

3294 
	}
}

3298 
	$add_to_£nd_cfm_li°
(
unifi_¥iv_t
 * 
¥iv
,

3299 
tx_buf„ªd_∑ckës_t
 *
tx_q_ôem
,

3300 
li°_hód
 *
‰ames_√ed_cfm_li°
)

3302 
tx_buf„ªd_∑ckës_t
 *
£nd_cfm_li°_ôem
 = 
NULL
;

3304 
£nd_cfm_li°_ôem
 = (
tx_buf„ªd_∑ckës_t
 *Ë
	`kmÆloc
(—x_buf„ªd_∑ckës_t), 
GFP_ATOMIC
);

3306 if(
£nd_cfm_li°_ôem
 =
NULL
){

3307 
	`unifi_w¨nög
(
¥iv
, "%s: FailedÅoállocate memory forÇewÜist item \n");

3311 
	`INIT_LIST_HEAD
(&
£nd_cfm_li°_ôem
->
q
);

3313 
£nd_cfm_li°_ôem
->
ho°Tag
 = 
tx_q_ôem
->hostTag;

3314 
£nd_cfm_li°_ôem
->
öãrÁ˚Tag
 = 
tx_q_ôem
->interfaceTag;

3315 
£nd_cfm_li°_ôem
->
å™smissi⁄C⁄åﬁ
 = 
tx_q_ôem
->transmissionControl;

3316 
£nd_cfm_li°_ôem
->
ÀSídîPro˚ssId
 = 
tx_q_ôem
->leSenderProcessId;

3317 
£nd_cfm_li°_ôem
->
øã
 = 
tx_q_ôem
->rate;

3318 
	`mem˝y
(
£nd_cfm_li°_ôem
->
≥îMacAddªss
.
a
, 
tx_q_ôem
->≥îMacAddªss.a, 
ETH_ALEN
);

3319 
£nd_cfm_li°_ôem
->
¥i‹ôy
 = 
tx_q_ôem
->priority;

3321 
	`li°_add_èû
(&
£nd_cfm_li°_ôem
->
q
, 
‰ames_√ed_cfm_li°
);

3322 
	}
}

3324 
	$uf_¥ï¨e_£nd_cfm_li°_f‹_queued_pkts
(
unifi_¥iv_t
 * 
¥iv
,

3325 
li°_hód
 *
‰ames_√ed_cfm_li°
,

3326 
li°_hód
 * 
li°
)

3328 
tx_buf„ªd_∑ckës_t
 *
tx_q_ôem
 = 
NULL
;

3329 
li°_hód
 *
li°Hód
;

3330 
li°_hód
 *
∂a˚Hﬁdî
;

3331 
lock_Êags
;

3333 
	`func_íãr
();

3335 
	`•ö_lock_úqßve
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

3339 
	`li°_f‹_óch_ß„
(
li°Hód
, 
∂a˚Hﬁdî
, 
li°
) {

3340 
tx_q_ôem
 = 
	`li°_íåy
(
li°Hód
, 
tx_buf„ªd_∑ckës_t
, 
q
);

3342 if(!
tx_q_ôem
) {

3343 
	`unifi_îr‹
(
¥iv
, "Entry shouldÉxist, otherwise it isá (BUG)\n");

3349 i‡(!(
tx_q_ôem
->
å™smissi⁄C⁄åﬁ
 & 
CSR_NO_CONFIRM_REQUIRED
) &&

3350 (
tx_q_ôem
->
ÀSídîPro˚ssId
 !
¥iv
->
√tdev_˛õ¡
->
£ndî_id
)){

3351 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "%s: SenderProcessID=%x hostÅag=%xÅransmission control=%x\n",

3352 
__FUNCTION__
,

3353 
tx_q_ôem
->
ÀSídîPro˚ssId
,

3354 
tx_q_ôem
->
ho°Tag
,

3355 
tx_q_ôem
->
å™smissi⁄C⁄åﬁ
);

3357 
	`add_to_£nd_cfm_li°
(
¥iv
, 
tx_q_ôem
, 
‰ames_√ed_cfm_li°
);

3361 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

3363 
	`func_exô
();

3364 
	}
}

3368 
	$uf_Êush_li°
(
unifi_¥iv_t
 * 
¥iv
, 
li°_hód
 * 
li°
)

3370 
tx_buf„ªd_∑ckës_t
 *
tx_q_ôem
;

3371 
li°_hód
 *
li°Hód
;

3372 
li°_hód
 *
∂a˚Hﬁdî
;

3373 
lock_Êags
;

3375 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "enteringÅhe uf_flush_list \n");

3377 
	`•ö_lock_úqßve
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

3379 
	`li°_f‹_óch_ß„
(
li°Hód
, 
∂a˚Hﬁdî
, 
li°
) {

3380 
tx_q_ôem
 = 
	`li°_íåy
(
li°Hód
, 
tx_buf„ªd_∑ckës_t
, 
q
);

3382 if(!
tx_q_ôem
) {

3383 
	`unifi_îr‹
(
¥iv
, "entry shouldÉxists, otherwise crashes (bug)\n");

3385 
	`unifi_åa˚
(
¥iv
, 
UDBG5
,

3387 
tx_q_ôem
->
≥îMacAddªss
.
a
[0],Åx_q_item->peerMacAddress.a[1],

3388 
tx_q_ôem
->
≥îMacAddªss
.
a
[2],Åx_q_item->peerMacAddress.a[3],

3389 
tx_q_ôem
->
≥îMacAddªss
.
a
[4],Åx_q_item->peerMacAddress.a[5],

3390 
tx_q_ôem
->
ÀSídîPro˚ssId
);

3392 
	`li°_dñ
(
li°Hód
);

3394 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
tx_q_ôem
->
bulkd©a
);

3395 
	`k‰ì
(
tx_q_ôem
);

3396 
tx_q_ôem
 = 
NULL
;

3397 i‡(!
¥iv
->
noOfPktQueuedInDrivî
) {

3398 
	`unifi_îr‹
(
¥iv
, "∑ckë†queued i¿drivî 0 stû»de¸emítög i¿%s\n", 
__FUNCTION__
);

3400 
¥iv
->
noOfPktQueuedInDrivî
--;

3403 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

3404 
	}
}

3406 
tx_buf„ªd_∑ckës_t
 *
	$dequeue_tx_d©a_pdu
(
unifi_¥iv_t
 *
¥iv
, 
li°_hód
 *
txLi°
)

3409 
tx_buf„ªd_∑ckës_t
 *
tx_q_ôem
 = 
NULL
;

3410 
li°_hód
 *
li°Hód
;

3411 
li°_hód
 *
∂a˚Hﬁdî
;

3412 
lock_Êags
;

3414 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "entering dequeue_tx_data_pdu\n");

3416 i‡(
	`li°_em±y
(
txLi°
)) {

3417 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "In dequeue_tx_data_pdu,ÅheÜist isÉmpty\n");

3418  
NULL
;

3422 i‡(
¥iv
->
noOfPktQueuedInDrivî
 == 0xFFFF) {

3423 
	`unifi_w¨nög
(
¥iv
, "noÖacketávailable in queue: debug");

3424  
NULL
;

3428 
	`•ö_lock_úqßve
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

3429 
	`li°_f‹_óch_ß„
(
li°Hód
, 
∂a˚Hﬁdî
, 
txLi°
) {

3430 
tx_q_ôem
 = 
	`li°_íåy
(
li°Hód
, 
tx_buf„ªd_∑ckës_t
, 
q
);

3431 
	`li°_dñ
(
li°Hód
);

3434 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

3436 i‡(
tx_q_ôem
) {

3437 
	`unifi_åa˚
(
¥iv
, 
UDBG5
,

3439 
tx_q_ôem
->
≥îMacAddªss
.
a
[0],Åx_q_item->peerMacAddress.a[1],

3440 
tx_q_ôem
->
≥îMacAddªss
.
a
[2],Åx_q_item->peerMacAddress.a[3],

3441 
tx_q_ôem
->
≥îMacAddªss
.
a
[4],Åx_q_item->peerMacAddress.a[5],

3442 
tx_q_ôem
->
ÀSídîPro˚ssId
);

3445 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "leaving dequeue_tx_data_pdu\n");

3446  
tx_q_ôem
;

3447 
	}
}

3449 
C§WifiRouãrCålSèInfo_t
 *
	$C§WifiRouãrCålGëSèti⁄Rec‹dFromPìrMacAddªss
(
unifi_¥iv_t
 *
¥iv
,

3450 c⁄° 
C§Uöt8
 *
≥îMacAddªss
,

3451 
C§Uöt16
 
öãrÁ˚Tag
)

3453 
C§Uöt8
 
i
;

3454 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
;

3455 
lock_Êags
;

3457 i‡(
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
) {

3458 
	`unifi_îr‹
(
¥iv
, "öãrÁ˚Tag i†nŸÖr›î, i¡îÁ˚Tag = %d\n", 
öãrÁ˚Tag
);

3459  
NULL
;

3462 
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

3465 
	`•ö_lock_úqßve
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

3467 
i
 = 0; i < 
UNIFI_MAX_CONNECTIONS
; i++) {

3468 i‡(
öãrÁ˚Priv
->
°aInfo
[
i
]!
NULL
) {

3469 i‡(!
	`memcmp
(((
C§WifiRouãrCålSèInfo_t
 *Ë(
öãrÁ˚Priv
->
°aInfo
[
i
]))->
≥îMacAddªss
.
a
,ÖìrMacAddªss, 
ETH_ALEN
)) {

3471 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

3472 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "peerÉntry found in stationÑecord\n");

3473  ((
C§WifiRouãrCålSèInfo_t
 *Ë(
öãrÁ˚Priv
->
°aInfo
[
i
]));

3478 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

3479 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "peerÉntryÇot found in stationÑecord\n");

3480  
NULL
;

3481 
	}
}

3483 
C§WifiRouãrCålSèInfo_t
 * 
	$C§WifiRouãrCålGëSèti⁄Rec‹dFromH™dÀ
(
unifi_¥iv_t
 *
¥iv
,

3484 
C§Uöt32
 
h™dÀ
,

3485 
C§Uöt16
 
öãrÁ˚Tag
)

3487 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
;

3489 i‡((
h™dÀ
 >
UNIFI_MAX_CONNECTIONS
Ë|| (
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
)) {

3490 
	`unifi_îr‹
(
¥iv
, "h™dÀ/öãrÁ˚Tag i†nŸÖr›î, h™dÀ = %d, i¡îÁ˚Tag = %d\n", 
h™dÀ
, 
öãrÁ˚Tag
);

3491  
NULL
;

3493 
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

3494  ((
C§WifiRouãrCålSèInfo_t
 *Ë(
öãrÁ˚Priv
->
°aInfo
[
h™dÀ
]));

3495 
	}
}

3498 
	$uf_check_öa˘ivôy
(
unifi_¥iv_t
 *
¥iv
, 
C§Uöt16
 
öãrÁ˚Tag
, 
C§Time
 
cuºítTime
)

3500 
C§Uöt32
 
i
;

3501 
C§WifiRouãrCålSèInfo_t
 *
°aInfo
;

3502 
C§Time
 
ñ≠£dTime
;

3503 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

3504 
C§WifiMacAddªss
 
≥îMacAddªss
;

3505 
lock_Êags
;

3507 i‡(
öãrÁ˚Priv
 =
NULL
) {

3508 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "uf_check_inactivity: InterfaceÖriv is NULL \n");

3512 
	`•ö_lock_úqßve
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

3514 
i
 = 0; i < 
UNIFI_MAX_CONNECTIONS
; i++) {

3515 
°aInfo
 = 
	`C§WifiRouãrCålGëSèti⁄Rec‹dFromH™dÀ
(
¥iv
, 
i
, 
öãrÁ˚Tag
);

3516 if(!
°aInfo
 ) {

3520 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "Running Inactivity handler Time %xus station'sÜastáctivity %xus\n",

3521 
cuºítTime
, 
°aInfo
->
œ°A˘ivôy
);

3524 
ñ≠£dTime
 = (
cuºítTime
 >
°aInfo
->
œ°A˘ivôy
)?

3525 (
cuºítTime
 - 
°aInfo
->
œ°A˘ivôy
):

3526 (~((
C§Uöt32
)0Ë- 
°aInfo
->
œ°A˘ivôy
 + 
cuºítTime
);

3527 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

3529 i‡(
ñ≠£dTime
 > 
MAX_INACTIVITY_INTERVAL
) {

3530 
	`mem˝y
((
C§Uöt8
*)&
≥îMacAddªss
, (C§Uöt8*)&
°aInfo
->≥îMacAddªss, (
C§WifiMacAddªss
));

3533 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "Station %x:%x:%x:%x:%x:%x inactive since %xus\n sending Inactive Ind\n",

3534 
≥îMacAddªss
.
a
[0],ÖeerMacAddress.a[1],

3535 
≥îMacAddªss
.
a
[2],ÖeerMacAddress.a[3],

3536 
≥îMacAddªss
.
a
[4],ÖeerMacAddress.a[5],

3537 
ñ≠£dTime
);

3539 
	`C§WifiRouãrCålSèI«˘iveIndSíd
(
¥iv
->
CSR_WIFI_SME_IFACEQUEUE
, 0, 
öãrÁ˚Tag
, 
≥îMacAddªss
);

3543 
öãrÁ˚Priv
->
œ°_öa˘ivôy_check
 = 
cuºítTime
;

3544 
	}
}

3547 
	$uf_upd©e_°a_a˘ivôy
(
unifi_¥iv_t
 *
¥iv
, 
C§Uöt16
 
öãrÁ˚Tag
, c⁄° 
C§Uöt8
 *
≥îMacAddªss
)

3549 
C§Time
 
ñ≠£dTime
, 
cuºítTime
;

3550 
C§Time
 
timeHi
;

3551 
C§WifiRouãrCålSèInfo_t
 *
°aInfo
;

3552 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

3553 
lock_Êags
;

3555 i‡(
öãrÁ˚Priv
 =
NULL
) {

3556 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "uf_check_inactivity: InterfaceÖriv is NULL \n");

3560 
cuºítTime
 = 
	`C§TimeGë
(&
timeHi
);

3563 
°aInfo
 = 
	`C§WifiRouãrCålGëSèti⁄Rec‹dFromPìrMacAddªss
(
¥iv
, 
≥îMacAddªss
, 
öãrÁ˚Tag
);

3565 i‡(
°aInfo
 =
NULL
) {

3566 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "Sta doesÇotÉxist yet");

3570 
	`•ö_lock_úqßve
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

3572 
°aInfo
->
œ°A˘ivôy
 = 
cuºítTime
;

3579 
ñ≠£dTime
 = (
cuºítTime
 >
öãrÁ˚Priv
->
œ°_öa˘ivôy_check
)?

3580 (
cuºítTime
 - 
öãrÁ˚Priv
->
œ°_öa˘ivôy_check
):

3581 (~((
C§Uöt32
)0Ë- 
öãrÁ˚Priv
->
œ°_öa˘ivôy_check
 + 
cuºítTime
);

3583 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

3586 i‡(
ñ≠£dTime
 > 
INACTIVITY_CHECK_INTERVAL
) {

3587 
	`uf_check_öa˘ivôy
(
¥iv
, 
öãrÁ˚Tag
, 
cuºítTime
);

3589 
	}
}

3590 
	$ªsume_uniˇ°_buf„ªd_‰ames
(
unifi_¥iv_t
 *
¥iv
, 
C§Uöt16
 
öãrÁ˚Tag
)

3593 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

3594 
C§Uöt8
 
i
;

3595 
j
;

3596 
tx_buf„ªd_∑ckës_t
 * 
buf„ªd_pkt
 = 
NULL
;

3597 
C§Boﬁ
 
hù¶ŸFªe
[4] = {
TRUE
,TRUE,TRUE,TRUE};

3598 
r
;

3599 
lock_Êags
;

3601 
	`func_íãr
();

3602 !
	`isRouãrBuf„rE«bÀd
(
¥iv
,3) &&

3603 ((
buf„ªd_pkt
=
	`dequeue_tx_d©a_pdu
(
¥iv
,&
öãrÁ˚Priv
->
gíîicMgtFømes
))!=
NULL
)) {

3604 
buf„ªd_pkt
->
å™smissi⁄C⁄åﬁ
 &=

3605 ~(
TRANSMISSION_CONTROL_TRIGGER_MASK
|
TRANSMISSION_CONTROL_EOSP_MASK
);

3606 if((
r
=
	`‰ame_™d_£nd_queued_pdu
(
¥iv
,
buf„ªd_pkt
,
NULL
,0,
FALSE
)Ë=-
ENOSPC
) {

3608 
	`•ö_lock_úqßve
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

3609 
	`li°_add
(&
buf„ªd_pkt
->
q
, &
öãrÁ˚Priv
->
gíîicMgtFømes
);

3610 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

3611 
hù¶ŸFªe
[3]=
FALSE
;

3614 if(
r
){

3615 
	`unifi_åa˚
 (
¥iv
, 
UDBG1
, " HIP validation failure : PDU sending failed \n");

3617 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
buf„ªd_pkt
->
bulkd©a
);

3619 
	`k‰ì
(
buf„ªd_pkt
);

3622 
i
 = 0; i < 
UNIFI_MAX_CONNECTIONS
; i++) {

3623 
C§WifiRouãrCålSèInfo_t
 *
°aInfo
 = 
öãrÁ˚Priv
->°aInfo[
i
];

3624 if(!
hù¶ŸFªe
[0] && !hipslotFree[1] && !hipslotFree[2] && !hipslotFree[3]) {

3625 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "(ENOSPC) inÑesume_unicast_buffered_frames:: hip slotsáre full \n");

3628 i‡(
°aInfo
 && (°aInfo->
cuºítPìrSèã
 =
CSR_WIFI_ROUTER_CTRL_PEER_CONNECTED_ACTIVE
)) {

3629 (–
TRUE
 =
hù¶ŸFªe
[3] ) && (
buf„ªd_pkt
=
	`dequeue_tx_d©a_pdu
(
¥iv
, &
°aInfo
->
mgtFømes
)))) {

3630 
buf„ªd_pkt
->
å™smissi⁄C⁄åﬁ
 &=

3631 ~(
TRANSMISSION_CONTROL_TRIGGER_MASK
|
TRANSMISSION_CONTROL_EOSP_MASK
);

3632 if((
r
=
	`‰ame_™d_£nd_queued_pdu
(
¥iv
,
buf„ªd_pkt
,
°aInfo
,0,
FALSE
)Ë=-
ENOSPC
) {

3633 
	`unifi_åa˚
(
¥iv
, 
UDBG3
, "(ENOSPC) inÑesume_unicast_buffered_frames:: hip slotsáre full for voice queue\n");

3635 
	`•ö_lock_úqßve
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

3636 
	`li°_add
(&
buf„ªd_pkt
->
q
, &
°aInfo
->
mgtFømes
);

3637 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

3638 
¥iv
->
∑u£dSèH™dÀ
[3]=(
C§Uöt8
)(
°aInfo
->
assig√dH™dÀ
);

3639 
hù¶ŸFªe
[3] = 
FALSE
;

3642 if(
r
){

3643 
	`unifi_åa˚
 (
¥iv
, 
UDBG1
, " HIP validation failure : PDU sending failed \n");

3645 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
buf„ªd_pkt
->
bulkd©a
);

3647 
	`k‰ì
(
buf„ªd_pkt
);

3651 
j
=3;j>=0;j--) {

3652 if(!
hù¶ŸFªe
[
j
])

3655 (
buf„ªd_pkt
=
	`dequeue_tx_d©a_pdu
(
¥iv
, &
°aInfo
->
d©aPdu
[
j
]))) {

3656 
buf„ªd_pkt
->
å™smissi⁄C⁄åﬁ
 &=

3657 ~(
TRANSMISSION_CONTROL_TRIGGER_MASK
|
TRANSMISSION_CONTROL_EOSP_MASK
);

3658 if((
r
=
	`‰ame_™d_£nd_queued_pdu
(
¥iv
,
buf„ªd_pkt
,
°aInfo
,0,
FALSE
)Ë=-
ENOSPC
) {

3660 
	`•ö_lock_úqßve
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

3661 
	`li°_add
(&
buf„ªd_pkt
->
q
, &
°aInfo
->
d©aPdu
[
j
]);

3662 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

3663 
¥iv
->
∑u£dSèH™dÀ
[
j
]=(
C§Uöt8
)(
°aInfo
->
assig√dH™dÀ
);

3664 
hù¶ŸFªe
[
j
]=
FALSE
;

3667 if(
r
){

3668 
	`unifi_åa˚
 (
¥iv
, 
UDBG1
, " HIP validation failure : PDU sending failed \n");

3670 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
buf„ªd_pkt
->
bulkd©a
);

3672 
	`k‰ì
(
buf„ªd_pkt
);

3678 
	`func_exô
();

3679 
	}
}

3680 
	$upd©e_eo•_to_hód_of_brﬂdˇ°_li°_hód
(
unifi_¥iv_t
 *
¥iv
,
C§Uöt16
 
öãrÁ˚Tag
)

3683 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

3684 
lock_Êags
;

3685 
li°_hód
 *
li°Hód
;

3686 
li°_hód
 *
∂a˚Hﬁdî
;

3687 
tx_buf„ªd_∑ckës_t
 *
tx_q_ôem
;

3689 
	`func_íãr
();

3690 i‡(
öãrÁ˚Priv
->
noOfbrﬂdˇ°PktQueued
) {

3696 
	`•ö_lock_úqßve
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

3697 
	`li°_f‹_óch_ß„
(
li°Hód
, 
∂a˚Hﬁdî
, &
öãrÁ˚Priv
->
gíîicMu…iˇ°OrBrﬂdCa°Fømes
) {

3698 
tx_q_ôem
 = 
	`li°_íåy
(
li°Hód
, 
tx_buf„ªd_∑ckës_t
, 
q
);

3699 
tx_q_ôem
->
å™smissi⁄C⁄åﬁ
 |
TRANSMISSION_CONTROL_EOSP_MASK
;

3700 
tx_q_ôem
->
å™smissi⁄C⁄åﬁ
 = (tx_q_ôem->å™smissi⁄C⁄åﬁ & ~(
CSR_NO_CONFIRM_REQUIRED
));

3701 
	`unifi_åa˚
(
¥iv
, 
UDBG1
,"upd©ögÉo• f‹Üi° Hód ho°Tag:0x%x ",
tx_q_ôem
->
ho°Tag
);

3704 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
tx_q_lock
,
lock_Êags
);

3706 
	`func_exô
();

3707 
	}
}

3721 
	$ªsume_su•íded_u≠sd
(
unifi_¥iv_t
* 
¥iv
,
C§Uöt16
 
öãrÁ˚Tag
)

3724 
C§Uöt8
 
°¨tIndex
;

3725 
C§WifiRouãrCålSèInfo_t
 * 
°aInfo
 = 
NULL
;

3726 
lock_Êags
;

3728 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "++resume_suspended_uapsd: \n");

3729 
°¨tIndex
0; sèπIndex < 
UNIFI_MAX_CONNECTIONS
;startIndex++) {

3730 
°aInfo
 = 
	`C§WifiRouãrCålGëSèti⁄Rec‹dFromH™dÀ
(
¥iv
,
°¨tIndex
,
öãrÁ˚Tag
);

3732 if(!
°aInfo
 || !°aInfo->
wmmOrQosE«bÀd
) {

3734 } if((
°aInfo
->
cuºítPìrSèã
 =
CSR_WIFI_ROUTER_CTRL_PEER_CONNECTED_POWER_SAVE
)

3735 &&
°aInfo
->
u≠sdA˘ive
 && sèInfo->
u•Su•íd
) {

3739 
	`uf_h™dÀ_u•‰ames_dñivîy
(
¥iv
, 
°aInfo
, 
öãrÁ˚Tag
);

3741 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "resume_suspended_uapsd: PS state=%x, uapsdActive?=%x, suspend?=%x\n",

3742 
°aInfo
->
cuºítPìrSèã
, sèInfo->
u≠sdA˘ive
, sèInfo->
u•Su•íd
);

3743 i‡(
°aInfo
->
cuºítPìrSèã
 =
CSR_WIFI_ROUTER_CTRL_PEER_CONNECTED_ACTIVE
)

3745 
	`•ö_lock_úqßve
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

3746 
°aInfo
->
u≠sdA˘ive
 = 
FALSE
;

3747 
°aInfo
->
u•Su•íd
 = 
FALSE
;

3748 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
°aRec‹d_lock
,
lock_Êags
);

3752 
	`unifi_åa˚
(
¥iv
, 
UDBG2
, "--resume_suspended_uapsd:\n");

3753 
	}
}

	@unifi_priv.h

17 #i‚de‡
__LINUX_UNIFI_PRIV_H__


18 
	#__LINUX_UNIFI_PRIV_H__
 1

	)

20 
	~<löux/vîsi⁄.h
>

21 
	~<löux/moduÀ.h
>

22 
	~<löux/°rög.h
>

23 
	~<löux/î∫o.h
>

24 
	~<löux/kî√l.h
>

25 
	~<löux/waô.h
>

26 
	~<löux/sched.h
>

27 
	~<löux/dñay.h
>

28 
	~<löux/√tdevi˚.h
>

29 
	~<löux/wúñess.h
>

30 
	~<löux/cdev.h
>

31 
	~<löux/kthªad.h
>

32 #i‡
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2, 6, 19)

33 
	~<löux/‰ìzî.h
>

35 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, 9, 0)

36 
	~<löux/sched/π.h
>

39 #ifde‡
CSR_WIFI_SUPPORT_MMC_DRIVER


40 
	~<löux/mmc/c‹e.h
>

41 
	~<löux/mmc/ˇrd.h
>

42 
	~<löux/mmc/ho°.h
>

43 
	~<löux/mmc/sdio_func.h
>

44 
	~<löux/mmc/sdio_ids.h
>

45 
	~<löux/mmc/sdio.h
>

48 
	~<löux/fs.h
>

50 #ifde‡
ANDROID_BUILD


51 
	~<löux/wakñock.h
>

54 
	~"c§_wifi_hù_unifi.h
"

55 
	~"c§_wifi_hù_unifi_udi.h
"

56 
	~"c§_wifi_rouãr_lib.h
"

57 
	~"unifiio.h
"

58 #i‚de‡
CSR_WIFI_HIP_TA_DISABLE


59 
	~"c§_wifi_vif_utûs.h
"

63 
	gunifi_¥iv
;

64 
unifi_¥iv
 
	tunifi_¥iv_t
;

65 #ifde‡
CSR_SUPPORT_WEXT_AP


66 
	gC§WifiSmeApC⁄fig
;

67 
C§WifiSmeApC⁄fig
 
	tC§WifiSmeApC⁄fig_t
;

69 #ifde‡
CSR_SUPPORT_WEXT


70 
	~"unifi_wext.h
"

73 #ifde‡
ANDROID_BUILD


74 
wake_lock
 
unifi_sdio_wake_lock
;

77 
	~"unifi_˛õ¡s.h
"

80 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 6, 20)

81 
	~<löux/w‹kqueue.h
>

83 #unde‡
INIT_WORK


84 
	#INIT_WORK
(
_w‹k
, 
_func
) \

86 
	`INIT_LIST_HEAD
(&(
_w‹k
)->
íåy
); \

87 (
_w‹k
)->
≥ndög
 = 0; \

88 
	`PREPARE_WORK
((
_w‹k
), (
_func
), (_work)); \

89 
	`öô_timî
(&(
_w‹k
)->
timî
); \

90 } 0)

	)

95 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 27)

96 
	#UF_NETIF_TX_WAKE_ALL_QUEUES
(
_√tdev
Ë
	`√tif_tx_wake_Æl_queues
(_√tdev)

	)

97 
	#UF_NETIF_TX_START_ALL_QUEUES
(
_√tdev
Ë
	`√tif_tx_°¨t_Æl_queues
(_√tdev)

	)

98 
	#UF_NETIF_TX_STOP_ALL_QUEUES
(
_√tdev
Ë
	`√tif_tx_°›_Æl_queues
(_√tdev)

	)

100 
	#UF_NETIF_TX_WAKE_ALL_QUEUES
(
_√tdev
Ë
	`√tif_wake_queue
(_√tdev)

	)

101 
	#UF_NETIF_TX_START_ALL_QUEUES
(
_√tdev
Ë
	`√tif_°¨t_queue
(_√tdev)

	)

102 
	#UF_NETIF_TX_STOP_ALL_QUEUES
(
_√tdev
Ë
	`√tif_°›_queue
(_√tdev)

	)

106 #ifde‡
CSR_NATIVE_LINUX


107 
	~"sme_«tive/unifi_«tive.h
"

109 
	~"unifi_sme.h
"

113 
	#UNIFI_NAME
 "unifi"

	)

120 
	#MAX_UNIFI_DEVS
 4

	)

123 
	#MAC_HEADER_SIZE
 24

	)

124 
	#QOS_CONTROL_HEADER_SIZE
 2

	)

125 
	#HT_CONTROL_HEADER_SIZE
 4

	)

126 
	#QOS_DATA
 0x8

	)

127 
	#QOS_DATA_NULL
 0xc

	)

128 
	#DATA_NULL
 0x04

	)

129 
	#FRAME_CONTROL_ORDER_BIT
 0x8000

	)

130 
	#FRAME_CONTROL_TYPE_FIELD_OFFSET
 2

	)

131 
	#FRAME_CONTROL_SUBTYPE_FIELD_OFFSET
 4

	)

132 
	#IEEE802_11_FRAMETYPE_DATA
 0x02

	)

133 
	#IEEE802_11_FRAMETYPE_CONTROL
 0x01

	)

134 
	#IEEE802_11_FRAMETYPE_MANAGEMENT
 0x00

	)

135 
	#IEEE802_11_FRAMETYPE_RESERVED
 0x03

	)

138 
	#IEEE802_11_ADDR3_OFFSET
 16

	)

139 
	#IEEE802_11_SEQUENCE_CONTROL_OFFSET
 22

	)

140 
	#IEEE802_11_MAX_DATA_LEN
 2304

	)

143 
	#IEEE802_11_FC_TO_DS_MASK
 0x100

	)

144 
	#IEEE802_11_FC_FROM_DS_MASK
 0x200

	)

145 
	#IEEE802_11_FC_MOREDATA_MASK
 0x2000

	)

146 
	#IEEE802_11_FC_PROTECTED_MASK
 0x4000

	)

147 
	#IEEE80211_FC_ORDER_MASK
 0x8000

	)

148 
	#IEEE80211_FC_SUBTYPE_MASK
 0x00f0

	)

149 
	#IEEE80211_FC_TYPE_MASK
 0x000c

	)

150 
	#IEEE80211_FC_PROTO_VERSION_MASK
 0x0003

	)

155 
	#IEEE802_11_FC_TYPE_DATA
 0x08

	)

156 
	#IEEE802_11_FC_TYPE_NULL
 0x48

	)

157 
	#IEEE802_11_FC_TYPE_QOS_NULL
 0xc8

	)

158 
	#IEEE802_11_FC_TYPE_QOS_DATA
 0x88

	)

160 
	#IEEE802_11_FC_TYPE_DATA_SUBTYPE_RESERVED
 0x0D

	)

163 
	#IEEE802_11_QC_TID_MASK
 0x0f

	)

164 
	#IEEE802_11_QC_A_MSDU_PRESENT
 0x80

	)

166 #i‡(
deföed
(
CSR_WIFI_SECURITY_WAPI_ENABLE
Ë&& deföed(
CSR_WIFI_SECURITY_WAPI_QOSCTRL_MIC_WORKAROUND
))

167 
	#IEEE802_11_QC_NON_TID_BITS_MASK
 0xFFF0

	)

170 
	#CSR_WIFI_EAPOL_M4_HOST_TAG
 0x50000000

	)

171 
	#IEEE802_11_DATA_FRAME_MAC_HEADER_SIZE
 36

	)

172 
	#MAX_ACCESS_CATOGORY
 4

	)

175 
	#INACTIVITY_CHECK_INTERVAL
 300000000

	)

177 
	#MAX_INACTIVITY_INTERVAL
 300000000

	)

181 
	#MAX_SUPPORTED_BA_SESSIONS_TX
 1

	)

182 
	#MAX_SUPPORTED_BA_SESSIONS_RX
 4

	)

184 
	#MAX_BA_WIND_SIZE
 64

	)

185 
	#MAC_HEADER_ADDR1_OFFSET
 4

	)

186 
	#MAC_HEADER_ADDR2_OFFSET
 10

	)

189 
	#CSR_WIFI_BA_MPDU_FRAME_AGE_TIMEOUT
 30000

	)

192 
	#ADDRESS_ONE_OFFSET
 20

	)

195 
	#STA_INACTIVE_DETECTION_TRIGGER_THRESHOLD
 1

	)

196 
	#STA_INACTIVE_DETECTION_TIMER_INTERVAL
 30

	)

197 
	#STA_INACTIVE_TIMEOUT_VAL
 120 * 1000 * 1000

	)

200 
	#CSR_WIFI_HIP_IS_AP_FW
(
mode
Ë((((modeË=
CSR_WIFI_ROUTER_CTRL_MODE_AP
) || \

201 ((
mode
Ë=
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
))?
TRUE
 : 
FALSE
)

	)

202 
	#CSR_WIFI_HIP_IS_STA_FW
(
mode
Ë((((modeË=
CSR_WIFI_ROUTER_CTRL_MODE_STA
) || \

203 ((
mode
Ë=
CSR_WIFI_ROUTER_CTRL_MODE_P2PCLI
) || \

204 ((
mode
Ë=
CSR_WIFI_ROUTER_CTRL_MODE_P2P
)Ë? 
TRUE
 : 
FALSE
)

	)

207 
	#CSR_WIFI_P2P_WILDCARD_SSID_LENGTH
 0x7

	)

208 
	#CSR_WIFI_80211_FRAME_SUBTYPE_BEACON
 0x8

	)

209 
	#CSR_WIFI_BEACON_FIXED_LENGTH
 12

	)

210 
	#CSR_WIFI_FRAME_SUBTYPE_BIT_OFFSET
 4

	)

211 
	#CSR_WIFI_80211_FRAME_SUBTYPE_BIT_MASK
 ((
C§Uöt8
)(0xF << 
CSR_WIFI_FRAME_SUBTYPE_BIT_OFFSET
))

	)

213 
	#CSR_WIFI_80211_GET_FRAME_SUBTYPE
(
‰ameBuf„r
) \

214 ((
C§Uöt8
)(((C§Uöt8 *)
‰ameBuf„r
)[0] & 
CSR_WIFI_80211_FRAME_SUBTYPE_BIT_MASK
Ë>> 
CSR_WIFI_FRAME_SUBTYPE_BIT_OFFSET
)

	)

218 
C§Uöt8
 
	tC§WifiPackëTy≥
;

219 
	#CSR_WIFI_UNICAST_PDU
 ((
C§WifiPackëTy≥
Ë0x00)

	)

220 
	#CSR_WIFI_MULTICAST_PDU
 ((
C§WifiPackëTy≥
Ë0x1)

	)

221 
	#CSR_WIFI_BROADCAST_PDU
 ((
C§WifiPackëTy≥
Ë0x2)

	)

223 
	#PRIO_TO_NICE
(
¥io
Ë(’rioË- 
MAX_RT_PRIO
 - 20)

	)

226 
buswidth
;

227 
sdio_˛ock
;

228 
u£_5g
;

229 
dißbÀ_hw_ª£t
;

230 
dißbÀ_powî_c⁄åﬁ
;

231 
íabÀ_wﬁ
;

232 
sme_debug
;

233 
fw_öô
[
MAX_UNIFI_DEVS
];

234 
é_80211d
;

235 
sdio_byã_mode
;

236 
sdio_block_size
;

237 
c‹edump_max
;

238 
run_bh_⁄˚
;

239 
bh_¥i‹ôy
;

240 #ifde‡
CSR_WIFI_HIP_DEBUG_OFFLINE


241 
log_hù_sig«ls
;

244 
∑tch_mode
;

246 
	sdÕriv


248 c⁄° *
	mdl_d©a
;

249 
	mdl_Àn
;

250 *
	mfw_desc
;

254 
	suf_thªad


256 
èsk_°ru˘
 *
	mthªad_èsk
;

259 
waô_queue_hód_t
 
	mwakeup_q
;

260 
	mwakeup_Êag
;

266 
	mblock_thªad
;

268 
	m«me
[16];

269 
	m¥io
;

276 
	srx_buf„ªd_∑ckës


279 
li°_hód
 
	mq
;

281 
sk_buff
 *
	mskb
;

283 
bulk_d©a_∑øm_t
 
	mbulkd©a
;

285 
C§WifiMacAddªss
 
	mß
;

287 
C§WifiMacAddªss
 
	mda
;

289 
CSR_SIGNAL
 
	msig«l
;

290 } 
	trx_buf„ªd_∑ckës_t
;

293 
C§Uöt8
 
	tC§WifiAcPowîßveMode
;

294 
	#CSR_WIFI_AC_TRIGGER_ONLY_ENABLED
 0x00

	)

295 
	#CSR_WIFI_AC_DELIVERY_ONLY_ENABLE
 0X01

	)

296 
	#CSR_WIFI_AC_TRIGGER_AND_DELIVERY_ENABLED
 0X03

	)

297 
	#CSR_WIFI_AC_LEGACY_POWER_SAVE
 0X02

	)

300 
	#IS_DELIVERY_ENABLED
(
mode
Ë(modê& 
CSR_WIFI_AC_DELIVERY_ONLY_ENABLE
)?1 : 0

	)

301 
	#IS_DELIVERY_AND_TRIGGER_ENABLED
(
mode
Ë((modê& 
CSR_WIFI_AC_DELIVERY_ONLY_ENABLE
Ë|| (modê& 
CSR_WIFI_AC_TRIGGER_AND_DELIVERY_ENABLED
))?1 : 0

	)

302 
	#IS_DTIM_ACTIVE
(
Êag
, 
ho°Tag
Ë((Êag =
TRUE
 || ho°Tag !
INVALID_HOST_TAG
))

	)

303 
	#INVALID_HOST_TAG
 0xFFFFFFFF

	)

304 
	#UNIFI_TRAFFIC_Q_CONTENTION
 
UNIFI_TRAFFIC_Q_BE


	)

314 
	stx_buf„ªd_∑ckës


317 
li°_hód
 
	mq
;

318 
C§Uöt16
 
	möãrÁ˚Tag
;

319 
CSR_CLIENT_TAG
 
	mho°Tag
;

320 
CSR_PROCESS_ID
 
	mÀSídîPro˚ssId
;

321 
CSR_TRANSMISSION_CONTROL
 
	må™smissi⁄C⁄åﬁ
;

322 
CSR_RATE
 
	møã
;

324 
bulk_d©a_desc_t
 
	mbulkd©a
;

326 
C§WifiMacAddªss
 
	m≥îMacAddªss
;

327 
CSR_PRIORITY
 
	m¥i‹ôy
;

328 } 
	ttx_buf„ªd_∑ckës_t
;

331 
	sC§WifiRouãrCålSèInfo_t


334 
C§WifiMacAddªss
 
	m≥îMacAddªss
;

335 
C§Uöt32
 
	massig√dH™dÀ
;

336 
C§Boﬁ
 
	mwmmOrQosE«bÀd
;

337 
C§WifiAcPowîßveMode
 
	mpowîßveMode
[
MAX_ACCESS_CATOGORY
];

338 
C§Uöt16
 
	mmaxSpLígth
;

339 
C§Boﬁ
 
	mu≠sdA˘ive
;

340 
C§Uöt16
 
	mnoOfSpFømesSít
;

343 #ifde‡
CSR_SUPPORT_SME


344 
unifi_p‹t_cfg_t
 *
	m≥îC⁄åﬁÀdP‹t
;

345 
unifi_p‹t_cfg_t
 *
	m≥îUnC⁄åﬁÀdP‹t
;

348 
√tI¡îÁ˚_¥iv
 *
	möãrÁ˚Priv
;

349 
w‹k_°ru˘
 
	m£nd_disc⁄√˘ed_öd_èsk
;

350 
C§Boﬁ
 
	ma˘ivôy_Êag
;

351 
C§Uöt16
 
	mli°íI¡îvÆInTus
;

352 
CSR_CLIENT_TAG
 
	mnuŒD©aHo°Tag
;

355 
C§Time
 
	mœ°A˘ivôy
;

358 
C§Boﬁ
 
	mu•Su•íd
;

359 
CSR_PRIORITY
 
	måiggîFømePri‹ôy
;

361 
C§WifiRouãrCålPìrSètus
 
	mcuºítPìrSèã
;

362 
li°_hód
 
	md©aPdu
[
MAX_ACCESS_CATOGORY
];

363 
li°_hód
 
	mmgtFømes
;

364 
C§Uöt8
 
	m•Sètus
;

365 
C§Uöt8
 
	m¥evFrmTy≥
;

366 
C§Uöt8
 
	m¥evFrmAc˚ssC©og‹y
;

367 
C§Boﬁ
 
	m¥Ÿe˘i⁄
;

368 
C§Uöt16
 
	maid
;

369 
C§Boﬁ
 
	mtxSu•íd
;

370 
C§Uöt8
 
	mtimSë
;

372 
	#CSR_WIFI_TIM_RESET
 0

	)

373 
	#CSR_WIFI_TIM_SET
 1

	)

374 
	#CSR_WIFI_TIM_RESETTING
 2

	)

375 
	#CSR_WIFI_TIM_SETTING
 3

	)

377 
C§Boﬁ
 
	mtimReque°PídögFœg
;

378 
C§Uöt8
 
	mupd©eTimReqQueued
;

379 
C§Uöt16
 
	mnoOfPktQueued
;

380 }
	tC§WifiRouãrCålSèInfo_t
;

382 #ifde‡
CSR_SUPPORT_WEXT_AP


383 
	sC§WifiSmeApC⁄fig


385 
C§WifiSsid
 
	mssid
;

386 
C§Uöt16
 
	mch™√l
;

387 
C§WifiNmeApCªdítüls
 
	m¸edítüls
;

388 
C§Uöt8
 
	mmax_c⁄√˘i⁄s
;

389 
C§Uöt8
 
	mif_ödex
;

393 #ifde‡
CSR_WIFI_RX_PATH_SPLIT


395 
	#CSR_WIFI_RX_SIGNAL_BUFFER_SIZE
 (60 + 1)

	)

399 
C§Uöt8
 *
	mbuÂå
;

400 
bulk_d©a_∑øm_t
 
	md©a_±rs
;

401 
C§Uöt16
 
	msig_Àn
;

402 }
	trx_buff_°ru˘_t
;

406 
C§Uöt8
 
	mwrôePoöãr
;

407 
C§Uöt8
 
	mªadPoöãr
;

408 
C§Uöt8
 
	msize
;

409 
rx_buff_°ru˘_t
 
	mrx_buff
[
CSR_WIFI_RX_SIGNAL_BUFFER_SIZE
];

410 } 
	trxCúcuœrBuf„r_t
;

412 
rx_wq_h™dÀr
(
w‹k_°ru˘
 *
w‹k
);

415 
	sunifi_¥iv


417 
ˇrd_t
 *
	mˇrd
;

418 
C§SdioFun˘i⁄
 *
	msdio
;

421 
	mö°™˚
;

423 
	mªf_cou¡
;

426 
dÕriv
 
	mfw_°a
;

427 
dÕriv
 
	mfw_c⁄v
;

430 
cdev
 
	munifi_cdev
;

431 
cdev
 
	munifiudi_cdev
;

432 
devi˚
 *
	munifi_devi˚
;

435 
CSR_IFINTERFACE
 
	mif_ödex
;

438 
√t_devi˚
 *
	m√tdev
[
CSR_WIFI_NUM_INTERFACES
];

439 
√tI¡îÁ˚_¥iv
 *
	möãrÁ˚Priv
[
CSR_WIFI_NUM_INTERFACES
];

441 
C§Uöt8
 
	mtŸÆI¡îÁ˚Cou¡
;

443 
	m¥ev_queue
;

446 
	m¥oc_íåy_«me
[64];

455 
	mdr›_u√n¸y±ed
 : 1;

458 
ul_˛õ¡_t
 
	mul_˛õ¡s
[
MAX_UDI_CLIENTS
];

461 
£m≠h‹e
 
	mudi_loggög_muãx
;

463 
ul_˛õ¡_t
 *
	mloggög_˛õ¡
;

466 
ul_˛õ¡_t
 *
	m√tdev_˛õ¡
;

469 
ul_˛õ¡_t
 *
	msme_˛i
;

472 
ul_˛õ¡_t
 *
	mamp_˛õ¡
;

480 #ifde‡
USE_DRIVER_LOCK


481 
£m≠h‹e
 
	mlock
;

485 
	mio_ab‹ãd
;

487 
uf_thªad
 
	mbh_thªad
;

489 
	#UNIFI_INIT_NONE
 0x00

	)

490 
	#UNIFI_INIT_IN_PROGRESS
 0x01

	)

491 
	#UNIFI_INIT_FW_DOWNLOADED
 0x02

	)

492 
	#UNIFI_INIT_COMPLETED
 0x04

	)

493 
	möô_¥ogªss
;

495 
	msme_is_¥e£¡
;

498 
	m°a_wmm_ˇ∑bûôõs
;

501 
	mœ°_debug_°rög
[256];

502 
	mœ°_debug_w‹d16
[16];

504 #ifde‡
CSR_SUPPORT_SME


506 
•ölock_t
 
	mtx_q_lock
;

507 
C§Uöt8
 
	mÆlPìrDozög
;

508 
C§Uöt8
 
	m∑u£dSèH™dÀ
[
MAX_ACCESS_CATOGORY
];

510 
C§Uöt16
 
	mnoOfPktQueuedInDrivî
;

511 
	#CSR_WIFI_DRIVER_SUPPORT_FOR_MAX_PKT_QUEUEING
 512

	)

512 
	#CSR_WIFI_DRIVER_MAX_PKT_QUEUING_THRESHOLD_PER_PEER
 64

	)

513 
	#CSR_WIFI_DRIVER_MINIMUM_BROADCAST_PKT_THRESHOLD
 3

	)

515 
C§Boﬁ
 
	mrouãrBuf„rE«bÀ
[
MAX_ACCESS_CATOGORY
];

517 
•ölock_t
 
	m°aRec‹d_lock
;

519 #ifde‡
CSR_NATIVE_LINUX


520 #ifde‡
CSR_SUPPORT_WEXT


522 
wext_c⁄fig
 
	mwext_c⁄f
;

526 
£m≠h‹e
 
	mmlme_blockög_muãx
;

529 
ul_˛õ¡_t
 *
	mwext_˛õ¡
;

533 #ifde‡
CSR_SUPPORT_SME


534 
waô_queue_hód_t
 
	msme_ªque°_wq
;

536 
£m≠h‹e
 
	msme_£m
;

538 
sme_ª∂y_t
 
	msme_ª∂y
;

541 
	sè_öd


543 
w‹k_°ru˘
 
	mèsk
;

544 
C§WifiRouãrCålTøfficPackëTy≥
 
	m∑ckë_ty≥
;

545 
C§WifiRouãrCålPrŸocﬁDúe˘i⁄
 
	mdúe˘i⁄
;

546 
C§WifiMacAddªss
 
	m§c_addr
;

547 
	mö_u£
;

548 } 
	mè_öd_w‹k
;

550 
	sè_ßm∂e_öd


552 
w‹k_°ru˘
 
	mèsk
;

553 
C§WifiRouãrCålTøfficSèts
 
	m°©s
;

554 
	mö_u£
;

555 } 
	mè_ßm∂e_öd_w‹k
;

557 
__be32
 
	m°a_ù_addªss
;

558 
C§WifiRouãrCålSmeVîsi⁄s
 
	msme_vîsi⁄s
;

567 
	mwifi_⁄_un•ecifõd
 = -1,

568 
	mwifi_⁄_ö_¥ogªss
 = 0,

569 
	mwifi_⁄_d⁄e
 = 1,

570 } 
	mwifi_⁄_°©e
;

573 
C§SchedQid
 
	mCSR_WIFI_SME_IFACEQUEUE
;

575 
w‹k_°ru˘
 
	mmu…iˇ°_li°_èsk
;

580 
	#MAX_MA_UNIDATA_IND_FILTERS
 8

	)

581 
sme_ma_unid©a_öd_fûãr_t
 
	msme_unid©a_öd_fûãrs
[
MAX_MA_UNIDATA_IND_FILTERS
];

584 
uf_cfg_bˇ°_∑ckë_fûãr_t
 
	m∑ckë_fûãrs
;

585 *
	mfûãr_t˛as_õs
;

587 
C§WifiSmeC⁄√˘i⁄C⁄fig
 
	mc⁄√˘i⁄_c⁄fig
;

589 
C§Uöt32
 
	msˇnInf‹m©i⁄EÀmítsLígth
;

590 
C§Uöt8
 *
	msˇnInf‹m©i⁄EÀmíts
;

592 #ifde‡
CSR_SUPPORT_WEXT


593 
	mign‹e_bssid_joö
;

594 
iw_°©i°ics
 
	mwext_wúñess_°©s
;

597 
C§WifiSmeD©aBlock
 
	mmib_d©a
;

598 
C§WifiMacAddªss
 
	m°a_mac_addªss
;

600 
	mwï_tx_key_ödex
;

601 
wï_key_t
 
	mwï_keys
[
NUM_WEPKEYS
];

604 #ifde‡
CSR_SUPPORT_WEXT_AP


605 
C§WifiSmeApMacC⁄fig
 
	m≠_mac_c⁄fig
;

606 
C§WifiNmeApC⁄fig
 
	mgroup_£c_c⁄fig
;

607 
C§WifiSmeApC⁄fig_t
 
	m≠_c⁄fig
;

609 
w‹k_°ru˘
 
	msme_c⁄fig_èsk
;

614 #ifde‡
CSR_SME_USERSPACE


615 *
	msmïriv
;

618 
ˇrd_öfo_t
 
	mˇrd_öfo
;

621 
•ölock_t
 
	m£nd_sig«l_lock
;

628 
w‹kqueue_°ru˘
 *
	munifi_w‹kqueue
;

630 *
	mmib_cfm_buf„r
;

631 
	mmib_cfm_buf„r_Àngth
;

633 
	m±e°_mode
;

634 
	mc‹edump_mode
;

635 
C§Boﬁ
 
	mwﬁ_su•íd
;

637 
	#UF_UNCONTROLLED_PORT_Q
 0

	)

638 
	#UF_CONTROLLED_PORT_Q
 1

	)

641 
£m≠h‹e
 
	mrx_q_£m
;

644 
•ölock_t
 
	mm4_lock
;

646 
£m≠h‹e
 
	mba_muãx
;

648 #i‡(
deföed
(
CSR_WIFI_SECURITY_WAPI_ENABLE
Ë&& deföed(
CSR_WIFI_SECURITY_WAPI_SW_ENCRYPTION
))

650 
•ölock_t
 
	mw≠i_lock
;

653 #i‚de‡
ALLOW_Q_PAUSE


657 
C§Uöt8
 
	mtx_q_∑u£d_Êag
[
UNIFI_TRAFFIC_Q_MAX
];

660 #ifde‡
CSR_WIFI_RX_PATH_SPLIT


661 
w‹kqueue_°ru˘
 *
	mrx_w‹kqueue
;

662 
w‹k_°ru˘
 
	mrx_w‹k_°ru˘
;

663 
rxCúcuœrBuf„r_t
 
	mrxSig«lBuf„r
;

667 
C§Uöt32
 
	mrxT˝Throughput
;

668 
C§Uöt32
 
	mtxT˝Throughput
;

669 
C§Uöt32
 
	mrxUdpThroughput
;

670 
C§Uöt32
 
	mtxUdpThroughput
;

672 #ifde‡
CSR_WIFI_SECURITY_WAPI_ENABLE


674 
C§Uöt8
 
	mw≠i_mu…iˇ°_fûãr
;

676 
C§Uöt8
 
	mw≠i_uniˇ°_fûãr
;

677 
C§Uöt8
 
	mw≠i_uniˇ°_queued_pkt_fûãr
;

678 #ifde‡
CSR_WIFI_SECURITY_WAPI_QOSCTRL_MIC_WORKAROUND


679 
C§Boﬁ
 
	misW≠iC⁄√˘i⁄
;

683 #ifde‡
CSR_WIFI_SPLIT_PATCH


684 
C§WifiRouãrCålModeSëReq
 
	m≥ndög_mode_£t
;

687 
C§Boﬁ
 
	mcm™rTe°Mode
;

688 
CSR_RATE
 
	mcm™rTe°ModeTønsmôR©e
;

693 
C§Uöt16
 
	mqueue_Àngth
[4];

694 
C§Uöt8
 
	mos_queue_∑u£d
;

695 } 
	tunifi_OsQosInfo
;

700 
C§Boﬁ
 
	ma˘ive
;

701 
bulk_d©a_∑øm_t
 
	mbulkd©a
;

702 
CSR_SIGNAL
 
	msig«l
;

703 
C§Uöt16
 
	m¢
;

704 
C§Time
 
	mªcv_time
;

705 } 
	t‰ame_desc_°ru˘
;

709 
‰ame_desc_°ru˘
 *
	mbuf„r
;

710 
C§Uöt16
 
	mwöd_size
;

711 
C§Uöt16
 
	moccupõd_¶Ÿs
;

712 
timî_li°
 
	mtimî
;

713 
C§Uöt16
 
	mtimeout
;

714 
C§Uöt16
 
	mex≥˘ed_¢
;

715 
C§Uöt16
 
	m°¨t_¢
;

716 
C§Boﬁ
 
	måiggî_ba_a·î_s¢
;

717 
√tI¡îÁ˚_¥iv
 *
	möãrÁ˚Priv
;

718 
C§Uöt16
 
	mtID
;

719 
C§WifiMacAddªss
 
	mmacAddªss
;

720 
w‹k_°ru˘
 
	m£nd_ba_îr_èsk
;

721 } 
	tba_£ssi⁄_rx_°ru˘
;

726 
√tI¡îÁ˚_¥iv
 *
	möãrÁ˚Priv
;

727 
C§Uöt16
 
	mtID
;

728 
C§WifiMacAddªss
 
	mmacAddªss
;

729 } 
	tba_£ssi⁄_tx_°ru˘
;

731 
	s√tI¡îÁ˚_¥iv


733 
C§Uöt16
 
	mI¡îÁ˚Tag
;

734 
unifi_¥iv
 *
	m¥ivPå
;

735 
ba_£ssi⁄_tx_°ru˘
 *
	mba_£ssi⁄_tx
[
MAX_SUPPORTED_BA_SESSIONS_TX
];

736 
ba_£ssi⁄_rx_°ru˘
 *
	mba_£ssi⁄_rx
[
MAX_SUPPORTED_BA_SESSIONS_RX
];

737 
‰ame_desc_°ru˘
 
	mba_com∂ëe
[
MAX_BA_WIND_SIZE
];

738 
C§Uöt8
 
	mba_com∂ëe_ödex
;

739 
C§Uöt8
 
	mqueueE«bÀd
[
UNIFI_NO_OF_TX_QS
];

740 
w‹k_°ru˘
 
	m£nd_m4_ªady_èsk
;

741 #ifde‡
CSR_WIFI_SECURITY_WAPI_ENABLE


742 
w‹k_°ru˘
 
	m£nd_pkt_to_í¸y±
;

744 
√t_devi˚_°©s
 
	m°©s
;

745 
C§Uöt8
 
	möãrÁ˚Mode
;

746 
C§Boﬁ
 
	m¥Ÿe˘
;

747 
C§WifiMacAddªss
 
	mbssid
;

756 
	mUnifiC⁄√˘edUnknown
 = -1,

757 
	mUnifiNŸC⁄√˘ed
 = 0,

758 
	mUnifiC⁄√˘ed
 = 1,

759 } 
	mc⁄√˘ed
;

760 #ifde‡
CSR_SUPPORT_WEXT


762 
C§Boﬁ
 
	mwaô_√tdev_ch™ge
;

764 
C§Boﬁ
 
	m√tdev_ˇŒback_ªgi°îed
;

766 
	m√tdev_ªgi°îed
;

767 
	#UNIFI_MAX_MULTICAST_ADDRESSES
 10

	)

769 
u8
 
	mmc_li°
[
UNIFI_MAX_MULTICAST_ADDRESSES
 * 
ETH_ALEN
];

771 
	mmc_li°_cou¡
;

772 
C§Uöt32
 
	mèg
;

773 #ifde‡
CSR_SUPPORT_SME


775 
unifi_p‹t_c⁄fig_t
 
	mc⁄åﬁÀd_d©a_p‹t
;

776 
unifi_p‹t_c⁄fig_t
 
	munc⁄åﬁÀd_d©a_p‹t
;

779 
C§Uöt8
 
	mnum_°©i⁄s_joöed
;

780 
	mC§WifiRouãrCålSèInfo_t
 *(
	m°aInfo
)[
UNIFI_MAX_CONNECTIONS
];

781 
li°_hód
 
	mgíîicMgtFømes
;

782 
li°_hód
 
	mgíîicMu…iˇ°OrBrﬂdCa°Fømes
;

783 
li°_hód
 
	mgíîicMu…iˇ°OrBrﬂdCa°MgtFømes
;

786 
timî_li°
 
	m°a_a˘ivôy_check_timî
;

787 
C§Boﬁ
 
	m°a_a˘ivôy_check_íabÀd
;

790 
C§Time
 
	mœ°_öa˘ivôy_check
;

793 
C§Uöt16
 
	mnoOfbrﬂdˇ°PktQueued
;

796 
li°_hód
 
	mrx_unc⁄åﬁÀd_li°
;

798 
li°_hód
 
	mrx_c⁄åﬁÀd_li°
;

800 
CSR_SIGNAL
 
	mm4_sig«l
;

801 
bulk_d©a_desc_t
 
	mm4_bulk_d©a
;

803 #i‡(
deföed
(
CSR_WIFI_SECURITY_WAPI_ENABLE
Ë&& deföed(
CSR_WIFI_SECURITY_WAPI_SW_ENCRYPTION
))

805 
CSR_SIGNAL
 
	mw≠i_uniˇ°_ma_pkt_sig
;

806 
bulk_d©a_desc_t
 
	mw≠i_uniˇ°_bulk_d©a
;

810 
C§Boﬁ
 
	mm4_£¡
;

811 
CSR_CLIENT_TAG
 
	mm4_ho°Tag
;

812 
C§Boﬁ
 
	mdtimA˘ive
;

813 
C§Boﬁ
 
	möåaBssE«bÀd
;

814 
C§Uöt32
 
	mmu…iˇ°PduHo°Tag
;

816 
C§Boﬁ
 
	mbcTimSë
;

817 
C§Boﬁ
 
	mbcTimSëReqPídögFœg
;

818 
C§Boﬁ
 
	mbcTimSëReqQueued
;

820 #ifde‡
CSR_WIFI_NAPI_ENABLE


821 
sk_buff_hód
 
	m«pi_skb_li°
;

822 
«pi_°ru˘
 
	m«pi
;

825 
C§Uöt8
 
	m∑tchMode
;

826 } 
	t√tI¡îÁ˚_¥iv_t
;

828 #i‚de‡
ALLOW_Q_PAUSE


829 
	#√t_is_tx_q_∑u£d
(
¥iv
, 
q
Ë’riv->
tx_q_∑u£d_Êag
[q])

	)

830 
	#√t_tx_q_u≈au£
(
¥iv
, 
q
Ë’riv->
tx_q_∑u£d_Êag
[q] = 0)

	)

831 
	#√t_tx_q_∑u£
(
¥iv
, 
q
Ë’riv->
tx_q_∑u£d_Êag
[q] = 1)

	)

834 #ifde‡
CSR_SUPPORT_SME


835 
	#rouãrSèπBuf„rög
(
¥iv
, 
queue
Ë¥iv->
rouãrBuf„rE«bÀ
[(queue)] = 
TRUE
;

	)

836 
	#rouãrSt›Buf„rög
(
¥iv
, 
queue
Ë¥iv->
rouãrBuf„rE«bÀ
[(queue)] = 
FALSE
;

	)

837 
	#isRouãrBuf„rE«bÀd
(
¥iv
, 
queue
Ë¥iv->
rouãrBuf„rE«bÀ
[(queue)]

	)

840 #ifde‡
USE_DRIVER_LOCK


841 
	#LOCK_DRIVER
(
_p
Ë
	`down_öãºu±ibÀ
(&(_p)->
lock
)

	)

842 
	#UNLOCK_DRIVER
(
_p
Ë
	`up
(&(_p)->
lock
)

	)

844 
	#LOCK_DRIVER
(
_p
Ë()(_p);

	)

845 
	#UNLOCK_DRIVER
(
_p
Ë()(_p);

	)

848 
C§I¡32
 
C§HùResu…ToSètus
(
C§Resu…
 
c§Resu…
);

854 
uf_sdio_lﬂd
();

855 
uf_sdio_u∆ﬂd
();

856 
unifi_¥iv_t
* 
uf_föd_ö°™˚
(
ö°
);

857 
uf_föd_¥iv
(
unifi_¥iv_t
 *
¥iv
);

858 
uf_föd_√tdev_¥iv
(
√tI¡îÁ˚_¥iv_t
 *
¥iv
);

859 
unifi_¥iv_t
* 
uf_gë_ö°™˚
(
ö°
);

860 
uf_put_ö°™˚
(
ö°
);

861 
c§_sdio_löux_ö°Æl_úq
(
C§SdioFun˘i⁄
 *
sdio
);

862 
c§_sdio_löux_ªmove_úq
(
C§SdioFun˘i⁄
 *
sdio
);

864 
uf_add_os_devi˚
(
bus_id
, 
devi˚
 *
os_devi˚
);

865 
uf_ªmove_os_devi˚
(
bus_id
);

868 #ifde‡
CSR_WIFI_SDIO_USE_QUEUE


869 
C§WifiSdioQueueSèπ
();

870 
C§Resu…
 
C§WifiSdioQueueFlush
();

895 #ifde‡
CSR_WIFI_SUPPORT_MMC_DRIVER


897 #ifde‡
CSR_WIFI_SINGLE_FUNCTION


898 
	#C§SdioCœim
(
fun˘i⁄
Ë
	`sdio_˛aim_ho°
((fun˘i⁄)->
¥iv
);

	)

899 
	#C§SdioRñó£
(
fun˘i⁄
Ë
	`sdio_ªÀa£_ho°
((fun˘i⁄)->
¥iv
);

	)

901 
	#_sdio_˛aim_ho°
(
_func
)

	)

902 
	#_sdio_ªÀa£_ho°
(
_func
)

	)

905 
	#C§SdioCœim
(
fun˘i⁄
)

	)

906 
	#C§SdioRñó£
(
fun˘i⁄
)

	)

908 
	#_sdio_˛aim_ho°
(
_func
Ë
	`sdio_˛aim_ho°
(_func)

	)

909 
	#_sdio_ªÀa£_ho°
(
_func
Ë
	`sdio_ªÀa£_ho°
(_func)

	)

914 
	#_sdio_˛aim_ho°
(
_func
)

	)

915 
	#_sdio_ªÀa£_ho°
(
_func
)

	)

917 
	#C§SdioCœim
(
fun˘i⁄
)

	)

918 
	#C§SdioRñó£
(
fun˘i⁄
)

	)

926 
unifi_¥iv_t
* 
uf_Æloc_√tdevi˚
(
C§SdioFun˘i⁄
 *
sdio_dev
, 
bus_id
);

927 
uf_‰ì_√tdevi˚
(
unifi_¥iv_t
 *
¥iv
);

930 
C§Boﬁ
 
uf_Æloc_√tdevi˚_f‹_Ÿhî_öãrÁ˚s
(
unifi_¥iv_t
 *
¥iv
, 
C§Uöt16
 
öãrÁ˚Tag
);

935 
uf_run_unifihñ≥r
(
unifi_¥iv_t
 *
¥iv
);

936 
uf_ªque°_fúmw¨e_fûes
(
unifi_¥iv_t
 *
¥iv
, 
is_fw
);

937 
uf_ªÀa£_fúmw¨e_fûes
(
unifi_¥iv_t
 *
¥iv
);

938 
uf_ªÀa£_fúmw¨e
(
unifi_¥iv_t
 *
¥iv
, 
dÕriv
 *
to_‰ì
);

943 
uf_¸óã_devi˚_nodes
(
unifi_¥iv_t
 *
¥iv
, 
bus_id
);

944 
uf_de°roy_devi˚_nodes
(
unifi_¥iv_t
 *
¥iv
);

949 
uf_öô_bh
(
unifi_¥iv_t
 *
¥iv
);

950 
uf_öô_hw
(
unifi_¥iv_t
 *
¥iv
);

953 
uf_°¨t_thªad
(
unifi_¥iv_t
 *
¥iv
, 
uf_thªad
 *
thªad
, (*
func
)(*));

954 
	`uf_°›_thªad
(
unifi_¥iv_t
 *
¥iv
, 
uf_thªad
 *
thªad
);

955 
	`uf_waô_f‹_thªad_to_°›
(
unifi_¥iv_t
 *
¥iv
, 
uf_thªad
 *
thªad
);

961 
	`ul_öô_˛õ¡s
(
unifi_¥iv_t
 *
¥iv
);

964 
	#CLI_USING_WIRE_FORMAT
 0x0002

	)

965 
	#CLI_SME_USERSPACE
 0x0020

	)

966 
ul_˛õ¡_t
* 
	`ul_ªgi°î_˛õ¡
(
unifi_¥iv_t
 *
¥iv
,

967 
c⁄figuøti⁄
,

968 
udi_evít_t
 
udi_evít_˛bk
);

969 
	`ul_dîegi°î_˛õ¡
(
ul_˛õ¡_t
 *
p˛i
);

971 
	`ul_£nd_sig«l_u≈acked
(
unifi_¥iv_t
 *
¥iv
,

972 
CSR_SIGNAL
 *
sig±r
,

973 
bulk_d©a_∑øm_t
 *
bulkd©a
);

974 
	`ul_£nd_sig«l_øw
(
unifi_¥iv_t
 *
¥iv
,

975 *
sig±r
, 
sigÀn
,

976 
bulk_d©a_∑øm_t
 *
bulkd©a
);

978 
	`ul_log_c⁄fig_öd
(
unifi_¥iv_t
 *
¥iv
, 
u8
 *
c⁄f_∑øm
, 
Àn
);

987 
	`uf_vîify_m4
(
unifi_¥iv_t
 *
¥iv
, c⁄° *
∑ckë
,

988 
Àngth
);

990 #ifde‡
CSR_SUPPORT_SME


991 
C§Boﬁ
 
	`uf_check_brﬂdˇ°_bssid
(
unifi_¥iv_t
 *
¥iv
, c⁄° 
bulk_d©a_∑øm_t
 *
bulkd©a
);

992 
C§Boﬁ
 
	`uf_¥o˚ss_pm_bô_f‹_≥î
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiRouãrCålSèInfo_t
 *
§cSèInfo
, 
C§Uöt8
 
pmBô
, 
C§Uöt16
 
öãrÁ˚Tag
);

993 
	`uf_¥o˚ss_ps_pﬁl
(
unifi_¥iv_t
 *
¥iv
, 
C§Uöt8
 *
ß
, C§Uöt8 *
da
, C§Uöt8 
pmBô
, 
C§Uöt16
 
öãrÁ˚Tag
);

994 
	`uf_≠_¥o˚ss_d©a_pdu
(
unifi_¥iv_t
 *
¥iv
, 
sk_buff
 *
skb
,

995 
ëhhdr
 *
ehdr
, 
C§WifiRouãrCålSèInfo_t
 *
§cSèInfo
,

996 c⁄° 
CSR_SIGNAL
 *
sig«l
,

997 
bulk_d©a_∑øm_t
 *
bulkd©a
,

998 
C§Uöt8
 
macHódîLígthInByãs
);

999 
C§Boﬁ
 
	`uf_is_m‹e_d©a_f‹_n⁄_dñivîy_ac
(
C§WifiRouãrCålSèInfo_t
 *
°aRec‹d
);

1000 
	`uf_¥o˚ss_wmm_dñivî_ac_u≠sd
(
unifi_¥iv_t
 *
¥iv
,

1001 
C§WifiRouãrCålSèInfo_t
 *
§cSèInfo
,

1002 
C§Uöt16
 
qosC⁄åﬁ
,

1003 
C§Uöt16
 
öãrÁ˚Tag
);

1005 
	`uf_£nd_buf„ªd_d©a_‰om_ac
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiRouãrCålSèInfo_t
 *
°aInfo
, 
C§Uöt8
 
queue
, 
li°_hód
 *
txLi°
);

1006 
	`uf_£nd_buf„ªd_d©a_‰om_dñivîy_ac
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiRouãrCålSèInfo_t
 *
°aInfo
, 
C§Uöt8
 
queue
, 
li°_hód
 *
txLi°
);

1008 
	`uf_c⁄töue_u≠sd
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiRouãrCålSèInfo_t
 *
°aInfo
);

1009 
	`uf_£nd_qos_nuŒ
(
unifi_¥iv_t
 *
¥iv
, 
C§Uöt16
 
öãrÁ˚Tag
, c⁄° 
C§Uöt8
 *
da
, 
CSR_PRIORITY
 
¥i‹ôy
, 
C§WifiRouãrCålSèInfo_t
 *
§cSèInfo
);

1010 
	`uf_£nd_nuŒd©a
(
unifi_¥iv_t
 *
¥iv
, 
C§Uöt16
 
öãrÁ˚Tag
, c⁄° 
C§Uöt8
 *
da
, 
CSR_PRIORITY
 
¥i‹ôy
, 
C§WifiRouãrCålSèInfo_t
 *
§cSèInfo
);

1014 
C§Resu…
 
	`uf_¥o˚ss_ma_∑ckë_ªq
(
unifi_¥iv_t
 *
¥iv
, 
C§Uöt8
 *
≥îMacAddªss
, 
CSR_CLIENT_TAG
 
ho°Tag
, 
C§Uöt16
 
öãrÁ˚Tag
, 
CSR_TRANSMISSION_CONTROL
 
å™smissi⁄C⁄åﬁ
, 
CSR_RATE
 
TønsmôR©e
, 
CSR_PRIORITY
 
¥i‹ôy
, 
CSR_PROCESS_ID
 
£ndîId
, 
bulk_d©a_∑øm_t
 *
bulkd©a
);

1015 
	`uf_¥o˚ss_ma_vif_avaûibûôy_öd
(
unifi_¥iv_t
 *
¥iv
, 
C§Uöt8
 *
sigd©a
, 
C§Uöt32
 
sigÀn
);

1016 #ifde‡
CSR_SUPPORT_SME


1017 
	`uf_£nd_buf„ªd_‰ames
(
unifi_¥iv_t
 *
¥iv
, 
unifi_TøfficQueue
 
queue
);

1018 
	`uf_¥o˚ss_°©i⁄_ªc‹ds_f‹_£ndög_d©a
(
unifi_¥iv_t
 *
¥iv
, 
C§Uöt16
 
öãrÁ˚Tag
,

1019 
C§WifiRouãrCålSèInfo_t
 *
§cSèInfo
,

1020 
C§WifiRouãrCålSèInfo_t
 *
d°SèInfo
);

1021 
	`uf_¥ï¨e_£nd_cfm_li°_f‹_queued_pkts
(
unifi_¥iv_t
 *
¥iv
,

1022 
li°_hód
 *
‰ames_√ed_cfm_li°
,

1023 
li°_hód
 *
li°
);

1024 
	`£nd_auto_ma_∑ckë_c⁄fúm
(
unifi_¥iv_t
 *
¥iv
,

1025 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
,

1026 
li°_hód
 *
buf„ªd_‰ames_li°
);

1027 
	`uf_Êush_li°
(
unifi_¥iv_t
 *
¥iv
, 
li°_hód
 *
li°
);

1028 
tx_buf„ªd_∑ckës_t
* 
	`dequeue_tx_d©a_pdu
(
unifi_¥iv_t
 *
¥iv
, 
li°_hód
 *
txLi°
);

1029 
	`ªsume_uniˇ°_buf„ªd_‰ames
(
unifi_¥iv_t
 *
¥iv
, 
C§Uöt16
 
öãrÁ˚Tag
);

1030 
	`upd©e_eo•_to_hód_of_brﬂdˇ°_li°_hód
(
unifi_¥iv_t
 *
¥iv
, 
C§Uöt16
 
öãrÁ˚Tag
);

1031 
	`ªsume_su•íded_u≠sd
(
unifi_¥iv_t
 *
¥iv
, 
C§Uöt16
 
öãrÁ˚Tag
);

1037 #i‚de‡
P80211_OUI_LEN


1038 
	#P80211_OUI_LEN
 3

	)

1042 
u8
 
dßp
;

1043 
u8
 
sßp
;

1044 
u8
 
˘æ
;

1045 
u8
 
oui
[
P80211_OUI_LEN
];

1046 
u16
 
¥Ÿocﬁ
;

1047 } 
	t__©åibuã__
 ((
	t∑cked
)Ë
	tŒc_¢≠_hdr_t
;

1048 
	`skb_add_Œc_¢≠
(
√t_devi˚
 *
dev
, 
sk_buff
 *
skb
, 
¥Ÿo
);

1049 
	`skb_80211_to_ëhî
(
unifi_¥iv_t
 *
¥iv
, 
sk_buff
 *
skb
,

1050 c⁄° *
daddr
, c⁄° *
ßddr
,

1051 c⁄° 
CSR_SIGNAL
 *
sig«l
,

1052 
bulk_d©a_∑øm_t
 *
bulkd©a
);

1054 c⁄° * 
	`ªsu…_code_°r
(
ªsu…
);

1058 
	`¥ï¨e_™d_add_machódî
(
unifi_¥iv_t
 *
¥iv
,

1059 
sk_buff
 *
skb
,

1060 
sk_buff
 *
√wSkb
,

1061 
CSR_PRIORITY
 
¥i‹ôy
,

1062 
bulk_d©a_∑øm_t
 *
bulkd©a
,

1063 
C§Uöt16
 
öãrÁ˚Tag
,

1064 c⁄° 
C§Uöt8
 *
daddr
,

1065 c⁄° 
C§Uöt8
 *
ßddr
,

1066 
C§Boﬁ
 
¥Ÿe˘i⁄
);

1067 
CSR_PRIORITY


1068 
	`gë_∑ckë_¥i‹ôy
(
unifi_¥iv_t
 *
¥iv
, 
sk_buff
 *
skb
, c⁄° 
ëhhdr
 *
ehdr
, 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
);

1071 
	`unifi_‰ame_ma_∑ckë_ªq
(
unifi_¥iv_t
 *
¥iv
, 
CSR_PRIORITY
 
¥i‹ôy
,

1072 
CSR_RATE
 
TønsmôR©e
, 
CSR_CLIENT_TAG
 
ho°Tag
,

1073 
C§Uöt16
 
öãrÁ˚Tag
, 
CSR_TRANSMISSION_CONTROL
 
å™smissi⁄C⁄åﬁ
,

1074 
CSR_PROCESS_ID
 
ÀSídîPro˚ssId
, 
C§Uöt8
 *
≥îMacAddªss
,

1075 
CSR_SIGNAL
 *
sig«l
);

1079 
	#CSR_WIFI_PACK_SENDER_ID_LSB_FOR_TIM_REQ
(
h™dÀ
, 
timSèã
Ë((h™dÀ << 2Ë|ÅimSèã)

	)

1081 
	#CSR_WIFI_GET_STATION_HANDLE_FROM_RECEIVER_ID
(
ª˚ivîPro˚ssId
Ë(
C§Uöt8
Ë(‘e˚ivîPro˚ssId & 0xffË>> 2)

	)

1083 
	#CSR_WIFI_GET_TIMSET_STATE_FROM_RECEIVER_ID
(
ª˚ivîPro˚ssId
Ë(
C§Uöt8
Ë‘e˚ivîPro˚ssId & 0x03)

	)

1086 
	#CSR_WIFI_BROADCAST_OR_MULTICAST_HANDLE
 0x3F

	)

1088 
	`upd©e_tim
(
unifi_¥iv_t
 *
¥iv
, 
C§Uöt16
 
aid
, 
C§Uöt8
 
£tTim
, C§Uöt16 
öãrÁ˚Tag
, 
C§Uöt32
 
h™dÀ
);

1089 
	`uf_h™dÀ_tim_cfm
(
unifi_¥iv_t
 *
¥iv
, 
CSR_MLME_SET_TIM_CONFIRM
 *
cfm
, 
C§Uöt16
 
£ndîPro˚ssId
);

1092 
	`C§WifiRouãrCålI¡îÁ˚Re£t
(
unifi_¥iv_t
 *
¥iv
, 
C§Uöt16
 
öãrÁ˚Tag
);

1094 
	`s¸ﬁl_ba_wödow
(
unifi_¥iv_t
 *
¥iv
,

1095 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
,

1096 
ba_£ssi⁄_rx_°ru˘
 *
ba_£ssi⁄
,

1097 
C§Uöt16
 
¢
);

1099 
C§Boﬁ
 
	`blockack_£ssi⁄_°›
(
unifi_¥iv_t
 *
¥iv
,

1100 
C§Uöt16
 
öãrÁ˚Tag
,

1101 
C§WifiRouãrCålBlockAckRﬁe
 
rﬁe
,

1102 
C§Uöt16
 
tID
,

1103 
C§WifiMacAddªss
 
macAddªss
);

1104 #ifde‡
CSR_SUPPORT_SME


1106 
C§I¡8
 
	`uf_gë_¥Ÿe˘i⁄_bô_‰om_öãrÁ˚mode
(
unifi_¥iv_t
 *
¥iv
, 
C§Uöt16
 
öãrÁ˚Tag
, c⁄° 
C§Uöt8
 *
daddr
);

1110 #ifde‡
CSR_SUPPORT_SME


1111 
C§WifiRouãrCålSèInfo_t
* 
	`C§WifiRouãrCålGëSèti⁄Rec‹dFromPìrMacAddªss
(
unifi_¥iv_t
 *
¥iv
,

1112 c⁄° 
C§Uöt8
 *
≥îMacAddªss
,

1113 
C§Uöt16
 
öãrÁ˚Tag
);

1116 
C§WifiRouãrCålSèInfo_t
* 
	`C§WifiRouãrCålGëSèti⁄Rec‹dFromH™dÀ
(
unifi_¥iv_t
 *
¥iv
,

1117 
C§Uöt32
 
h™dÀ
,

1118 
C§Uöt16
 
öãrÁ˚Tag
);

1120 
	`uf_upd©e_°a_a˘ivôy
(
unifi_¥iv_t
 *
¥iv
, 
C§Uöt16
 
öãrÁ˚Tag
, c⁄° 
C§Uöt8
 *
≥îMacAddªss
);

1121 
	`uf_¥o˚ss_ma_pkt_cfm_f‹_≠
(
unifi_¥iv_t
 *
¥iv
, 
C§Uöt16
 
öãrÁ˚Tag
, c⁄° 
CSR_MA_PACKET_CONFIRM
 *
pkt_cfm
);

1123 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 28)

1124 
	`uf_ö°Æl_qdisc
(
√t_devi˚
 *
dev
);

1127 
	`uf_ªsume_d©a_∂™e
(
unifi_¥iv_t
 *
¥iv
, 
queue
,

1128 
C§WifiMacAddªss
 
≥î_addªss
,

1129 
C§Uöt16
 
öãrÁ˚Tag
);

1130 
	`uf_‰ì_≥ndög_rx_∑ckës
(
unifi_¥iv_t
 *
¥iv
, 
queue
,

1131 
C§WifiMacAddªss
 
≥î_addªss
, 
C§Uöt16
 
öãrÁ˚Tag
);

1133 
	`uf_ªgi°î_√tdev
(
unifi_¥iv_t
 *
¥iv
, 
numOfI¡îÁ˚
);

1134 
	`uf_uƒegi°î_√tdev
(
unifi_¥iv_t
 *
¥iv
);

1136 
	`uf_√t_gë_«me
(
√t_devi˚
 *
dev
, *
«me
, 
Àn
);

1138 
	`uf_£nd_queue_öfo
(
unifi_¥iv_t
 *
¥iv
);

1139 
C§Uöt16
 
	`uf_gë_vif_idítifõr
(
C§WifiRouãrCålMode
 
mode
, C§Uöt16 
èg
);

1141 
	`uf_¥o˚ss_rx_≥ndög_queue
(
unifi_¥iv_t
 *
¥iv
, 
queue
,

1142 
C§WifiMacAddªss
 
sour˚_addªss
,

1143 
ödiˇã
, 
C§Uöt16
 
öãrÁ˚Tag
);

1145 #ifde‡
CSR_WIFI_HIP_DEBUG_OFFLINE


1146 
	`uf_ªgi°î_hù_ofÊöe_debug
(
unifi_¥iv_t
 *
¥iv
);

1147 
	`uf_uƒegi°î_hù_ofÊöe_debug
(
unifi_¥iv_t
 *
¥iv
);

1153 
	`uf_ªgi°î_öë_nŸifõr
();

1154 
	`uf_uƒegi°î_öë_nŸifõr
();

1160 
	`unifi_ªsume
(*
o•riv
);

1161 
	`unifi_su•íd
(*
o•riv
);

1164 
	#QOS_CAPABILITY_WMM_ENABLED
 0x0001

	)

1165 
	#QOS_CAPABILITY_WMM_UAPSD
 0x0002

	)

1166 
	#QOS_CAPABILITY_ACM_BE_ENABLED
 0x0010

	)

1167 
	#QOS_CAPABILITY_ACM_BK_ENABLED
 0x0020

	)

1168 
	#QOS_CAPABILITY_ACM_VI_ENABLED
 0x0040

	)

1169 
	#QOS_CAPABILITY_ACM_VO_ENABLED
 0x0080

	)

1170 
	#QOS_CAPABILITY_TS_BE_ENABLED
 0x0100

	)

1171 
	#QOS_CAPABILITY_TS_BK_ENABLED
 0x0200

	)

1172 
	#QOS_CAPABILITY_TS_VI_ENABLED
 0x0400

	)

1173 
	#QOS_CAPABILITY_TS_VO_ENABLED
 0x0800

	)

1177 #i‚de‡
ETH_P_PAE


1178 
	#ETH_P_PAE
 0x888e

	)

1180 #i‚de‡
ETH_P_WAI


1181 
	#ETH_P_WAI
 0x88b4

	)

1186 
	`debug_°rög_ödiˇti⁄
(
unifi_¥iv_t
 *
¥iv
,

1187 c⁄° *
exåa
,

1188 
exåÆí
);

1189 
	`debug_w‹d16_ödiˇti⁄
(
unifi_¥iv_t
 *
¥iv
, c⁄° 
CSR_SIGNAL
 *
sig±r
);

1190 
	`debug_gíîic_ödiˇti⁄
(
unifi_¥iv_t
 *
¥iv
, c⁄° 
CSR_SIGNAL
 *
sig±r
);

1196 
	`unifi_puã°_°¨t
(
unifi_¥iv_t
 *
¥iv
, *
¨g
);

1197 
	`unifi_puã°_cmd52_block_ªad
(
unifi_¥iv_t
 *
¥iv
, *
¨g
);

1198 
	`unifi_puã°_°›
(
unifi_¥iv_t
 *
¥iv
, *
¨g
);

1199 
	`unifi_puã°_£t_sdio_˛ock
(
unifi_¥iv_t
 *
¥iv
, *
¨g
);

1200 
	`unifi_puã°_cmd52_ªad
(
unifi_¥iv_t
 *
¥iv
, *
¨g
);

1201 
	`unifi_puã°_c‹edump_¥ï¨e
(
unifi_¥iv_t
 *
¥iv
, *
¨g
);

1202 
	`unifi_puã°_cmd52_wrôe
(
unifi_¥iv_t
 *
¥iv
, *
¨g
);

1203 
	`unifi_puã°_gp_ªad16
(
unifi_¥iv_t
 *
¥iv
, *
¨g
);

1204 
	`unifi_puã°_gp_wrôe16
(
unifi_¥iv_t
 *
¥iv
, *
¨g
);

1206 
	`unifi_puã°_dl_fw
(
unifi_¥iv_t
 *
¥iv
, *
¨g
);

1207 
	`unifi_puã°_dl_fw_buff
(
unifi_¥iv_t
 *
¥iv
, *
¨g
);

1211 
	#UF_TRACE_MAC
(
¥iv
, 
lvl
, 
msg
, 
addr
) \

1212 
	`unifi_åa˚
(
¥iv
, 
lvl
, \

1214 
msg
, \

1215 *(((
C§Uöt8
 *)
addr
) + 0), \

1216 *(((
C§Uöt8
 *)
addr
) + 1), \

1217 *(((
C§Uöt8
 *)
addr
) + 2), \

1218 *(((
C§Uöt8
 *)
addr
) + 3), \

1219 *(((
C§Uöt8
 *)
addr
) + 4), \

1220 *(((
C§Uöt8
 *)
addr
Ë+ 5))

	)

1223 #ifde‡
CSR_WIFI_NAPI_ENABLE


1224 
	#CSR_WIFI_NAPI_BUDGET
 16

	)

1226 
	`«pi_öô
(
√t_devi˚
 *
dev
, 
«pi_°ru˘
 *
«pi
, 
sk_buff_hód
 *
«pi_skb_li°
);

1227 
	`«pi_deöô
(
«pi_°ru˘
 *
«pi
, 
sk_buff_hód
 *
«pi_skb_li°
);

1228 
	`«pi_scheduÀ_√w_∑ckës
(
unifi_¥iv_t
 *
¥iv
);

	@unifi_sme.c

15 
	~"unifi_¥iv.h
"

16 
	~"c§_wifi_hù_unifi.h
"

17 
	~"c§_wifi_hù_c⁄vîsi⁄s.h
"

23 
	$c⁄vît_sme_îr‹
(
C§Resu…
 
îr‹
)

25 
îr‹
) {

26 
CSR_RESULT_SUCCESS
:

28 
CSR_RESULT_FAILURE
:

29 
CSR_WIFI_RESULT_NOT_FOUND
:

30 
CSR_WIFI_RESULT_TIMED_OUT
:

31 
CSR_WIFI_RESULT_CANCELLED
:

32 
CSR_WIFI_RESULT_UNAVAILABLE
:

33  -
EIO
;

34 
CSR_WIFI_RESULT_NO_ROOM
:

35  -
EBUSY
;

36 
CSR_WIFI_RESULT_INVALID_PARAMETER
:

37  -
EINVAL
;

38 
CSR_WIFI_RESULT_UNSUPPORTED
:

39  -
EOPNOTSUPP
;

41  -
EIO
;

43 
	}
}

68 
	$sme_log_evít
(
ul_˛õ¡_t
 *
p˛i
,

69 c⁄° 
u8
 *
sig«l
, 
sig«l_Àn
,

70 c⁄° 
bulk_d©a_∑øm_t
 *
bulkd©a
,

71 
dú
)

73 
unifi_¥iv_t
 *
¥iv
;

74 
CSR_SIGNAL
 
u≈acked_sig«l
;

75 
C§WifiSmeD©aBlock
 
mlmeComm™d
;

76 
C§WifiSmeD©aBlock
 
d©¨ef1
;

77 
C§WifiSmeD©aBlock
 
d©¨ef2
;

78 
C§Resu…
 
ªsu…
 = 
CSR_RESULT_SUCCESS
;

79 
r
;

82 
	#CSR_SME_DATA
 0x00000000

	)

83 
	#CSR_PAL_DATA
 0X10000000

	)

84 
	#CSR_NME_DATA
 0x20000000

	)

85 
	#APPLICATION_DATA
 0x30000000

	)

87 
	`func_íãr
();

89 i‡((
sig«l
 =
NULL
Ë|| (
sig«l_Àn
 <= 0)) {

90 
	`func_exô
();

94 
¥iv
 = 
	`uf_föd_ö°™˚
(
p˛i
->
ö°™˚
);

95 i‡(!
¥iv
) {

96 
	`unifi_îr‹
(
¥iv
, "sme_log_event: invalidÖriv\n");

97 
	`func_exô
();

101 i‡(
¥iv
->
smïriv
 =
NULL
) {

102 
	`unifi_îr‹
(
¥iv
, "sme_log_event: invalid smepriv\n");

103 
	`func_exô
();

107 
	`unifi_åa˚
(
¥iv
, 
UDBG3
,

109 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
(
sig«l
));

113 
r
 = 
	`ªad_u≈ack_sig«l
(
sig«l
, &
u≈acked_sig«l
);

114 i‡(
r
 =
CSR_RESULT_SUCCESS
) {

115 i‡((
u≈acked_sig«l
.
Sig«lPrimôiveHódî
.
Sig«lId
 =
CSR_DEBUG_STRING_INDICATION_ID
) ||

116 (
u≈acked_sig«l
.
Sig«lPrimôiveHódî
.
Sig«lId
 =
CSR_DEBUG_WORD16_INDICATION_ID
))

118 
	`func_exô
();

121 i‡(
u≈acked_sig«l
.
Sig«lPrimôiveHódî
.
Sig«lId
 =
CSR_MA_PACKET_INDICATION_ID
)

123 
C§Uöt16
 
‰mCål
;

124 
C§Boﬁ
 
uniˇ°Pdu
 = 
TRUE
;

125 
C§Uöt8
 *
macHdrLoˇti⁄
;

126 
C§Uöt8
 *
øddr
 = 
NULL
, *
èddr
 = NULL;

127 
C§WifiMacAddªss
 
≥îMacAddªss
;

129 
CSR_MA_PACKET_INDICATION
 *
öd
 = &
u≈acked_sig«l
.
u
.
MaPackëIndiˇti⁄
;

131 
macHdrLoˇti⁄
 = (
C§Uöt8
 *Ë
bulkd©a
->
d
[0].
os_d©a_±r
;

133 
‰mCål
 = 
	`CSR_GET_UINT16_FROM_LITTLE_ENDIAN
(
macHdrLoˇti⁄
);

136 
øddr
 = 
macHdrLoˇti⁄
 + 
MAC_HEADER_ADDR1_OFFSET
;

137 
èddr
 = 
macHdrLoˇti⁄
 + 
MAC_HEADER_ADDR2_OFFSET
;

139 
	`C§MemCpy
(
≥îMacAddªss
.
a
, 
èddr
, 
ETH_ALEN
);

141 if(
öd
->
Re˚±i⁄Sètus
 =
CSR_MICHAEL_MIC_ERROR
)

143 i‡(*
øddr
 & 0x1)

144 
uniˇ°Pdu
 = 
FALSE
;

146 
	`C§WifiRouãrCålMicFaûuªIndSíd
 (
¥iv
->
CSR_WIFI_SME_IFACEQUEUE
, 0,

147 (
öd
->
VútuÆI¡îÁ˚Idítifõr
 & 0xff),
≥îMacAddªss
,

148 
uniˇ°Pdu
);

153 if(
öd
->
Re˚±i⁄Sètus
 =
CSR_RX_SUCCESS
)

155 
C§Uöt8
 
pmBô
 = (
‰mCål
 & 0x1000)?0x01:0x00;

156 
C§Uöt16
 
öãrÁ˚Tag
 = (
öd
->
VútuÆI¡îÁ˚Idítifõr
 & 0xff);

157 
C§WifiRouãrCålSèInfo_t
 *
§cSèInfo
 = 
	`C§WifiRouãrCålGëSèti⁄Rec‹dFromPìrMacAddªss
(
¥iv
,
èddr
,
öãrÁ˚Tag
);

158 if((
§cSèInfo
 !
NULL
Ë&& (
	`uf_check_brﬂdˇ°_bssid
(
¥iv
, 
bulkd©a
)=
FALSE
))

160 
	`uf_¥o˚ss_pm_bô_f‹_≥î
(
¥iv
,
§cSèInfo
,
pmBô
,
öãrÁ˚Tag
);

163 
§cSèInfo
->
a˘ivôy_Êag
 = 
TRUE
;

169 i‡(
u≈acked_sig«l
.
Sig«lPrimôiveHódî
.
Sig«lId
 =
CSR_MA_PACKET_CONFIRM_ID
)

171 
CSR_MA_PACKET_CONFIRM
 *
cfm
 = &
u≈acked_sig«l
.
u
.
MaPackëC⁄fúm
;

172 
C§Uöt16
 
öãrÁ˚Tag
 = (
cfm
->
VútuÆI¡îÁ˚Idítifõr
 & 0xff);

173 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
;

174 
CSR_MA_PACKET_REQUEST
 *
ªq
;

175 
C§WifiMacAddªss
 
≥îMacAddªss
;

177 i‡(
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
)

179 
	`unifi_îr‹
(
¥iv
, "Bad MA_PACKET_CONFIRM i¡îÁ˚Tag %d\n", 
öãrÁ˚Tag
);

180 
	`func_exô
();

184 
	`unifi_åa˚
(
¥iv
,
UDBG1
,"MA-PACKET C⁄fúm (%x, %x)\n", 
cfm
->
Ho°Tag
, cfm->
Tønsmissi⁄Sètus
);

186 
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

187 #ifde‡
CSR_SUPPORT_SME


188 if(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_AP
 ||

189 
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_P2PGO
) {

191 if(
cfm
->
Ho°Tag
 =
öãrÁ˚Priv
->
mu…iˇ°PduHo°Tag
){

192 
	`uf_¥o˚ss_ma_pkt_cfm_f‹_≠
(
¥iv
 ,
öãrÁ˚Tag
, 
cfm
);

197 
ªq
 = &
öãrÁ˚Priv
->
m4_sig«l
.
u
.
MaPackëReque°
;

199 if(
cfm
->
Ho°Tag
 & 0x80000000)

201 i‡(
cfm
->
Tønsmissi⁄Sètus
 !
CSR_TX_SUCCESSFUL
)

203 
ªsu…
 = 
CSR_RESULT_FAILURE
;

205 #ifde‡
CSR_SUPPORT_SME


206 
	`mem˝y
(
≥îMacAddªss
.
a
, 
ªq
->
Ra
.
x
, 
ETH_ALEN
);

208 i‡(
öãrÁ˚Priv
->
m4_£¡
 && (
cfm
->
Ho°Tag
 =öãrÁ˚Priv->
m4_ho°Tag
))

210 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "%s: Sídög M4 Tønsmô CFM\n", 
__FUNCTION__
);

211 
	`C§WifiRouãrCålM4TønsmôãdIndSíd
(
¥iv
->
CSR_WIFI_SME_IFACEQUEUE
, 0,

212 
öãrÁ˚Tag
,

213 
≥îMacAddªss
,

214 
ªsu…
);

215 
öãrÁ˚Priv
->
m4_£¡
 = 
FALSE
;

216 
öãrÁ˚Priv
->
m4_ho°Tag
 = 0xffffffff;

220 if((
cfm
->
Ho°Tag
 & 0x80000000Ë!
CSR_WIFI_EAPOL_M4_HOST_TAG
) {

221 
	`C§WifiRouãrMaPackëCfmSíd
((
C§Uöt16
)
sig«l
[2],

222 
cfm
->
VútuÆI¡îÁ˚Idítifõr
,

223 
ªsu…
,

224 (
cfm
->
Ho°Tag
 & 0x3fffffff), cfm->
R©e
);

226 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "%s: M4Ñe˚ived fromÇëdevi˚\n", 
__FUNCTION__
);

228 
	`func_exô
();

234 
mlmeComm™d
.
Àngth
 = 
sig«l_Àn
;

235 
mlmeComm™d
.
d©a
 = (
C§Uöt8
*)
sig«l
;

237 
d©¨ef1
.
Àngth
 = 
bulkd©a
->
d
[0].
d©a_Àngth
;

238 i‡(
d©¨ef1
.
Àngth
 > 0) {

239 
d©¨ef1
.
d©a
 = (
C§Uöt8
 *Ë
bulkd©a
->
d
[0].
os_d©a_±r
;

242 
d©¨ef1
.
d©a
 = 
NULL
;

245 
d©¨ef2
.
Àngth
 = 
bulkd©a
->
d
[1].
d©a_Àngth
;

246 i‡(
d©¨ef2
.
Àngth
 > 0) {

247 
d©¨ef2
.
d©a
 = (
C§Uöt8
 *Ë
bulkd©a
->
d
[1].
os_d©a_±r
;

250 
d©¨ef2
.
d©a
 = 
NULL
;

253 
	`C§WifiRouãrCålHùIndSíd
(
¥iv
->
CSR_WIFI_SME_IFACEQUEUE
, 
mlmeComm™d
.
Àngth
, mlmeComm™d.
d©a
,

254 
d©¨ef1
.
Àngth
, d©¨ef1.
d©a
,

255 
d©¨ef2
.
Àngth
, d©¨ef2.
d©a
);

257 
	`func_exô
();

258 
	}
}

276 
C§WifiRouãrCålP‹tA˘i⁄


277 
	$uf_sme_p‹t_°©e
(
unifi_¥iv_t
 *
¥iv
, *
addªss
, 
queue
, 
C§Uöt16
 
öãrÁ˚Tag
)

279 
i
;

280 
unifi_p‹t_c⁄fig_t
 *
p‹t
;

281 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
;

283 i‡(
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
) {

284 
	`unifi_îr‹
(
¥iv
, "uf_sme_port_state: bad interfaceTag\n");

285  
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_CLOSED_DISCARD
;

288 
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

290 i‡(
queue
 =
UF_CONTROLLED_PORT_Q
) {

291 
p‹t
 = &
öãrÁ˚Priv
->
c⁄åﬁÀd_d©a_p‹t
;

293 
p‹t
 = &
öãrÁ˚Priv
->
unc⁄åﬁÀd_d©a_p‹t
;

296 i‡(!
p‹t
->
íåõs_ö_u£
) {

297 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "NoÖort configurations,Ñeturn Discard.\n");

298  
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_CLOSED_DISCARD
;

302 i‡(
p‹t
->
ovîide_a˘i⁄
 =
UF_DATA_PORT_OVERIDE
) {

303 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "SingleÖort configuration (%d).\n",

304 
p‹t
->
p‹t_cfg
[0].
p‹t_a˘i⁄
);

305  
p‹t
->
p‹t_cfg
[0].
p‹t_a˘i⁄
;

308 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "Mu…ùÀ (%dËp‹àc⁄figuøti⁄s.\n", 
p‹t
->
íåõs_ö_u£
);

311 
i
 = 0; i < 
UNIFI_MAX_CONNECTIONS
; i++) {

313 i‡(
p‹t
->
p‹t_cfg
[
i
].
ö_u£
 &&

314 
	`memcmp
(
addªss
, 
p‹t
->
p‹t_cfg
[
i
].
mac_addªss
.
a
, 
ETH_ALEN
) == 0) {

316  
p‹t
->
p‹t_cfg
[
i
].
p‹t_a˘i⁄
;

321 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "port configurationÇot found,Ñeturn Open.\n");

322  
CSR_WIFI_ROUTER_CTRL_PORT_ACTION_8021X_PORT_OPEN
;

323 
	}
}

340 
unifi_p‹t_cfg_t
*

341 
	$uf_sme_p‹t_c⁄fig_h™dÀ
(
unifi_¥iv_t
 *
¥iv
, *
addªss
, 
queue
, 
C§Uöt16
 
öãrÁ˚Tag
)

343 
i
;

344 
unifi_p‹t_c⁄fig_t
 *
p‹t
;

345 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

347 i‡(
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
) {

348 
	`unifi_îr‹
(
¥iv
, "uf_sme_port_config_handle: bad interfaceTag\n");

349  
NULL
;

352 i‡(
queue
 =
UF_CONTROLLED_PORT_Q
) {

353 
p‹t
 = &
öãrÁ˚Priv
->
c⁄åﬁÀd_d©a_p‹t
;

355 
p‹t
 = &
öãrÁ˚Priv
->
unc⁄åﬁÀd_d©a_p‹t
;

358 i‡(!
p‹t
->
íåõs_ö_u£
) {

359 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "NoÖort configurations,Ñeturn Discard.\n");

360  
NULL
;

364 i‡(
p‹t
->
ovîide_a˘i⁄
 =
UF_DATA_PORT_OVERIDE
) {

365 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "SingleÖort configuration (%d).\n",

366 
p‹t
->
p‹t_cfg
[0].
p‹t_a˘i⁄
);

367 i‡(
addªss
) {

368 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "addr[0] = %x,áddr[1] = %x,áddr[2] = %x,áddr[3] = %x\n", 
addªss
[0],áddress[1],áddress[2],áddress[3]);

370  &
p‹t
->
p‹t_cfg
[0];

373 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "MultipleÖort configurations.\n");

376 
i
 = 0; i < 
UNIFI_MAX_CONNECTIONS
; i++) {

378 i‡(
p‹t
->
p‹t_cfg
[
i
].
ö_u£
 &&

379 
	`memcmp
(
addªss
, 
p‹t
->
p‹t_cfg
[
i
].
mac_addªss
.
a
, 
ETH_ALEN
) == 0) {

381  &
p‹t
->
p‹t_cfg
[
i
];

386 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "port configurationÇot found,Ñeturning NULL (debug).\n");

387  
NULL
;

388 
	}
}

391 
	$uf_mu…iˇ°_li°_wq
(
w‹k_°ru˘
 *
w‹k
)

393 
unifi_¥iv_t
 *
¥iv
 = 
	`c⁄èöî_of
(
w‹k
, unifi_priv_t,

394 
mu…iˇ°_li°_èsk
);

395 
i
;

396 
C§Uöt16
 
öãrÁ˚Tag
 = 0;

397 
C§WifiMacAddªss
* 
mu…iˇ°_addªss_li°
 = 
NULL
;

398 
mc_cou¡
;

399 
u8
 *
mc_li°
;

400 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
¥iv
->öãrÁ˚Priv[
öãrÁ˚Tag
];

402 i‡(
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
) {

403 
	`unifi_îr‹
(
¥iv
, "uf_multicast_list_wq: bad interfaceTag\n");

407 
	`unifi_åa˚
(
¥iv
, 
UDBG5
,

409 
öãrÁ˚Priv
->
mc_li°_cou¡
);

412 
	`C§WifiRouãrCålMu…iˇ°AddªssIndSíd
(
¥iv
->
CSR_WIFI_SME_IFACEQUEUE
,0, 
öãrÁ˚Tag
, 
CSR_WIFI_SME_LIST_ACTION_FLUSH
, 0, 
NULL
);

414 
mc_cou¡
 = 
öãrÁ˚Priv
->
mc_li°_cou¡
;

415 
mc_li°
 = 
öãrÁ˚Priv
->mc_list;

420 
mu…iˇ°_addªss_li°
 = 
	`C§PmemAŒoc
(
mc_cou¡
 * (
C§WifiMacAddªss
));

422 i‡(
mu…iˇ°_addªss_li°
 =
NULL
) {

426 
i
 = 0; i < 
mc_cou¡
; i++) {

427 
	`mem˝y
(
mu…iˇ°_addªss_li°
[
i
].
a
, 
mc_li°
, 
ETH_ALEN
);

428 
mc_li°
 +
ETH_ALEN
;

431 i‡(
¥iv
->
smïriv
 =
NULL
) {

432 
	`C§PmemFªe
(
mu…iˇ°_addªss_li°
);

436 
	`C§WifiRouãrCålMu…iˇ°AddªssIndSíd
(
¥iv
->
CSR_WIFI_SME_IFACEQUEUE
,0,

437 
öãrÁ˚Tag
,

438 
CSR_WIFI_SME_LIST_ACTION_ADD
,

439 
mc_cou¡
, 
mu…iˇ°_addªss_li°
);

442 
	`C§PmemFªe
(
mu…iˇ°_addªss_li°
);

443 
	}
}

446 
	$unifi_cfg_powî
(
unifi_¥iv_t
 *
¥iv
, *
¨g
)

448 
unifi_cfg_powî_t
 
cfg_powî
;

449 
rc
;

450 
wﬁ
;

452 i‡(
	`gë_u£r
(
cfg_powî
, (
unifi_cfg_powî_t
*)(((
unifi_cfg_comm™d_t
*)
¨g
) + 1))) {

453 
	`unifi_îr‹
(
¥iv
, "UNIFI_CFG: FailedÅo getÅheárgument\n");

454  -
EFAULT
;

457 
cfg_powî
) {

458 
UNIFI_CFG_POWER_OFF
:

459 
¥iv
->
wﬁ_su•íd
 = (
íabÀ_wﬁ
 =
UNIFI_WOL_OFF
Ë? 
FALSE
 : 
TRUE
;

460 
rc
 = 
	`sme_sys_su•íd
(
¥iv
);

461 i‡(
rc
) {

462  
rc
;

465 
UNIFI_CFG_POWER_ON
:

466 
wﬁ
 = 
¥iv
->
wﬁ_su•íd
;

467 
rc
 = 
	`sme_sys_ªsume
(
¥iv
);

468 i‡(
rc
) {

469  
rc
;

471 i‡(
wﬁ
) {

475 
	`unifi_£nd_sig«l
(
¥iv
->
ˇrd
, 
NULL
, 0, NULL);

479 
	`unifi_îr‹
(
¥iv
, "WIFI POWER: Unknown value.\n");

480  -
EINVAL
;

484 
	}
}

487 
	$unifi_cfg_powî_ßve
(
unifi_¥iv_t
 *
¥iv
, *
¨g
)

489 
unifi_cfg_powîßve_t
 
cfg_powî_ßve
;

490 
C§WifiSmePowîC⁄fig
 
powîC⁄fig
;

491 
rc
;

493 i‡(
	`gë_u£r
(
cfg_powî_ßve
, (
unifi_cfg_powîßve_t
*)(((
unifi_cfg_comm™d_t
*)
¨g
) + 1))) {

494 
	`unifi_îr‹
(
¥iv
, "UNIFI_CFG: FailedÅo getÅheárgument\n");

495  -
EFAULT
;

499 
rc
 = 
	`sme_mgt_powî_c⁄fig_gë
(
¥iv
, &
powîC⁄fig
);

500 i‡(
rc
) {

501 
	`unifi_îr‹
(
¥iv
, "UNIFI_CFG: Get unifi_PowerConfigValue failed.\n");

502  
rc
;

505 
cfg_powî_ßve
) {

506 
UNIFI_CFG_POWERSAVE_NONE
:

507 
powîC⁄fig
.
powîSaveLevñ
 = 
CSR_WIFI_SME_POWER_SAVE_LEVEL_LOW
;

509 
UNIFI_CFG_POWERSAVE_FAST
:

510 
powîC⁄fig
.
powîSaveLevñ
 = 
CSR_WIFI_SME_POWER_SAVE_LEVEL_MED
;

512 
UNIFI_CFG_POWERSAVE_FULL
:

513 
powîC⁄fig
.
powîSaveLevñ
 = 
CSR_WIFI_SME_POWER_SAVE_LEVEL_HIGH
;

515 
UNIFI_CFG_POWERSAVE_AUTO
:

516 
powîC⁄fig
.
powîSaveLevñ
 = 
CSR_WIFI_SME_POWER_SAVE_LEVEL_AUTO
;

519 
	`unifi_îr‹
(
¥iv
, "POWERSAVE: Unknown value.\n");

520  -
EINVAL
;

523 
rc
 = 
	`sme_mgt_powî_c⁄fig_£t
(
¥iv
, &
powîC⁄fig
);

525 i‡(
rc
) {

526 
	`unifi_îr‹
(
¥iv
, "UNIFI_CFG: Set unifi_PowerConfigValue failed.\n");

529  
rc
;

530 
	}
}

533 
	$unifi_cfg_powî_suµly
(
unifi_¥iv_t
 *
¥iv
, *
¨g
)

535 
unifi_cfg_powîsuµly_t
 
cfg_powî_suµly
;

536 
C§WifiSmeHo°C⁄fig
 
ho°C⁄fig
;

537 
rc
;

539 i‡(
	`gë_u£r
(
cfg_powî_suµly
, (
unifi_cfg_powîsuµly_t
*)(((
unifi_cfg_comm™d_t
*)
¨g
) + 1))) {

540 
	`unifi_îr‹
(
¥iv
, "UNIFI_CFG: FailedÅo getÅheárgument\n");

541  -
EFAULT
;

545 
rc
 = 
	`sme_mgt_ho°_c⁄fig_gë
(
¥iv
, &
ho°C⁄fig
);

546 i‡(
rc
) {

547 
	`unifi_îr‹
(
¥iv
, "UNIFI_CFG: Get unifi_HostConfigValue failed.\n");

548  
rc
;

551 
cfg_powî_suµly
) {

552 
UNIFI_CFG_POWERSUPPLY_MAINS
:

553 
ho°C⁄fig
.
powîMode
 = 
CSR_WIFI_SME_HOST_POWER_MODE_ACTIVE
;

555 
UNIFI_CFG_POWERSUPPLY_BATTERIES
:

556 
ho°C⁄fig
.
powîMode
 = 
CSR_WIFI_SME_HOST_POWER_MODE_POWER_SAVE
;

559 
	`unifi_îr‹
(
¥iv
, "POWERSUPPLY: Unknown value.\n");

560  -
EINVAL
;

563 
rc
 = 
	`sme_mgt_ho°_c⁄fig_£t
(
¥iv
, &
ho°C⁄fig
);

564 i‡(
rc
) {

565 
	`unifi_îr‹
(
¥iv
, "UNIFI_CFG: Set unifi_HostConfigValue failed.\n");

568  
rc
;

569 
	}
}

572 
	$unifi_cfg_∑ckë_fûãrs
(
unifi_¥iv_t
 *
¥iv
, *
¨g
)

574 *
t˛as_buf„r
;

575 
t˛as_buf„r_Àngth
;

576 
t˛as_t
 *
dh˝_t˛as
;

577 
rc
;

580 i‡(
¥iv
->
∑ckë_fûãrs
.
t˛as_õs_Àngth
) {

581 
	`C§PmemFªe
(
¥iv
->
fûãr_t˛as_õs
);

582 
¥iv
->
fûãr_t˛as_õs
 = 
NULL
;

585 
t˛as_buf„r
 = ((*)
¨g
Ë+ (
unifi_cfg_comm™d_t
) + ();

586 i‡(
	`c›y_‰om_u£r
(&
¥iv
->
∑ckë_fûãrs
, (*)
t˛as_buf„r
,

587 (
uf_cfg_bˇ°_∑ckë_fûãr_t
))) {

588 
	`unifi_îr‹
(
¥iv
, "UNIFI_CFG: FailedÅo getÅhe filter struct\n");

589  -
EFAULT
;

592 
t˛as_buf„r_Àngth
 = 
¥iv
->
∑ckë_fûãrs
.
t˛as_õs_Àngth
;

595 i‡(
¥iv
->
∑ckë_fûãrs
.
dh˝_fûãr
) {

596 
¥iv
->
∑ckë_fûãrs
.
t˛as_õs_Àngth
 +(
t˛as_t
);

598 i‡(
¥iv
->
∑ckë_fûãrs
.
t˛as_õs_Àngth
 > 0) {

599 
¥iv
->
fûãr_t˛as_õs
 = 
	`C§PmemAŒoc
’riv->
∑ckë_fûãrs
.
t˛as_õs_Àngth
);

600 i‡(
¥iv
->
fûãr_t˛as_õs
 =
NULL
) {

601  -
ENOMEM
;

603 i‡(
t˛as_buf„r_Àngth
) {

604 
t˛as_buf„r
 +(
uf_cfg_bˇ°_∑ckë_fûãr_t
) - (*);

605 i‡(
	`c›y_‰om_u£r
(
¥iv
->
fûãr_t˛as_õs
,

606 
t˛as_buf„r
,

607 
t˛as_buf„r_Àngth
)) {

608 
	`unifi_îr‹
(
¥iv
, "UNIFI_CFG: FailedÅo getÅhe TCLAS buffer\n");

609  -
EFAULT
;

614 if(
¥iv
->
∑ckë_fûãrs
.
dh˝_fûãr
)

617 
dh˝_t˛as
 = (
t˛as_t
*)(
¥iv
->
fûãr_t˛as_õs
 + 
t˛as_buf„r_Àngth
);

618 
	`mem£t
(
dh˝_t˛as
, 0, (
t˛as_t
));

619 
dh˝_t˛as
->
ñemít_id
 = 14;

620 
dh˝_t˛as
->
Àngth
 = (
t˝ù_˛s‰_t
) + 1;

621 
dh˝_t˛as
->
u£r_¥i‹ôy
 = 0;

622 
dh˝_t˛as
->
t˝_ù_˛s_‰
.
˛s_‰_ty≥
 = 1;

623 
dh˝_t˛as
->
t˝_ù_˛s_‰
.
vîsi⁄
 = 4;

624 ((
C§Uöt8
*)(&
dh˝_t˛as
->
t˝_ù_˛s_‰
.
sour˚_p‹t
))[0] = 0x00;

625 ((
C§Uöt8
*)(&
dh˝_t˛as
->
t˝_ù_˛s_‰
.
sour˚_p‹t
))[1] = 0x44;

626 ((
C§Uöt8
*)(&
dh˝_t˛as
->
t˝_ù_˛s_‰
.
de°_p‹t
))[0] = 0x00;

627 ((
C§Uöt8
*)(&
dh˝_t˛as
->
t˝_ù_˛s_‰
.
de°_p‹t
))[1] = 0x43;

628 
dh˝_t˛as
->
t˝_ù_˛s_‰
.
¥Ÿocﬁ
 = 0x11;

629 
dh˝_t˛as
->
t˝_ù_˛s_‰
.
˛s_‰_mask
 = 0x58;

632 
rc
 = 
	`sme_mgt_∑ckë_fûãr_£t
(
¥iv
);

634  
rc
;

635 
	}
}

638 
	$unifi_cfg_wmm_qos_öfo
(
unifi_¥iv_t
 *
¥iv
, *
¨g
)

640 
C§Uöt8
 
wmm_qos_öfo
;

641 
rc
 = 0;

643 i‡(
	`gë_u£r
(
wmm_qos_öfo
, (
C§Uöt8
*)(((
unifi_cfg_comm™d_t
*)
¨g
) + 1))) {

644 
	`unifi_îr‹
(
¥iv
, "UNIFI_CFG: FailedÅo getÅheárgument\n");

645  -
EFAULT
;

649 
¥iv
->
c⁄√˘i⁄_c⁄fig
.
wmmQosInfo
 = 
wmm_qos_öfo
;

651  
rc
;

652 
	}
}

655 
	$unifi_cfg_wmm_addts
(
unifi_¥iv_t
 *
¥iv
, *
¨g
)

657 
C§Uöt32
 
addts_tid
;

658 
C§Uöt8
 
addts_õ_Àngth
;

659 
C§Uöt8
 *
addts_õ
;

660 
C§Uöt8
 *
addts_∑øms
;

661 
C§WifiSmeD©aBlock
 
t•ec
;

662 
C§WifiSmeD©aBlock
 
t˛as
;

663 
rc
;

665 
addts_∑øms
 = (
C§Uöt8
*)(((
unifi_cfg_comm™d_t
*)
¨g
) + 1);

666 i‡(
	`gë_u£r
(
addts_tid
, (
C§Uöt32
*)
addts_∑øms
)) {

667 
	`unifi_îr‹
(
¥iv
, "unifi_cfg_wmm_addts: FailedÅo getÅheárgument\n");

668  -
EFAULT
;

671 
addts_∑øms
 +(
C§Uöt32
);

672 i‡(
	`gë_u£r
(
addts_õ_Àngth
, (
C§Uöt8
*)
addts_∑øms
)) {

673 
	`unifi_îr‹
(
¥iv
, "unifi_cfg_wmm_addts: FailedÅo getÅheárgument\n");

674  -
EFAULT
;

677 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "addts:Åid = 0x%x ie_length = %d\n",

678 
addts_tid
, 
addts_õ_Àngth
);

680 
addts_õ
 = 
	`C§PmemAŒoc
(
addts_õ_Àngth
);

681 i‡(
addts_õ
 =
NULL
) {

682 
	`unifi_îr‹
(
¥iv
,

684 
addts_õ_Àngth
);

685  -
ENOMEM
;

688 
addts_∑øms
 +(
C§Uöt8
);

689 
rc
 = 
	`c›y_‰om_u£r
(
addts_õ
, 
addts_∑øms
, 
addts_õ_Àngth
);

690 i‡(
rc
) {

691 
	`unifi_îr‹
(
¥iv
, "unifi_cfg_wmm_addts: FailedÅo getÅheáddts buffer\n");

692 
	`C§PmemFªe
(
addts_õ
);

693  -
EFAULT
;

696 
t•ec
.
d©a
 = 
addts_õ
;

697 
t•ec
.
Àngth
 = 
addts_õ_Àngth
;

698 
t˛as
.
d©a
 = 
NULL
;

699 
t˛as
.
Àngth
 = 0;

701 
rc
 = 
	`sme_mgt_t•ec
(
¥iv
, 
CSR_WIFI_SME_LIST_ACTION_ADD
, 
addts_tid
,

702 &
t•ec
, &
t˛as
);

704 
	`C§PmemFªe
(
addts_õ
);

705  
rc
;

706 
	}
}

709 
	$unifi_cfg_wmm_dñts
(
unifi_¥iv_t
 *
¥iv
, *
¨g
)

711 
C§Uöt32
 
dñts_tid
;

712 
C§Uöt8
 *
dñts_∑øms
;

713 
C§WifiSmeD©aBlock
 
t•ec
;

714 
C§WifiSmeD©aBlock
 
t˛as
;

715 
rc
;

717 
dñts_∑øms
 = (
C§Uöt8
*)(((
unifi_cfg_comm™d_t
*)
¨g
) + 1);

718 i‡(
	`gë_u£r
(
dñts_tid
, (
C§Uöt32
*)
dñts_∑øms
)) {

719 
	`unifi_îr‹
(
¥iv
, "unifi_cfg_wmm_delts: FailedÅo getÅheárgument\n");

720  -
EFAULT
;

723 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "dñts:Åid = 0x%x\n", 
dñts_tid
);

725 
t•ec
.
d©a
 = 
t˛as
.d©®
NULL
;

726 
t•ec
.
Àngth
 = 
t˛as
.length = 0;

728 
rc
 = 
	`sme_mgt_t•ec
(
¥iv
, 
CSR_WIFI_SME_LIST_ACTION_REMOVE
, 
dñts_tid
,

729 &
t•ec
, &
t˛as
);

731  
rc
;

732 
	}
}

734 
	$unifi_cfg_°ri˘_dø·_n
(
unifi_¥iv_t
 *
¥iv
, *
¨g
)

736 
C§Boﬁ
 
°ri˘_dø·_n
;

737 
C§Uöt8
 *
°ri˘_dø·_n_∑øms
;

738 
rc
;

740 
C§WifiSmeSèC⁄fig
 
°aC⁄fig
;

741 
C§WifiSmeDevi˚C⁄fig
 
devi˚C⁄fig
;

743 
°ri˘_dø·_n_∑øms
 = (
C§Uöt8
*)(((
unifi_cfg_comm™d_t
*)
¨g
) + 1);

744 i‡(
	`gë_u£r
(
°ri˘_dø·_n
, (
C§Boﬁ
*)
°ri˘_dø·_n_∑øms
)) {

745 
	`unifi_îr‹
(
¥iv
, "unifi_cfg_strict_draft_n: FailedÅo getÅheárgument\n");

746  -
EFAULT
;

749 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "°ri˘_dø·_n: = %s\n", ((
°ri˘_dø·_n
) ? "yes":"no"));

751 
rc
 = 
	`sme_mgt_sme_c⁄fig_gë
(
¥iv
, &
°aC⁄fig
, &
devi˚C⁄fig
);

753 i‡(
rc
) {

754 
	`unifi_w¨nög
(
¥iv
, "unifi_cfg_strict_draft_n: Get unifi_SMEConfigValue failed.\n");

755  -
EFAULT
;

758 
devi˚C⁄fig
.
íabÀSåi˘Dø·N
 = 
°ri˘_dø·_n
;

760 
rc
 = 
	`sme_mgt_sme_c⁄fig_£t
(
¥iv
, &
°aC⁄fig
, &
devi˚C⁄fig
);

761 i‡(
rc
) {

762 
	`unifi_w¨nög
(
¥iv
, "unifi_cfg_strict_draft_n: Set unifi_SMEConfigValue failed.\n");

763 
rc
 = -
EFAULT
;

766  
rc
;

767 
	}
}

770 
	$unifi_cfg_íabÀ_okc
(
unifi_¥iv_t
 *
¥iv
, *
¨g
)

772 
C§Boﬁ
 
íabÀ_okc
;

773 
C§Uöt8
 *
íabÀ_okc_∑øms
;

774 
rc
;

776 
C§WifiSmeSèC⁄fig
 
°aC⁄fig
;

777 
C§WifiSmeDevi˚C⁄fig
 
devi˚C⁄fig
;

779 
íabÀ_okc_∑øms
 = (
C§Uöt8
*)(((
unifi_cfg_comm™d_t
*)
¨g
) + 1);

780 i‡(
	`gë_u£r
(
íabÀ_okc
, (
C§Boﬁ
*)
íabÀ_okc_∑øms
)) {

781 
	`unifi_îr‹
(
¥iv
, "unifi_cfg_enable_okc: FailedÅo getÅheárgument\n");

782  -
EFAULT
;

785 
	`unifi_åa˚
(
¥iv
, 
UDBG4
, "íabÀ_okc: = %s\n", ((
íabÀ_okc
) ? "yes":"no"));

787 
rc
 = 
	`sme_mgt_sme_c⁄fig_gë
(
¥iv
, &
°aC⁄fig
, &
devi˚C⁄fig
);

788 i‡(
rc
) {

789 
	`unifi_w¨nög
(
¥iv
, "unifi_cfg_enable_okc: Get unifi_SMEConfigValue failed.\n");

790  -
EFAULT
;

793 
°aC⁄fig
.
íabÀOµ‹tuni°icKeyCachög
 = 
íabÀ_okc
;

795 
rc
 = 
	`sme_mgt_sme_c⁄fig_£t
(
¥iv
, &
°aC⁄fig
, &
devi˚C⁄fig
);

796 i‡(
rc
) {

797 
	`unifi_w¨nög
(
¥iv
, "unifi_cfg_enable_okc: Set unifi_SMEConfigValue failed.\n");

798 
rc
 = -
EFAULT
;

801  
rc
;

802 
	}
}

805 
	$unifi_cfg_gë_öfo
(
unifi_¥iv_t
 *
¥iv
, *
¨g
)

807 
unifi_cfg_gë_t
 
gë_cmd
;

808 
ö°_«me
[
IFNAMSIZ
];

809 
rc
;

811 i‡(
	`gë_u£r
(
gë_cmd
, (
unifi_cfg_gë_t
*)(((
unifi_cfg_comm™d_t
*)
¨g
) + 1))) {

812 
	`unifi_îr‹
(
¥iv
, "UNIFI_CFG: FailedÅo getÅheárgument\n");

813  -
EFAULT
;

816 
gë_cmd
) {

817 
UNIFI_CFG_GET_COEX
:

819 
C§WifiSmeC€xInfo
 
c€xInfo
;

821 
rc
 = 
	`sme_mgt_c€x_öfo_gë
(
¥iv
, &
c€xInfo
);

822 i‡(
rc
) {

823 
	`unifi_îr‹
(
¥iv
, "UNIFI_CFG: Get unifi_CoexInfoValue failed.\n");

824  
rc
;

828 i‡(
	`c›y_to_u£r
((*)
¨g
,

829 &
c€xInfo
,

830 (
C§WifiSmeC€xInfo
))) {

831 
	`unifi_îr‹
(
¥iv
, "UNIFI_CFG: FailedÅo copyÅhe coex info\n");

832  -
EFAULT
;

836 
UNIFI_CFG_GET_POWER_MODE
:

838 
C§WifiSmePowîC⁄fig
 
powîC⁄fig
;

839 
rc
 = 
	`sme_mgt_powî_c⁄fig_gë
(
¥iv
, &
powîC⁄fig
);

840 i‡(
rc
) {

841 
	`unifi_îr‹
(
¥iv
, "UNIFI_CFG: Get unifi_PowerConfigValue failed.\n");

842  
rc
;

846 i‡(
	`c›y_to_u£r
((*)
¨g
,

847 &
powîC⁄fig
.
powîSaveLevñ
,

848 (
C§WifiSmePowîSaveLevñ
))) {

849 
	`unifi_îr‹
(
¥iv
, "UNIFI_CFG: FailedÅo copyÅheÖower save info\n");

850  -
EFAULT
;

854 
UNIFI_CFG_GET_POWER_SUPPLY
:

856 
C§WifiSmeHo°C⁄fig
 
ho°C⁄fig
;

857 
rc
 = 
	`sme_mgt_ho°_c⁄fig_gë
(
¥iv
, &
ho°C⁄fig
);

858 i‡(
rc
) {

859 
	`unifi_îr‹
(
¥iv
, "UNIFI_CFG: Get unifi_HostConfigValue failed.\n");

860  
rc
;

864 i‡(
	`c›y_to_u£r
((*)
¨g
,

865 &
ho°C⁄fig
.
powîMode
,

866 (
C§WifiSmeHo°PowîMode
))) {

867 
	`unifi_îr‹
(
¥iv
, "UNIFI_CFG: FailedÅo copyÅhe hostÖower mode\n");

868  -
EFAULT
;

872 
UNIFI_CFG_GET_VERSIONS
:

874 
UNIFI_CFG_GET_INSTANCE
:

876 
C§Uöt16
 
I¡îÁ˚Id
=0;

877 
	`uf_√t_gë_«me
(
¥iv
->
√tdev
[
I¡îÁ˚Id
], &
ö°_«me
[0], (inst_name));

880 i‡(
	`c›y_to_u£r
((*)
¨g
,

881 &
ö°_«me
[0],

882 (
ö°_«me
))) {

883 
	`unifi_îr‹
(
¥iv
, "UNIFI_CFG: FailedÅo copyÅhe instanceÇame\n");

884  -
EFAULT
;

889 
UNIFI_CFG_GET_AP_CONFIG
:

891 #ifde‡
CSR_SUPPORT_WEXT_AP


892 
uf_cfg_≠_c⁄fig_t
 
cfg_≠_c⁄fig
;

893 
cfg_≠_c⁄fig
.
ch™√l
 = 
¥iv
->
≠_c⁄fig
.channel;

894 
cfg_≠_c⁄fig
.
bóc⁄I¡îvÆ
 = 
¥iv
->
≠_mac_c⁄fig
.beaconInterval;

895 
cfg_≠_c⁄fig
.
wmmE«bÀd
 = 
¥iv
->
≠_mac_c⁄fig
.wmmEnabled;

896 
cfg_≠_c⁄fig
.
dtimPîiod
 = 
¥iv
->
≠_mac_c⁄fig
.dtimPeriod;

897 
cfg_≠_c⁄fig
.
phySuµ‹ãdBôm≠
 = 
¥iv
->
≠_mac_c⁄fig
.phySupportedBitmap;

898 i‡(
	`c›y_to_u£r
((*)
¨g
,

899 &
cfg_≠_c⁄fig
,

900 (
uf_cfg_≠_c⁄fig_t
))) {

901 
	`unifi_îr‹
(
¥iv
, "UNIFI_CFG: FailedÅo copyÅhe AP configuration\n");

902  -
EFAULT
;

905  -
EPERM
;

912 
	`unifi_îr‹
(
¥iv
, "unifi_cfg_get_info: Unknown value.\n");

913  -
EINVAL
;

917 
	}
}

918 #ifde‡
CSR_SUPPORT_WEXT_AP


920 
	$uf_c⁄figuª_suµ‹ãd_øãs
(
C§Uöt8
 * 
suµ‹ãdR©es
, C§Uöt8 
phySuµ‹ãdBôm≠
)

922 
i
=0;

923 
C§Boﬁ
 
b
=
FALSE
, 
g
 = FALSE, 
n
 = FALSE;

924 
b
 = 
phySuµ‹ãdBôm≠
 & 
CSR_WIFI_SME_AP_PHY_SUPPORT_B
;

925 
n
 = 
phySuµ‹ãdBôm≠
 & 
CSR_WIFI_SME_AP_PHY_SUPPORT_N
;

926 
g
 = 
phySuµ‹ãdBôm≠
 & 
CSR_WIFI_SME_AP_PHY_SUPPORT_G
;

927 if(
b
 || 
g
) {

928 
suµ‹ãdR©es
[
i
++]=0x82;

929 
suµ‹ãdR©es
[
i
++]=0x84;

930 
suµ‹ãdR©es
[
i
++]=0x8b;

931 
suµ‹ãdR©es
[
i
++]=0x96;

932 } if(
n
) {

934 
suµ‹ãdR©es
[
i
++]=0x02;

935 
suµ‹ãdR©es
[
i
++]=0x04;

936 
suµ‹ãdR©es
[
i
++]=0x0b;

937 
suµ‹ãdR©es
[
i
++]=0x16;

938 
suµ‹ãdR©es
[
i
++]=0x0c;

939 
suµ‹ãdR©es
[
i
++]=0x12;

940 
suµ‹ãdR©es
[
i
++]=0x18;

941 
suµ‹ãdR©es
[
i
++]=0x24;

942 
suµ‹ãdR©es
[
i
++]=0x30;

943 
suµ‹ãdR©es
[
i
++]=0x48;

944 
suµ‹ãdR©es
[
i
++]=0x60;

945 
suµ‹ãdR©es
[
i
++]=0x6c;

947 if(
g
) {

948 if(!
b
) {

949 
suµ‹ãdR©es
[
i
++]=0x8c;

950 
suµ‹ãdR©es
[
i
++]=0x98;

951 
suµ‹ãdR©es
[
i
++]=0xb0;

953 
suµ‹ãdR©es
[
i
++]=0x0c;

954 
suµ‹ãdR©es
[
i
++]=0x18;

955 
suµ‹ãdR©es
[
i
++]=0x30;

957 
suµ‹ãdR©es
[
i
++]=0x48;

958 
suµ‹ãdR©es
[
i
++]=0x12;

959 
suµ‹ãdR©es
[
i
++]=0x24;

960 
suµ‹ãdR©es
[
i
++]=0x60;

961 
suµ‹ãdR©es
[
i
++]=0x6c;

963  
i
;

964 
	}
}

965 
	$unifi_cfg_£t_≠_c⁄fig
(
unifi_¥iv_t
 * 
¥iv
,* 
¨g
)

967 
uf_cfg_≠_c⁄fig_t
 
cfg_≠_c⁄fig
;

968 *
buf„r
;

970 
buf„r
 = ((*)
¨g
Ë+ (
unifi_cfg_comm™d_t
) + ();

971 i‡(
	`c›y_‰om_u£r
(&
cfg_≠_c⁄fig
, (*)
buf„r
,

972 (
uf_cfg_≠_c⁄fig_t
))) {

973 
	`unifi_îr‹
(
¥iv
, "UNIFI_CFG: FailedÅo getÅheáp config struct\n");

974  -
EFAULT
;

976 
¥iv
->
≠_c⁄fig
.
ch™√l
 = 
cfg_≠_c⁄fig
.channel;

977 
¥iv
->
≠_mac_c⁄fig
.
dtimPîiod
 = 
cfg_≠_c⁄fig
.dtimPeriod;

978 
¥iv
->
≠_mac_c⁄fig
.
bóc⁄I¡îvÆ
 = 
cfg_≠_c⁄fig
.beaconInterval;

979 
¥iv
->
group_£c_c⁄fig
.
≠GroupkeyTimeout
 = 
cfg_≠_c⁄fig
.
groupkeyTimeout
;

980 
¥iv
->
group_£c_c⁄fig
.
≠Såi˘GtkRekey
 = 
cfg_≠_c⁄fig
.
°ri˘GtkRekeyE«bÀd
;

981 
¥iv
->
group_£c_c⁄fig
.
≠GmkTimeout
 = 
cfg_≠_c⁄fig
.
gmkTimeout
;

982 
¥iv
->
group_£c_c⁄fig
.
≠Re•⁄£Timeout
 = 
cfg_≠_c⁄fig
.
ª•⁄£Timeout
;

983 
¥iv
->
group_£c_c⁄fig
.
≠RëønsLimô
 = 
cfg_≠_c⁄fig
.
ªå™sLimô
;

985 
¥iv
->
≠_mac_c⁄fig
.
sh‹tSlŸTimeE«bÀd
 = 
cfg_≠_c⁄fig
.shortSlotTimeEnabled;

986 
¥iv
->
≠_mac_c⁄fig
.
˘sPrŸe˘i⁄Ty≥
=
cfg_≠_c⁄fig
.ctsProtectionType;

988 
¥iv
->
≠_mac_c⁄fig
.
wmmE«bÀd
 = 
cfg_≠_c⁄fig
.wmmEnabled;

990 
¥iv
->
≠_mac_c⁄fig
.
≠HtP¨ams
.
rxStbc
=
cfg_≠_c⁄fig
.rxStbc;

991 
¥iv
->
≠_mac_c⁄fig
.
≠HtP¨ams
.
rifsModeAŒowed
=
cfg_≠_c⁄fig
.rifsModeAllowed;

993 
¥iv
->
≠_mac_c⁄fig
.
phySuµ‹ãdBôm≠
 = 
cfg_≠_c⁄fig
.phySupportedBitmap;

994 
¥iv
->
≠_mac_c⁄fig
.
maxLi°íI¡îvÆ
=
cfg_≠_c⁄fig
.maxListenInterval;

996 
¥iv
->
≠_mac_c⁄fig
.
suµ‹ãdR©esCou¡

	`uf_c⁄figuª_suµ‹ãd_øãs
’riv->≠_mac_c⁄fig.
suµ‹ãdR©es
,¥iv->≠_mac_c⁄fig.
phySuµ‹ãdBôm≠
);

999 
	}
}

1002 #ifde‡
CSR_SUPPORT_WEXT


1005 
	$uf_sme_c⁄fig_wq
(
w‹k_°ru˘
 *
w‹k
)

1007 
C§WifiSmeSèC⁄fig
 
°aC⁄fig
;

1008 
C§WifiSmeDevi˚C⁄fig
 
devi˚C⁄fig
;

1009 
unifi_¥iv_t
 *
¥iv
 = 
	`c⁄èöî_of
(
w‹k
, unifi_¥iv_t, 
sme_c⁄fig_èsk
);

1012 
	`C§WifiSmeEvítMaskSëReqSíd
(0,

1013 
CSR_WIFI_SME_INDICATIONS_WIFIOFF
 | 
CSR_WIFI_SME_INDICATIONS_CONNECTIONQUALITY
 |

1014 
CSR_WIFI_SME_INDICATIONS_MEDIASTATUS
 | 
CSR_WIFI_SME_INDICATIONS_MICFAILURE
);

1016 i‡(
	`sme_mgt_sme_c⁄fig_gë
(
¥iv
, &
°aC⁄fig
, &
devi˚C⁄fig
)) {

1017 
	`unifi_w¨nög
(
¥iv
, "uf_sme_config_wq: Get unifi_SMEConfigValue failed.\n");

1021 i‡(
¥iv
->
if_ödex
 =
CSR_INDEX_5G
) {

1022 
°aC⁄fig
.
ifIndex
 = 
CSR_WIFI_SME_RADIO_IF_GHZ_5_0
;

1024 
°aC⁄fig
.
ifIndex
 = 
CSR_WIFI_SME_RADIO_IF_GHZ_2_4
;

1027 
devi˚C⁄fig
.
åu°Levñ
 = (
C§WifiSme80211dTru°Levñ
)
é_80211d
;

1028 i‡(
	`sme_mgt_sme_c⁄fig_£t
(
¥iv
, &
°aC⁄fig
, &
devi˚C⁄fig
)) {

1029 
	`unifi_w¨nög
(
¥iv
,

1034 
	}
}

1059 
	$uf_è_öd_wq
(
w‹k_°ru˘
 *
w‹k
)

1061 
è_öd
 *
öd
 = 
	`c⁄èöî_of
(
w‹k
, è_öd, 
èsk
);

1062 
unifi_¥iv_t
 *
¥iv
 = 
	`c⁄èöî_of
(
öd
, unifi_¥iv_t, 
è_öd_w‹k
);

1063 
C§Uöt16
 
öãrÁ˚Tag
 = 0;

1066 
	`C§WifiRouãrCålTøfficPrŸocﬁIndSíd
(
¥iv
->
CSR_WIFI_SME_IFACEQUEUE
,0,

1067 
öãrÁ˚Tag
,

1068 
öd
->
∑ckë_ty≥
,

1069 
öd
->
dúe˘i⁄
,

1070 
öd
->
§c_addr
);

1071 
öd
->
ö_u£
 = 0;

1073 
	}
}

1096 
	$uf_è_ßm∂e_öd_wq
(
w‹k_°ru˘
 *
w‹k
)

1098 
è_ßm∂e_öd
 *
öd
 = 
	`c⁄èöî_of
(
w‹k
, è_ßm∂e_öd, 
èsk
);

1099 
unifi_¥iv_t
 *
¥iv
 = 
	`c⁄èöî_of
(
öd
, unifi_¥iv_t, 
è_ßm∂e_öd_w‹k
);

1100 
C§Uöt16
 
öãrÁ˚Tag
 = 0;

1102 
	`unifi_åa˚
(
¥iv
, 
UDBG5
, "rxtcp %dÅxtcp %dÑxudp %dÅxudp %dÖrio %d\n",

1103 
¥iv
->
rxT˝Throughput
,

1104 
¥iv
->
txT˝Throughput
,

1105 
¥iv
->
rxUdpThroughput
,

1106 
¥iv
->
txUdpThroughput
,

1107 
¥iv
->
bh_thªad
.
¥io
);

1109 if(
¥iv
->
rxT˝Throughput
 > 1000)

1111 i‡(
bh_¥i‹ôy
 =-1 && 
¥iv
->
bh_thªad
.
¥io
 != 1)

1113 
sched_∑øm
 
∑øm
;

1114 
¥iv
->
bh_thªad
.
¥io
 = 1;

1115 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "%sÇewÅhread (RT)Öriority = %d\n",

1116 
¥iv
->
bh_thªad
.
«me
,Öriv->bh_thªad.
¥io
);

1117 
∑øm
.
sched_¥i‹ôy
 = 
¥iv
->
bh_thªad
.
¥io
;

1118 
	`sched_£tscheduÀr
(
¥iv
->
bh_thªad
.
thªad_èsk
, 
SCHED_FIFO
, &
∑øm
);

1122 i‡(
bh_¥i‹ôy
 =-1 && 
¥iv
->
bh_thªad
.
¥io
 !
DEFAULT_PRIO
)

1124 
sched_∑øm
 
∑øm
;

1125 
∑øm
.
sched_¥i‹ôy
 = 0;

1126 
	`sched_£tscheduÀr
(
¥iv
->
bh_thªad
.
thªad_èsk
, 
SCHED_NORMAL
, &
∑øm
);

1127 
¥iv
->
bh_thªad
.
¥io
 = 
DEFAULT_PRIO
;

1128 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "%sÇewÅhreadÖriority = %d\n",

1129 
¥iv
->
bh_thªad
.
«me
,Öriv->bh_thªad.
¥io
);

1130 
	`£t_u£r_ni˚
(
¥iv
->
bh_thªad
.
thªad_èsk
, 
	`PRIO_TO_NICE
’riv->bh_thªad.
¥io
));

1134 
	`C§WifiRouãrCålTøfficSam∂eIndSíd
(
¥iv
->
CSR_WIFI_SME_IFACEQUEUE
,0, 
öãrÁ˚Tag
, 
öd
->
°©s
);

1136 
öd
->
ö_u£
 = 0;

1138 
	}
}

1158 
	$uf_£nd_m4_ªady_wq
(
w‹k_°ru˘
 *
w‹k
)

1160 
√tI¡îÁ˚_¥iv_t
 *
I¡îÁ˚Priv
 = 
	`c⁄èöî_of
(
w‹k
,ÇëI¡îÁ˚_¥iv_t, 
£nd_m4_ªady_èsk
);

1161 
C§Uöt16
 
iÁ˚
 = 
I¡îÁ˚Priv
->
I¡îÁ˚Tag
;

1162 
unifi_¥iv_t
 *
¥iv
 = 
I¡îÁ˚Priv
->
¥ivPå
;

1163 
CSR_MA_PACKET_REQUEST
 *
ªq
 = &
I¡îÁ˚Priv
->
m4_sig«l
.
u
.
MaPackëReque°
;

1164 
C§WifiMacAddªss
 
≥î
;

1165 
Êags
;

1167 
	`func_íãr
();

1170 
	`•ö_lock_úqßve
(&
¥iv
->
m4_lock
, 
Êags
);

1171 
	`mem˝y
(
≥î
.
a
, 
ªq
->
Ra
.
x
, (peer.a));

1172 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
m4_lock
, 
Êags
);

1175 
	`C§WifiRouãrCålM4RódyToSídIndSíd
(
¥iv
->
CSR_WIFI_SME_IFACEQUEUE
, 0, 
iÁ˚
, 
≥î
);

1177 
	`UF_TRACE_MAC
(
¥iv
, 
UDBG1
, "M4RódyToSídInd síàf‹Öìr", 
≥î
.
a
);

1179 
	`func_exô
();

1181 
	}
}

1183 #i‡(
deföed
(
CSR_WIFI_SECURITY_WAPI_ENABLE
Ë&& deföed(
CSR_WIFI_SECURITY_WAPI_SW_ENCRYPTION
))

1200 
	$uf_£nd_pkt_to_í¸y±
(
w‹k_°ru˘
 *
w‹k
)

1202 
√tI¡îÁ˚_¥iv_t
 *
öãrÁ˚Priv
 = 
	`c⁄èöî_of
(
w‹k
,ÇëI¡îÁ˚_¥iv_t, 
£nd_pkt_to_í¸y±
);

1203 
C§Uöt16
 
öãrÁ˚Tag
 = 
öãrÁ˚Priv
->
I¡îÁ˚Tag
;

1204 
unifi_¥iv_t
 *
¥iv
 = 
öãrÁ˚Priv
->
¥ivPå
;

1206 
C§Uöt32
 
pktBulkD©aLígth
;

1207 
C§Uöt8
 *
pktBulkD©a
;

1208 
Êags
;

1210 i‡(
öãrÁ˚Priv
->
öãrÁ˚Mode
 =
CSR_WIFI_ROUTER_CTRL_MODE_STA
) {

1212 
	`func_íãr
();

1214 
pktBulkD©aLígth
 = 
öãrÁ˚Priv
->
w≠i_uniˇ°_bulk_d©a
.
d©a_Àngth
;

1216 i‡(
pktBulkD©aLígth
 > 0) {

1217 
pktBulkD©a
 = (
C§Uöt8
 *)
	`C§PmemAŒoc
(
pktBulkD©aLígth
);

1218 
	`C§MemSë
(
pktBulkD©a
, 0, 
pktBulkD©aLígth
);

1220 
	`unifi_îr‹
(
¥iv
, "uf_send_pkt_to_encrypt() : invalid buffer\n");

1224 
	`•ö_lock_úqßve
(&
¥iv
->
w≠i_lock
, 
Êags
);

1226 
	`C§MemCpy
(
pktBulkD©a
, (
C§Uöt8
*)
öãrÁ˚Priv
->
w≠i_uniˇ°_bulk_d©a
.
os_d©a_±r
, 
pktBulkD©aLígth
);

1228 
	`unifi_√t_d©a_‰ì
(
¥iv
, &
öãrÁ˚Priv
->
w≠i_uniˇ°_bulk_d©a
);

1229 
öãrÁ˚Priv
->
w≠i_uniˇ°_bulk_d©a
.
√t_buf_Àngth
 = 0;

1230 
öãrÁ˚Priv
->
w≠i_uniˇ°_bulk_d©a
.
d©a_Àngth
 = 0;

1231 
öãrÁ˚Priv
->
w≠i_uniˇ°_bulk_d©a
.
os_d©a_±r
 = i¡îÁ˚Priv->w≠i_uniˇ°_bulk_d©a.
os_√t_buf_±r
 = 
NULL
;

1232 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
w≠i_lock
, 
Êags
);

1234 
	`C§WifiRouãrCålW≠iUniˇ°TxEn¸y±IndSíd
(
¥iv
->
CSR_WIFI_SME_IFACEQUEUE
, 0, 
öãrÁ˚Tag
, 
pktBulkD©aLígth
, 
pktBulkD©a
);

1235 
	`unifi_åa˚
(
¥iv
, 
UDBG1
, "WapiUnicastTxEncryptInd sentÅo SME\n");

1237 
	`C§PmemFªe
(
pktBulkD©a
);

1239 
	`func_exô
();

1241 
	`unifi_w¨nög
(
¥iv
, "uf_£nd_pkt_to_í¸y±(Ëi†NOTáµliˇbÀ f‹ i¡îÁ˚ modê- %d\n",
öãrÁ˚Priv
->
öãrÁ˚Mode
);

1243 
	}
}

	@unifi_sme.h

14 #i‚de‡
__LINUX_UNIFI_SME_H__


15 
	#__LINUX_UNIFI_SME_H__
 1

	)

17 
	~<löux/kî√l.h
>

19 #ifde‡
CSR_SME_USERSPACE


20 
	~"sme_c§/sme_u£r•a˚.h
"

24 
	tunifi_d©a_p‹t_a˘i⁄
;

26 
	sunifi_p‹t_cfg


29 
C§Boﬁ
 
	mö_u£
;

30 
C§WifiRouãrCålP‹tA˘i⁄
 
	mp‹t_a˘i⁄
;

31 
C§WifiMacAddªss
 
	mmac_addªss
;

32 } 
	tunifi_p‹t_cfg_t
;

34 
	#UNIFI_MAX_CONNECTIONS
 8

	)

35 
	#UNIFI_MAX_RETRY_LIMIT
 5

	)

36 
	#UF_DATA_PORT_NOT_OVERIDE
 0

	)

37 
	#UF_DATA_PORT_OVERIDE
 1

	)

39 
	sunifi_p‹t_c⁄fig


41 
	míåõs_ö_u£
;

42 
	movîide_a˘i⁄
;

43 
unifi_p‹t_cfg_t
 
	mp‹t_cfg
[
UNIFI_MAX_CONNECTIONS
];

44 } 
	tunifi_p‹t_c⁄fig_t
;

47 
	esme_ªque°_°©us
 {

48 
	mSME_REQUEST_EMPTY
,

49 
	mSME_REQUEST_PENDING
,

50 
	mSME_REQUEST_RECEIVED
,

51 
	mSME_REQUEST_TIMEDOUT
,

52 
	mSME_REQUEST_CANCELLED
,

59 
sme_ªque°_°©us
 
	mªque°_°©us
;

62 
C§Resu…
 
	mª∂y_°©us
;

65 
C§WifiSmeVîsi⁄s
 
	mvîsi⁄s
;

66 
C§WifiSmePowîC⁄fig
 
	mpowîC⁄fig
;

67 
C§WifiSmeHo°C⁄fig
 
	mho°C⁄fig
;

68 
C§WifiSmeSèC⁄fig
 
	m°aC⁄fig
;

69 
C§WifiSmeDevi˚C⁄fig
 
	mdevi˚C⁄fig
;

70 
C§WifiSmeC€xInfo
 
	mc€xInfo
;

71 
C§WifiSmeC€xC⁄fig
 
	mc€xC⁄fig
;

72 
C§WifiSmeMibC⁄fig
 
	mmibC⁄fig
;

73 
C§WifiSmeC⁄√˘i⁄Info
 
	mc⁄√˘i⁄Info
;

74 
C§WifiSmeC⁄√˘i⁄C⁄fig
 
	mc⁄√˘i⁄C⁄fig
;

75 
C§WifiSmeC⁄√˘i⁄Sèts
 
	mc⁄√˘i⁄Sèts
;

79 
C§Uöt16
 
	mª∂y_sˇn_ªsu…s_cou¡
;

80 
C§WifiSmeSˇnResu…
* 
	mª∂y_sˇn_ªsu…s
;

82 } 
	tsme_ª∂y_t
;

86 
C§Uöt16
 
	m≠pH™dÀ
;

87 
C§WifiRouãrEnˇpsuœti⁄
 
	míˇpsuœti⁄
;

88 
C§Uöt16
 
	m¥Ÿocﬁ
;

89 
C§Uöt8
 
	moui
[3];

90 
C§Uöt8
 
	mö_u£
;

91 } 
	tsme_ma_unid©a_öd_fûãr_t
;

94 
C§WifiRouãrCålP‹tA˘i⁄
 
uf_sme_p‹t_°©e
(
unifi_¥iv_t
 *
¥iv
,

95 *
addªss
,

96 
queue
,

97 
C§Uöt16
 
öãrÁ˚Tag
);

98 
unifi_p‹t_cfg_t
 *
uf_sme_p‹t_c⁄fig_h™dÀ
(
unifi_¥iv_t
 *
¥iv
,

99 *
addªss
,

100 
queue
,

101 
C§Uöt16
 
öãrÁ˚Tag
);

106 
sme_log_evít
(
ul_˛õ¡_t
 *
˛õ¡
, c⁄° 
u8
 *
sig«l
, 
sig«l_Àn
,

107 c⁄° 
bulk_d©a_∑øm_t
 *
bulkd©a
, 
dú
);

110 
uf_mu…iˇ°_li°_wq
(
w‹k_°ru˘
 *
w‹k
);

113 
uf_è_wq
(
w‹k_°ru˘
 *
w‹k
);

119 #ifde‡
UNIFI_DEBUG


120 
	#sme_com∂ëe_ªque°
(
¥iv
, 
°©us
Ë
	`uf_sme_com∂ëe_ªque°
’riv, sètus, 
__func__
)

	)

122 
	#sme_com∂ëe_ªque°
(
¥iv
, 
°©us
Ë
	`uf_sme_com∂ëe_ªque°
’riv, sètus, 
NULL
)

	)

125 
uf_sme_com∂ëe_ªque°
(
unifi_¥iv_t
 *
¥iv
, 
C§Resu…
 
ª∂y_°©us
, c⁄° *
func
);

126 
uf_sme_ˇn˚l_ªque°
(
unifi_¥iv_t
 *
¥iv
, 
C§Resu…
 
ª∂y_°©us
);

132 
sme_sys_su•íd
(
unifi_¥iv_t
 *
¥iv
);

133 
sme_sys_ªsume
(
unifi_¥iv_t
 *
¥iv
);

139 
uf_è_öd_wq
(
w‹k_°ru˘
 *
w‹k
);

140 
uf_è_ßm∂e_öd_wq
(
w‹k_°ru˘
 *
w‹k
);

145 
uf_sme_c⁄fig_wq
(
w‹k_°ru˘
 *
w‹k
);

150 
uf_£nd_m4_ªady_wq
(
w‹k_°ru˘
 *
w‹k
);

152 #i‡(
deföed
(
CSR_WIFI_SECURITY_WAPI_ENABLE
Ë&& deföed(
CSR_WIFI_SECURITY_WAPI_SW_ENCRYPTION
))

156 
uf_£nd_pkt_to_í¸y±
(
w‹k_°ru˘
 *
w‹k
);

159 
sme_mgt_powî_c⁄fig_£t
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmePowîC⁄fig
 *
powîC⁄fig
);

160 
sme_mgt_powî_c⁄fig_gë
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmePowîC⁄fig
 *
powîC⁄fig
);

161 
sme_mgt_ho°_c⁄fig_£t
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeHo°C⁄fig
 *
ho°C⁄fig
);

162 
sme_mgt_ho°_c⁄fig_gë
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeHo°C⁄fig
 *
ho°C⁄fig
);

163 
sme_mgt_sme_c⁄fig_£t
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeSèC⁄fig
 *
°aC⁄fig
, 
C§WifiSmeDevi˚C⁄fig
 *
devi˚C⁄fig
);

164 
sme_mgt_sme_c⁄fig_gë
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeSèC⁄fig
 *
°aC⁄fig
, 
C§WifiSmeDevi˚C⁄fig
 *
devi˚C⁄fig
);

165 
sme_mgt_c€x_öfo_gë
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeC€xInfo
 *
c€xInfo
);

166 
sme_mgt_∑ckë_fûãr_£t
(
unifi_¥iv_t
 *
¥iv
);

167 
sme_mgt_t•ec
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeLi°A˘i⁄
 
a˘i⁄
,

168 
C§Uöt32
 
tid
, 
C§WifiSmeD©aBlock
 *
t•ec
, C§WifiSmeD©aBlock *
t˛as
);

170 #ifde‡
CSR_SUPPORT_WEXT


174 
sme_mgt_wifi_⁄
(
unifi_¥iv_t
 *
¥iv
);

175 
sme_mgt_wifi_off
(
unifi_¥iv_t
 *
¥iv
);

181 
sme_mgt_c€x_c⁄fig_£t
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeC€xC⁄fig
 *
c€xC⁄fig
);

182 
sme_mgt_c€x_c⁄fig_gë
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeC€xC⁄fig
 *
c€xC⁄fig
);

183 
sme_mgt_mib_c⁄fig_£t
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeMibC⁄fig
 *
mibC⁄fig
);

184 
sme_mgt_mib_c⁄fig_gë
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeMibC⁄fig
 *
mibC⁄fig
);

186 
sme_mgt_c⁄√˘i⁄_öfo_£t
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeC⁄√˘i⁄Info
 *
c⁄√˘i⁄Info
);

187 
sme_mgt_c⁄√˘i⁄_öfo_gë
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeC⁄√˘i⁄Info
 *
c⁄√˘i⁄Info
);

188 
sme_mgt_c⁄√˘i⁄_c⁄fig_£t
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeC⁄√˘i⁄C⁄fig
 *
c⁄√˘i⁄C⁄fig
);

189 
sme_mgt_c⁄√˘i⁄_c⁄fig_gë
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeC⁄√˘i⁄C⁄fig
 *
c⁄√˘i⁄C⁄fig
);

190 
sme_mgt_c⁄√˘i⁄_°©s_gë
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeC⁄√˘i⁄Sèts
 *
c⁄√˘i⁄Sèts
);

192 
sme_mgt_vîsi⁄s_gë
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeVîsi⁄s
 *
vîsi⁄s
);

195 
sme_mgt_sˇn_fuŒ
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSsid
 *
•ecific_ssid
,

196 
num_ch™√ls
, *
ch™√l_li°
);

197 
sme_mgt_sˇn_ªsu…s_gë_async
(
unifi_¥iv_t
 *
¥iv
,

198 
iw_ªque°_öfo
 *
öfo
,

199 *
sˇn_ªsu…s
,

200 
sˇn_ªsu…s_Àn
);

201 
sme_mgt_disc⁄√˘
(
unifi_¥iv_t
 *
¥iv
);

202 
sme_mgt_c⁄√˘
(
unifi_¥iv_t
 *
¥iv
);

203 
sme_mgt_key
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeKey
 *
sme_key
,

204 
C§WifiSmeLi°A˘i⁄
 
a˘i⁄
);

205 
sme_mgt_pmkid
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiSmeLi°A˘i⁄
 
a˘i⁄
,

206 
C§WifiSmePmkidLi°
 *
pmkid_li°
);

207 
sme_mgt_mib_gë
(
unifi_¥iv_t
 *
¥iv
,

208 *
v¨böd
, *
Àngth
);

209 
sme_mgt_mib_£t
(
unifi_¥iv_t
 *
¥iv
,

210 *
v¨böd
, 
Àngth
);

211 #ifde‡
CSR_SUPPORT_WEXT_AP


212 
sme_≠_°¨t
(
unifi_¥iv_t
 *
¥iv
,
C§Uöt16
 
öãrÁ˚_èg
,
C§WifiSmeApC⁄fig_t
 *
≠_c⁄fig
);

213 
sme_≠_°›
(
unifi_¥iv_t
 *
¥iv
,
C§Uöt16
 
öãrÁ˚_èg
);

214 
sme_≠_c⁄fig
(
unifi_¥iv_t
 *
¥iv
,
C§WifiSmeApMacC⁄fig
 *
≠_mac_c⁄fig
, 
C§WifiNmeApC⁄fig
 *
group_£curôy_c⁄fig
);

215 
uf_c⁄figuª_suµ‹ãd_øãs
(
C§Uöt8
 * 
suµ‹ãdR©es
, C§Uöt8 
phySuµ‹ãdBôm≠
);

217 
unifi_å™¶©e_sˇn
(
√t_devi˚
 *
dev
,

218 
iw_ªque°_öfo
 *
öfo
,

219 *
cuºít_ev
, *
íd_buf
,

220 
C§WifiSmeSˇnResu…
 *
sˇn_d©a
,

221 
sˇn_ödex
);

225 
unifi_cfg_powî
(
unifi_¥iv_t
 *
¥iv
, *
¨g
);

226 
unifi_cfg_powî_ßve
(
unifi_¥iv_t
 *
¥iv
, *
¨g
);

227 
unifi_cfg_powî_suµly
(
unifi_¥iv_t
 *
¥iv
, *
¨g
);

228 
unifi_cfg_∑ckë_fûãrs
(
unifi_¥iv_t
 *
¥iv
, *
¨g
);

229 
unifi_cfg_wmm_qos_öfo
(
unifi_¥iv_t
 *
¥iv
, *
¨g
);

230 
unifi_cfg_wmm_addts
(
unifi_¥iv_t
 *
¥iv
, *
¨g
);

231 
unifi_cfg_wmm_dñts
(
unifi_¥iv_t
 *
¥iv
, *
¨g
);

232 
unifi_cfg_gë_öfo
(
unifi_¥iv_t
 *
¥iv
, *
¨g
);

233 
unifi_cfg_°ri˘_dø·_n
(
unifi_¥iv_t
 *
¥iv
, *
¨g
);

234 
unifi_cfg_íabÀ_okc
(
unifi_¥iv_t
 *
¥iv
, *
¨g
);

235 #ifde‡
CSR_SUPPORT_WEXT_AP


236 
unifi_cfg_£t_≠_c⁄fig
(
unifi_¥iv_t
 * 
¥iv
,* 
¨g
);

241 
c⁄vît_sme_îr‹
(
C§Resu…
 
îr‹
);

	@unifi_wext.h

15 #i‚de‡
__LINUX_UNIFI_WEXT_H__


16 
	#__LINUX_UNIFI_WEXT_H__
 1

	)

18 
	~<löux/kî√l.h
>

19 
	~<√t/iw_h™dÀr.h
>

20 
	~"c§_wifi_sme_¥im.h
"

26 
	#UNIFI_MAX_KEY_SIZE
 16

	)

27 
	#NUM_WEPKEYS
 4

	)

28 
	#SMALL_KEY_SIZE
 5

	)

29 
	#LARGE_KEY_SIZE
 13

	)

30 
	swï_key_t
 {

31 
	mÀn
;

32 
	mkey
[
UNIFI_MAX_KEY_SIZE
];

33 } 
	twï_key_t
;

35 
	#UNIFI_SCAN_ACTIVE
 0

	)

36 
	#UNIFI_SCAN_PASSIVE
 1

	)

37 
	#UNIFI_MAX_SSID_LEN
 32

	)

39 
	#MAX_WPA_IE_LEN
 64

	)

40 
	#MAX_RSN_IE_LEN
 255

	)

45 
iw_°©i°ics
 *
unifi_gë_wúñess_°©s
(
√t_devi˚
 *
dev
);

47 
uf_sme_wext_£t_deÁu…s
(
unifi_¥iv_t
 *
¥iv
);

54 
wext_£nd_sˇn_ªsu…s_evít
(
unifi_¥iv_t
 *
¥iv
);

55 
wext_£nd_assoc_evít
(
unifi_¥iv_t
 *
¥iv
, *
bssid
,

56 *
ªq_õ
, 
ªq_õ_Àn
,

57 *
ª•_õ
, 
ª•_õ_Àn
,

58 *
sˇn_õ
, 
sˇn_õ_Àn
);

59 
wext_£nd_dißssoc_evít
(
unifi_¥iv_t
 *
¥iv
);

60 
wext_£nd_mich´lmicÁûuª_evít
(
unifi_¥iv_t
 *
¥iv
,

61 
C§Uöt16
 
cou¡
, 
C§WifiMacAddªss
 
addªss
,

62 
C§WifiSmeKeyTy≥
 
keyTy≥
, 
C§Uöt16
 
öãrÁ˚Tag
);

63 
wext_£nd_pmkid_ˇndid©e_evít
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiMacAddªss
 
bssid
, 
C§Boﬁ
 
¥óuth_Ælowed
, 
C§Uöt16
 
öãrÁ˚Tag
);

64 
wext_£nd_°¨ãd_evít
(
unifi_¥iv_t
 *
¥iv
);

67 
ölöe
 

68 
	$uf_iwe_°ªam_add_poöt
(
iw_ªque°_öfo
 *
öfo
, *
°¨t
, *
°›
,

69 
iw_evít
 *
piwe
, *
exåa
)

71 *
√w_°¨t
;

73 
√w_°¨t
 = 
	`iwe_°ªam_add_poöt
(

74 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27Ë|| 
	`deföed
 (
IW_REQUEST_FLAG_COMPAT
)

75 
öfo
,

77 
°¨t
, 
°›
, 
piwe
, 
exåa
);

78 i‡(
	`u∆ikñy
(
√w_°¨t
 =
°¨t
))

80  -
E2BIG
;

83  (
√w_°¨t
 - 
°¨t
);

84 
	}
}

87 
ölöe
 

88 
	$uf_iwe_°ªam_add_evít
(
iw_ªque°_öfo
 *
öfo
, *
°¨t
, *
°›
,

89 
iw_evít
 *
piwe
, 
Àn
)

91 *
√w_°¨t
;

93 
√w_°¨t
 = 
	`iwe_°ªam_add_evít
(

94 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27Ë|| 
	`deföed
(
IW_REQUEST_FLAG_COMPAT
)

95 
öfo
,

97 
°¨t
, 
°›
, 
piwe
, 
Àn
);

98 i‡(
	`u∆ikñy
(
√w_°¨t
 =
°¨t
)) {

99  -
E2BIG
;

102  (
√w_°¨t
 - 
°¨t
);

103 
	}
}

105 
ölöe
 

106 
	$uf_iwe_°ªam_add_vÆue
(
iw_ªque°_öfo
 *
öfo
, *
°ªam
, *
°¨t
,

107 *
°›
, 
iw_evít
 *
piwe
, 
Àn
)

109 *
√w_°¨t
;

111 
√w_°¨t
 = 
	`iwe_°ªam_add_vÆue
(

112 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27Ë|| 
	`deföed
(
IW_REQUEST_FLAG_COMPAT
)

113 
öfo
,

115 
°ªam
, 
°¨t
, 
°›
, 
piwe
, 
Àn
);

116 i‡(
	`u∆ikñy
(
√w_°¨t
 =
°¨t
)) {

117  -
E2BIG
;

120  (
√w_°¨t
 - 
°¨t
);

121 
	}
}

	@unifiio.h

18 #i‚de‡
__UNIFIIO_H__


19 
	#__UNIFIIO_H__


	)

21 
	~<löux/ty≥s.h
>

22 
	~"c§_ty≥s.h
"

24 
	#UNIFI_GET_UDI_ENABLE
 
	`_IOR
('u', 1, )

	)

25 
	#UNIFI_SET_UDI_ENABLE
 
	`_IOW
('u', 2, )

	)

27 
	#UDI_ENABLE_DATA
 0x1

	)

28 
	#UDI_ENABLE_CONTROL
 0x2

	)

31 
	#UNIFI_GET_MIB
 
	`_IOWR
('u', 3, *)

	)

32 
	#UNIFI_SET_MIB
 
	`_IOW
 ('u', 4, *)

	)

33 
	#MAX_VARBIND_LENGTH
 127

	)

36 
	#SIOCIWS80211POWERSAVEPRIV
 
SIOCIWFIRSTPRIV


	)

37 
	#SIOCIWG80211POWERSAVEPRIV
 
SIOCIWFIRSTPRIV
 + 1

	)

38 
	#SIOCIWS80211RELOADDEFAULTSPRIV
 
SIOCIWFIRSTPRIV
 + 2

	)

39 
	#SIOCIWSCONFWAPIPRIV
 
SIOCIWFIRSTPRIV
 + 4

	)

40 
	#SIOCIWSWAPIKEYPRIV
 
SIOCIWFIRSTPRIV
 + 6

	)

41 
	#SIOCIWSSMEDEBUGPRIV
 
SIOCIWFIRSTPRIV
 + 8

	)

42 
	#SIOCIWSAPCFGPRIV
 
SIOCIWFIRSTPRIV
 + 10

	)

43 
	#SIOCIWSAPSTARTPRIV
 
SIOCIWFIRSTPRIV
 + 12

	)

44 
	#SIOCIWSAPSTOPPRIV
 
SIOCIWFIRSTPRIV
 + 14

	)

45 
	#SIOCIWSFWRELOADPRIV
 
SIOCIWFIRSTPRIV
 + 16

	)

46 
	#SIOCIWSSTACKSTART
 
SIOCIWFIRSTPRIV
 + 18

	)

47 
	#SIOCIWSSTACKSTOP
 
SIOCIWFIRSTPRIV
 + 20

	)

51 
	#IWPRIV_POWER_SAVE_MAX_STRING
 32

	)

52 
	#IWPRIV_SME_DEBUG_MAX_STRING
 32

	)

53 
	#IWPRIV_SME_MAX_STRING
 120

	)

57 
	#UNIFI_CFG
 
	`_IOWR
('u', 5, *)

	)

82 
	#UNIFI_PUTEST
 
	`_IOWR
('u', 6, *)

	)

105 
	#UNIFI_BUILD_TYPE
 
	`_IOWR
('u', 7, )

	)

106 
	#UNIFI_BUILD_NME
 1

	)

107 
	#UNIFI_BUILD_WEXT
 2

	)

108 
	#UNIFI_BUILD_AP
 3

	)

111 
	#UNIFI_KICK
 
	`_IO
 ('u', 0x10)

	)

112 
	#UNIFI_SET_DEBUG
 
	`_IO
 ('u', 0x11)

	)

113 
	#UNIFI_SET_TRACE
 
	`_IO
 ('u', 0x12)

	)

115 
	#UNIFI_GET_INIT_STATUS
 
	`_IOR
 ('u', 0x15, )

	)

116 
	#UNIFI_SET_UDI_LOG_MASK
 
	`_IOR
('u', 0x18, 
unifiio_fûãr_t
)

	)

117 
	#UNIFI_SET_UDI_SNAP_MASK
 
	`_IOW
('u', 0x1a, 
unifiio_¢≠_fûãr_t
)

	)

118 
	#UNIFI_SET_AMP_ENABLE
 
	`_IOWR
('u', 0x1b, )

	)

120 
	#UNIFI_INIT_HW
 
	`_IOR
 ('u', 0x13, )

	)

121 
	#UNIFI_INIT_NETDEV
 
	`_IOW
 ('u', 0x14, [6])

	)

122 
	#UNIFI_SME_PRESENT
 
	`_IOW
 ('u', 0x19, )

	)

124 
	#UNIFI_CFG_PERIOD_TRAFFIC
 
	`_IOW
 ('u', 0x21, *)

	)

125 
	#UNIFI_CFG_UAPSD_TRAFFIC
 
	`_IOW
 ('u', 0x22, )

	)

127 
	#UNIFI_COREDUMP_GET_REG
 
	`_IOWR
('u', 0x23, 
unifiio_c‹edump_ªq_t
)

	)

148 
	mimg_Àn
;

151 *
	mimg_d©a
;

155 
	mlﬂdî_Àn
;

158 *
	mlﬂdî_d©a
;

160 } 
	tunifiio_img_t
;

167 
	mÀngth
;

170 
	mtime°amp
;

173 
	mdúe˘i⁄
;

174 
	#UDI_FROM_HOST
 0

	)

175 
	#UDI_TO_HOST
 1

	)

176 
	#UDI_CONFIG_IND
 2

	)

179 
	msig«l_Àngth
;

183 } 
	tudi_msg_t
;

188 
	mUfSigFû_AŒOn
 = 0,

189 
	mUfSigFû_AŒOff
 = 1,

190 
	mUfSigFû_Sñe˘On
 = 2,

191 
	mUfSigFû_Sñe˘Off
 = 3

192 } 
	tuf_sigfûãr_a˘i⁄_t
;

197 
	mnum_sig_ids
;

199 
uf_sigfûãr_a˘i⁄_t
 
	ma˘i⁄
;

201 *
	msig_ids
;

203 } 
	tunifiio_fûãr_t
;

208 
C§Uöt16
 
	mcou¡
;

210 
C§Uöt16
 *
	m¥Ÿocﬁs
;

211 } 
	tunifiio_¢≠_fûãr_t
;

215 
C§Uöt32
 
	tunifi_puã°_comm™d_t
;

217 
	#UNIFI_PUTEST_START
 0

	)

218 
	#UNIFI_PUTEST_STOP
 1

	)

219 
	#UNIFI_PUTEST_SET_SDIO_CLOCK
 2

	)

220 
	#UNIFI_PUTEST_CMD52_READ
 3

	)

221 
	#UNIFI_PUTEST_CMD52_WRITE
 4

	)

222 
	#UNIFI_PUTEST_DL_FW
 5

	)

223 
	#UNIFI_PUTEST_DL_FW_BUFF
 6

	)

224 
	#UNIFI_PUTEST_CMD52_BLOCK_READ
 7

	)

225 
	#UNIFI_PUTEST_COREDUMP_PREPARE
 8

	)

226 
	#UNIFI_PUTEST_GP_READ16
 9

	)

227 
	#UNIFI_PUTEST_GP_WRITE16
 10

	)

230 
	sunifi_puã°_cmd52
 {

231 
	mfun˙um
;

232 
	maddr
;

233 
	md©a
;

237 
	sunifi_puã°_block_cmd52_r
 {

238 
	mfun˙um
;

239 
	maddr
;

240 
	mÀngth
;

241 *
	md©a
;

244 
	sunifi_puã°_gp_rw16
 {

245 
	maddr
;

246 
	md©a
;

249 
	eunifi_cfg_comm™d
 {

250 
	mUNIFI_CFG_GET
,

251 
	mUNIFI_CFG_POWER
,

252 
	mUNIFI_CFG_POWERSAVE
,

253 
	mUNIFI_CFG_FILTER
,

254 
	mUNIFI_CFG_POWERSUPPLY
,

255 
	mUNIFI_CFG_WMM_QOSINFO
,

256 
	mUNIFI_CFG_WMM_ADDTS
,

257 
	mUNIFI_CFG_WMM_DELTS
,

258 
	mUNIFI_CFG_STRICT_DRAFT_N
,

259 
	mUNIFI_CFG_ENABLE_OKC
,

260 
	mUNIFI_CFG_SET_AP_CONFIG
,

261 
	mUNIFI_CFG_CORE_DUMP


262 } 
	tunifi_cfg_comm™d_t
;

264 
	eunifi_cfg_powî
 {

265 
	mUNIFI_CFG_POWER_UNSPECIFIED
,

266 
	mUNIFI_CFG_POWER_OFF
,

267 
	mUNIFI_CFG_POWER_ON


268 } 
	tunifi_cfg_powî_t
;

270 
	eunifi_cfg_powîsuµly
 {

271 
	mUNIFI_CFG_POWERSUPPLY_UNSPECIFIED
,

272 
	mUNIFI_CFG_POWERSUPPLY_MAINS
,

273 
	mUNIFI_CFG_POWERSUPPLY_BATTERIES


274 } 
	tunifi_cfg_powîsuµly_t
;

276 
	eunifi_cfg_powîßve
 {

277 
	mUNIFI_CFG_POWERSAVE_UNSPECIFIED
,

278 
	mUNIFI_CFG_POWERSAVE_NONE
,

279 
	mUNIFI_CFG_POWERSAVE_FAST
,

280 
	mUNIFI_CFG_POWERSAVE_FULL
,

281 
	mUNIFI_CFG_POWERSAVE_AUTO


282 } 
	tunifi_cfg_powîßve_t
;

284 
	eunifi_cfg_gë
 {

285 
	mUNIFI_CFG_GET_COEX
,

286 
	mUNIFI_CFG_GET_POWER_MODE
,

287 
	mUNIFI_CFG_GET_VERSIONS
,

288 
	mUNIFI_CFG_GET_POWER_SUPPLY
,

289 
	mUNIFI_CFG_GET_INSTANCE
,

290 
	mUNIFI_CFG_GET_AP_CONFIG


291 } 
	tunifi_cfg_gë_t
;

293 
	#UNIFI_CFG_FILTER_NONE
 0x0000

	)

294 
	#UNIFI_CFG_FILTER_DHCP
 0x0001

	)

295 
	#UNIFI_CFG_FILTER_ARP
 0x0002

	)

296 
	#UNIFI_CFG_FILTER_NBNS
 0x0004

	)

297 
	#UNIFI_CFG_FILTER_NBDS
 0x0008

	)

298 
	#UNIFI_CFG_FILTER_CUPS
 0x0010

	)

299 
	#UNIFI_CFG_FILTER_ALL
 0xFFFF

	)

302 
	suf_cfg_bˇ°_∑ckë_fûãr


304 
	mfûãr_mode
;

305 
	m¨p_fûãr
;

306 
	mdh˝_fûãr
;

307 
	mt˛as_õs_Àngth
;

308 
	mt˛as_õs
[1];

309 } 
	tuf_cfg_bˇ°_∑ckë_fûãr_t
;

311 
	suf_cfg_≠_c⁄fig


313 
C§Uöt8
 
	mphySuµ‹ãdBôm≠
;

314 
C§Uöt8
 
	mch™√l
;

315 
C§Uöt16
 
	mbóc⁄I¡îvÆ
;

316 
C§Uöt8
 
	mdtimPîiod
;

317 
C§Boﬁ
 
	mwmmE«bÀd
;

318 
C§Uöt8
 
	msh‹tSlŸTimeE«bÀd
;

319 
C§Uöt16
 
	mgroupkeyTimeout
;

320 
C§Boﬁ
 
	m°ri˘GtkRekeyE«bÀd
;

321 
C§Uöt16
 
	mgmkTimeout
;

322 
C§Uöt16
 
	mª•⁄£Timeout
;

323 
C§Uöt8
 
	mªå™sLimô
;

324 
C§Uöt8
 
	mrxStbc
;

325 
C§Boﬁ
 
	mrifsModeAŒowed
;

326 
C§Uöt8
 
	mduÆCtsPrŸe˘i⁄
;

327 
C§Uöt8
 
	m˘sPrŸe˘i⁄Ty≥
;

328 
C§Uöt16
 
	mmaxLi°íI¡îvÆ
;

329 }
	tuf_cfg_≠_c⁄fig_t
;

331 
	st˝ic_˛s‰


333 
__u8
 
	m˛s_‰_ty≥
;

334 
__u8
 
	m˛s_‰_mask
;

335 
__u8
 
	mvîsi⁄
;

336 
__u8
 
	msour˚_ù_addr
[4];

337 
__u8
 
	mde°_ù_addr
[4];

338 
__u16
 
	msour˚_p‹t
;

339 
__u16
 
	mde°_p‹t
;

340 
__u8
 
	mds˝
;

341 
__u8
 
	m¥Ÿocﬁ
;

342 
__u8
 
	mª£rved
;

343 } 
	t__©åibuã__
 ((
	t∑cked
)Ë
	tt˝ù_˛s‰_t
;

345 
	st˛as
 {

346 
__u8
 
	mñemít_id
;

347 
__u8
 
	mÀngth
;

348 
__u8
 
	mu£r_¥i‹ôy
;

349 
t˝ù_˛s‰_t
 
	mt˝_ù_˛s_‰
;

350 } 
	t__©åibuã__
 ((
	t∑cked
)Ë
	tt˛as_t
;

353 
	#CONFIG_IND_ERROR
 0x01

	)

354 
	#CONFIG_IND_EXIT
 0x02

	)

355 
	#CONFIG_SME_NOT_PRESENT
 0x10

	)

356 
	#CONFIG_SME_PRESENT
 0x20

	)

361 
C§Uöt8
 
	muniˇ°Key
;

363 
C§Uöt8
 
	mkeyIndex
;

364 
C§Uöt8
 
	mkeyRsc
[16];

365 
C§Uöt8
 
	mauthítiˇt‹
;

367 
C§Uöt8
 
	maddªss
[6];

368 
C§Uöt8
 
	mkey
[32];

369 } 
	tunifiio_w≠i_key_t
;

372 
	eunifiio_c‹edump_•a˚
 {

373 
	mUNIFIIO_COREDUMP_MAC_REG
,

374 
	mUNIFIIO_COREDUMP_PHY_REG
,

375 
	mUNIFIIO_COREDUMP_SH_DMEM
,

376 
	mUNIFIIO_COREDUMP_MAC_DMEM
,

377 
	mUNIFIIO_COREDUMP_PHY_DMEM
,

378 
	mUNIFIIO_COREDUMP_TRIGGER_MAGIC
 = 0xFEED

379 } 
	tunifiio_c‹edump_•a˚_t
;

384 
	sunifiio_c‹edump_ªq
 {

386 
	mödex
;

387 
	moff£t
;

388 
unifiio_c‹edump_•a˚_t
 
	m•a˚
;

390 
	mdrv_buûd
;

391 
	mchù_vî
;

392 
	mfw_vî
;

393 
	mªque°‹
;

394 
	mtime°amp
;

395 
	m£rül
;

396 
	mvÆue
;

397 } 
	tunifiio_c‹edump_ªq_t
;

	@wext_events.c

15 
	~<löux/ty≥s.h
>

16 
	~<löux/ëhîdevi˚.h
>

17 
	~<löux/if_¨p.h
>

18 
	~"c§_wifi_hù_unifi.h
"

19 
	~"unifi_¥iv.h
"

45 
	$wext_£nd_assoc_evít
(
unifi_¥iv_t
 *
¥iv
, *
bssid
,

46 *
ªq_õ
, 
ªq_õ_Àn
,

47 *
ª•_õ
, 
ª•_õ_Àn
,

48 *
sˇn_õ
, 
sˇn_õ_Àn
)

50 #i‡
WIRELESS_EXT
 > 17

51 
iwªq_d©a
 
wrqu
;

53 i‡(
ªq_õ_Àn
 =0Ë
ªq_õ
 = 
NULL
;

54 
wrqu
.
d©a
.
Àngth
 = 
ªq_õ_Àn
;

55 
wrqu
.
d©a
.
Êags
 = 0;

56 
	`wúñess_£nd_evít
(
¥iv
->
√tdev
[
CSR_WIFI_INTERFACE_IN_USE
], 
IWEVASSOCREQIE
, &
wrqu
, 
ªq_õ
);

58 i‡(
ª•_õ_Àn
 =0Ë
ª•_õ
 = 
NULL
;

59 
wrqu
.
d©a
.
Àngth
 = 
ª•_õ_Àn
;

60 
wrqu
.
d©a
.
Êags
 = 0;

61 
	`wúñess_£nd_evít
(
¥iv
->
√tdev
[
CSR_WIFI_INTERFACE_IN_USE
], 
IWEVASSOCRESPIE
, &
wrqu
, 
ª•_õ
);

63 i‡(
sˇn_õ_Àn
 > 0) {

64 
wrqu
.
d©a
.
Àngth
 = 
sˇn_õ_Àn
;

65 
wrqu
.
d©a
.
Êags
 = 0;

66 
	`wúñess_£nd_evít
(
¥iv
->
√tdev
[
CSR_WIFI_INTERFACE_IN_USE
], 
IWEVGENIE
, &
wrqu
, 
sˇn_õ
);

69 
	`mem˝y
(&
wrqu
.
≠_addr
.
ß_d©a
, 
bssid
, 
ETH_ALEN
);

70 
	`wúñess_£nd_evít
(
¥iv
->
√tdev
[
CSR_WIFI_INTERFACE_IN_USE
], 
SIOCGIWAP
, &
wrqu
, 
NULL
);

72 
	}
}

96 
	$wext_£nd_dißssoc_evít
(
unifi_¥iv_t
 *
¥iv
)

98 #i‡
WIRELESS_EXT
 > 17

99 
iwªq_d©a
 
wrqu
;

101 
	`mem£t
(
wrqu
.
≠_addr
.
ß_d©a
, 0, 
ETH_ALEN
);

102 
	`wúñess_£nd_evít
(
¥iv
->
√tdev
[
CSR_WIFI_INTERFACE_IN_USE
], 
SIOCGIWAP
, &
wrqu
, 
NULL
);

104 
	}
}

127 
	$wext_£nd_sˇn_ªsu…s_evít
(
unifi_¥iv_t
 *
¥iv
)

129 #i‡
WIRELESS_EXT
 > 17

130 
iwªq_d©a
 
wrqu
;

132 
wrqu
.
d©a
.
Àngth
 = 0;

133 
wrqu
.
d©a
.
Êags
 = 0;

134 
	`wúñess_£nd_evít
(
¥iv
->
√tdev
[
CSR_WIFI_INTERFACE_IN_USE
], 
SIOCGIWSCAN
, &
wrqu
, 
NULL
);

137 
	}
}

157 #i‡
WIRELESS_EXT
 >= 18

158 
ölöe
 

159 
	$_£nd_mich´lmicÁûuª_evít
(
√t_devi˚
 *
dev
,

160 
cou¡
, c⁄° *
maˇddr
,

161 
key_ty≥
, 
key_idx
,

162 *
tsc
)

164 
iwªq_d©a
 
wrqu
;

165 
iw_mich´lmicÁûuª
 
mmf
;

167 
	`mem£t
(&
mmf
, 0, (mmf));

169 
mmf
.
Êags
 = 
key_idx
 & 
IW_MICFAILURE_KEY_ID
;

170 i‡(
key_ty≥
 =
CSR_GROUP
) {

171 
mmf
.
Êags
 |
IW_MICFAILURE_GROUP
;

173 
mmf
.
Êags
 |
IW_MICFAILURE_PAIRWISE
;

175 
mmf
.
Êags
 |((
cou¡
 << 5Ë& 
IW_MICFAILURE_COUNT
);

177 
mmf
.
§c_addr
.
ß_Ámûy
 = 
ARPHRD_ETHER
;

178 
	`mem˝y
(
mmf
.
§c_addr
.
ß_d©a
, 
maˇddr
, 
ETH_ALEN
);

180 
	`mem˝y
(
mmf
.
tsc
,Åsc, 
IW_ENCODE_SEQ_MAX_SIZE
);

182 
	`mem£t
(&
wrqu
, 0, (wrqu));

183 
wrqu
.
d©a
.
Àngth
 = (
mmf
);

185 
	`wúñess_£nd_evít
(
dev
, 
IWEVMICHAELMICFAILURE
, &
wrqu
, (*)&
mmf
);

186 
	}
}

187 #ñi‡
WIRELESS_EXT
 >= 15

188 
ölöe
 

189 
	$_£nd_mich´lmicÁûuª_evít
(
√t_devi˚
 *
dev
,

190 
cou¡
, c⁄° *
maˇddr
,

191 
key_ty≥
, 
key_idx
,

192 *
tsc
)

194 
iwªq_d©a
 
wrqu
;

195 
buf
[128];

197 
	`•rötf
(
buf
,

199 
key_idx
, (
key_ty≥
 =
CSR_GROUP
) ? "broad" : "uni",

200 
maˇddr
[0], macaddr[1], macaddr[2],

201 
maˇddr
[3], macaddr[4], macaddr[5]);

202 
	`mem£t
(&
wrqu
, 0, (wrqu));

203 
wrqu
.
d©a
.
Àngth
 = 
	`°æí
(
buf
);

204 
	`wúñess_£nd_evít
(
dev
, 
IWEVCUSTOM
, &
wrqu
, 
buf
);

205 
	}
}

207 
ölöe
 

208 
	$_£nd_mich´lmicÁûuª_evít
(
√t_devi˚
 *
dev
,

209 
cou¡
, c⁄° *
maˇddr
,

210 
key_ty≥
, 
key_idx
,

211 *
tsc
)

214 
	}
}

219 
	$wext_£nd_mich´lmicÁûuª_evít
(
unifi_¥iv_t
 *
¥iv
,

220 
C§Uöt16
 
cou¡
,

221 
C§WifiMacAddªss
 
addªss
,

222 
C§WifiSmeKeyTy≥
 
keyTy≥
,

223 
C§Uöt16
 
öãrÁ˚Tag
)

225 
tsc
[8] = {0};

227 i‡(
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
) {

228 
	`unifi_îr‹
(
¥iv
, "wext_send_michaelmicfailure_event bad interfaceTag\n");

232 
	`_£nd_mich´lmicÁûuª_evít
(
¥iv
->
√tdev
[
öãrÁ˚Tag
],

233 
cou¡
,

234 
addªss
.
a
,

235 
keyTy≥
,

237 
tsc
);

238 
	}
}

241 
	$wext_£nd_pmkid_ˇndid©e_evít
(
unifi_¥iv_t
 *
¥iv
, 
C§WifiMacAddªss
 
bssid
, 
C§Boﬁ
 
¥óuth_Ælowed
, 
C§Uöt16
 
öãrÁ˚Tag
)

243 #i‡
WIRELESS_EXT
 > 17

244 
iwªq_d©a
 
wrqu
;

245 
iw_pmkid_ˇnd
 
pmkid_ˇnd
;

247 i‡(
öãrÁ˚Tag
 >
CSR_WIFI_NUM_INTERFACES
) {

248 
	`unifi_îr‹
(
¥iv
, "wext_send_pmkid_candidate_event bad interfaceTag\n");

252 
	`mem£t
(&
pmkid_ˇnd
, 0, (pmkid_cand));

254 i‡(
¥óuth_Ælowed
) {

255 
pmkid_ˇnd
.
Êags
 |
IW_PMKID_CAND_PREAUTH
;

257 
pmkid_ˇnd
.
bssid
.
ß_Ámûy
 = 
ARPHRD_ETHER
;

258 
	`mem˝y
(
pmkid_ˇnd
.
bssid
.
ß_d©a
, bssid.
a
, 
ETH_ALEN
);

260 
pmkid_ˇnd
.
ödex
 = 1;

262 
	`mem£t
(&
wrqu
, 0, (wrqu));

263 
wrqu
.
d©a
.
Àngth
 = (
pmkid_ˇnd
);

265 
	`wúñess_£nd_evít
(
¥iv
->
√tdev
[
öãrÁ˚Tag
], 
IWEVPMKIDCAND
, &
wrqu
, (*)&
pmkid_ˇnd
);

267 
	}
}

274 
	$wext_£nd_°¨ãd_evít
(
unifi_¥iv_t
 *
¥iv
)

276 #i‡
WIRELESS_EXT
 > 17

277 
iwªq_d©a
 
wrqu
;

278 
d©a
[] = "STARTED";

280 
wrqu
.
d©a
.
Àngth
 = (data);

281 
wrqu
.
d©a
.
Êags
 = 0;

282 
	`wúñess_£nd_evít
(
¥iv
->
√tdev
[
CSR_WIFI_INTERFACE_IN_USE
], 
IWEVCUSTOM
, &
wrqu
, 
d©a
);

284 
	}
}

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/fs.h

1 #i‚de‡
_LINUX_FS_H


2 
	#_LINUX_FS_H


	)

9 
	~<löux/limôs.h
>

10 
	~<löux/io˘l.h
>

11 
	~<löux/ty≥s.h
>

24 #unde‡
NR_OPEN


25 
	#INR_OPEN_CUR
 1024

	)

26 
	#INR_OPEN_MAX
 4096

	)

28 
	#BLOCK_SIZE_BITS
 10

	)

29 
	#BLOCK_SIZE
 (1<<
BLOCK_SIZE_BITS
)

	)

31 
	#SEEK_SET
 0

	)

32 
	#SEEK_CUR
 1

	)

33 
	#SEEK_END
 2

	)

34 
	#SEEK_DATA
 3

	)

35 
	#SEEK_HOLE
 4

	)

36 
	#SEEK_MAX
 
SEEK_HOLE


	)

38 
	sf°rim_ønge
 {

39 
__u64
 
	m°¨t
;

40 
__u64
 
	mÀn
;

41 
__u64
 
	mmöÀn
;

45 
	sfûes_°©_°ru˘
 {

46 
	mƒ_fûes
;

47 
	mƒ_‰ì_fûes
;

48 
	mmax_fûes
;

51 
	söodes_°©_t
 {

52 
	mƒ_öodes
;

53 
	mƒ_unu£d
;

54 
	mdummy
[5];

58 
	#NR_FILE
 8192

	)

64 
	#MS_RDONLY
 1

	)

65 
	#MS_NOSUID
 2

	)

66 
	#MS_NODEV
 4

	)

67 
	#MS_NOEXEC
 8

	)

68 
	#MS_SYNCHRONOUS
 16

	)

69 
	#MS_REMOUNT
 32

	)

70 
	#MS_MANDLOCK
 64

	)

71 
	#MS_DIRSYNC
 128

	)

72 
	#MS_NOATIME
 1024

	)

73 
	#MS_NODIRATIME
 2048

	)

74 
	#MS_BIND
 4096

	)

75 
	#MS_MOVE
 8192

	)

76 
	#MS_REC
 16384

	)

77 
	#MS_VERBOSE
 32768

	)

79 
	#MS_SILENT
 32768

	)

80 
	#MS_POSIXACL
 (1<<16Ë

	)

81 
	#MS_UNBINDABLE
 (1<<17Ë

	)

82 
	#MS_PRIVATE
 (1<<18Ë

	)

83 
	#MS_SLAVE
 (1<<19Ë

	)

84 
	#MS_SHARED
 (1<<20Ë

	)

85 
	#MS_RELATIME
 (1<<21Ë

	)

86 
	#MS_KERNMOUNT
 (1<<22Ë

	)

87 
	#MS_I_VERSION
 (1<<23Ë

	)

88 
	#MS_STRICTATIME
 (1<<24Ë

	)

91 
	#MS_NOSEC
 (1<<28)

	)

92 
	#MS_BORN
 (1<<29)

	)

93 
	#MS_ACTIVE
 (1<<30)

	)

94 
	#MS_NOUSER
 (1<<31)

	)

99 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
)

	)

104 
	#MS_MGC_VAL
 0xC0ED0000

	)

105 
	#MS_MGC_MSK
 0xffff0000

	)

110 
	#BLKROSET
 
	`_IO
(0x12,93Ë

	)

111 
	#BLKROGET
 
	`_IO
(0x12,94Ë

	)

112 
	#BLKRRPART
 
	`_IO
(0x12,95Ë

	)

113 
	#BLKGETSIZE
 
	`_IO
(0x12,96Ë

	)

114 
	#BLKFLSBUF
 
	`_IO
(0x12,97Ë

	)

115 
	#BLKRASET
 
	`_IO
(0x12,98Ë

	)

116 
	#BLKRAGET
 
	`_IO
(0x12,99Ë

	)

117 
	#BLKFRASET
 
	`_IO
(0x12,100)

	)

118 
	#BLKFRAGET
 
	`_IO
(0x12,101)

	)

119 
	#BLKSECTSET
 
	`_IO
(0x12,102)

	)

120 
	#BLKSECTGET
 
	`_IO
(0x12,103)

	)

121 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

123 
	#BLKPG
 
	`_IO
(0x12,105)

	)

127 
	#BLKELVGET
 
	`_IOR
(0x12,106,
size_t
)

	)

128 
	#BLKELVSET
 
	`_IOW
(0x12,107,
size_t
)

	)

133 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

134 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

135 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

136 
	#BLKTRACESETUP
 
	`_IOWR
(0x12,115,
blk_u£r_åa˚_£tup
)

	)

137 
	#BLKTRACESTART
 
	`_IO
(0x12,116)

	)

138 
	#BLKTRACESTOP
 
	`_IO
(0x12,117)

	)

139 
	#BLKTRACETEARDOWN
 
	`_IO
(0x12,118)

	)

140 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

141 
	#BLKIOMIN
 
	`_IO
(0x12,120)

	)

142 
	#BLKIOOPT
 
	`_IO
(0x12,121)

	)

143 
	#BLKALIGNOFF
 
	`_IO
(0x12,122)

	)

144 
	#BLKPBSZGET
 
	`_IO
(0x12,123)

	)

145 
	#BLKDISCARDZEROES
 
	`_IO
(0x12,124)

	)

146 
	#BLKSECDISCARD
 
	`_IO
(0x12,125)

	)

147 
	#BLKROTATIONAL
 
	`_IO
(0x12,126)

	)

148 
	#BLKZEROOUT
 
	`_IO
(0x12,127)

	)

150 
	#BMAP_IOCTL
 1

	)

151 
	#FIBMAP
 
	`_IO
(0x00,1Ë

	)

152 
	#FIGETBSZ
 
	`_IO
(0x00,2Ë

	)

153 
	#FIFREEZE
 
	`_IOWR
('X', 119, Ë

	)

154 
	#FITHAW
 
	`_IOWR
('X', 120, Ë

	)

155 
	#FITRIM
 
	`_IOWR
('X', 121, 
f°rim_ønge
Ë

	)

157 
	#FS_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

158 
	#FS_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

159 
	#FS_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

160 
	#FS_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

161 
	#FS_IOC_FIEMAP
 
	`_IOWR
('f', 11, 
fõm≠
)

	)

162 
	#FS_IOC32_GETFLAGS
 
	`_IOR
('f', 1, )

	)

163 
	#FS_IOC32_SETFLAGS
 
	`_IOW
('f', 2, )

	)

164 
	#FS_IOC32_GETVERSION
 
	`_IOR
('v', 1, )

	)

165 
	#FS_IOC32_SETVERSION
 
	`_IOW
('v', 2, )

	)

170 
	#FS_SECRM_FL
 0x00000001

	)

171 
	#FS_UNRM_FL
 0x00000002

	)

172 
	#FS_COMPR_FL
 0x00000004

	)

173 
	#FS_SYNC_FL
 0x00000008

	)

174 
	#FS_IMMUTABLE_FL
 0x00000010

	)

175 
	#FS_APPEND_FL
 0x00000020

	)

176 
	#FS_NODUMP_FL
 0x00000040

	)

177 
	#FS_NOATIME_FL
 0x00000080

	)

179 
	#FS_DIRTY_FL
 0x00000100

	)

180 
	#FS_COMPRBLK_FL
 0x00000200

	)

181 
	#FS_NOCOMP_FL
 0x00000400

	)

182 
	#FS_ECOMPR_FL
 0x00000800

	)

184 
	#FS_BTREE_FL
 0x00001000

	)

185 
	#FS_INDEX_FL
 0x00001000

	)

186 
	#FS_IMAGIC_FL
 0x00002000

	)

187 
	#FS_JOURNAL_DATA_FL
 0x00004000

	)

188 
	#FS_NOTAIL_FL
 0x00008000

	)

189 
	#FS_DIRSYNC_FL
 0x00010000

	)

190 
	#FS_TOPDIR_FL
 0x00020000

	)

191 
	#FS_EXTENT_FL
 0x00080000

	)

192 
	#FS_DIRECTIO_FL
 0x00100000

	)

193 
	#FS_NOCOW_FL
 0x00800000

	)

194 
	#FS_RESERVED_FL
 0x80000000

	)

196 
	#FS_FL_USER_VISIBLE
 0x0003DFFF

	)

197 
	#FS_FL_USER_MODIFIABLE
 0x000380FF

	)

200 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

201 
	#SYNC_FILE_RANGE_WRITE
 2

	)

202 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

	@/usr/include/linux/if_arp.h

23 #i‚de‡
_LINUX_IF_ARP_H


24 
	#_LINUX_IF_ARP_H


	)

26 
	~<löux/√tdevi˚.h
>

29 
	#ARPHRD_NETROM
 0

	)

30 
	#ARPHRD_ETHER
 1

	)

31 
	#ARPHRD_EETHER
 2

	)

32 
	#ARPHRD_AX25
 3

	)

33 
	#ARPHRD_PRONET
 4

	)

34 
	#ARPHRD_CHAOS
 5

	)

35 
	#ARPHRD_IEEE802
 6

	)

36 
	#ARPHRD_ARCNET
 7

	)

37 
	#ARPHRD_APPLETLK
 8

	)

38 
	#ARPHRD_DLCI
 15

	)

39 
	#ARPHRD_ATM
 19

	)

40 
	#ARPHRD_METRICOM
 23

	)

41 
	#ARPHRD_IEEE1394
 24

	)

42 
	#ARPHRD_EUI64
 27

	)

43 
	#ARPHRD_INFINIBAND
 32

	)

46 
	#ARPHRD_SLIP
 256

	)

47 
	#ARPHRD_CSLIP
 257

	)

48 
	#ARPHRD_SLIP6
 258

	)

49 
	#ARPHRD_CSLIP6
 259

	)

50 
	#ARPHRD_RSRVD
 260

	)

51 
	#ARPHRD_ADAPT
 264

	)

52 
	#ARPHRD_ROSE
 270

	)

53 
	#ARPHRD_X25
 271

	)

54 
	#ARPHRD_HWX25
 272

	)

55 
	#ARPHRD_CAN
 280

	)

56 
	#ARPHRD_PPP
 512

	)

57 
	#ARPHRD_CISCO
 513

	)

58 
	#ARPHRD_HDLC
 
ARPHRD_CISCO


	)

59 
	#ARPHRD_LAPB
 516

	)

60 
	#ARPHRD_DDCMP
 517

	)

61 
	#ARPHRD_RAWHDLC
 518

	)

63 
	#ARPHRD_TUNNEL
 768

	)

64 
	#ARPHRD_TUNNEL6
 769

	)

65 
	#ARPHRD_FRAD
 770

	)

66 
	#ARPHRD_SKIP
 771

	)

67 
	#ARPHRD_LOOPBACK
 772

	)

68 
	#ARPHRD_LOCALTLK
 773

	)

69 
	#ARPHRD_FDDI
 774

	)

70 
	#ARPHRD_BIF
 775

	)

71 
	#ARPHRD_SIT
 776

	)

72 
	#ARPHRD_IPDDP
 777

	)

73 
	#ARPHRD_IPGRE
 778

	)

74 
	#ARPHRD_PIMREG
 779

	)

75 
	#ARPHRD_HIPPI
 780

	)

76 
	#ARPHRD_ASH
 781

	)

77 
	#ARPHRD_ECONET
 782

	)

78 
	#ARPHRD_IRDA
 783

	)

80 
	#ARPHRD_FCPP
 784

	)

81 
	#ARPHRD_FCAL
 785

	)

82 
	#ARPHRD_FCPL
 786

	)

83 
	#ARPHRD_FCFABRIC
 787

	)

85 
	#ARPHRD_IEEE802_TR
 800

	)

86 
	#ARPHRD_IEEE80211
 801

	)

87 
	#ARPHRD_IEEE80211_PRISM
 802

	)

88 
	#ARPHRD_IEEE80211_RADIOTAP
 803

	)

89 
	#ARPHRD_IEEE802154
 804

	)

90 
	#ARPHRD_IEEE802154_MONITOR
 805

	)

92 
	#ARPHRD_PHONET
 820

	)

93 
	#ARPHRD_PHONET_PIPE
 821

	)

94 
	#ARPHRD_CAIF
 822

	)

95 
	#ARPHRD_IP6GRE
 823

	)

96 
	#ARPHRD_NETLINK
 824

	)

98 
	#ARPHRD_VOID
 0xFFFF

	)

99 
	#ARPHRD_NONE
 0xFFFE

	)

102 
	#ARPOP_REQUEST
 1

	)

103 
	#ARPOP_REPLY
 2

	)

104 
	#ARPOP_RREQUEST
 3

	)

105 
	#ARPOP_RREPLY
 4

	)

106 
	#ARPOP_InREQUEST
 8

	)

107 
	#ARPOP_InREPLY
 9

	)

108 
	#ARPOP_NAK
 10

	)

112 
	s¨¥eq
 {

113 
sockaddr
 
	m¨p_∑
;

114 
sockaddr
 
	m¨p_ha
;

115 
	m¨p_Êags
;

116 
sockaddr
 
	m¨p_√tmask
;

117 
	m¨p_dev
[16];

120 
	s¨¥eq_ﬁd
 {

121 
sockaddr
 
	m¨p_∑
;

122 
sockaddr
 
	m¨p_ha
;

123 
	m¨p_Êags
;

124 
sockaddr
 
	m¨p_√tmask
;

128 
	#ATF_COM
 0x02

	)

129 
	#ATF_PERM
 0x04

	)

130 
	#ATF_PUBL
 0x08

	)

131 
	#ATF_USETRAILERS
 0x10

	)

132 
	#ATF_NETMASK
 0x20

	)

134 
	#ATF_DONTPUB
 0x40

	)

140 
	s¨phdr
 {

141 
__be16
 
	m¨_hrd
;

142 
__be16
 
	m¨_¥o
;

143 
	m¨_h 
;

144 
	m¨_∂n
;

145 
__be16
 
	m¨_›
;

151 
	m¨_sha
[
ETH_ALEN
];

152 
	m¨_sù
[4];

153 
	m¨_tha
[
ETH_ALEN
];

154 
	m¨_tù
[4];

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

4 
	~<löux/sysöfo.h
>

9 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

10 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

	@/usr/include/linux/netdevice.h

25 #i‚de‡
_LINUX_NETDEVICE_H


26 
	#_LINUX_NETDEVICE_H


	)

28 
	~<löux/if.h
>

29 
	~<löux/if_ëhî.h
>

30 
	~<löux/if_∑ckë.h
>

31 
	~<löux/if_lök.h
>

34 
	#MAX_ADDR_LEN
 32

	)

37 
	#INIT_NETDEV_GROUP
 0

	)

43 
	mIF_PORT_UNKNOWN
 = 0,

44 
	mIF_PORT_10BASE2
,

45 
	mIF_PORT_10BASET
,

46 
	mIF_PORT_AUI
,

47 
	mIF_PORT_100BASET
,

48 
	mIF_PORT_100BASETX
,

49 
	mIF_PORT_100BASEFX


	@/usr/include/linux/poll.h

1 
	~<asm/pﬁl.h
>

	@/usr/include/linux/rtnetlink.h

1 #i‚de‡
__LINUX_RTNETLINK_H


2 
	#__LINUX_RTNETLINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

6 
	~<löux/if_lök.h
>

7 
	~<löux/if_addr.h
>

8 
	~<löux/√ighbour.h
>

13 
	#RTNL_FAMILY_IPMR
 128

	)

14 
	#RTNL_FAMILY_IP6MR
 129

	)

15 
	#RTNL_FAMILY_MAX
 129

	)

24 
	mRTM_BASE
 = 16,

25 
	#RTM_BASE
 
RTM_BASE


	)

27 
	mRTM_NEWLINK
 = 16,

28 
	#RTM_NEWLINK
 
RTM_NEWLINK


	)

29 
	mRTM_DELLINK
,

30 
	#RTM_DELLINK
 
RTM_DELLINK


	)

31 
	mRTM_GETLINK
,

32 
	#RTM_GETLINK
 
RTM_GETLINK


	)

33 
	mRTM_SETLINK
,

34 
	#RTM_SETLINK
 
RTM_SETLINK


	)

36 
	mRTM_NEWADDR
 = 20,

37 
	#RTM_NEWADDR
 
RTM_NEWADDR


	)

38 
	mRTM_DELADDR
,

39 
	#RTM_DELADDR
 
RTM_DELADDR


	)

40 
	mRTM_GETADDR
,

41 
	#RTM_GETADDR
 
RTM_GETADDR


	)

43 
	mRTM_NEWROUTE
 = 24,

44 
	#RTM_NEWROUTE
 
RTM_NEWROUTE


	)

45 
	mRTM_DELROUTE
,

46 
	#RTM_DELROUTE
 
RTM_DELROUTE


	)

47 
	mRTM_GETROUTE
,

48 
	#RTM_GETROUTE
 
RTM_GETROUTE


	)

50 
	mRTM_NEWNEIGH
 = 28,

51 
	#RTM_NEWNEIGH
 
RTM_NEWNEIGH


	)

52 
	mRTM_DELNEIGH
,

53 
	#RTM_DELNEIGH
 
RTM_DELNEIGH


	)

54 
	mRTM_GETNEIGH
,

55 
	#RTM_GETNEIGH
 
RTM_GETNEIGH


	)

57 
	mRTM_NEWRULE
 = 32,

58 
	#RTM_NEWRULE
 
RTM_NEWRULE


	)

59 
	mRTM_DELRULE
,

60 
	#RTM_DELRULE
 
RTM_DELRULE


	)

61 
	mRTM_GETRULE
,

62 
	#RTM_GETRULE
 
RTM_GETRULE


	)

64 
	mRTM_NEWQDISC
 = 36,

65 
	#RTM_NEWQDISC
 
RTM_NEWQDISC


	)

66 
	mRTM_DELQDISC
,

67 
	#RTM_DELQDISC
 
RTM_DELQDISC


	)

68 
	mRTM_GETQDISC
,

69 
	#RTM_GETQDISC
 
RTM_GETQDISC


	)

71 
	mRTM_NEWTCLASS
 = 40,

72 
	#RTM_NEWTCLASS
 
RTM_NEWTCLASS


	)

73 
	mRTM_DELTCLASS
,

74 
	#RTM_DELTCLASS
 
RTM_DELTCLASS


	)

75 
	mRTM_GETTCLASS
,

76 
	#RTM_GETTCLASS
 
RTM_GETTCLASS


	)

78 
	mRTM_NEWTFILTER
 = 44,

79 
	#RTM_NEWTFILTER
 
RTM_NEWTFILTER


	)

80 
	mRTM_DELTFILTER
,

81 
	#RTM_DELTFILTER
 
RTM_DELTFILTER


	)

82 
	mRTM_GETTFILTER
,

83 
	#RTM_GETTFILTER
 
RTM_GETTFILTER


	)

85 
	mRTM_NEWACTION
 = 48,

86 
	#RTM_NEWACTION
 
RTM_NEWACTION


	)

87 
	mRTM_DELACTION
,

88 
	#RTM_DELACTION
 
RTM_DELACTION


	)

89 
	mRTM_GETACTION
,

90 
	#RTM_GETACTION
 
RTM_GETACTION


	)

92 
	mRTM_NEWPREFIX
 = 52,

93 
	#RTM_NEWPREFIX
 
RTM_NEWPREFIX


	)

95 
	mRTM_GETMULTICAST
 = 58,

96 
	#RTM_GETMULTICAST
 
RTM_GETMULTICAST


	)

98 
	mRTM_GETANYCAST
 = 62,

99 
	#RTM_GETANYCAST
 
RTM_GETANYCAST


	)

101 
	mRTM_NEWNEIGHTBL
 = 64,

102 
	#RTM_NEWNEIGHTBL
 
RTM_NEWNEIGHTBL


	)

103 
	mRTM_GETNEIGHTBL
 = 66,

104 
	#RTM_GETNEIGHTBL
 
RTM_GETNEIGHTBL


	)

105 
	mRTM_SETNEIGHTBL
,

106 
	#RTM_SETNEIGHTBL
 
RTM_SETNEIGHTBL


	)

108 
	mRTM_NEWNDUSEROPT
 = 68,

109 
	#RTM_NEWNDUSEROPT
 
RTM_NEWNDUSEROPT


	)

111 
	mRTM_NEWADDRLABEL
 = 72,

112 
	#RTM_NEWADDRLABEL
 
RTM_NEWADDRLABEL


	)

113 
	mRTM_DELADDRLABEL
,

114 
	#RTM_DELADDRLABEL
 
RTM_DELADDRLABEL


	)

115 
	mRTM_GETADDRLABEL
,

116 
	#RTM_GETADDRLABEL
 
RTM_GETADDRLABEL


	)

118 
	mRTM_GETDCB
 = 78,

119 
	#RTM_GETDCB
 
RTM_GETDCB


	)

120 
	mRTM_SETDCB
,

121 
	#RTM_SETDCB
 
RTM_SETDCB


	)

123 
	mRTM_NEWNETCONF
 = 80,

124 
	#RTM_NEWNETCONF
 
RTM_NEWNETCONF


	)

125 
	mRTM_GETNETCONF
 = 82,

126 
	#RTM_GETNETCONF
 
RTM_GETNETCONF


	)

128 
	mRTM_NEWMDB
 = 84,

129 
	#RTM_NEWMDB
 
RTM_NEWMDB


	)

130 
	mRTM_DELMDB
 = 85,

131 
	#RTM_DELMDB
 
RTM_DELMDB


	)

132 
	mRTM_GETMDB
 = 86,

133 
	#RTM_GETMDB
 
RTM_GETMDB


	)

135 
	m__RTM_MAX
,

136 
	#RTM_MAX
 (((
__RTM_MAX
 + 3Ë& ~3Ë- 1)

	)

139 
	#RTM_NR_MSGTYPES
 (
RTM_MAX
 + 1 - 
RTM_BASE
)

	)

140 
	#RTM_NR_FAMILIES
 (
RTM_NR_MSGTYPES
 >> 2)

	)

141 
	#RTM_FAM
(
cmd
Ë(((cmdË- 
RTM_BASE
Ë>> 2)

	)

149 
	sπ©å
 {

150 
	mπa_Àn
;

151 
	mπa_ty≥
;

156 
	#RTA_ALIGNTO
 4

	)

157 
	#RTA_ALIGN
(
Àn
Ë–(÷í)+
RTA_ALIGNTO
-1Ë& ~(RTA_ALIGNTO-1Ë)

	)

158 
	#RTA_OK
(
πa
,
Àn
Ë(÷íË>()(
π©å
) && \

159 (
πa
)->
πa_Àn
 >(
π©å
) && \

160 (
πa
)->
πa_Àn
 <(
Àn
))

	)

161 
	#RTA_NEXT
(
πa
,
©åÀn
Ë(◊âæíË-
	`RTA_ALIGN
(‘è)->
πa_Àn
), \

162 (
π©å
*)(((*)(
πa
)Ë+ 
	`RTA_ALIGN
(‘è)->
πa_Àn
)))

	)

163 
	#RTA_LENGTH
(
Àn
Ë(
	`RTA_ALIGN
((
π©å
)Ë+ (Àn))

	)

164 
	#RTA_SPACE
(
Àn
Ë
	`RTA_ALIGN
(
	`RTA_LENGTH
÷í))

	)

165 
	#RTA_DATA
(
πa
Ë((*)(((*)‘è)Ë+ 
	`RTA_LENGTH
(0)))

	)

166 
	#RTA_PAYLOAD
(
πa
Ë(()(‘è)->
πa_Àn
Ë- 
	`RTA_LENGTH
(0))

	)

175 
	sπmsg
 {

176 
	mπm_Ámûy
;

177 
	mπm_d°_Àn
;

178 
	mπm_§c_Àn
;

179 
	mπm_tos
;

181 
	mπm_èbÀ
;

182 
	mπm_¥Ÿocﬁ
;

183 
	mπm_sc›e
;

184 
	mπm_ty≥
;

186 
	mπm_Êags
;

192 
	mRTN_UNSPEC
,

193 
	mRTN_UNICAST
,

194 
	mRTN_LOCAL
,

195 
	mRTN_BROADCAST
,

197 
	mRTN_ANYCAST
,

199 
	mRTN_MULTICAST
,

200 
	mRTN_BLACKHOLE
,

201 
	mRTN_UNREACHABLE
,

202 
	mRTN_PROHIBIT
,

203 
	mRTN_THROW
,

204 
	mRTN_NAT
,

205 
	mRTN_XRESOLVE
,

206 
	m__RTN_MAX


209 
	#RTN_MAX
 (
__RTN_MAX
 - 1)

	)

214 
	#RTPROT_UNSPEC
 0

	)

215 
	#RTPROT_REDIRECT
 1

	)

217 
	#RTPROT_KERNEL
 2

	)

218 
	#RTPROT_BOOT
 3

	)

219 
	#RTPROT_STATIC
 4

	)

228 
	#RTPROT_GATED
 8

	)

229 
	#RTPROT_RA
 9

	)

230 
	#RTPROT_MRT
 10

	)

231 
	#RTPROT_ZEBRA
 11

	)

232 
	#RTPROT_BIRD
 12

	)

233 
	#RTPROT_DNROUTED
 13

	)

234 
	#RTPROT_XORP
 14

	)

235 
	#RTPROT_NTK
 15

	)

236 
	#RTPROT_DHCP
 16

	)

237 
	#RTPROT_MROUTED
 17

	)

250 
	eπ_sc›e_t
 {

251 
	mRT_SCOPE_UNIVERSE
=0,

253 
	mRT_SCOPE_SITE
=200,

254 
	mRT_SCOPE_LINK
=253,

255 
	mRT_SCOPE_HOST
=254,

256 
	mRT_SCOPE_NOWHERE
=255

261 
	#RTM_F_NOTIFY
 0x100

	)

262 
	#RTM_F_CLONED
 0x200

	)

263 
	#RTM_F_EQUALIZE
 0x400

	)

264 
	#RTM_F_PREFIX
 0x800

	)

268 
	eπ_˛ass_t
 {

269 
	mRT_TABLE_UNSPEC
=0,

271 
	mRT_TABLE_COMPAT
=252,

272 
	mRT_TABLE_DEFAULT
=253,

273 
	mRT_TABLE_MAIN
=254,

274 
	mRT_TABLE_LOCAL
=255,

275 
	mRT_TABLE_MAX
=0xFFFFFFFF

281 
	eπ©å_ty≥_t
 {

282 
	mRTA_UNSPEC
,

283 
	mRTA_DST
,

284 
	mRTA_SRC
,

285 
	mRTA_IIF
,

286 
	mRTA_OIF
,

287 
	mRTA_GATEWAY
,

288 
	mRTA_PRIORITY
,

289 
	mRTA_PREFSRC
,

290 
	mRTA_METRICS
,

291 
	mRTA_MULTIPATH
,

292 
	mRTA_PROTOINFO
,

293 
	mRTA_FLOW
,

294 
	mRTA_CACHEINFO
,

295 
	mRTA_SESSION
,

296 
	mRTA_MP_ALGO
,

297 
	mRTA_TABLE
,

298 
	mRTA_MARK
,

299 
	mRTA_MFC_STATS
,

300 
	m__RTA_MAX


303 
	#RTA_MAX
 (
__RTA_MAX
 - 1)

	)

305 
	#RTM_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
πmsg
))))

	)

306 
	#RTM_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
πmsg
))

	)

317 
	sπ√xth›
 {

318 
	mπnh_Àn
;

319 
	mπnh_Êags
;

320 
	mπnh_h›s
;

321 
	mπnh_ifödex
;

326 
	#RTNH_F_DEAD
 1

	)

327 
	#RTNH_F_PERVASIVE
 2

	)

328 
	#RTNH_F_ONLINK
 4

	)

332 
	#RTNH_ALIGNTO
 4

	)

333 
	#RTNH_ALIGN
(
Àn
Ë–(÷í)+
RTNH_ALIGNTO
-1Ë& ~(RTNH_ALIGNTO-1Ë)

	)

334 
	#RTNH_OK
(
πnh
,
Àn
Ë(‘äh)->
πnh_Àn
 >(
π√xth›
) && \

335 (()(
πnh
)->
πnh_Àn
Ë<(
Àn
))

	)

336 
	#RTNH_NEXT
(
πnh
Ë((
π√xth›
*)(((*)‘äh)Ë+ 
	`RTNH_ALIGN
(‘äh)->
πnh_Àn
)))

	)

337 
	#RTNH_LENGTH
(
Àn
Ë(
	`RTNH_ALIGN
((
π√xth›
)Ë+ (Àn))

	)

338 
	#RTNH_SPACE
(
Àn
Ë
	`RTNH_ALIGN
(
	`RTNH_LENGTH
÷í))

	)

339 
	#RTNH_DATA
(
πnh
Ë((
π©å
*)(((*)‘äh)Ë+ 
	`RTNH_LENGTH
(0)))

	)

343 
	sπa_ˇcheöfo
 {

344 
__u32
 
	mπa_˛¡ªf
;

345 
__u32
 
	mπa_œ°u£
;

346 
__s32
 
	mπa_expúes
;

347 
__u32
 
	mπa_îr‹
;

348 
__u32
 
	mπa_u£d
;

350 
	#RTNETLINK_HAVE_PEERINFO
 1

	)

351 
__u32
 
	mπa_id
;

352 
__u32
 
	mπa_ts
;

353 
__u32
 
	mπa_tßge
;

359 
	mRTAX_UNSPEC
,

360 
	#RTAX_UNSPEC
 
RTAX_UNSPEC


	)

361 
	mRTAX_LOCK
,

362 
	#RTAX_LOCK
 
RTAX_LOCK


	)

363 
	mRTAX_MTU
,

364 
	#RTAX_MTU
 
RTAX_MTU


	)

365 
	mRTAX_WINDOW
,

366 
	#RTAX_WINDOW
 
RTAX_WINDOW


	)

367 
	mRTAX_RTT
,

368 
	#RTAX_RTT
 
RTAX_RTT


	)

369 
	mRTAX_RTTVAR
,

370 
	#RTAX_RTTVAR
 
RTAX_RTTVAR


	)

371 
	mRTAX_SSTHRESH
,

372 
	#RTAX_SSTHRESH
 
RTAX_SSTHRESH


	)

373 
	mRTAX_CWND
,

374 
	#RTAX_CWND
 
RTAX_CWND


	)

375 
	mRTAX_ADVMSS
,

376 
	#RTAX_ADVMSS
 
RTAX_ADVMSS


	)

377 
	mRTAX_REORDERING
,

378 
	#RTAX_REORDERING
 
RTAX_REORDERING


	)

379 
	mRTAX_HOPLIMIT
,

380 
	#RTAX_HOPLIMIT
 
RTAX_HOPLIMIT


	)

381 
	mRTAX_INITCWND
,

382 
	#RTAX_INITCWND
 
RTAX_INITCWND


	)

383 
	mRTAX_FEATURES
,

384 
	#RTAX_FEATURES
 
RTAX_FEATURES


	)

385 
	mRTAX_RTO_MIN
,

386 
	#RTAX_RTO_MIN
 
RTAX_RTO_MIN


	)

387 
	mRTAX_INITRWND
,

388 
	#RTAX_INITRWND
 
RTAX_INITRWND


	)

389 
	mRTAX_QUICKACK
,

390 
	#RTAX_QUICKACK
 
RTAX_QUICKACK


	)

391 
	m__RTAX_MAX


394 
	#RTAX_MAX
 (
__RTAX_MAX
 - 1)

	)

396 
	#RTAX_FEATURE_ECN
 0x00000001

	)

397 
	#RTAX_FEATURE_SACK
 0x00000002

	)

398 
	#RTAX_FEATURE_TIMESTAMP
 0x00000004

	)

399 
	#RTAX_FEATURE_ALLFRAG
 0x00000008

	)

401 
	sπa_£ssi⁄
 {

402 
__u8
 
	m¥Ÿo
;

403 
__u8
 
	m∑d1
;

404 
__u16
 
	m∑d2
;

408 
__u16
 
	m•‹t
;

409 
__u16
 
	mdp‹t
;

410 } 
	mp‹ts
;

413 
__u8
 
	mty≥
;

414 
__u8
 
	mcode
;

415 
__u16
 
	midít
;

416 } 
	micm±
;

418 
__u32
 
	m•i
;

419 } 
	mu
;

422 
	sπa_mfc_°©s
 {

423 
__u64
 
	mmfcs_∑ckës
;

424 
__u64
 
	mmfcs_byãs
;

425 
__u64
 
	mmfcs_wr⁄g_if
;

432 
	sπgímsg
 {

433 
	mπgí_Ámûy
;

445 
	siföfomsg
 {

446 
	mifi_Ámûy
;

447 
	m__ifi_∑d
;

448 
	mifi_ty≥
;

449 
	mifi_ödex
;

450 
	mifi_Êags
;

451 
	mifi_ch™ge
;

458 
	s¥efixmsg
 {

459 
	m¥efix_Ámûy
;

460 
	m¥efix_∑d1
;

461 
	m¥efix_∑d2
;

462 
	m¥efix_ifödex
;

463 
	m¥efix_ty≥
;

464 
	m¥efix_Àn
;

465 
	m¥efix_Êags
;

466 
	m¥efix_∑d3
;

471 
	mPREFIX_UNSPEC
,

472 
	mPREFIX_ADDRESS
,

473 
	mPREFIX_CACHEINFO
,

474 
	m__PREFIX_MAX


477 
	#PREFIX_MAX
 (
__PREFIX_MAX
 - 1)

	)

479 
	s¥efix_ˇcheöfo
 {

480 
__u32
 
	m¥e„ºed_time
;

481 
__u32
 
	mvÆid_time
;

489 
	stcmsg
 {

490 
	mtcm_Ámûy
;

491 
	mtcm__∑d1
;

492 
	mtcm__∑d2
;

493 
	mtcm_ifödex
;

494 
__u32
 
	mtcm_h™dÀ
;

495 
__u32
 
	mtcm_∑ª¡
;

496 
__u32
 
	mtcm_öfo
;

500 
	mTCA_UNSPEC
,

501 
	mTCA_KIND
,

502 
	mTCA_OPTIONS
,

503 
	mTCA_STATS
,

504 
	mTCA_XSTATS
,

505 
	mTCA_RATE
,

506 
	mTCA_FCNT
,

507 
	mTCA_STATS2
,

508 
	mTCA_STAB
,

509 
	m__TCA_MAX


512 
	#TCA_MAX
 (
__TCA_MAX
 - 1)

	)

514 
	#TCA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tcmsg
))))

	)

515 
	#TCA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tcmsg
))

	)

521 
	sndu£r›tmsg
 {

522 
	mndu£r›t_Ámûy
;

523 
	mndu£r›t_∑d1
;

524 
	mndu£r›t_›ts_Àn
;

525 
	mndu£r›t_ifödex
;

526 
__u8
 
	mndu£r›t_icmp_ty≥
;

527 
__u8
 
	mndu£r›t_icmp_code
;

528 
	mndu£r›t_∑d2
;

529 
	mndu£r›t_∑d3
;

534 
	mNDUSEROPT_UNSPEC
,

535 
	mNDUSEROPT_SRCADDR
,

536 
	m__NDUSEROPT_MAX


539 
	#NDUSEROPT_MAX
 (
__NDUSEROPT_MAX
 - 1)

	)

542 
	#RTMGRP_LINK
 1

	)

543 
	#RTMGRP_NOTIFY
 2

	)

544 
	#RTMGRP_NEIGH
 4

	)

545 
	#RTMGRP_TC
 8

	)

547 
	#RTMGRP_IPV4_IFADDR
 0x10

	)

548 
	#RTMGRP_IPV4_MROUTE
 0x20

	)

549 
	#RTMGRP_IPV4_ROUTE
 0x40

	)

550 
	#RTMGRP_IPV4_RULE
 0x80

	)

552 
	#RTMGRP_IPV6_IFADDR
 0x100

	)

553 
	#RTMGRP_IPV6_MROUTE
 0x200

	)

554 
	#RTMGRP_IPV6_ROUTE
 0x400

	)

555 
	#RTMGRP_IPV6_IFINFO
 0x800

	)

557 
	#RTMGRP_DEC√t_IFADDR
 0x1000

	)

558 
	#RTMGRP_DEC√t_ROUTE
 0x4000

	)

560 
	#RTMGRP_IPV6_PREFIX
 0x20000

	)

563 
	eπ√éök_groups
 {

564 
	mRTNLGRP_NONE
,

565 
	#RTNLGRP_NONE
 
RTNLGRP_NONE


	)

566 
	mRTNLGRP_LINK
,

567 
	#RTNLGRP_LINK
 
RTNLGRP_LINK


	)

568 
	mRTNLGRP_NOTIFY
,

569 
	#RTNLGRP_NOTIFY
 
RTNLGRP_NOTIFY


	)

570 
	mRTNLGRP_NEIGH
,

571 
	#RTNLGRP_NEIGH
 
RTNLGRP_NEIGH


	)

572 
	mRTNLGRP_TC
,

573 
	#RTNLGRP_TC
 
RTNLGRP_TC


	)

574 
	mRTNLGRP_IPV4_IFADDR
,

575 
	#RTNLGRP_IPV4_IFADDR
 
RTNLGRP_IPV4_IFADDR


	)

576 
	mRTNLGRP_IPV4_MROUTE
,

577 
	#RTNLGRP_IPV4_MROUTE
 
RTNLGRP_IPV4_MROUTE


	)

578 
	mRTNLGRP_IPV4_ROUTE
,

579 
	#RTNLGRP_IPV4_ROUTE
 
RTNLGRP_IPV4_ROUTE


	)

580 
	mRTNLGRP_IPV4_RULE
,

581 
	#RTNLGRP_IPV4_RULE
 
RTNLGRP_IPV4_RULE


	)

582 
	mRTNLGRP_IPV6_IFADDR
,

583 
	#RTNLGRP_IPV6_IFADDR
 
RTNLGRP_IPV6_IFADDR


	)

584 
	mRTNLGRP_IPV6_MROUTE
,

585 
	#RTNLGRP_IPV6_MROUTE
 
RTNLGRP_IPV6_MROUTE


	)

586 
	mRTNLGRP_IPV6_ROUTE
,

587 
	#RTNLGRP_IPV6_ROUTE
 
RTNLGRP_IPV6_ROUTE


	)

588 
	mRTNLGRP_IPV6_IFINFO
,

589 
	#RTNLGRP_IPV6_IFINFO
 
RTNLGRP_IPV6_IFINFO


	)

590 
	mRTNLGRP_DEC√t_IFADDR
,

591 
	#RTNLGRP_DEC√t_IFADDR
 
RTNLGRP_DEC√t_IFADDR


	)

592 
	mRTNLGRP_NOP2
,

593 
	mRTNLGRP_DEC√t_ROUTE
,

594 
	#RTNLGRP_DEC√t_ROUTE
 
RTNLGRP_DEC√t_ROUTE


	)

595 
	mRTNLGRP_DEC√t_RULE
,

596 
	#RTNLGRP_DEC√t_RULE
 
RTNLGRP_DEC√t_RULE


	)

597 
	mRTNLGRP_NOP4
,

598 
	mRTNLGRP_IPV6_PREFIX
,

599 
	#RTNLGRP_IPV6_PREFIX
 
RTNLGRP_IPV6_PREFIX


	)

600 
	mRTNLGRP_IPV6_RULE
,

601 
	#RTNLGRP_IPV6_RULE
 
RTNLGRP_IPV6_RULE


	)

602 
	mRTNLGRP_ND_USEROPT
,

603 
	#RTNLGRP_ND_USEROPT
 
RTNLGRP_ND_USEROPT


	)

604 
	mRTNLGRP_PHONET_IFADDR
,

605 
	#RTNLGRP_PHONET_IFADDR
 
RTNLGRP_PHONET_IFADDR


	)

606 
	mRTNLGRP_PHONET_ROUTE
,

607 
	#RTNLGRP_PHONET_ROUTE
 
RTNLGRP_PHONET_ROUTE


	)

608 
	mRTNLGRP_DCB
,

609 
	#RTNLGRP_DCB
 
RTNLGRP_DCB


	)

610 
	mRTNLGRP_IPV4_NETCONF
,

611 
	#RTNLGRP_IPV4_NETCONF
 
RTNLGRP_IPV4_NETCONF


	)

612 
	mRTNLGRP_IPV6_NETCONF
,

613 
	#RTNLGRP_IPV6_NETCONF
 
RTNLGRP_IPV6_NETCONF


	)

614 
	mRTNLGRP_MDB
,

615 
	#RTNLGRP_MDB
 
RTNLGRP_MDB


	)

616 
	m__RTNLGRP_MAX


618 
	#RTNLGRP_MAX
 (
__RTNLGRP_MAX
 - 1)

	)

621 
	stˇmsg
 {

622 
	mtˇ_Ámûy
;

623 
	mtˇ__∑d1
;

624 
	mtˇ__∑d2
;

626 
	#TA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tˇmsg
))))

	)

627 
	#TA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tˇmsg
))

	)

628 
	#TCA_ACT_TAB
 1

	)

629 
	#TCAA_MAX
 1

	)

632 
	#RTEXT_FILTER_VF
 (1 << 0)

	)

633 
	#RTEXT_FILTER_BRVLAN
 (1 << 1)

	)

	@/usr/include/linux/sched.h

1 #i‚de‡
_LINUX_SCHED_H


2 
	#_LINUX_SCHED_H


	)

7 
	#CSIGNAL
 0x000000f‡

	)

8 
	#CLONE_VM
 0x00000100

	)

9 
	#CLONE_FS
 0x00000200

	)

10 
	#CLONE_FILES
 0x00000400

	)

11 
	#CLONE_SIGHAND
 0x00000800

	)

12 
	#CLONE_PTRACE
 0x00002000

	)

13 
	#CLONE_VFORK
 0x00004000

	)

14 
	#CLONE_PARENT
 0x00008000

	)

15 
	#CLONE_THREAD
 0x00010000

	)

16 
	#CLONE_NEWNS
 0x00020000

	)

17 
	#CLONE_SYSVSEM
 0x00040000

	)

18 
	#CLONE_SETTLS
 0x00080000

	)

19 
	#CLONE_PARENT_SETTID
 0x00100000

	)

20 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

21 
	#CLONE_DETACHED
 0x00400000

	)

22 
	#CLONE_UNTRACED
 0x00800000

	)

23 
	#CLONE_CHILD_SETTID
 0x01000000

	)

26 
	#CLONE_NEWUTS
 0x04000000

	)

27 
	#CLONE_NEWIPC
 0x08000000

	)

28 
	#CLONE_NEWUSER
 0x10000000

	)

29 
	#CLONE_NEWPID
 0x20000000

	)

30 
	#CLONE_NEWNET
 0x40000000

	)

31 
	#CLONE_IO
 0x80000000

	)

36 
	#SCHED_NORMAL
 0

	)

37 
	#SCHED_FIFO
 1

	)

38 
	#SCHED_RR
 2

	)

39 
	#SCHED_BATCH
 3

	)

41 
	#SCHED_IDLE
 5

	)

43 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

	@/usr/include/linux/string.h

1 #i‚de‡
_LINUX_STRING_H_


2 
	#_LINUX_STRING_H_


	)

6 
	~<°rög.h
>

	@/usr/include/linux/time.h

1 #i‚de‡
_LINUX_TIME_H


2 
	#_LINUX_TIME_H


	)

4 
	~<löux/ty≥s.h
>

7 #i‚de‡
_STRUCT_TIMESPEC


8 
	#_STRUCT_TIMESPEC


	)

9 
	stime•ec
 {

10 
__kî√l_time_t
 
	mtv_£c
;

11 
	mtv_n£c
;

15 
	stimevÆ
 {

16 
__kî√l_time_t
 
	mtv_£c
;

17 
__kî√l_su£c⁄ds_t
 
	mtv_u£c
;

20 
	stimez⁄e
 {

21 
	mtz_möuãswe°
;

22 
	mtz_d°time
;

30 
	#ITIMER_REAL
 0

	)

31 
	#ITIMER_VIRTUAL
 1

	)

32 
	#ITIMER_PROF
 2

	)

34 
	sôimî•ec
 {

35 
time•ec
 
	mô_öãrvÆ
;

36 
time•ec
 
	mô_vÆue
;

39 
	sôimîvÆ
 {

40 
timevÆ
 
	mô_öãrvÆ
;

41 
timevÆ
 
	mô_vÆue
;

47 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

49 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

50 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

51 
	#CLOCK_MONOTONIC_RAW
 4

	)

52 
	#CLOCK_REALTIME_COARSE
 5

	)

53 
	#CLOCK_MONOTONIC_COARSE
 6

	)

54 
	#CLOCK_BOOTTIME
 7

	)

55 
	#CLOCK_REALTIME_ALARM
 8

	)

56 
	#CLOCK_BOOTTIME_ALARM
 9

	)

57 
	#CLOCK_SGI_CYCLE
 10

	)

58 
	#CLOCK_TAI
 11

	)

60 
	#MAX_CLOCKS
 16

	)

61 
	#CLOCKS_MASK
 (
CLOCK_REALTIME
 | 
CLOCK_MONOTONIC
)

	)

62 
	#CLOCKS_MONO
 
CLOCK_MONOTONIC


	)

67 
	#TIMER_ABSTIME
 0x01

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/linux/version.h

1 
	#LINUX_VERSION_CODE
 199947

	)

2 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ (c))

	)

	@/usr/include/linux/wait.h

1 #i‚de‡
_LINUX_WAIT_H


2 
	#_LINUX_WAIT_H


	)

4 
	#WNOHANG
 0x00000001

	)

5 
	#WUNTRACED
 0x00000002

	)

6 
	#WSTOPPED
 
WUNTRACED


	)

7 
	#WEXITED
 0x00000004

	)

8 
	#WCONTINUED
 0x00000008

	)

9 
	#WNOWAIT
 0x01000000

	)

11 
	#__WNOTHREAD
 0x20000000

	)

12 
	#__WALL
 0x40000000

	)

13 
	#__WCLONE
 0x80000000

	)

16 
	#P_ALL
 0

	)

17 
	#P_PID
 1

	)

18 
	#P_PGID
 2

	)

	@/usr/include/linux/wireless.h

10 #i‚de‡
_LINUX_WIRELESS_H


11 
	#_LINUX_WIRELESS_H


	)

72 
	~<löux/ty≥s.h
>

73 
	~<löux/sockë.h
>

74 
	~<löux/if.h
>

83 
	#WIRELESS_EXT
 22

	)

230 
	#SIOCSIWCOMMIT
 0x8B00

	)

231 
	#SIOCGIWNAME
 0x8B01

	)

237 
	#SIOCSIWNWID
 0x8B02

	)

238 
	#SIOCGIWNWID
 0x8B03

	)

239 
	#SIOCSIWFREQ
 0x8B04

	)

240 
	#SIOCGIWFREQ
 0x8B05

	)

241 
	#SIOCSIWMODE
 0x8B06

	)

242 
	#SIOCGIWMODE
 0x8B07

	)

243 
	#SIOCSIWSENS
 0x8B08

	)

244 
	#SIOCGIWSENS
 0x8B09

	)

247 
	#SIOCSIWRANGE
 0x8B0A

	)

248 
	#SIOCGIWRANGE
 0x8B0B

	)

249 
	#SIOCSIWPRIV
 0x8B0C

	)

250 
	#SIOCGIWPRIV
 0x8B0D

	)

251 
	#SIOCSIWSTATS
 0x8B0E

	)

252 
	#SIOCGIWSTATS
 0x8B0F

	)

257 
	#SIOCSIWSPY
 0x8B10

	)

258 
	#SIOCGIWSPY
 0x8B11

	)

259 
	#SIOCSIWTHRSPY
 0x8B12

	)

260 
	#SIOCGIWTHRSPY
 0x8B13

	)

263 
	#SIOCSIWAP
 0x8B14

	)

264 
	#SIOCGIWAP
 0x8B15

	)

265 
	#SIOCGIWAPLIST
 0x8B17

	)

266 
	#SIOCSIWSCAN
 0x8B18

	)

267 
	#SIOCGIWSCAN
 0x8B19

	)

270 
	#SIOCSIWESSID
 0x8B1A

	)

271 
	#SIOCGIWESSID
 0x8B1B

	)

272 
	#SIOCSIWNICKN
 0x8B1C

	)

273 
	#SIOCGIWNICKN
 0x8B1D

	)

279 
	#SIOCSIWRATE
 0x8B20

	)

280 
	#SIOCGIWRATE
 0x8B21

	)

281 
	#SIOCSIWRTS
 0x8B22

	)

282 
	#SIOCGIWRTS
 0x8B23

	)

283 
	#SIOCSIWFRAG
 0x8B24

	)

284 
	#SIOCGIWFRAG
 0x8B25

	)

285 
	#SIOCSIWTXPOW
 0x8B26

	)

286 
	#SIOCGIWTXPOW
 0x8B27

	)

287 
	#SIOCSIWRETRY
 0x8B28

	)

288 
	#SIOCGIWRETRY
 0x8B29

	)

291 
	#SIOCSIWENCODE
 0x8B2A

	)

292 
	#SIOCGIWENCODE
 0x8B2B

	)

294 
	#SIOCSIWPOWER
 0x8B2C

	)

295 
	#SIOCGIWPOWER
 0x8B2D

	)

304 
	#SIOCSIWGENIE
 0x8B30

	)

305 
	#SIOCGIWGENIE
 0x8B31

	)

308 
	#SIOCSIWMLME
 0x8B16

	)

311 
	#SIOCSIWAUTH
 0x8B32

	)

312 
	#SIOCGIWAUTH
 0x8B33

	)

315 
	#SIOCSIWENCODEEXT
 0x8B34

	)

316 
	#SIOCGIWENCODEEXT
 0x8B35

	)

319 
	#SIOCSIWPMKSA
 0x8B36

	)

330 
	#SIOCIWFIRSTPRIV
 0x8BE0

	)

331 
	#SIOCIWLASTPRIV
 0x8BFF

	)

346 
	#SIOCIWFIRST
 0x8B00

	)

347 
	#SIOCIWLAST
 
SIOCIWLASTPRIV


	)

348 
	#IW_IOCTL_IDX
(
cmd
Ë((cmdË- 
SIOCIWFIRST
)

	)

349 
	#IW_HANDLER
(
id
, 
func
) \

350 [
	`IW_IOCTL_IDX
(
id
)] = 
func


	)

353 
	#IW_IS_SET
(
cmd
Ë(!((cmdË& 0x1))

	)

354 
	#IW_IS_GET
(
cmd
Ë((cmdË& 0x1)

	)

360 
	#IWEVTXDROP
 0x8C00

	)

361 
	#IWEVQUAL
 0x8C01

	)

362 
	#IWEVCUSTOM
 0x8C02

	)

363 
	#IWEVREGISTERED
 0x8C03

	)

364 
	#IWEVEXPIRED
 0x8C04

	)

365 
	#IWEVGENIE
 0x8C05

	)

371 
	#IWEVMICHAELMICFAILURE
 0x8C06

	)

374 
	#IWEVASSOCREQIE
 0x8C07

	)

383 
	#IWEVASSOCRESPIE
 0x8C08

	)

390 
	#IWEVPMKIDCAND
 0x8C09

	)

394 
	#IWEVFIRST
 0x8C00

	)

395 
	#IW_EVENT_IDX
(
cmd
Ë((cmdË- 
IWEVFIRST
)

	)

404 
	#IW_PRIV_TYPE_MASK
 0x7000

	)

405 
	#IW_PRIV_TYPE_NONE
 0x0000

	)

406 
	#IW_PRIV_TYPE_BYTE
 0x1000

	)

407 
	#IW_PRIV_TYPE_CHAR
 0x2000

	)

408 
	#IW_PRIV_TYPE_INT
 0x4000

	)

409 
	#IW_PRIV_TYPE_FLOAT
 0x5000

	)

410 
	#IW_PRIV_TYPE_ADDR
 0x6000

	)

412 
	#IW_PRIV_SIZE_FIXED
 0x0800

	)

414 
	#IW_PRIV_SIZE_MASK
 0x07FF

	)

424 
	#IW_MAX_FREQUENCIES
 32

	)

430 
	#IW_MAX_BITRATES
 32

	)

433 
	#IW_MAX_TXPOWER
 8

	)

438 
	#IW_MAX_SPY
 8

	)

442 
	#IW_MAX_AP
 64

	)

445 
	#IW_ESSID_MAX_SIZE
 32

	)

448 
	#IW_MODE_AUTO
 0

	)

449 
	#IW_MODE_ADHOC
 1

	)

450 
	#IW_MODE_INFRA
 2

	)

451 
	#IW_MODE_MASTER
 3

	)

452 
	#IW_MODE_REPEAT
 4

	)

453 
	#IW_MODE_SECOND
 5

	)

454 
	#IW_MODE_MONITOR
 6

	)

455 
	#IW_MODE_MESH
 7

	)

458 
	#IW_QUAL_QUAL_UPDATED
 0x01

	)

459 
	#IW_QUAL_LEVEL_UPDATED
 0x02

	)

460 
	#IW_QUAL_NOISE_UPDATED
 0x04

	)

461 
	#IW_QUAL_ALL_UPDATED
 0x07

	)

462 
	#IW_QUAL_DBM
 0x08

	)

463 
	#IW_QUAL_QUAL_INVALID
 0x10

	)

464 
	#IW_QUAL_LEVEL_INVALID
 0x20

	)

465 
	#IW_QUAL_NOISE_INVALID
 0x40

	)

466 
	#IW_QUAL_RCPI
 0x80

	)

467 
	#IW_QUAL_ALL_INVALID
 0x70

	)

470 
	#IW_FREQ_AUTO
 0x00

	)

471 
	#IW_FREQ_FIXED
 0x01

	)

475 
	#IW_MAX_ENCODING_SIZES
 8

	)

478 
	#IW_ENCODING_TOKEN_MAX
 64

	)

481 
	#IW_ENCODE_INDEX
 0x00FF

	)

482 
	#IW_ENCODE_FLAGS
 0xFF00

	)

483 
	#IW_ENCODE_MODE
 0xF000

	)

484 
	#IW_ENCODE_DISABLED
 0x8000

	)

485 
	#IW_ENCODE_ENABLED
 0x0000

	)

486 
	#IW_ENCODE_RESTRICTED
 0x4000

	)

487 
	#IW_ENCODE_OPEN
 0x2000

	)

488 
	#IW_ENCODE_NOKEY
 0x0800

	)

489 
	#IW_ENCODE_TEMP
 0x0400

	)

492 
	#IW_POWER_ON
 0x0000

	)

493 
	#IW_POWER_TYPE
 0xF000

	)

494 
	#IW_POWER_PERIOD
 0x1000

	)

495 
	#IW_POWER_TIMEOUT
 0x2000

	)

496 
	#IW_POWER_MODE
 0x0F00

	)

497 
	#IW_POWER_UNICAST_R
 0x0100

	)

498 
	#IW_POWER_MULTICAST_R
 0x0200

	)

499 
	#IW_POWER_ALL_R
 0x0300

	)

500 
	#IW_POWER_FORCE_S
 0x0400

	)

501 
	#IW_POWER_REPEATER
 0x0800

	)

502 
	#IW_POWER_MODIFIER
 0x000F

	)

503 
	#IW_POWER_MIN
 0x0001

	)

504 
	#IW_POWER_MAX
 0x0002

	)

505 
	#IW_POWER_RELATIVE
 0x0004

	)

508 
	#IW_TXPOW_TYPE
 0x00FF

	)

509 
	#IW_TXPOW_DBM
 0x0000

	)

510 
	#IW_TXPOW_MWATT
 0x0001

	)

511 
	#IW_TXPOW_RELATIVE
 0x0002

	)

512 
	#IW_TXPOW_RANGE
 0x1000

	)

515 
	#IW_RETRY_ON
 0x0000

	)

516 
	#IW_RETRY_TYPE
 0xF000

	)

517 
	#IW_RETRY_LIMIT
 0x1000

	)

518 
	#IW_RETRY_LIFETIME
 0x2000

	)

519 
	#IW_RETRY_MODIFIER
 0x00FF

	)

520 
	#IW_RETRY_MIN
 0x0001

	)

521 
	#IW_RETRY_MAX
 0x0002

	)

522 
	#IW_RETRY_RELATIVE
 0x0004

	)

523 
	#IW_RETRY_SHORT
 0x0010

	)

524 
	#IW_RETRY_LONG
 0x0020

	)

527 
	#IW_SCAN_DEFAULT
 0x0000

	)

528 
	#IW_SCAN_ALL_ESSID
 0x0001

	)

529 
	#IW_SCAN_THIS_ESSID
 0x0002

	)

530 
	#IW_SCAN_ALL_FREQ
 0x0004

	)

531 
	#IW_SCAN_THIS_FREQ
 0x0008

	)

532 
	#IW_SCAN_ALL_MODE
 0x0010

	)

533 
	#IW_SCAN_THIS_MODE
 0x0020

	)

534 
	#IW_SCAN_ALL_RATE
 0x0040

	)

535 
	#IW_SCAN_THIS_RATE
 0x0080

	)

537 
	#IW_SCAN_TYPE_ACTIVE
 0

	)

538 
	#IW_SCAN_TYPE_PASSIVE
 1

	)

540 
	#IW_SCAN_MAX_DATA
 4096

	)

543 
	#IW_SCAN_CAPA_NONE
 0x00

	)

544 
	#IW_SCAN_CAPA_ESSID
 0x01

	)

545 
	#IW_SCAN_CAPA_BSSID
 0x02

	)

546 
	#IW_SCAN_CAPA_CHANNEL
 0x04

	)

547 
	#IW_SCAN_CAPA_MODE
 0x08

	)

548 
	#IW_SCAN_CAPA_RATE
 0x10

	)

549 
	#IW_SCAN_CAPA_TYPE
 0x20

	)

550 
	#IW_SCAN_CAPA_TIME
 0x40

	)

553 
	#IW_CUSTOM_MAX
 256

	)

556 
	#IW_GENERIC_IE_MAX
 1024

	)

559 
	#IW_MLME_DEAUTH
 0

	)

560 
	#IW_MLME_DISASSOC
 1

	)

561 
	#IW_MLME_AUTH
 2

	)

562 
	#IW_MLME_ASSOC
 3

	)

565 
	#IW_AUTH_INDEX
 0x0FFF

	)

566 
	#IW_AUTH_FLAGS
 0xF000

	)

571 
	#IW_AUTH_WPA_VERSION
 0

	)

572 
	#IW_AUTH_CIPHER_PAIRWISE
 1

	)

573 
	#IW_AUTH_CIPHER_GROUP
 2

	)

574 
	#IW_AUTH_KEY_MGMT
 3

	)

575 
	#IW_AUTH_TKIP_COUNTERMEASURES
 4

	)

576 
	#IW_AUTH_DROP_UNENCRYPTED
 5

	)

577 
	#IW_AUTH_80211_AUTH_ALG
 6

	)

578 
	#IW_AUTH_WPA_ENABLED
 7

	)

579 
	#IW_AUTH_RX_UNENCRYPTED_EAPOL
 8

	)

580 
	#IW_AUTH_ROAMING_CONTROL
 9

	)

581 
	#IW_AUTH_PRIVACY_INVOKED
 10

	)

582 
	#IW_AUTH_CIPHER_GROUP_MGMT
 11

	)

583 
	#IW_AUTH_MFP
 12

	)

586 
	#IW_AUTH_WPA_VERSION_DISABLED
 0x00000001

	)

587 
	#IW_AUTH_WPA_VERSION_WPA
 0x00000002

	)

588 
	#IW_AUTH_WPA_VERSION_WPA2
 0x00000004

	)

592 
	#IW_AUTH_CIPHER_NONE
 0x00000001

	)

593 
	#IW_AUTH_CIPHER_WEP40
 0x00000002

	)

594 
	#IW_AUTH_CIPHER_TKIP
 0x00000004

	)

595 
	#IW_AUTH_CIPHER_CCMP
 0x00000008

	)

596 
	#IW_AUTH_CIPHER_WEP104
 0x00000010

	)

597 
	#IW_AUTH_CIPHER_AES_CMAC
 0x00000020

	)

600 
	#IW_AUTH_KEY_MGMT_802_1X
 1

	)

601 
	#IW_AUTH_KEY_MGMT_PSK
 2

	)

604 
	#IW_AUTH_ALG_OPEN_SYSTEM
 0x00000001

	)

605 
	#IW_AUTH_ALG_SHARED_KEY
 0x00000002

	)

606 
	#IW_AUTH_ALG_LEAP
 0x00000004

	)

609 
	#IW_AUTH_ROAMING_ENABLE
 0

	)

610 
	#IW_AUTH_ROAMING_DISABLE
 1

	)

614 
	#IW_AUTH_MFP_DISABLED
 0

	)

615 
	#IW_AUTH_MFP_OPTIONAL
 1

	)

616 
	#IW_AUTH_MFP_REQUIRED
 2

	)

619 
	#IW_ENCODE_SEQ_MAX_SIZE
 8

	)

621 
	#IW_ENCODE_ALG_NONE
 0

	)

622 
	#IW_ENCODE_ALG_WEP
 1

	)

623 
	#IW_ENCODE_ALG_TKIP
 2

	)

624 
	#IW_ENCODE_ALG_CCMP
 3

	)

625 
	#IW_ENCODE_ALG_PMK
 4

	)

626 
	#IW_ENCODE_ALG_AES_CMAC
 5

	)

628 
	#IW_ENCODE_EXT_TX_SEQ_VALID
 0x00000001

	)

629 
	#IW_ENCODE_EXT_RX_SEQ_VALID
 0x00000002

	)

630 
	#IW_ENCODE_EXT_GROUP_KEY
 0x00000004

	)

631 
	#IW_ENCODE_EXT_SET_TX_KEY
 0x00000008

	)

634 
	#IW_MICFAILURE_KEY_ID
 0x00000003

	)

635 
	#IW_MICFAILURE_GROUP
 0x00000004

	)

636 
	#IW_MICFAILURE_PAIRWISE
 0x00000008

	)

637 
	#IW_MICFAILURE_STAKEY
 0x00000010

	)

638 
	#IW_MICFAILURE_COUNT
 0x00000060

	)

642 
	#IW_ENC_CAPA_WPA
 0x00000001

	)

643 
	#IW_ENC_CAPA_WPA2
 0x00000002

	)

644 
	#IW_ENC_CAPA_CIPHER_TKIP
 0x00000004

	)

645 
	#IW_ENC_CAPA_CIPHER_CCMP
 0x00000008

	)

646 
	#IW_ENC_CAPA_4WAY_HANDSHAKE
 0x00000010

	)

651 
	#IW_EVENT_CAPA_BASE
(
cmd
Ë((cmd >
SIOCIWFIRSTPRIV
) ? \

652 (
cmd
 - 
SIOCIWFIRSTPRIV
 + 0x60) : \

653 (
cmd
 - 
SIOCIWFIRST
))

	)

654 
	#IW_EVENT_CAPA_INDEX
(
cmd
Ë(
	`IW_EVENT_CAPA_BASE
(cmdË>> 5)

	)

655 
	#IW_EVENT_CAPA_MASK
(
cmd
Ë(1 << (
	`IW_EVENT_CAPA_BASE
(cmdË& 0x1F))

	)

658 
	#IW_EVENT_CAPA_K_0
 (
	`IW_EVENT_CAPA_MASK
(0x8B04) | \

659 
	`IW_EVENT_CAPA_MASK
(0x8B06) | \

660 
	`IW_EVENT_CAPA_MASK
(0x8B1A))

	)

661 
	#IW_EVENT_CAPA_K_1
 (
	`IW_EVENT_CAPA_MASK
(0x8B2A))

	)

663 
	#IW_EVENT_CAPA_SET
(
evít_ˇ∑
, 
cmd
Ë”vít_ˇ∑[
	`IW_EVENT_CAPA_INDEX
(cmd)] |
	`IW_EVENT_CAPA_MASK
(cmd))

	)

664 
	#IW_EVENT_CAPA_SET_KERNEL
(
evít_ˇ∑
Ë{evít_ˇ∑[0] |
IW_EVENT_CAPA_K_0
;Évít_ˇ∑[1] |
IW_EVENT_CAPA_K_1
; }

	)

673 
	siw_∑øm


675 
__s32
 
	mvÆue
;

676 
__u8
 
	mfixed
;

677 
__u8
 
	mdißbÀd
;

678 
__u16
 
	mÊags
;

685 
	siw_poöt


687 *
	mpoöãr
;

688 
__u16
 
	mÀngth
;

689 
__u16
 
	mÊags
;

701 
	siw_‰eq


703 
__s32
 
	mm
;

704 
__s16
 
	me
;

705 
__u8
 
	mi
;

706 
__u8
 
	mÊags
;

712 
	siw_quÆôy


714 
__u8
 
	mquÆ
;

716 
__u8
 
	mÀvñ
;

717 
__u8
 
	mnoi£
;

718 
__u8
 
	mupd©ed
;

728 
	siw_disˇrded


730 
__u32
 
	mnwid
;

731 
__u32
 
	mcode
;

732 
__u32
 
	m‰agmít
;

733 
__u32
 
	mªåõs
;

734 
__u32
 
	mmisc
;

741 
	siw_mis£d


743 
__u32
 
	mbóc⁄
;

749 
	siw_thr•y


751 
sockaddr
 
	maddr
;

752 
iw_quÆôy
 
	mquÆ
;

753 
iw_quÆôy
 
	mlow
;

754 
iw_quÆôy
 
	mhigh
;

768 
	siw_sˇn_ªq


770 
__u8
 
	msˇn_ty≥
;

771 
__u8
 
	messid_Àn
;

772 
__u8
 
	mnum_ch™√ls
;

774 
__u8
 
	mÊags
;

777 
sockaddr
 
	mbssid
;

786 
__u8
 
	messid
[
IW_ESSID_MAX_SIZE
];

798 
__u32
 
	mmö_ch™√l_time
;

799 
__u32
 
	mmax_ch™√l_time
;

801 
iw_‰eq
 
	mch™√l_li°
[
IW_MAX_FREQUENCIES
];

830 
	siw_ícode_ext


832 
__u32
 
	mext_Êags
;

833 
__u8
 
	mtx_£q
[
IW_ENCODE_SEQ_MAX_SIZE
];

834 
__u8
 
	mrx_£q
[
IW_ENCODE_SEQ_MAX_SIZE
];

835 
sockaddr
 
	maddr
;

838 
__u16
 
	mÆg
;

839 
__u16
 
	mkey_Àn
;

840 
__u8
 
	mkey
[0];

844 
	siw_mlme


846 
__u16
 
	mcmd
;

847 
__u16
 
	mªas⁄_code
;

848 
sockaddr
 
	maddr
;

852 
	#IW_PMKSA_ADD
 1

	)

853 
	#IW_PMKSA_REMOVE
 2

	)

854 
	#IW_PMKSA_FLUSH
 3

	)

856 
	#IW_PMKID_LEN
 16

	)

858 
	siw_pmkß


860 
__u32
 
	mcmd
;

861 
sockaddr
 
	mbssid
;

862 
__u8
 
	mpmkid
[
IW_PMKID_LEN
];

866 
	siw_mich´lmicÁûuª


868 
__u32
 
	mÊags
;

869 
sockaddr
 
	m§c_addr
;

870 
__u8
 
	mtsc
[
IW_ENCODE_SEQ_MAX_SIZE
];

874 
	#IW_PMKID_CAND_PREAUTH
 0x00000001

	)

875 
	siw_pmkid_ˇnd


877 
__u32
 
	mÊags
;

878 
__u32
 
	mödex
;

880 
sockaddr
 
	mbssid
;

887 
	siw_°©i°ics


889 
__u16
 
	m°©us
;

892 
iw_quÆôy
 
	mquÆ
;

894 
iw_disˇrded
 
	mdisˇrd
;

895 
iw_mis£d
 
	mmiss
;

909 
	uiwªq_d©a


912 
	m«me
[
IFNAMSIZ
];

916 
iw_poöt
 
	messid
;

917 
iw_∑øm
 
	mnwid
;

918 
iw_‰eq
 
	m‰eq
;

922 
iw_∑øm
 
	m£ns
;

923 
iw_∑øm
 
	mbôøã
;

924 
iw_∑øm
 
	mtxpowî
;

925 
iw_∑øm
 
	mπs
;

926 
iw_∑øm
 
	m‰ag
;

927 
__u32
 
	mmode
;

928 
iw_∑øm
 
	mªåy
;

930 
iw_poöt
 
	mícodög
;

931 
iw_∑øm
 
	mpowî
;

932 
iw_quÆôy
 
	mquÆ
;

934 
sockaddr
 
	m≠_addr
;

935 
sockaddr
 
	maddr
;

937 
iw_∑øm
 
	m∑øm
;

938 
iw_poöt
 
	md©a
;

947 
	siwªq


951 
	mi‰n_«me
[
IFNAMSIZ
];

952 } 
	mi‰_i‰n
;

955 
iwªq_d©a
 
	mu
;

968 
	siw_ønge


971 
__u32
 
	mthroughput
;

980 
__u32
 
	mmö_nwid
;

981 
__u32
 
	mmax_nwid
;

984 
__u16
 
	mﬁd_num_ch™√ls
;

985 
__u8
 
	mﬁd_num_‰equícy
;

988 
__u8
 
	msˇn_ˇ∑
;

991 
__u32
 
	mevít_ˇ∑
[6];

994 
__s32
 
	m£nsôivôy
;

1001 
iw_quÆôy
 
	mmax_quÆ
;

1011 
iw_quÆôy
 
	mavg_quÆ
;

1014 
__u8
 
	mnum_bôøãs
;

1015 
__s32
 
	mbôøã
[
IW_MAX_BITRATES
];

1018 
__s32
 
	mmö_πs
;

1019 
__s32
 
	mmax_πs
;

1022 
__s32
 
	mmö_‰ag
;

1023 
__s32
 
	mmax_‰ag
;

1026 
__s32
 
	mmö_pmp
;

1027 
__s32
 
	mmax_pmp
;

1028 
__s32
 
	mmö_pmt
;

1029 
__s32
 
	mmax_pmt
;

1030 
__u16
 
	mpmp_Êags
;

1031 
__u16
 
	mpmt_Êags
;

1032 
__u16
 
	mpm_ˇ∑
;

1035 
__u16
 
	mícodög_size
[
IW_MAX_ENCODING_SIZES
];

1036 
__u8
 
	mnum_ícodög_sizes
;

1037 
__u8
 
	mmax_ícodög_tokís
;

1039 
__u8
 
	mícodög_logö_ödex
;

1042 
__u16
 
	mtxpowî_ˇ∑
;

1043 
__u8
 
	mnum_txpowî
;

1044 
__s32
 
	mtxpowî
[
IW_MAX_TXPOWER
];

1047 
__u8
 
	mwe_vîsi⁄_compûed
;

1048 
__u8
 
	mwe_vîsi⁄_sour˚
;

1051 
__u16
 
	mªåy_ˇ∑
;

1052 
__u16
 
	mªåy_Êags
;

1053 
__u16
 
	mr_time_Êags
;

1054 
__s32
 
	mmö_ªåy
;

1055 
__s32
 
	mmax_ªåy
;

1056 
__s32
 
	mmö_r_time
;

1057 
__s32
 
	mmax_r_time
;

1060 
__u16
 
	mnum_ch™√ls
;

1061 
__u8
 
	mnum_‰equícy
;

1062 
iw_‰eq
 
	m‰eq
[
IW_MAX_FREQUENCIES
];

1066 
__u32
 
	míc_ˇ∑
;

1073 
	siw_¥iv_¨gs


1075 
__u32
 
	mcmd
;

1076 
__u16
 
	m£t_¨gs
;

1077 
__u16
 
	mgë_¨gs
;

1078 
	m«me
[
IFNAMSIZ
];

1091 
	siw_evít


1093 
__u16
 
	mÀn
;

1094 
__u16
 
	mcmd
;

1095 
iwªq_d©a
 
	mu
;

1099 
	#IW_EV_LCP_LEN
 ((
iw_evít
Ë- (
iwªq_d©a
))

	)

1101 
	#IW_EV_CHAR_LEN
 (
IW_EV_LCP_LEN
 + 
IFNAMSIZ
)

	)

1102 
	#IW_EV_UINT_LEN
 (
IW_EV_LCP_LEN
 + (
__u32
))

	)

1103 
	#IW_EV_FREQ_LEN
 (
IW_EV_LCP_LEN
 + (
iw_‰eq
))

	)

1104 
	#IW_EV_PARAM_LEN
 (
IW_EV_LCP_LEN
 + (
iw_∑øm
))

	)

1105 
	#IW_EV_ADDR_LEN
 (
IW_EV_LCP_LEN
 + (
sockaddr
))

	)

1106 
	#IW_EV_QUAL_LEN
 (
IW_EV_LCP_LEN
 + (
iw_quÆôy
))

	)

1111 
	#IW_EV_POINT_OFF
 (((*Ë&(((
iw_poöt
 *Ë
NULL
)->
Àngth
)) - \

1112 (*Ë
NULL
)

	)

1113 
	#IW_EV_POINT_LEN
 (
IW_EV_LCP_LEN
 + (
iw_poöt
) - \

1114 
IW_EV_POINT_OFF
)

	)

1118 
	#IW_EV_LCP_PK_LEN
 (4)

	)

1120 
	#IW_EV_CHAR_PK_LEN
 (
IW_EV_LCP_PK_LEN
 + 
IFNAMSIZ
)

	)

1121 
	#IW_EV_UINT_PK_LEN
 (
IW_EV_LCP_PK_LEN
 + (
__u32
))

	)

1122 
	#IW_EV_FREQ_PK_LEN
 (
IW_EV_LCP_PK_LEN
 + (
iw_‰eq
))

	)

1123 
	#IW_EV_PARAM_PK_LEN
 (
IW_EV_LCP_PK_LEN
 + (
iw_∑øm
))

	)

1124 
	#IW_EV_ADDR_PK_LEN
 (
IW_EV_LCP_PK_LEN
 + (
sockaddr
))

	)

1125 
	#IW_EV_QUAL_PK_LEN
 (
IW_EV_LCP_PK_LEN
 + (
iw_quÆôy
))

	)

1126 
	#IW_EV_POINT_PK_LEN
 (
IW_EV_LCP_PK_LEN
 + 4)

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/poll.h

1 
	~<asm-gíîic/pﬁl.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/linux/if.h

19 #i‚de‡
_LINUX_IF_H


20 
	#_LINUX_IF_H


	)

22 
	~<löux/ty≥s.h
>

23 
	~<löux/sockë.h
>

26 
	#IFNAMSIZ
 16

	)

27 
	#IFALIASZ
 256

	)

28 
	~<löux/hdlc/io˘l.h
>

31 
	#IFF_UP
 0x1

	)

32 
	#IFF_BROADCAST
 0x2

	)

33 
	#IFF_DEBUG
 0x4

	)

34 
	#IFF_LOOPBACK
 0x8

	)

35 
	#IFF_POINTOPOINT
 0x10

	)

36 
	#IFF_NOTRAILERS
 0x20

	)

37 
	#IFF_RUNNING
 0x40

	)

38 
	#IFF_NOARP
 0x80

	)

39 
	#IFF_PROMISC
 0x100

	)

40 
	#IFF_ALLMULTI
 0x200

	)

42 
	#IFF_MASTER
 0x400

	)

43 
	#IFF_SLAVE
 0x800

	)

45 
	#IFF_MULTICAST
 0x1000

	)

47 
	#IFF_PORTSEL
 0x2000

	)

48 
	#IFF_AUTOMEDIA
 0x4000

	)

49 
	#IFF_DYNAMIC
 0x8000

	)

51 
	#IFF_LOWER_UP
 0x10000

	)

52 
	#IFF_DORMANT
 0x20000

	)

54 
	#IFF_ECHO
 0x40000

	)

56 
	#IFF_VOLATILE
 (
IFF_LOOPBACK
|
IFF_POINTOPOINT
|
IFF_BROADCAST
|
IFF_ECHO
|\

57 
IFF_MASTER
|
IFF_SLAVE
|
IFF_RUNNING
|
IFF_LOWER_UP
|
IFF_DORMANT
)

	)

60 
	#IFF_802_1Q_VLAN
 0x1

	)

61 
	#IFF_EBRIDGE
 0x2

	)

62 
	#IFF_SLAVE_INACTIVE
 0x4

	)

63 
	#IFF_MASTER_8023AD
 0x8

	)

64 
	#IFF_MASTER_ALB
 0x10

	)

65 
	#IFF_BONDING
 0x20

	)

66 
	#IFF_SLAVE_NEEDARP
 0x40

	)

67 
	#IFF_ISATAP
 0x80

	)

68 
	#IFF_MASTER_ARPMON
 0x100

	)

69 
	#IFF_WAN_HDLC
 0x200

	)

70 
	#IFF_XMIT_DST_RELEASE
 0x400

	)

73 
	#IFF_DONT_BRIDGE
 0x800

	)

74 
	#IFF_DISABLE_NETPOLL
 0x1000

	)

75 
	#IFF_MACVLAN_PORT
 0x2000

	)

76 
	#IFF_BRIDGE_PORT
 0x4000

	)

77 
	#IFF_OVS_DATAPATH
 0x8000

	)

79 
	#IFF_TX_SKB_SHARING
 0x10000

	)

81 
	#IFF_UNICAST_FLT
 0x20000

	)

82 
	#IFF_TEAM_PORT
 0x40000

	)

83 
	#IFF_SUPP_NOFCS
 0x80000

	)

84 
	#IFF_LIVE_ADDR_CHANGE
 0x100000

	)

86 
	#IFF_MACVLAN
 0x200000

	)

89 
	#IF_GET_IFACE
 0x0001

	)

90 
	#IF_GET_PROTO
 0x0002

	)

93 
	#IF_IFACE_V35
 0x1000

	)

94 
	#IF_IFACE_V24
 0x1001

	)

95 
	#IF_IFACE_X21
 0x1002

	)

96 
	#IF_IFACE_T1
 0x1003

	)

97 
	#IF_IFACE_E1
 0x1004

	)

98 
	#IF_IFACE_SYNC_SERIAL
 0x1005

	)

99 
	#IF_IFACE_X21D
 0x1006

	)

102 
	#IF_PROTO_HDLC
 0x2000

	)

103 
	#IF_PROTO_PPP
 0x2001

	)

104 
	#IF_PROTO_CISCO
 0x2002

	)

105 
	#IF_PROTO_FR
 0x2003

	)

106 
	#IF_PROTO_FR_ADD_PVC
 0x2004

	)

107 
	#IF_PROTO_FR_DEL_PVC
 0x2005

	)

108 
	#IF_PROTO_X25
 0x2006

	)

109 
	#IF_PROTO_HDLC_ETH
 0x2007

	)

110 
	#IF_PROTO_FR_ADD_ETH_PVC
 0x2008

	)

111 
	#IF_PROTO_FR_DEL_ETH_PVC
 0x2009

	)

112 
	#IF_PROTO_FR_PVC
 0x200A

	)

113 
	#IF_PROTO_FR_ETH_PVC
 0x200B

	)

114 
	#IF_PROTO_RAW
 0x200C

	)

118 
	mIF_OPER_UNKNOWN
,

119 
	mIF_OPER_NOTPRESENT
,

120 
	mIF_OPER_DOWN
,

121 
	mIF_OPER_LOWERLAYERDOWN
,

122 
	mIF_OPER_TESTING
,

123 
	mIF_OPER_DORMANT
,

124 
	mIF_OPER_UP
,

129 
	mIF_LINK_MODE_DEFAULT
,

130 
	mIF_LINK_MODE_DORMANT
,

143 
	sifm≠
 {

144 
	mmem_°¨t
;

145 
	mmem_íd
;

146 
	mba£_addr
;

147 
	múq
;

148 
	mdma
;

149 
	mp‹t
;

153 
	sif_£âögs
 {

154 
	mty≥
;

155 
	msize
;

158 
øw_hdlc_¥Ÿo
 *
	møw_hdlc
;

159 
cisco_¥Ÿo
 *
	mcisco
;

160 
‰_¥Ÿo
 *
	m‰
;

161 
‰_¥Ÿo_pvc
 *
	m‰_pvc
;

162 
‰_¥Ÿo_pvc_öfo
 *
	m‰_pvc_öfo
;

165 
sync_£rül_£âögs
 *
	msync
;

166 
ã1_£âögs
 *
	mã1
;

167 } 
	mifs_ifsu
;

177 
	si‰eq
 {

178 
	#IFHWADDRLEN
 6

	)

181 
	mi‰n_«me
[
IFNAMSIZ
];

182 } 
	mi‰_i‰n
;

185 
sockaddr
 
	mi‰u_addr
;

186 
sockaddr
 
	mi‰u_d°addr
;

187 
sockaddr
 
	mi‰u_brﬂdaddr
;

188 
sockaddr
 
	mi‰u_√tmask
;

189 
sockaddr
 
	mi‰u_hwaddr
;

190 
	mi‰u_Êags
;

191 
	mi‰u_ivÆue
;

192 
	mi‰u_mtu
;

193 
ifm≠
 
	mi‰u_m≠
;

194 
	mi‰u_¶ave
[
IFNAMSIZ
];

195 
	mi‰u_√w«me
[
IFNAMSIZ
];

196 * 
	mi‰u_d©a
;

197 
if_£âögs
 
	mi‰u_£âögs
;

198 } 
	mi‰_i‰u
;

201 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

202 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

203 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

204 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

205 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

206 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

207 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

208 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

209 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

210 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

211 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

212 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

213 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

214 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

215 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

216 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

217 
	#i‰_£âögs
 
i‰_i‰u
.
i‰u_£âögs


	)

226 
	sifc⁄f
 {

227 
	mifc_Àn
;

229 *
	mifcu_buf
;

230 
i‰eq
 *
	mifcu_ªq
;

231 } 
	mifc_ifcu
;

233 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

234 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

	@/usr/include/linux/if_addr.h

1 #i‚de‡
__LINUX_IF_ADDR_H


2 
	#__LINUX_IF_ADDR_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	siÁddrmsg
 {

8 
__u8
 
	miÁ_Ámûy
;

9 
__u8
 
	miÁ_¥efixÀn
;

10 
__u8
 
	miÁ_Êags
;

11 
__u8
 
	miÁ_sc›e
;

12 
__u32
 
	miÁ_ödex
;

23 
	mIFA_UNSPEC
,

24 
	mIFA_ADDRESS
,

25 
	mIFA_LOCAL
,

26 
	mIFA_LABEL
,

27 
	mIFA_BROADCAST
,

28 
	mIFA_ANYCAST
,

29 
	mIFA_CACHEINFO
,

30 
	mIFA_MULTICAST
,

31 
	m__IFA_MAX
,

34 
	#IFA_MAX
 (
__IFA_MAX
 - 1)

	)

37 
	#IFA_F_SECONDARY
 0x01

	)

38 
	#IFA_F_TEMPORARY
 
IFA_F_SECONDARY


	)

40 
	#IFA_F_NODAD
 0x02

	)

41 
	#IFA_F_OPTIMISTIC
 0x04

	)

42 
	#IFA_F_DADFAILED
 0x08

	)

43 
	#IFA_F_HOMEADDRESS
 0x10

	)

44 
	#IFA_F_DEPRECATED
 0x20

	)

45 
	#IFA_F_TENTATIVE
 0x40

	)

46 
	#IFA_F_PERMANENT
 0x80

	)

48 
	siÁ_ˇcheöfo
 {

49 
__u32
 
	miÁ_¥e„ªd
;

50 
__u32
 
	miÁ_vÆid
;

51 
__u32
 
	mc°amp
;

52 
__u32
 
	mt°amp
;

56 
	#IFA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iÁddrmsg
))))

	)

57 
	#IFA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iÁddrmsg
))

	)

	@/usr/include/linux/if_ether.h

21 #i‚de‡
_LINUX_IF_ETHER_H


22 
	#_LINUX_IF_ETHER_H


	)

24 
	~<löux/ty≥s.h
>

31 
	#ETH_ALEN
 6

	)

32 
	#ETH_HLEN
 14

	)

33 
	#ETH_ZLEN
 60

	)

34 
	#ETH_DATA_LEN
 1500

	)

35 
	#ETH_FRAME_LEN
 1514

	)

36 
	#ETH_FCS_LEN
 4

	)

42 
	#ETH_P_LOOP
 0x0060

	)

43 
	#ETH_P_PUP
 0x0200

	)

44 
	#ETH_P_PUPAT
 0x0201

	)

45 
	#ETH_P_IP
 0x0800

	)

46 
	#ETH_P_X25
 0x0805

	)

47 
	#ETH_P_ARP
 0x0806

	)

48 
	#ETH_P_BPQ
 0x08FF

	)

49 
	#ETH_P_IEEEPUP
 0x0a00

	)

50 
	#ETH_P_IEEEPUPAT
 0x0a01

	)

51 
	#ETH_P_BATMAN
 0x4305

	)

52 
	#ETH_P_DEC
 0x6000

	)

53 
	#ETH_P_DNA_DL
 0x6001

	)

54 
	#ETH_P_DNA_RC
 0x6002

	)

55 
	#ETH_P_DNA_RT
 0x6003

	)

56 
	#ETH_P_LAT
 0x6004

	)

57 
	#ETH_P_DIAG
 0x6005

	)

58 
	#ETH_P_CUST
 0x6006

	)

59 
	#ETH_P_SCA
 0x6007

	)

60 
	#ETH_P_TEB
 0x6558

	)

61 
	#ETH_P_RARP
 0x8035

	)

62 
	#ETH_P_ATALK
 0x809B

	)

63 
	#ETH_P_AARP
 0x80F3

	)

64 
	#ETH_P_8021Q
 0x8100

	)

65 
	#ETH_P_IPX
 0x8137

	)

66 
	#ETH_P_IPV6
 0x86DD

	)

67 
	#ETH_P_PAUSE
 0x8808

	)

68 
	#ETH_P_SLOW
 0x8809

	)

69 
	#ETH_P_WCCP
 0x883E

	)

71 
	#ETH_P_PPP_DISC
 0x8863

	)

72 
	#ETH_P_PPP_SES
 0x8864

	)

73 
	#ETH_P_MPLS_UC
 0x8847

	)

74 
	#ETH_P_MPLS_MC
 0x8848

	)

75 
	#ETH_P_ATMMPOA
 0x884¯

	)

76 
	#ETH_P_LINK_CTL
 0x886¯

	)

77 
	#ETH_P_ATMFATE
 0x8884

	)

80 
	#ETH_P_PAE
 0x888E

	)

81 
	#ETH_P_AOE
 0x88A2

	)

82 
	#ETH_P_8021AD
 0x88A8

	)

83 
	#ETH_P_802_EX1
 0x88B5

	)

84 
	#ETH_P_TIPC
 0x88CA

	)

85 
	#ETH_P_8021AH
 0x88E7

	)

86 
	#ETH_P_MVRP
 0x88F5

	)

87 
	#ETH_P_1588
 0x88F7

	)

88 
	#ETH_P_PRP
 0x88FB

	)

89 
	#ETH_P_FCOE
 0x8906

	)

90 
	#ETH_P_TDLS
 0x890D

	)

91 
	#ETH_P_FIP
 0x8914

	)

92 
	#ETH_P_QINQ1
 0x9100

	)

93 
	#ETH_P_QINQ2
 0x9200

	)

94 
	#ETH_P_QINQ3
 0x9300

	)

95 
	#ETH_P_EDSA
 0xDADA

	)

96 
	#ETH_P_AF_IUCV
 0xFBFB

	)

98 
	#ETH_P_802_3_MIN
 0x0600

	)

105 
	#ETH_P_802_3
 0x0001

	)

106 
	#ETH_P_AX25
 0x0002

	)

107 
	#ETH_P_ALL
 0x0003

	)

108 
	#ETH_P_802_2
 0x0004

	)

109 
	#ETH_P_SNAP
 0x0005

	)

110 
	#ETH_P_DDCMP
 0x0006

	)

111 
	#ETH_P_WAN_PPP
 0x0007

	)

112 
	#ETH_P_PPP_MP
 0x0008

	)

113 
	#ETH_P_LOCALTALK
 0x0009

	)

114 
	#ETH_P_CAN
 0x000C

	)

115 
	#ETH_P_CANFD
 0x000D

	)

116 
	#ETH_P_PPPTALK
 0x0010

	)

117 
	#ETH_P_TR_802_2
 0x0011

	)

118 
	#ETH_P_MOBITEX
 0x0015

	)

119 
	#ETH_P_CONTROL
 0x0016

	)

120 
	#ETH_P_IRDA
 0x0017

	)

121 
	#ETH_P_ECONET
 0x0018

	)

122 
	#ETH_P_HDLC
 0x0019

	)

123 
	#ETH_P_ARCNET
 0x001A

	)

124 
	#ETH_P_DSA
 0x001B

	)

125 
	#ETH_P_TRAILER
 0x001C

	)

126 
	#ETH_P_PHONET
 0x00F5

	)

127 
	#ETH_P_IEEE802154
 0x00F6

	)

128 
	#ETH_P_CAIF
 0x00F7

	)

134 
	sëhhdr
 {

135 
	mh_de°
[
ETH_ALEN
];

136 
	mh_sour˚
[
ETH_ALEN
];

137 
__be16
 
	mh_¥Ÿo
;

138 } 
__©åibuã__
((
∑cked
));

	@/usr/include/linux/if_link.h

1 #i‚de‡
_LINUX_IF_LINK_H


2 
	#_LINUX_IF_LINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

8 
	sπ∆_lök_°©s
 {

9 
__u32
 
	mrx_∑ckës
;

10 
__u32
 
	mtx_∑ckës
;

11 
__u32
 
	mrx_byãs
;

12 
__u32
 
	mtx_byãs
;

13 
__u32
 
	mrx_îr‹s
;

14 
__u32
 
	mtx_îr‹s
;

15 
__u32
 
	mrx_dr›≥d
;

16 
__u32
 
	mtx_dr›≥d
;

17 
__u32
 
	mmu…iˇ°
;

18 
__u32
 
	mcﬁlisi⁄s
;

21 
__u32
 
	mrx_Àngth_îr‹s
;

22 
__u32
 
	mrx_ovî_îr‹s
;

23 
__u32
 
	mrx_¸c_îr‹s
;

24 
__u32
 
	mrx_‰ame_îr‹s
;

25 
__u32
 
	mrx_fifo_îr‹s
;

26 
__u32
 
	mrx_mis£d_îr‹s
;

29 
__u32
 
	mtx_ab‹ãd_îr‹s
;

30 
__u32
 
	mtx_ˇºõr_îr‹s
;

31 
__u32
 
	mtx_fifo_îr‹s
;

32 
__u32
 
	mtx_hóπbót_îr‹s
;

33 
__u32
 
	mtx_wödow_îr‹s
;

36 
__u32
 
	mrx_com¥es£d
;

37 
__u32
 
	mtx_com¥es£d
;

41 
	sπ∆_lök_°©s64
 {

42 
__u64
 
	mrx_∑ckës
;

43 
__u64
 
	mtx_∑ckës
;

44 
__u64
 
	mrx_byãs
;

45 
__u64
 
	mtx_byãs
;

46 
__u64
 
	mrx_îr‹s
;

47 
__u64
 
	mtx_îr‹s
;

48 
__u64
 
	mrx_dr›≥d
;

49 
__u64
 
	mtx_dr›≥d
;

50 
__u64
 
	mmu…iˇ°
;

51 
__u64
 
	mcﬁlisi⁄s
;

54 
__u64
 
	mrx_Àngth_îr‹s
;

55 
__u64
 
	mrx_ovî_îr‹s
;

56 
__u64
 
	mrx_¸c_îr‹s
;

57 
__u64
 
	mrx_‰ame_îr‹s
;

58 
__u64
 
	mrx_fifo_îr‹s
;

59 
__u64
 
	mrx_mis£d_îr‹s
;

62 
__u64
 
	mtx_ab‹ãd_îr‹s
;

63 
__u64
 
	mtx_ˇºõr_îr‹s
;

64 
__u64
 
	mtx_fifo_îr‹s
;

65 
__u64
 
	mtx_hóπbót_îr‹s
;

66 
__u64
 
	mtx_wödow_îr‹s
;

69 
__u64
 
	mrx_com¥es£d
;

70 
__u64
 
	mtx_com¥es£d
;

74 
	sπ∆_lök_ifm≠
 {

75 
__u64
 
	mmem_°¨t
;

76 
__u64
 
	mmem_íd
;

77 
__u64
 
	mba£_addr
;

78 
__u16
 
	múq
;

79 
__u8
 
	mdma
;

80 
__u8
 
	mp‹t
;

102 
	mIFLA_UNSPEC
,

103 
	mIFLA_ADDRESS
,

104 
	mIFLA_BROADCAST
,

105 
	mIFLA_IFNAME
,

106 
	mIFLA_MTU
,

107 
	mIFLA_LINK
,

108 
	mIFLA_QDISC
,

109 
	mIFLA_STATS
,

110 
	mIFLA_COST
,

111 
	#IFLA_COST
 
IFLA_COST


	)

112 
	mIFLA_PRIORITY
,

113 
	#IFLA_PRIORITY
 
IFLA_PRIORITY


	)

114 
	mIFLA_MASTER
,

115 
	#IFLA_MASTER
 
IFLA_MASTER


	)

116 
	mIFLA_WIRELESS
,

117 
	#IFLA_WIRELESS
 
IFLA_WIRELESS


	)

118 
	mIFLA_PROTINFO
,

119 
	#IFLA_PROTINFO
 
IFLA_PROTINFO


	)

120 
	mIFLA_TXQLEN
,

121 
	#IFLA_TXQLEN
 
IFLA_TXQLEN


	)

122 
	mIFLA_MAP
,

123 
	#IFLA_MAP
 
IFLA_MAP


	)

124 
	mIFLA_WEIGHT
,

125 
	#IFLA_WEIGHT
 
IFLA_WEIGHT


	)

126 
	mIFLA_OPERSTATE
,

127 
	mIFLA_LINKMODE
,

128 
	mIFLA_LINKINFO
,

129 
	#IFLA_LINKINFO
 
IFLA_LINKINFO


	)

130 
	mIFLA_NET_NS_PID
,

131 
	mIFLA_IFALIAS
,

132 
	mIFLA_NUM_VF
,

133 
	mIFLA_VFINFO_LIST
,

134 
	mIFLA_STATS64
,

135 
	mIFLA_VF_PORTS
,

136 
	mIFLA_PORT_SELF
,

137 
	mIFLA_AF_SPEC
,

138 
	mIFLA_GROUP
,

139 
	mIFLA_NET_NS_FD
,

140 
	mIFLA_EXT_MASK
,

141 
	mIFLA_PROMISCUITY
,

142 
	#IFLA_PROMISCUITY
 
IFLA_PROMISCUITY


	)

143 
	mIFLA_NUM_TX_QUEUES
,

144 
	mIFLA_NUM_RX_QUEUES
,

145 
	mIFLA_CARRIER
,

146 
	mIFLA_PHYS_PORT_ID
,

147 
	m__IFLA_MAX


151 
	#IFLA_MAX
 (
__IFLA_MAX
 - 1)

	)

154 
	#IFLA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iföfomsg
))))

	)

155 
	#IFLA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iföfomsg
))

	)

158 
	mIFLA_INET_UNSPEC
,

159 
	mIFLA_INET_CONF
,

160 
	m__IFLA_INET_MAX
,

163 
	#IFLA_INET_MAX
 (
__IFLA_INET_MAX
 - 1)

	)

196 
	mIFLA_INET6_UNSPEC
,

197 
	mIFLA_INET6_FLAGS
,

198 
	mIFLA_INET6_CONF
,

199 
	mIFLA_INET6_STATS
,

200 
	mIFLA_INET6_MCAST
,

201 
	mIFLA_INET6_CACHEINFO
,

202 
	mIFLA_INET6_ICMP6STATS
,

203 
	mIFLA_INET6_TOKEN
,

204 
	m__IFLA_INET6_MAX


207 
	#IFLA_INET6_MAX
 (
__IFLA_INET6_MAX
 - 1)

	)

210 
	mBRIDGE_MODE_UNSPEC
,

211 
	mBRIDGE_MODE_HAIRPIN
,

215 
	mIFLA_BRPORT_UNSPEC
,

216 
	mIFLA_BRPORT_STATE
,

217 
	mIFLA_BRPORT_PRIORITY
,

218 
	mIFLA_BRPORT_COST
,

219 
	mIFLA_BRPORT_MODE
,

220 
	mIFLA_BRPORT_GUARD
,

221 
	mIFLA_BRPORT_PROTECT
,

222 
	mIFLA_BRPORT_FAST_LEAVE
,

223 
	mIFLA_BRPORT_LEARNING
,

224 
	mIFLA_BRPORT_UNICAST_FLOOD
,

225 
	m__IFLA_BRPORT_MAX


227 
	#IFLA_BRPORT_MAX
 (
__IFLA_BRPORT_MAX
 - 1)

	)

229 
	siÊa_ˇcheöfo
 {

230 
__u32
 
	mmax_ªasm_Àn
;

231 
__u32
 
	mt°amp
;

232 
__u32
 
	mªachabÀ_time
;

233 
__u32
 
	mªå™s_time
;

237 
	mIFLA_INFO_UNSPEC
,

238 
	mIFLA_INFO_KIND
,

239 
	mIFLA_INFO_DATA
,

240 
	mIFLA_INFO_XSTATS
,

241 
	m__IFLA_INFO_MAX
,

244 
	#IFLA_INFO_MAX
 (
__IFLA_INFO_MAX
 - 1)

	)

249 
	mIFLA_VLAN_UNSPEC
,

250 
	mIFLA_VLAN_ID
,

251 
	mIFLA_VLAN_FLAGS
,

252 
	mIFLA_VLAN_EGRESS_QOS
,

253 
	mIFLA_VLAN_INGRESS_QOS
,

254 
	mIFLA_VLAN_PROTOCOL
,

255 
	m__IFLA_VLAN_MAX
,

258 
	#IFLA_VLAN_MAX
 (
__IFLA_VLAN_MAX
 - 1)

	)

260 
	siÊa_vœn_Êags
 {

261 
__u32
 
	mÊags
;

262 
__u32
 
	mmask
;

266 
	mIFLA_VLAN_QOS_UNSPEC
,

267 
	mIFLA_VLAN_QOS_MAPPING
,

268 
	m__IFLA_VLAN_QOS_MAX


271 
	#IFLA_VLAN_QOS_MAX
 (
__IFLA_VLAN_QOS_MAX
 - 1)

	)

273 
	siÊa_vœn_qos_m≠pög
 {

274 
__u32
 
	m‰om
;

275 
__u32
 
	mto
;

280 
	mIFLA_MACVLAN_UNSPEC
,

281 
	mIFLA_MACVLAN_MODE
,

282 
	mIFLA_MACVLAN_FLAGS
,

283 
	m__IFLA_MACVLAN_MAX
,

286 
	#IFLA_MACVLAN_MAX
 (
__IFLA_MACVLAN_MAX
 - 1)

	)

288 
	emacvœn_mode
 {

289 
	mMACVLAN_MODE_PRIVATE
 = 1,

290 
	mMACVLAN_MODE_VEPA
 = 2,

291 
	mMACVLAN_MODE_BRIDGE
 = 4,

292 
	mMACVLAN_MODE_PASSTHRU
 = 8,

295 
	#MACVLAN_FLAG_NOPROMISC
 1

	)

299 
	mIFLA_VXLAN_UNSPEC
,

300 
	mIFLA_VXLAN_ID
,

301 
	mIFLA_VXLAN_GROUP
,

302 
	mIFLA_VXLAN_LINK
,

303 
	mIFLA_VXLAN_LOCAL
,

304 
	mIFLA_VXLAN_TTL
,

305 
	mIFLA_VXLAN_TOS
,

306 
	mIFLA_VXLAN_LEARNING
,

307 
	mIFLA_VXLAN_AGEING
,

308 
	mIFLA_VXLAN_LIMIT
,

309 
	mIFLA_VXLAN_PORT_RANGE
,

310 
	mIFLA_VXLAN_PROXY
,

311 
	mIFLA_VXLAN_RSC
,

312 
	mIFLA_VXLAN_L2MISS
,

313 
	mIFLA_VXLAN_L3MISS
,

314 
	mIFLA_VXLAN_PORT
,

315 
	mIFLA_VXLAN_GROUP6
,

316 
	mIFLA_VXLAN_LOCAL6
,

317 
	m__IFLA_VXLAN_MAX


319 
	#IFLA_VXLAN_MAX
 (
__IFLA_VXLAN_MAX
 - 1)

	)

321 
	siÊa_vxœn_p‹t_ønge
 {

322 
__be16
 
	mlow
;

323 
__be16
 
	mhigh
;

329 
	mIFLA_BOND_UNSPEC
,

330 
	mIFLA_BOND_MODE
,

331 
	mIFLA_BOND_ACTIVE_SLAVE
,

332 
	m__IFLA_BOND_MAX
,

335 
	#IFLA_BOND_MAX
 (
__IFLA_BOND_MAX
 - 1)

	)

340 
	mIFLA_VF_INFO_UNSPEC
,

341 
	mIFLA_VF_INFO
,

342 
	m__IFLA_VF_INFO_MAX
,

345 
	#IFLA_VF_INFO_MAX
 (
__IFLA_VF_INFO_MAX
 - 1)

	)

348 
	mIFLA_VF_UNSPEC
,

349 
	mIFLA_VF_MAC
,

350 
	mIFLA_VF_VLAN
,

351 
	mIFLA_VF_TX_RATE
,

352 
	mIFLA_VF_SPOOFCHK
,

353 
	mIFLA_VF_LINK_STATE
,

354 
	m__IFLA_VF_MAX
,

357 
	#IFLA_VF_MAX
 (
__IFLA_VF_MAX
 - 1)

	)

359 
	siÊa_vf_mac
 {

360 
__u32
 
	mvf
;

361 
__u8
 
	mmac
[32];

364 
	siÊa_vf_vœn
 {

365 
__u32
 
	mvf
;

366 
__u32
 
	mvœn
;

367 
__u32
 
	mqos
;

370 
	siÊa_vf_tx_øã
 {

371 
__u32
 
	mvf
;

372 
__u32
 
	møã
;

375 
	siÊa_vf_•oofchk
 {

376 
__u32
 
	mvf
;

377 
__u32
 
	m£âög
;

381 
	mIFLA_VF_LINK_STATE_AUTO
,

382 
	mIFLA_VF_LINK_STATE_ENABLE
,

383 
	mIFLA_VF_LINK_STATE_DISABLE
,

384 
	m__IFLA_VF_LINK_STATE_MAX
,

387 
	siÊa_vf_lök_°©e
 {

388 
__u32
 
	mvf
;

389 
__u32
 
	mlök_°©e
;

408 
	mIFLA_VF_PORT_UNSPEC
,

409 
	mIFLA_VF_PORT
,

410 
	m__IFLA_VF_PORT_MAX
,

413 
	#IFLA_VF_PORT_MAX
 (
__IFLA_VF_PORT_MAX
 - 1)

	)

416 
	mIFLA_PORT_UNSPEC
,

417 
	mIFLA_PORT_VF
,

418 
	mIFLA_PORT_PROFILE
,

419 
	mIFLA_PORT_VSI_TYPE
,

420 
	mIFLA_PORT_INSTANCE_UUID
,

421 
	mIFLA_PORT_HOST_UUID
,

422 
	mIFLA_PORT_REQUEST
,

423 
	mIFLA_PORT_RESPONSE
,

424 
	m__IFLA_PORT_MAX
,

427 
	#IFLA_PORT_MAX
 (
__IFLA_PORT_MAX
 - 1)

	)

429 
	#PORT_PROFILE_MAX
 40

	)

430 
	#PORT_UUID_MAX
 16

	)

431 
	#PORT_SELF_VF
 -1

	)

434 
	mPORT_REQUEST_PREASSOCIATE
 = 0,

435 
	mPORT_REQUEST_PREASSOCIATE_RR
,

436 
	mPORT_REQUEST_ASSOCIATE
,

437 
	mPORT_REQUEST_DISASSOCIATE
,

441 
	mPORT_VDP_RESPONSE_SUCCESS
 = 0,

442 
	mPORT_VDP_RESPONSE_INVALID_FORMAT
,

443 
	mPORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES
,

444 
	mPORT_VDP_RESPONSE_UNUSED_VTID
,

445 
	mPORT_VDP_RESPONSE_VTID_VIOLATION
,

446 
	mPORT_VDP_RESPONSE_VTID_VERSION_VIOALTION
,

447 
	mPORT_VDP_RESPONSE_OUT_OF_SYNC
,

449 
	mPORT_PROFILE_RESPONSE_SUCCESS
 = 0x100,

450 
	mPORT_PROFILE_RESPONSE_INPROGRESS
,

451 
	mPORT_PROFILE_RESPONSE_INVALID
,

452 
	mPORT_PROFILE_RESPONSE_BADSTATE
,

453 
	mPORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES
,

454 
	mPORT_PROFILE_RESPONSE_ERROR
,

457 
	siÊa_p‹t_vsi
 {

458 
__u8
 
	mvsi_mgr_id
;

459 
__u8
 
	mvsi_ty≥_id
[3];

460 
__u8
 
	mvsi_ty≥_vîsi⁄
;

461 
__u8
 
	m∑d
[3];

468 
	mIFLA_IPOIB_UNSPEC
,

469 
	mIFLA_IPOIB_PKEY
,

470 
	mIFLA_IPOIB_MODE
,

471 
	mIFLA_IPOIB_UMCAST
,

472 
	m__IFLA_IPOIB_MAX


476 
	mIPOIB_MODE_DATAGRAM
 = 0,

477 
	mIPOIB_MODE_CONNECTED
 = 1,

480 
	#IFLA_IPOIB_MAX
 (
__IFLA_IPOIB_MAX
 - 1)

	)

486 
	mIFLA_HSR_UNSPEC
,

487 
	mIFLA_HSR_SLAVE1
,

488 
	mIFLA_HSR_SLAVE2
,

489 
	mIFLA_HSR_MULTICAST_SPEC
,

490 
	mIFLA_HSR_SUPERVISION_ADDR
,

491 
	mIFLA_HSR_SEQ_NR
,

492 
	m__IFLA_HSR_MAX
,

495 
	#IFLA_HSR_MAX
 (
__IFLA_HSR_MAX
 - 1)

	)

	@/usr/include/linux/if_packet.h

1 #i‚de‡
__LINUX_IF_PACKET_H


2 
	#__LINUX_IF_PACKET_H


	)

4 
	~<löux/ty≥s.h
>

6 
	ssockaddr_pkt
 {

7 
	m•kt_Ámûy
;

8 
	m•kt_devi˚
[14];

9 
__be16
 
	m•kt_¥Ÿocﬁ
;

12 
	ssockaddr_Œ
 {

13 
	m¶l_Ámûy
;

14 
__be16
 
	m¶l_¥Ÿocﬁ
;

15 
	m¶l_ifödex
;

16 
	m¶l_h©y≥
;

17 
	m¶l_pkây≥
;

18 
	m¶l_hÆí
;

19 
	m¶l_addr
[8];

24 
	#PACKET_HOST
 0

	)

25 
	#PACKET_BROADCAST
 1

	)

26 
	#PACKET_MULTICAST
 2

	)

27 
	#PACKET_OTHERHOST
 3

	)

28 
	#PACKET_OUTGOING
 4

	)

30 
	#PACKET_LOOPBACK
 5

	)

31 
	#PACKET_FASTROUTE
 6

	)

35 
	#PACKET_ADD_MEMBERSHIP
 1

	)

36 
	#PACKET_DROP_MEMBERSHIP
 2

	)

37 
	#PACKET_RECV_OUTPUT
 3

	)

39 
	#PACKET_RX_RING
 5

	)

40 
	#PACKET_STATISTICS
 6

	)

41 
	#PACKET_COPY_THRESH
 7

	)

42 
	#PACKET_AUXDATA
 8

	)

43 
	#PACKET_ORIGDEV
 9

	)

44 
	#PACKET_VERSION
 10

	)

45 
	#PACKET_HDRLEN
 11

	)

46 
	#PACKET_RESERVE
 12

	)

47 
	#PACKET_TX_RING
 13

	)

48 
	#PACKET_LOSS
 14

	)

49 
	#PACKET_VNET_HDR
 15

	)

50 
	#PACKET_TX_TIMESTAMP
 16

	)

51 
	#PACKET_TIMESTAMP
 17

	)

52 
	#PACKET_FANOUT
 18

	)

53 
	#PACKET_TX_HAS_OFF
 19

	)

55 
	#PACKET_FANOUT_HASH
 0

	)

56 
	#PACKET_FANOUT_LB
 1

	)

57 
	#PACKET_FANOUT_CPU
 2

	)

58 
	#PACKET_FANOUT_ROLLOVER
 3

	)

59 
	#PACKET_FANOUT_RND
 4

	)

60 
	#PACKET_FANOUT_FLAG_ROLLOVER
 0x1000

	)

61 
	#PACKET_FANOUT_FLAG_DEFRAG
 0x8000

	)

63 
	sçackë_°©s
 {

64 
	mç_∑ckës
;

65 
	mç_dr›s
;

68 
	sçackë_°©s_v3
 {

69 
	mç_∑ckës
;

70 
	mç_dr›s
;

71 
	mç_‰ìze_q_˙t
;

74 
	uçackë_°©s_u
 {

75 
çackë_°©s
 
	m°©s1
;

76 
çackë_°©s_v3
 
	m°©s3
;

79 
	sçackë_auxd©a
 {

80 
__u32
 
	mç_°©us
;

81 
__u32
 
	mç_Àn
;

82 
__u32
 
	mç_¢≠Àn
;

83 
__u16
 
	mç_mac
;

84 
__u16
 
	mç_√t
;

85 
__u16
 
	mç_vœn_tci
;

86 
__u16
 
	mç_∑ddög
;

90 
	#TP_STATUS_KERNEL
 0

	)

91 
	#TP_STATUS_USER
 (1 << 0)

	)

92 
	#TP_STATUS_COPY
 (1 << 1)

	)

93 
	#TP_STATUS_LOSING
 (1 << 2)

	)

94 
	#TP_STATUS_CSUMNOTREADY
 (1 << 3)

	)

95 
	#TP_STATUS_VLAN_VALID
 (1 << 4Ë

	)

96 
	#TP_STATUS_BLK_TMO
 (1 << 5)

	)

99 
	#TP_STATUS_AVAILABLE
 0

	)

100 
	#TP_STATUS_SEND_REQUEST
 (1 << 0)

	)

101 
	#TP_STATUS_SENDING
 (1 << 1)

	)

102 
	#TP_STATUS_WRONG_FORMAT
 (1 << 2)

	)

105 
	#TP_STATUS_TS_SOFTWARE
 (1 << 29)

	)

106 
	#TP_STATUS_TS_SYS_HARDWARE
 (1 << 30)

	)

107 
	#TP_STATUS_TS_RAW_HARDWARE
 (1 << 31)

	)

110 
	#TP_FT_REQ_FILL_RXHASH
 0x1

	)

112 
	sçackë_hdr
 {

113 
	mç_°©us
;

114 
	mç_Àn
;

115 
	mç_¢≠Àn
;

116 
	mç_mac
;

117 
	mç_√t
;

118 
	mç_£c
;

119 
	mç_u£c
;

122 
	#TPACKET_ALIGNMENT
 16

	)

123 
	#TPACKET_ALIGN
(
x
Ë(((x)+
TPACKET_ALIGNMENT
-1)&~(TPACKET_ALIGNMENT-1))

	)

124 
	#TPACKET_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë_hdr
)Ë+ (
sockaddr_Œ
))

	)

126 
	sçackë2_hdr
 {

127 
__u32
 
	mç_°©us
;

128 
__u32
 
	mç_Àn
;

129 
__u32
 
	mç_¢≠Àn
;

130 
__u16
 
	mç_mac
;

131 
__u16
 
	mç_√t
;

132 
__u32
 
	mç_£c
;

133 
__u32
 
	mç_n£c
;

134 
__u16
 
	mç_vœn_tci
;

135 
__u16
 
	mç_∑ddög
;

138 
	sçackë_hdr_v¨ü¡1
 {

139 
__u32
 
	mç_rxhash
;

140 
__u32
 
	mç_vœn_tci
;

143 
	sçackë3_hdr
 {

144 
__u32
 
	mç_√xt_off£t
;

145 
__u32
 
	mç_£c
;

146 
__u32
 
	mç_n£c
;

147 
__u32
 
	mç_¢≠Àn
;

148 
__u32
 
	mç_Àn
;

149 
__u32
 
	mç_°©us
;

150 
__u16
 
	mç_mac
;

151 
__u16
 
	mç_√t
;

154 
çackë_hdr_v¨ü¡1
 
	mhv1
;

158 
	sçackë_bd_ts
 {

159 
	mts_£c
;

161 
	mts_u£c
;

162 
	mts_n£c
;

166 
	sçackë_hdr_v1
 {

167 
__u32
 
	mblock_°©us
;

168 
__u32
 
	mnum_pkts
;

169 
__u32
 
	moff£t_to_fú°_pkt
;

174 
__u32
 
	mblk_Àn
;

185 
__Æig√d_u64
 
	m£q_num
;

212 
çackë_bd_ts
 
	mts_fú°_pkt
, 
	mts_œ°_pkt
;

215 
	uçackë_bd_hódî_u
 {

216 
çackë_hdr_v1
 
	mbh1
;

219 
	sçackë_block_desc
 {

220 
__u32
 
	mvîsi⁄
;

221 
__u32
 
	moff£t_to_¥iv
;

222 
çackë_bd_hódî_u
 
	mhdr
;

225 
	#TPACKET2_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë2_hdr
)Ë+ (
sockaddr_Œ
))

	)

226 
	#TPACKET3_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë3_hdr
)Ë+ (
sockaddr_Œ
))

	)

228 
	eçackë_vîsi⁄s
 {

229 
	mTPACKET_V1
,

230 
	mTPACKET_V2
,

231 
	mTPACKET_V3


247 
	sçackë_ªq
 {

248 
	mç_block_size
;

249 
	mç_block_ƒ
;

250 
	mç_‰ame_size
;

251 
	mç_‰ame_ƒ
;

254 
	sçackë_ªq3
 {

255 
	mç_block_size
;

256 
	mç_block_ƒ
;

257 
	mç_‰ame_size
;

258 
	mç_‰ame_ƒ
;

259 
	mç_ªtúe_blk_tov
;

260 
	mç_sizeof_¥iv
;

261 
	mç_„©uª_ªq_w‹d
;

264 
	uçackë_ªq_u
 {

265 
çackë_ªq
 
	mªq
;

266 
çackë_ªq3
 
	mªq3
;

269 
	s∑ckë_mªq
 {

270 
	mmr_ifödex
;

271 
	mmr_ty≥
;

272 
	mmr_Æí
;

273 
	mmr_addªss
[8];

276 
	#PACKET_MR_MULTICAST
 0

	)

277 
	#PACKET_MR_PROMISC
 1

	)

278 
	#PACKET_MR_ALLMULTI
 2

	)

279 
	#PACKET_MR_UNICAST
 3

	)

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/neighbour.h

1 #i‚de‡
__LINUX_NEIGHBOUR_H


2 
	#__LINUX_NEIGHBOUR_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	sndmsg
 {

8 
__u8
 
	mndm_Ámûy
;

9 
__u8
 
	mndm_∑d1
;

10 
__u16
 
	mndm_∑d2
;

11 
__s32
 
	mndm_ifödex
;

12 
__u16
 
	mndm_°©e
;

13 
__u8
 
	mndm_Êags
;

14 
__u8
 
	mndm_ty≥
;

18 
	mNDA_UNSPEC
,

19 
	mNDA_DST
,

20 
	mNDA_LLADDR
,

21 
	mNDA_CACHEINFO
,

22 
	mNDA_PROBES
,

23 
	mNDA_VLAN
,

24 
	mNDA_PORT
,

25 
	mNDA_VNI
,

26 
	mNDA_IFINDEX
,

27 
	m__NDA_MAX


30 
	#NDA_MAX
 (
__NDA_MAX
 - 1)

	)

36 
	#NTF_USE
 0x01

	)

37 
	#NTF_PROXY
 0x08

	)

38 
	#NTF_ROUTER
 0x80

	)

40 
	#NTF_SELF
 0x02

	)

41 
	#NTF_MASTER
 0x04

	)

47 
	#NUD_INCOMPLETE
 0x01

	)

48 
	#NUD_REACHABLE
 0x02

	)

49 
	#NUD_STALE
 0x04

	)

50 
	#NUD_DELAY
 0x08

	)

51 
	#NUD_PROBE
 0x10

	)

52 
	#NUD_FAILED
 0x20

	)

55 
	#NUD_NOARP
 0x40

	)

56 
	#NUD_PERMANENT
 0x80

	)

57 
	#NUD_NONE
 0x00

	)

64 
	snda_ˇcheöfo
 {

65 
__u32
 
	mndm_c⁄fúmed
;

66 
__u32
 
	mndm_u£d
;

67 
__u32
 
	mndm_upd©ed
;

68 
__u32
 
	mndm_ªf˙t
;

96 
	sndt_°©s
 {

97 
__u64
 
	mndts_Ælocs
;

98 
__u64
 
	mndts_de°roys
;

99 
__u64
 
	mndts_hash_grows
;

100 
__u64
 
	mndts_ªs_Áûed
;

101 
__u64
 
	mndts_lookups
;

102 
__u64
 
	mndts_hôs
;

103 
__u64
 
	mndts_rcv_¥obes_mˇ°
;

104 
__u64
 
	mndts_rcv_¥obes_uˇ°
;

105 
__u64
 
	mndts_≥riodic_gc_runs
;

106 
__u64
 
	mndts_f‹˚d_gc_runs
;

110 
	mNDTPA_UNSPEC
,

111 
	mNDTPA_IFINDEX
,

112 
	mNDTPA_REFCNT
,

113 
	mNDTPA_REACHABLE_TIME
,

114 
	mNDTPA_BASE_REACHABLE_TIME
,

115 
	mNDTPA_RETRANS_TIME
,

116 
	mNDTPA_GC_STALETIME
,

117 
	mNDTPA_DELAY_PROBE_TIME
,

118 
	mNDTPA_QUEUE_LEN
,

119 
	mNDTPA_APP_PROBES
,

120 
	mNDTPA_UCAST_PROBES
,

121 
	mNDTPA_MCAST_PROBES
,

122 
	mNDTPA_ANYCAST_DELAY
,

123 
	mNDTPA_PROXY_DELAY
,

124 
	mNDTPA_PROXY_QLEN
,

125 
	mNDTPA_LOCKTIME
,

126 
	mNDTPA_QUEUE_LENBYTES
,

127 
	m__NDTPA_MAX


129 
	#NDTPA_MAX
 (
__NDTPA_MAX
 - 1)

	)

131 
	sndtmsg
 {

132 
__u8
 
	mndtm_Ámûy
;

133 
__u8
 
	mndtm_∑d1
;

134 
__u16
 
	mndtm_∑d2
;

137 
	sndt_c⁄fig
 {

138 
__u16
 
	mndtc_key_Àn
;

139 
__u16
 
	mndtc_íåy_size
;

140 
__u32
 
	mndtc_íåõs
;

141 
__u32
 
	mndtc_œ°_Êush
;

142 
__u32
 
	mndtc_œ°_ønd
;

143 
__u32
 
	mndtc_hash_∫d
;

144 
__u32
 
	mndtc_hash_mask
;

145 
__u32
 
	mndtc_hash_chaö_gc
;

146 
__u32
 
	mndtc_¥oxy_qÀn
;

150 
	mNDTA_UNSPEC
,

151 
	mNDTA_NAME
,

152 
	mNDTA_THRESH1
,

153 
	mNDTA_THRESH2
,

154 
	mNDTA_THRESH3
,

155 
	mNDTA_CONFIG
,

156 
	mNDTA_PARMS
,

157 
	mNDTA_STATS
,

158 
	mNDTA_GC_INTERVAL
,

159 
	m__NDTA_MAX


161 
	#NDTA_MAX
 (
__NDTA_MAX
 - 1)

	)

	@/usr/include/linux/netlink.h

1 #i‚de‡
__LINUX_NETLINK_H


2 
	#__LINUX_NETLINK_H


	)

4 
	~<löux/kî√l.h
>

5 
	~<löux/sockë.h
>

6 
	~<löux/ty≥s.h
>

8 
	#NETLINK_ROUTE
 0

	)

9 
	#NETLINK_UNUSED
 1

	)

10 
	#NETLINK_USERSOCK
 2

	)

11 
	#NETLINK_FIREWALL
 3

	)

12 
	#NETLINK_SOCK_DIAG
 4

	)

13 
	#NETLINK_NFLOG
 5

	)

14 
	#NETLINK_XFRM
 6

	)

15 
	#NETLINK_SELINUX
 7

	)

16 
	#NETLINK_ISCSI
 8

	)

17 
	#NETLINK_AUDIT
 9

	)

18 
	#NETLINK_FIB_LOOKUP
 10

	)

19 
	#NETLINK_CONNECTOR
 11

	)

20 
	#NETLINK_NETFILTER
 12

	)

21 
	#NETLINK_IP6_FW
 13

	)

22 
	#NETLINK_DNRTMSG
 14

	)

23 
	#NETLINK_KOBJECT_UEVENT
 15

	)

24 
	#NETLINK_GENERIC
 16

	)

26 
	#NETLINK_SCSITRANSPORT
 18

	)

27 
	#NETLINK_ECRYPTFS
 19

	)

28 
	#NETLINK_RDMA
 20

	)

29 
	#NETLINK_CRYPTO
 21

	)

31 
	#NETLINK_INET_DIAG
 
NETLINK_SOCK_DIAG


	)

33 
	#MAX_LINKS
 32

	)

35 
	ssockaddr_∆
 {

36 
__kî√l_ß_Ámûy_t
 
	m∆_Ámûy
;

37 
	m∆_∑d
;

38 
__u32
 
	m∆_pid
;

39 
__u32
 
	m∆_groups
;

42 
	s∆msghdr
 {

43 
__u32
 
	m∆msg_Àn
;

44 
__u16
 
	m∆msg_ty≥
;

45 
__u16
 
	m∆msg_Êags
;

46 
__u32
 
	m∆msg_£q
;

47 
__u32
 
	m∆msg_pid
;

52 
	#NLM_F_REQUEST
 1

	)

53 
	#NLM_F_MULTI
 2

	)

54 
	#NLM_F_ACK
 4

	)

55 
	#NLM_F_ECHO
 8

	)

56 
	#NLM_F_DUMP_INTR
 16

	)

59 
	#NLM_F_ROOT
 0x100

	)

60 
	#NLM_F_MATCH
 0x200

	)

61 
	#NLM_F_ATOMIC
 0x400

	)

62 
	#NLM_F_DUMP
 (
NLM_F_ROOT
|
NLM_F_MATCH
)

	)

65 
	#NLM_F_REPLACE
 0x100

	)

66 
	#NLM_F_EXCL
 0x200

	)

67 
	#NLM_F_CREATE
 0x400

	)

68 
	#NLM_F_APPEND
 0x800

	)

79 
	#NLMSG_ALIGNTO
 4U

	)

80 
	#NLMSG_ALIGN
(
Àn
Ë–(÷í)+
NLMSG_ALIGNTO
-1Ë& ~(NLMSG_ALIGNTO-1Ë)

	)

81 
	#NLMSG_HDRLEN
 ((Ë
	`NLMSG_ALIGN
((
∆msghdr
)))

	)

82 
	#NLMSG_LENGTH
(
Àn
Ë(÷íË+ 
NLMSG_HDRLEN
)

	)

83 
	#NLMSG_SPACE
(
Àn
Ë
	`NLMSG_ALIGN
(
	`NLMSG_LENGTH
÷í))

	)

84 
	#NLMSG_DATA
(
∆h
Ë((*)(((*ÍlhË+ 
	`NLMSG_LENGTH
(0)))

	)

85 
	#NLMSG_NEXT
(
∆h
,
Àn
Ë(÷íË-
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
), \

86 (
∆msghdr
*)(((*)(
∆h
)Ë+ 
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
)))

	)

87 
	#NLMSG_OK
(
∆h
,
Àn
Ë(÷íË>()(
∆msghdr
) && \

88 (
∆h
)->
∆msg_Àn
 >(
∆msghdr
) && \

89 (
∆h
)->
∆msg_Àn
 <(
Àn
))

	)

90 
	#NLMSG_PAYLOAD
(
∆h
,
Àn
Ë(“lh)->
∆msg_Àn
 - 
	`NLMSG_SPACE
(÷í)))

	)

92 
	#NLMSG_NOOP
 0x1

	)

93 
	#NLMSG_ERROR
 0x2

	)

94 
	#NLMSG_DONE
 0x3

	)

95 
	#NLMSG_OVERRUN
 0x4

	)

97 
	#NLMSG_MIN_TYPE
 0x10

	)

99 
	s∆msgîr
 {

100 
	mîr‹
;

101 
∆msghdr
 
	mmsg
;

104 
	#NETLINK_ADD_MEMBERSHIP
 1

	)

105 
	#NETLINK_DROP_MEMBERSHIP
 2

	)

106 
	#NETLINK_PKTINFO
 3

	)

107 
	#NETLINK_BROADCAST_ERROR
 4

	)

108 
	#NETLINK_NO_ENOBUFS
 5

	)

109 
	#NETLINK_RX_RING
 6

	)

110 
	#NETLINK_TX_RING
 7

	)

112 
	s∆_pktöfo
 {

113 
__u32
 
	mgroup
;

116 
	s∆_mm≠_ªq
 {

117 
	mnm_block_size
;

118 
	mnm_block_ƒ
;

119 
	mnm_‰ame_size
;

120 
	mnm_‰ame_ƒ
;

123 
	s∆_mm≠_hdr
 {

124 
	mnm_°©us
;

125 
	mnm_Àn
;

126 
__u32
 
	mnm_group
;

128 
__u32
 
	mnm_pid
;

129 
__u32
 
	mnm_uid
;

130 
__u32
 
	mnm_gid
;

133 
	e∆_mm≠_°©us
 {

134 
	mNL_MMAP_STATUS_UNUSED
,

135 
	mNL_MMAP_STATUS_RESERVED
,

136 
	mNL_MMAP_STATUS_VALID
,

137 
	mNL_MMAP_STATUS_COPY
,

138 
	mNL_MMAP_STATUS_SKIP
,

141 
	#NL_MMAP_MSG_ALIGNMENT
 
NLMSG_ALIGNTO


	)

142 
	#NL_MMAP_MSG_ALIGN
(
sz
Ë
	`__ALIGN_KERNEL
(sz, 
NL_MMAP_MSG_ALIGNMENT
)

	)

143 
	#NL_MMAP_HDRLEN
 
	`NL_MMAP_MSG_ALIGN
((
∆_mm≠_hdr
))

	)

145 
	#NET_MAJOR
 36

	)

148 
	mNETLINK_UNCONNECTED
 = 0,

149 
	mNETLINK_CONNECTED
,

161 
	s∆©å
 {

162 
__u16
 
	m∆a_Àn
;

163 
__u16
 
	m∆a_ty≥
;

176 
	#NLA_F_NESTED
 (1 << 15)

	)

177 
	#NLA_F_NET_BYTEORDER
 (1 << 14)

	)

178 
	#NLA_TYPE_MASK
 ~(
NLA_F_NESTED
 | 
NLA_F_NET_BYTEORDER
)

	)

180 
	#NLA_ALIGNTO
 4

	)

181 
	#NLA_ALIGN
(
Àn
Ë((÷íË+ 
NLA_ALIGNTO
 - 1Ë& ~(NLA_ALIGNTO - 1))

	)

182 
	#NLA_HDRLEN
 ((Ë
	`NLA_ALIGN
((
∆©å
)))

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/socket.h

1 #i‚de‡
_LINUX_SOCKET_H


2 
	#_LINUX_SOCKET_H


	)

7 
	#_K_SS_MAXSIZE
 128

	)

8 
	#_K_SS_ALIGNSIZE
 (
	`__Æignof__
 (
sockaddr
 *))

	)

11 
	t__kî√l_ß_Ámûy_t
;

13 
	s__kî√l_sockaddr_°‹age
 {

14 
__kî√l_ß_Ámûy_t
 
	mss_Ámûy
;

16 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

19 } 
__©åibuã__
 ((
Æig√d
(
_K_SS_ALIGNSIZE
)));

	@/usr/include/linux/sysinfo.h

1 #i‚de‡
_LINUX_SYSINFO_H


2 
	#_LINUX_SYSINFO_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#SI_LOAD_SHIFT
 16

	)

7 
	ssysöfo
 {

8 
__kî√l_l⁄g_t
 
	mu±ime
;

9 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

10 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

11 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

12 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

13 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

14 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

15 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

16 
__u16
 
	m¥ocs
;

17 
__u16
 
	m∑d
;

18 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

19 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

20 
__u32
 
	mmem_unô
;

21 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

39 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

40 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

44 
__BEGIN_NAMESPACE_STD


46 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

47 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

51 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 
__END_NAMESPACE_STD


57 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


58 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

59 
__c
, 
size_t
 
__n
)

60 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

64 
__BEGIN_NAMESPACE_STD


66 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

69 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

70 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

73 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


76 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

79 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


91  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

94 
	}
}

96 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

99 
__END_NAMESPACE_STD


101 #ifde‡
__USE_GNU


104 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


105 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

108 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

110 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

111 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


116 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

118 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

119 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

127 
__BEGIN_NAMESPACE_STD


129 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

133 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

141 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

151 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

154 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

155 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

156 
__THROW
 
	`__n⁄nuŒ
 ((2));

157 
__END_NAMESPACE_STD


159 #ifde‡
__USE_XOPEN2K8


163 
	~<xloˇÀ.h
>

166 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

169 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

170 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

173 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

174 || 
deföed
 
__USE_XOPEN2K8


176 *
	$°rdup
 (c⁄° *
__s
)

177 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_XOPEN2K8


184 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

185 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

188 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


190 
	#°rdu∑
(
s
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

196 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

197 
	}
}))

	)

200 
	#°∫du∑
(
s
, 
n
) \

201 (
__exãnsi⁄__
 \

203 c⁄° *
__ﬁd
 = (
s
); \

204 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

205 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

206 
__√w
[
__Àn
] = '\0'; \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 }))

	)

211 
	g__BEGIN_NAMESPACE_STD


213 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


216 *
°rchr
 (*
__s
, 
__c
)

217 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

219 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

221 #ifde‡
__OPTIMIZE__


222 
__exã∫_Æways_ölöe
 *

223 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


225  
__buûtö_°rchr
 (
__s
, 
__c
);

228 
__exã∫_Æways_ölöe
 const *

229 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


231  
__buûtö_°rchr
 (
__s
, 
__c
);

236 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

237 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


243 *
	`°ºchr
 (*
__s
, 
__c
)

244 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

246 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

248 #ifde‡
__OPTIMIZE__


249 
__exã∫_Æways_ölöe
 *

250 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


252  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

255 
__exã∫_Æways_ölöe
 const *

256 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


258  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

261 
	}
}

263 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 
__END_NAMESPACE_STD


268 #ifde‡
__USE_GNU


271 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


272 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

273 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

275 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

282 
__BEGIN_NAMESPACE_STD


285 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

290 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


295 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

296 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__OPTIMIZE__


301 
__exã∫_Æways_ölöe
 *

302 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


304  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

307 
__exã∫_Æways_ölöe
 const *

308 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


310  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

313 
	}
}

315 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

316 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


322 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

324 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 const *

335 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 c⁄° *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

370 c⁄° *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (c⁄° *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 const *

482 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (c⁄° *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 const *

510 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (c⁄° *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

530 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 c⁄° *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/poll.h

1 #i‚de‡
__ASM_GENERIC_POLL_H


2 
	#__ASM_GENERIC_POLL_H


	)

5 
	#POLLIN
 0x0001

	)

6 
	#POLLPRI
 0x0002

	)

7 
	#POLLOUT
 0x0004

	)

8 
	#POLLERR
 0x0008

	)

9 
	#POLLHUP
 0x0010

	)

10 
	#POLLNVAL
 0x0020

	)

13 
	#POLLRDNORM
 0x0040

	)

14 
	#POLLRDBAND
 0x0080

	)

15 #i‚de‡
POLLWRNORM


16 
	#POLLWRNORM
 0x0100

	)

18 #i‚de‡
POLLWRBAND


19 
	#POLLWRBAND
 0x0200

	)

21 #i‚de‡
POLLMSG


22 
	#POLLMSG
 0x0400

	)

24 #i‚de‡
POLLREMOVE


25 
	#POLLREMOVE
 0x1000

	)

27 #i‚de‡
POLLRDHUP


28 
	#POLLRDHUP
 0x2000

	)

31 
	#POLLFREE
 0x4000

	)

33 
	#POLL_BUSY_LOOP
 0x8000

	)

35 
	spﬁlfd
 {

36 
	mfd
;

37 
	mevíts
;

38 
	mªvíts
;

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~<asm/posix_ty≥s_32.h
>

3 #ñi‡
deföed
(
__ILP32__
)

4 
	~<asm/posix_ty≥s_x32.h
>

6 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_ARCH_u«lig√d
 1

	)

28 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

29 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

30 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

31 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

32 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

33 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

34 || 
deföed
 
	g__amdÁm10__
)

38 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

39 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

41 #i‚de‡
__STRING_INLINE


42 #i‚de‡
__exã∫_ölöe


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

51 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

52 | ((c⁄° *Ë(
§c
))[
idx
])

	)

53 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

54 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

55 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

56 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

57 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

62 
	#mem˝y
(
de°
, 
§c
, 
n
) \

63 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

64 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

65 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

66 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

67 ((
n
) == 0 \

68 ? (
de°
) \

69 : (((
n
) % 4 == 0) \

70 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

71 : (((
n
) % 2 == 0) \

72 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

73 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

75 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

76 
size_t
 
__n
);

78 
__STRING_INLINE
 *

79 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

81 
__d0
, 
__d1
;

82 *
__tmp
 = 
__de°
;

83 
__asm__
 
__vﬁ©ûe__


91 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

92 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

94  
__de°
;

95 
	}
}

97 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

98 
size_t
 
__n
);

100 
__STRING_INLINE
 *

101 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

103 
__d0
, 
__d1
;

104 *
__tmp
 = 
__de°
;

105 
__asm__
 
__vﬁ©ûe__


118 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

119 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

121  
__de°
;

122 
	}
}

124 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

126 
__STRING_INLINE
 *

127 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

129 
__d0
, 
__d1
, 
__d2
;

130 *
__tmp
 = 
__de°
;

131 
__asm__
 
__vﬁ©ûe__


142 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

143 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

144 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

145 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

147  
__de°
;

148 
	}
}

150 
	#_HAVE_STRING_ARCH_memmove
 1

	)

151 #i‚de‡
_FORCE_INLINES


154 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

156 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

157 
	`__asm__
 ("memmove");

159 
__STRING_INLINE
 *

160 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

162 
__d0
, 
__d1
, 
__d2
;

163 *
__tmp
 = 
__de°
;

164 i‡(
__de°
 < 
__§c
)

165 
__asm__
 
__vﬁ©ûe__


168 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

169 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

170 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

171 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

173 
__asm__
 
__vﬁ©ûe__


177 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

178 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

179 : "0" (
__n
), "1" (__¿- 1 + (c⁄° *Ë
__§c
),

180 "2" (
__n
 - 1 + (*Ë
__tmp
),

181 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

182  
__de°
;

183 
	}
}

187 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

188 #i‚de‡
_FORCE_INLINES


189 #i‚de‡
__PIC__


191 
__STRING_INLINE
 

192 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

194 
__d0
, 
__d1
, 
__d2
;

195 
__ªs
;

196 
__asm__
 
__vﬁ©ûe__


204 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

205 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

206 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

207 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

209  
__ªs
;

210 
	}
}

215 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

216 
	#_USE_STRING_ARCH_mem£t
 1

	)

217 
	#mem£t
(
s
, 
c
, 
n
) \

218 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

219 ? ((
n
) == 1 \

220 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

221 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

222 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

223 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

224 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

225 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

226 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

227 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

228 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

230 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

231 *((*Ë
__s
Ë(Ë(
c
); \

232 
__s
; })

	)

234 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

235 ({ *
__s
 = (
s
); \

237 
__ui
; \

238 
__usi
; \

239 
__uc
; \

240 } *
__u
 = 
__s
; \

241 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

247 i‡((
n
) == 3 || (n) >= 5) \

248 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

251 
n
) \

254 
__u
->
__ui
 = 
__c
; \

255 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

257 
__u
->
__ui
 = 
__c
; \

258 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

260 
__u
->
__ui
 = 
__c
; \

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

263 
__u
->
__usi
 = (Ë
__c
; \

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

265 
__u
->
__uc
 = (Ë
__c
; \

269 
__u
->
__ui
 = 
__c
; \

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

272 
__u
->
__ui
 = 
__c
; \

273 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

275 
__u
->
__ui
 = 
__c
; \

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

278 
__u
->
__usi
 = (Ë
__c
; \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__ui
 = 
__c
; \

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

291 
__u
->
__uc
 = (Ë
__c
; \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__ui
 = 
__c
; \

302 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

304 
__u
->
__ui
 = 
__c
; \

309 
__s
; })

	)

311 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

312 (((
n
) % 4 == 0) \

313 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

314 
n
) \

315 : (((
n
) % 2 == 0) \

316 ? 
	`__mem£t_c˙_by2
 (
s
, \

317 ((Ë((Ë(
c
))) * 0x01010101,\

318 
n
) \

319 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

321 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

322 
size_t
 
__n
);

324 
__STRING_INLINE
 *

325 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

327 *
__tmp
 = 
__s
;

328 
__d0
;

329 #ifde‡
__i686__


330 
__asm__
 
__vﬁ©ûe__


333 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

334 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

335 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

338 
__asm__
 
__vﬁ©ûe__


344 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

345 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

346 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

349  
__s
;

350 
	}
}

352 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

353 
size_t
 
__n
);

355 
__STRING_INLINE
 *

356 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

358 
__d0
, 
__d1
;

359 *
__tmp
 = 
__s
;

360 #ifde‡
__i686__


361 
__asm__
 
__vﬁ©ûe__


365 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

366 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

367 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

370 
__asm__
 
__vﬁ©ûe__


376 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

377 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

378 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

381  
__s
;

382 
	}
}

384 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

385 (((
n
) % 4 == 0) \

386 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

387 : (((
n
) % 2 == 0) \

388 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

389 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

391 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

393 
__STRING_INLINE
 *

394 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

396 *
__tmp
 = 
__s
;

397 
__d0
;

398 
__asm__
 
__vﬁ©ûe__


408 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

409 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

410 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

412  
__s
;

413 
	}
}

415 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

417 
__STRING_INLINE
 *

418 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

420 
__d0
, 
__d1
;

421 *
__tmp
 = 
__s
;

422 
__asm__
 
__vﬁ©ûe__


433 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

434 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

435 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

437  
__s
;

438 
	}
}

442 
	#_HAVE_STRING_ARCH_memchr
 1

	)

443 #i‚de‡
_FORCE_INLINES


444 
__STRING_INLINE
 *

445 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

447 
__d0
;

448 #ifde‡
__i686__


449 
__d1
;

451 *
__ªs
;

452 i‡(
__n
 == 0)

453  
NULL
;

454 #ifde‡
__i686__


455 
__asm__
 
__vﬁ©ûe__


459 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

460 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

461 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

464 
__asm__
 
__vﬁ©ûe__


470 : "=D" (
__ªs
), "=&c" (
__d0
)

471 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

472 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

475  
__ªs
 - 1;

476 
	}
}

479 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

480 #i‚de‡
_FORCE_INLINES


481 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

483 
__STRING_INLINE
 *

484 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

486 
__d0
;

487 #ifde‡
__i686__


488 
__d1
;

490 *
__ªs
;

491 i‡(
__n
 == 0)

492  
NULL
;

493 #ifde‡
__i686__


494 
__asm__
 
__vﬁ©ûe__


500 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

501 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

502 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

505 
__asm__
 
__vﬁ©ûe__


512 : "=D" (
__ªs
), "=&c" (
__d0
)

513 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

514 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

517  
__ªs
;

518 
	}
}

519 #ifde‡
__USE_GNU


520 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

525 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

526 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

528 #i‚de‡
_FORCE_INLINES


529 
__STRING_INLINE
 *

530 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

532 
__d0
;

533 *
__ªs
;

534 
__asm__
 
__vﬁ©ûe__


537 : "=D" (
__ªs
), "=&c" (
__d0
)

538 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

539 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

541  
__ªs
 - 1;

542 
	}
}

543 #ifde‡
__USE_GNU


544 
__STRING_INLINE
 *

545 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

547  
	`__øwmemchr
 (
__s
, 
__c
);

548 
	}
}

554 
	#_HAVE_STRING_ARCH_°æí
 1

	)

555 
	#°æí
(
°r
) \

556 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

557 ? 
	`__buûtö_°æí
 (
°r
) \

558 : 
	`__°æí_g
 (
°r
)))

	)

559 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

561 
__STRING_INLINE
 
size_t


562 
	$__°æí_g
 (c⁄° *
__°r
)

564 
__dummy
;

565 c⁄° *
__tmp
 = 
__°r
;

566 
__asm__
 
__vﬁ©ûe__


572 : "Ù" (
__tmp
), "=&q" (
__dummy
)

573 : "0" (
__°r
),

574 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

576  
__tmp
 - 
__°r
 - 1;

577 
	}
}

581 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

582 
	#°r˝y
(
de°
, 
§c
) \

583 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

584 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

585 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

586 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

587 (c⁄° *Ë(
§c
), \

588 
	`°æí
 (
§c
) + 1)) \

589 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

591 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

592 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

594 
__ui
; \

595 
__usi
; \

596 
__uc
; \

597 
__c
; \

598 } *
__u
 = (*Ë
__de°
; \

599 
§˛í
) \

602 
__u
->
__uc
 = '\0'; \

605 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

608 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

609 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

610 
__u
->
__uc
 = '\0'; \

613 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

616 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

617 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

618 
__u
->
__uc
 = '\0'; \

621 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

622 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

623 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

629 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

630 
__u
->
__uc
 = '\0'; \

633 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

635 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

638 (*Ë
__de°
; }))

	)

640 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

642 
__STRING_INLINE
 *

643 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

645 *
__tmp
 = 
__de°
;

646 
__dummy
;

647 
__asm__
 
__vﬁ©ûe__


656 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

657 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

658 : "0" (
__§c
), "1" (
__tmp
),

659 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

661  
__de°
;

662 
	}
}

665 #ifde‡
__USE_GNU


666 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

668 
	#__°p˝y
(
de°
, 
§c
) \

669 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

670 ? (
	`°æí
 (
§c
) + 1 <= 8 \

671 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

672 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

673 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

674 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

675 ((
§˛í
) % 4 == 0 \

676 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

677 : ((
§˛í
) % 2 == 0 \

678 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

679 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

682 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

684 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

685 (
	`__exãnsi⁄__
 ({ union { \

686 
__ui
; \

687 
__usi
; \

688 
__uc
; \

689 
__c
; \

690 } *
__u
 = (*Ë(
de°
); \

691 
§˛í
) \

694 
__u
->
__uc
 = '\0'; \

697 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

698 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

701 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

702 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

703 
__u
->
__uc
 = '\0'; \

706 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

707 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

710 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

711 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

712 
__u
->
__uc
 = '\0'; \

715 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

716 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

717 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

718 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

721 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

722 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

723 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

724 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

725 
__u
->
__uc
 = '\0'; \

728 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

729 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

730 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

731 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

734 (*Ë
__u
; }))

	)

736 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

737 
size_t
 
__§˛í
);

739 
__STRING_INLINE
 *

740 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

742 *
__tmp
 = 
__de°
;

743 
__d0
, 
__d1
;

744 
__asm__
 
__vﬁ©ûe__


752 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

753 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

755  
__tmp
;

756 
	}
}

758 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

759 
size_t
 
__§˛í
);

761 
__STRING_INLINE
 *

762 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

764 *
__tmp
 = 
__de°
;

765 
__d0
, 
__d1
;

766 
__asm__
 
__vﬁ©ûe__


779 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

780 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

781 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

782 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

784  
__tmp
 + 2;

785 
	}
}

787 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

788 
size_t
 
__§˛í
);

790 
__STRING_INLINE
 *

791 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

793 
__d0
, 
__d1
;

794 *
__tmp
 = 
__de°
;

795 
__asm__
 
__vﬁ©ûe__


806 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

807 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

808 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

809 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

811  
__tmp
;

812 
	}
}

814 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

816 
__STRING_INLINE
 *

817 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

819 *
__tmp
 = 
__de°
;

820 
__dummy
;

821 
__asm__
 
__vﬁ©ûe__


830 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

831 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

832 : "0" (
__§c
), "1" (
__tmp
),

833 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

835  
__tmp
 - 1;

836 
	}
}

841 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

842 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

843 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

844 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

845 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

846 (c⁄° *Ë(
§c
), 
n
) \

847 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

848 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

849 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

850 (((
§˛í
) % 4 == 0) \

851 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

852 : (((
§˛í
) % 2 == 0) \

853 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

854 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

856 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

857 
size_t
 
__§˛í
, size_à
__n
);

859 
__STRING_INLINE
 *

860 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

862 *
__tmp
 = 
__de°
;

863 
__dummy1
, 
__dummy2
;

864 
__asm__
 
__vﬁ©ûe__


872 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

873 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

874 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

875 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

877 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

878  
__de°
;

879 
	}
}

881 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

882 
size_t
 
__§˛í
, size_à
__n
);

884 
__STRING_INLINE
 *

885 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

887 *
__tmp
 = 
__de°
;

888 
__dummy1
, 
__dummy2
;

889 
__asm__
 
__vﬁ©ûe__


902 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

903 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

904 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

905 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

907 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

908  
__de°
;

909 
	}
}

911 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

912 
size_t
 
__§˛í
, size_à
__n
);

914 
__STRING_INLINE
 *

915 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

917 
__d0
, 
__d1
;

918 *
__tmp
 = 
__de°
;

919 
__asm__
 
__vﬁ©ûe__


930 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

931 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

932 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

933 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

935 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

936  
__de°
;

937 
	}
}

939 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

940 
size_t
 
__n
);

942 
__STRING_INLINE
 *

943 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

945 *
__tmp
 = 
__de°
;

946 
__dummy
;

947 i‡(
__n
 > 0)

948 
__asm__
 
__vﬁ©ûe__


964 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

965 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

968  
__de°
;

969 
	}
}

973 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

974 
	#°rˇt
(
de°
, 
§c
) \

975 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

976 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

977 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

979 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

980 
size_t
 
__§˛í
);

982 
__STRING_INLINE
 *

983 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

985 #ifde‡
__i686__


986 
__d0
;

987 *
__tmp
;

988 
__asm__
 
__vﬁ©ûe__


990 : "=D" (
__tmp
), "=&c" (
__d0
),

991 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

992 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

993 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

995 --
__tmp
;

997 *
__tmp
 = 
__de°
 - 1;

998 
__asm__
 
__vﬁ©ûe__


1003 : "Ù" (
__tmp
),

1004 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1005 : "0" (
__tmp
),

1006 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1009 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1010  
__de°
;

1011 
	}
}

1013 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1015 
__STRING_INLINE
 *

1016 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1018 *
__tmp
 = 
__de°
 - 1;

1019 
__dummy
;

1020 
__asm__
 
__vﬁ©ûe__


1032 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1033 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1034 : "1" (
__tmp
), "2" (
__§c
),

1035 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1037  
__de°
;

1038 
	}
}

1042 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1043 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1044 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1045 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1046 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1047 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1048 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1049 (c⁄° *Ë(
§c
), \

1050 (
n
)Ë0, 
__de°
)) \

1051 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1053 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1054 
size_t
 
__n
);

1056 
__STRING_INLINE
 *

1057 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1059 *
__tmp
 = 
__de°
;

1060 
__dummy
;

1061 #ifde‡
__i686__


1062 
__asm__
 
__vﬁ©ûe__


1076 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1077 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1080 --
__tmp
;

1081 
__asm__
 
__vﬁ©ûe__


1098 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1099 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1102  
__de°
;

1103 
	}
}

1107 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1108 
	#°rcmp
(
s1
, 
s2
) \

1109 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1110 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1111 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1112 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1113 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1114 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1115 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1116 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1117 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1118 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1119 (c⁄° *Ë(
s2
), \

1120 
	`°æí
 (
s1
)) \

1121 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1122 (c⁄° *Ë(
s2
), \

1123 
	`°æí
 (
s1
))) \

1124 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1125 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1126 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1127 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1128 (c⁄° *Ë(
s2
), \

1129 
	`°æí
 (
s2
)) \

1130 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s2
))) \

1133 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1135 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1136 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1137 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1139 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1140 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1142 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1143 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1144 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1147 
__ªsu…
; }))

	)

1149 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1150 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1151 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1152 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1154 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1155 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1157 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1158 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1159 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1162 
__ªsu…
; }))

	)

1164 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1165 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1166 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1167 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1169 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1170 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1172 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1173 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1174 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1177 
__ªsu…
; }))

	)

1179 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1181 
__STRING_INLINE
 

1182 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1184 
__ªs
;

1185 
__asm__
 
__vﬁ©ûe__


1201 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1202 : "1" (
__s1
), "2" (
__s2
),

1203 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1204 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1206  
__ªs
;

1207 
	}
}

1211 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1212 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1213 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1214 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1215 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1216 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1217 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1219 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1220 
size_t
 
__n
);

1222 
__STRING_INLINE
 

1223 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1225 
__ªs
;

1226 
__asm__
 
__vﬁ©ûe__


1245 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1246 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1247 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1248 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1250  
__ªs
;

1251 
	}
}

1255 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1256 
	#_USE_STRING_ARCH_°rchr
 1

	)

1257 
	#°rchr
(
s
, 
c
) \

1258 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1259 ? ((
c
) == '\0' \

1260 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1261 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1262 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1264 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1266 
__STRING_INLINE
 *

1267 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1269 
__d0
;

1270 *
__ªs
;

1271 
__asm__
 
__vﬁ©ûe__


1281 : "Ù" (
__ªs
), "=&a" (
__d0
)

1282 : "0" (
__s
), "1" (
__c
),

1283 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1285  
__ªs
;

1286 
	}
}

1288 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1290 
__STRING_INLINE
 *

1291 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1293 
__d0
;

1294 *
__ªs
;

1295 
__asm__
 
__vﬁ©ûe__


1306 : "Ù" (
__ªs
), "=&a" (
__d0
)

1307 : "0" (
__s
), "1" (
__c
),

1308 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1310  
__ªs
;

1311 
	}
}

1315 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1316 
	#__°rch∫ul
(
s
, 
c
) \

1317 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1318 ? ((
c
) == '\0' \

1319 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1320 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1321 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1323 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1325 
__STRING_INLINE
 *

1326 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1328 
__d0
;

1329 *
__ªs
;

1330 
__asm__
 
__vﬁ©ûe__


1340 : "Ù" (
__ªs
), "=&a" (
__d0
)

1341 : "0" (
__s
), "1" (
__c
),

1342 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1344  
__ªs
;

1345 
	}
}

1347 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1349 
__STRING_INLINE
 *

1350 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1352 
__d0
;

1353 *
__ªs
;

1354 
__asm__
 
__vﬁ©ûe__


1365 : "Ù" (
__ªs
), "=&a" (
__d0
)

1366 : "0" (
__s
), "1" (
__c
),

1367 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1369  
__ªs
;

1370 
	}
}

1371 #ifde‡
__USE_GNU


1372 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1376 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1378 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1379 
	#ödex
(
s
, 
c
) \

1380 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1381 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1382 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1387 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1388 
	#°ºchr
(
s
, 
c
) \

1389 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1390 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1391 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1393 #ifde‡
__i686__


1394 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1396 
__STRING_INLINE
 *

1397 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1399 
__d0
, 
__d1
;

1400 *
__ªs
;

1401 
__asm__
 
__vﬁ©ûe__


1409 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1410 : "0" (1), "1" (
__s
), "2" (
__c
),

1411 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1413  
__ªs
 - 1;

1414 
	}
}

1416 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1418 
__STRING_INLINE
 *

1419 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1421 
__d0
, 
__d1
;

1422 *
__ªs
;

1423 
__asm__
 
__vﬁ©ûe__


1432 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1433 : "0" (1), "1" (
__s
), "2" (
__c
),

1434 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1436  
__ªs
 - 1;

1437 
	}
}

1439 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1441 
__STRING_INLINE
 *

1442 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1444 
__d0
, 
__d1
;

1445 *
__ªs
;

1446 
__asm__
 
__vﬁ©ûe__


1456 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1457 : "0" (0), "1" (
__s
), "2" (
__c
),

1458 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1460  
__ªs
;

1461 
	}
}

1463 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1465 
__STRING_INLINE
 *

1466 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1468 
__d0
, 
__d1
;

1469 *
__ªs
;

1470 
__asm__
 
__vﬁ©ûe__


1481 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1482 : "0" (0), "1" (
__s
), "2" (
__c
),

1483 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1485  
__ªs
;

1486 
	}
}

1490 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1492 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1493 
	#rödex
(
s
, 
c
) \

1494 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1495 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1496 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1502 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1503 
	#°rc•n
(
s
, 
ªje˘
) \

1504 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1505 ? ((
ªje˘
)[0] == '\0' \

1506 ? 
	`°æí
 (
s
) \

1507 : ((
ªje˘
)[1] == '\0' \

1508 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1509 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1510 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1512 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1514 #i‚de‡
_FORCE_INLINES


1515 
__STRING_INLINE
 
size_t


1516 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1518 
__d0
;

1519 *
__ªs
;

1520 
__asm__
 
__vﬁ©ûe__


1529 : "Ù" (
__ªs
), "=&a" (
__d0
)

1530 : "0" (
__s
), "1" (
__ªje˘
),

1531 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1533  (
__ªs
 - 1Ë- 
__s
;

1534 
	}
}

1537 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1538 
size_t
 
__ªje˘_Àn
);

1540 
__STRING_INLINE
 
size_t


1541 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1543 
__d0
, 
__d1
, 
__d2
;

1544 c⁄° *
__ªs
;

1545 
__asm__
 
__vﬁ©ûe__


1556 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1557 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1559  (
__ªs
 - 1Ë- 
__s
;

1560 
	}
}

1562 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1563 #ifde‡
__PIC__


1565 
__STRING_INLINE
 
size_t


1566 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1568 
__d0
, 
__d1
, 
__d2
;

1569 c⁄° *
__ªs
;

1570 
__asm__
 
__vﬁ©ûe__


1587 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1588 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1590  (
__ªs
 - 1Ë- 
__s
;

1591 
	}
}

1593 
__STRING_INLINE
 
size_t


1594 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1596 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1597 c⁄° *
__ªs
;

1598 
__asm__
 
__vﬁ©ûe__


1612 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1613 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1616  (
__ªs
 - 1Ë- 
__s
;

1617 
	}
}

1623 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1624 
	#°r•n
(
s
, 
ac˚±
) \

1625 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1626 ? ((
ac˚±
)[0] == '\0' \

1627 ? ((Ë(
s
), 0) \

1628 : ((
ac˚±
)[1] == '\0' \

1629 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1630 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1631 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1633 #i‚de‡
_FORCE_INLINES


1634 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1636 
__STRING_INLINE
 
size_t


1637 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1639 
__d0
;

1640 *
__ªs
;

1642 
__asm__
 
__vﬁ©ûe__


1648 : "Ù" (
__ªs
), "=&q" (
__d0
)

1649 : "0" (
__s
), "1" (
__ac˚±
),

1650 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1652  (
__ªs
 - 1Ë- 
__s
;

1653 
	}
}

1656 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1657 
size_t
 
__ac˚±_Àn
);

1659 
__STRING_INLINE
 
size_t


1660 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1662 
__d0
, 
__d1
, 
__d2
;

1663 c⁄° *
__ªs
;

1664 
__asm__
 
__vﬁ©ûe__


1675 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1676 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1679 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1680 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1682  (
__ªs
 - 1Ë- 
__s
;

1683 
	}
}

1685 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1686 #ifde‡
__PIC__


1688 
__STRING_INLINE
 
size_t


1689 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1691 
__d0
, 
__d1
, 
__d2
;

1692 c⁄° *
__ªs
;

1693 
__asm__
 
__vﬁ©ûe__


1709 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1710 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1712  (
__ªs
 - 1Ë- 
__s
;

1713 
	}
}

1715 
__STRING_INLINE
 
size_t


1716 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1718 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1719 c⁄° *
__ªs
;

1720 
__asm__
 
__vﬁ©ûe__


1734 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1735 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1737  (
__ªs
 - 1Ë- 
__s
;

1738 
	}
}

1743 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1744 
	#°Ωbrk
(
s
, 
ac˚±
) \

1745 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1746 ? ((
ac˚±
)[0] == '\0' \

1747 ? ((Ë(
s
), (*) 0) \

1748 : ((
ac˚±
)[1] == '\0' \

1749 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1750 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1751 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1753 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1754 
size_t
 
__ac˚±_Àn
);

1756 
__STRING_INLINE
 *

1757 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1759 
__d0
, 
__d1
, 
__d2
;

1760 *
__ªs
;

1761 
__asm__
 
__vﬁ©ûe__


1776 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1777 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1779  
__ªs
;

1780 
	}
}

1782 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1783 #ifde‡
__PIC__


1785 
__STRING_INLINE
 *

1786 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1788 
__d0
, 
__d1
, 
__d2
;

1789 *
__ªs
;

1790 
__asm__
 
__vﬁ©ûe__


1811 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1812 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1814  
__ªs
;

1815 
	}
}

1817 
__STRING_INLINE
 *

1818 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1820 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1821 *
__ªs
;

1822 
__asm__
 
__vﬁ©ûe__


1841 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1842 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1844  
__ªs
;

1845 
	}
}

1850 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1851 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1852 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1853 ? ((
√edÀ
)[0] == '\0' \

1854 ? (
hay°ack
) \

1855 : ((
√edÀ
)[1] == '\0' \

1856 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1857 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1858 
	`°æí
 (
√edÀ
)))) \

1859 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1863 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1864 c⁄° 
__√edÀ
[],

1865 
size_t
 
__√edÀ_Àn
);

1867 
__STRING_INLINE
 *

1868 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1869 
size_t
 
__√edÀ_Àn
)

1871 
__d0
, 
__d1
, 
__d2
;

1872 *
__ªs
;

1873 
__asm__
 
__vﬁ©ûe__


1886 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1887 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1889  
__ªs
;

1890 
	}
}

1892 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1893 c⁄° *
__√edÀ
);

1894 #ifde‡
__PIC__


1896 
__STRING_INLINE
 *

1897 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1899 
__d0
, 
__d1
, 
__d2
;

1900 *
__ªs
;

1901 
__asm__
 
__vﬁ©ûe__


1920 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1921 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1922 "d" (
__√edÀ
)

1924  
__ªs
;

1925 
	}
}

1927 
__STRING_INLINE
 *

1928 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1930 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1931 *
__ªs
;

1932 
__asm__
 
__vﬁ©ûe__


1949 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1950 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1951 "b" (
__√edÀ
)

1953  
__ªs
;

1954 
	}
}

1960 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1961 #ifde‡
__i686__


1962 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1963 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1964 ? 
	`__buûtö_ffs
 (
w‹d
) \

1965 : ({ 
__˙t
, 
__tmp
; \

1966 
__asm__
 
__vﬁ©ûe__
 \

1969 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1970 : "rm" (
w‹d
), "1" (-1)); \

1971 
__˙t
 + 1; }))

	)

1973 #i‚de‡
ff¶


1974 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1979 #i‚de‡
_FORCE_INLINES


1980 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_ARCH_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_ARCH_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_ARCH_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_ARCH_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_ARCH_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), 
__s2_Àn
 = __buûtö_°æí (
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`__buûtö_°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
Ë(- 
	`__°rcmp_cg
 (s2, s1,Ü2))

	)

895 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


896 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

897 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

898 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

899 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

900 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

901 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

902 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

908 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


909 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


910 #i‡
__GNUC_PREREQ
 (3, 2)

911 
	#°rc•n
(
s
, 
ªje˘
) \

912 
__exãnsi⁄__
 \

913 ({ 
__r0
, 
__r1
, 
__r2
; \

914 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

915 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

916 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

917 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

918 ? 
	`°æí
 (
s
) \

919 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

920 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

921 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

922 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

923 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

924 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

925 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

926 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

928 
	#°rc•n
(
s
, 
ªje˘
) \

929 
__exãnsi⁄__
 \

930 ({ 
__r0
, 
__r1
, 
__r2
; \

931 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

932 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

933 ? 
	`°æí
 (
s
) \

934 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

935 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

936 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

937 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

938 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

939 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

940 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

941 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

945 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

946 
__STRING_INLINE
 
size_t


947 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

949 
size_t
 
__ªsu…
 = 0;

950 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

951 ++
__ªsu…
;

952  
__ªsu…
;

953 
	}
}

955 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

956 
__ªje˘2
);

957 
__STRING_INLINE
 
size_t


958 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

960 
size_t
 
__ªsu…
 = 0;

961 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


962 && 
__s
[
__ªsu…
] !
__ªje˘2
)

963 ++
__ªsu…
;

964  
__ªsu…
;

965 
	}
}

967 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

968 
__ªje˘2
, 
__ªje˘3
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

971 
__ªje˘3
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


975 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

976 ++
__ªsu…
;

977  
__ªsu…
;

978 
	}
}

984 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


985 #i‚de‡
_HAVE_STRING_ARCH_°r•n


986 #i‡
__GNUC_PREREQ
 (3, 2)

987 
	#°r•n
(
s
, 
ac˚±
) \

988 
__exãnsi⁄__
 \

989 ({ 
__a0
, 
__a1
, 
__a2
; \

990 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

991 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

992 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

993 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

994 ? ((Ë(
s
), (
size_t
) 0) \

995 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

996 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

997 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

998 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

999 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1000 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1001 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1002 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1004 
	#°r•n
(
s
, 
ac˚±
) \

1005 
__exãnsi⁄__
 \

1006 ({ 
__a0
, 
__a1
, 
__a2
; \

1007 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1008 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1009 ? ((Ë(
s
), (
size_t
) 0) \

1010 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1011 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1012 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1013 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1014 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1015 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1016 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1017 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1021 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1022 
__STRING_INLINE
 
size_t


1023 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1025 
size_t
 
__ªsu…
 = 0;

1027 
__s
[
__ªsu…
] =
__ac˚±
)

1028 ++
__ªsu…
;

1029  
__ªsu…
;

1030 
	}
}

1032 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1033 
__ac˚±2
);

1034 
__STRING_INLINE
 
size_t


1035 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1037 
size_t
 
__ªsu…
 = 0;

1039 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1040 ++
__ªsu…
;

1041  
__ªsu…
;

1042 
	}
}

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1045 
__ac˚±2
, 
__ac˚±3
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1052 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1053 ++
__ªsu…
;

1054  
__ªsu…
;

1055 
	}
}

1060 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1061 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1062 #i‡
__GNUC_PREREQ
 (3, 2)

1063 
	#°Ωbrk
(
s
, 
ac˚±
) \

1064 
__exãnsi⁄__
 \

1065 ({ 
__a0
, 
__a1
, 
__a2
; \

1066 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1067 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1068 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1069 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1070 ? ((Ë(
s
), (*Ë
NULL
) \

1071 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1072 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1073 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1074 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1075 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1076 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1077 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1078 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1080 
	#°Ωbrk
(
s
, 
ac˚±
) \

1081 
__exãnsi⁄__
 \

1082 ({ 
__a0
, 
__a1
, 
__a2
; \

1083 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1084 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1085 ? ((Ë(
s
), (*Ë
NULL
) \

1086 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1087 ? 
	`°rchr
 (
s
, 
__a0
) \

1088 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1089 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1090 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1091 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1092 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1093 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1097 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1098 
__ac˚±2
);

1099 
__STRING_INLINE
 *

1100 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1103 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1104 ++
__s
;

1105  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1106 
	}
}

1108 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1109 
__ac˚±2
, 
__ac˚±3
);

1110 
__STRING_INLINE
 *

1111 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1114 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1115 && *
__s
 !
__ac˚±3
)

1116 ++
__s
;

1117  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1118 
	}
}

1124 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1125 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1126 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1127 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1128 ? (*Ë(
size_t
Ë(
hay°ack
) \

1129 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1130 ? 
	`°rchr
 (
hay°ack
, \

1131 ((c⁄° *Ë(
√edÀ
))[0]) \

1132 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1133 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1137 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1138 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1139 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1140 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1141 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1142 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1143 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1144 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1147 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1148 
__STRING_INLINE
 *

1149 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1151 *
__ªsu…
;

1152 i‡(
__s
 =
NULL
)

1153 
__s
 = *
__√xç
;

1154 *
__s
 =
__£p
)

1155 ++
__s
;

1156 
__ªsu…
 = 
NULL
;

1157 i‡(*
__s
 != '\0')

1159 
__ªsu…
 = 
__s
++;

1160 *
__s
 != '\0')

1161 i‡(*
__s
++ =
__£p
)

1163 
__s
[-1] = '\0';

1167 *
__√xç
 = 
__s
;

1168  
__ªsu…
;

1169 
	}
}

1170 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1171 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1176 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1177 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1179 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1180 
	#__°r£p
(
s
, 
ªje˘
) \

1181 
__exãnsi⁄__
 \

1182 ({ 
__r0
, 
__r1
, 
__r2
; \

1183 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1184 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1185 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1186 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1187 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1188 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1189 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1190 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1191 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1192 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1193 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1194 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1197 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1198 
__STRING_INLINE
 *

1199 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1201 *
__ªtvÆ
 = *
__s
;

1202 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1203 *(*
__s
)++ = '\0';

1204  
__ªtvÆ
;

1205 
	}
}

1207 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1208 
__STRING_INLINE
 *

1209 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1211 *
__ªtvÆ
 = *
__s
;

1212 i‡(
__ªtvÆ
 !
NULL
)

1214 *
__˝
 = 
__ªtvÆ
;

1217 i‡(*
__˝
 == '\0')

1219 
__˝
 = 
NULL
;

1222 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1224 *
__˝
++ = '\0';

1227 ++
__˝
;

1229 *
__s
 = 
__˝
;

1231  
__ªtvÆ
;

1232 
	}
}

1234 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1235 
__ªje˘3
);

1236 
__STRING_INLINE
 *

1237 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1239 *
__ªtvÆ
 = *
__s
;

1240 i‡(
__ªtvÆ
 !
NULL
)

1242 *
__˝
 = 
__ªtvÆ
;

1245 i‡(*
__˝
 == '\0')

1247 
__˝
 = 
NULL
;

1250 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1252 *
__˝
++ = '\0';

1255 ++
__˝
;

1257 *
__s
 = 
__˝
;

1259  
__ªtvÆ
;

1260 
	}
}

1261 #ifde‡
__USE_BSD


1262 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1269 #ifde‡
__USE_MISC


1271 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1272 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1273 
	~<°dlib.h
>

1276 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1278 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1279 
	#__°rdup
(
s
) \

1280 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1281 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1282 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1283 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1284 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1285 i‡(
__ªtvÆ
 !
NULL
) \

1286 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1287 
__ªtvÆ
; 
	}
})) \

1288 : 
	`__°rdup
 (
s
)))

	)

1290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1291 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1295 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1297 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1298 
__THROW
 
__©åibuã_mÆloc__
;

1299 
	#__°∫dup
(
s
, 
n
) \

1300 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1301 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1302 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1303 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1304 
size_t
 
__n
 = (
n
); \

1305 *
__ªtvÆ
; \

1306 i‡(
__n
 < 
__Àn
) \

1307 
__Àn
 = 
__n
 + 1; \

1308 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1309 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1312 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1313 
__Àn
 - 1); \

1315 
__ªtvÆ
; 
	}
})) \

1316 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1318 #ifde‡
__USE_GNU


1319 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1325 #i‚de‡
_FORCE_INLINES


1326 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

25 #i‚de‡
__˝lu•lus


29 #unde‡
mem˝y


30 #unde‡
memmove


31 #unde‡
mem£t


32 #unde‡
°rˇt


33 #unde‡
°r˝y


34 #unde‡
°∫ˇt


35 #unde‡
°∫˝y


36 #ifde‡
__USE_GNU


37 #unde‡
memp˝y


38 #unde‡
°p˝y


40 #ifde‡
__USE_BSD


41 #unde‡
bc›y


42 #unde‡
bzîo


47 
__f‹tify_fun˘i⁄
 *

48 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

49 
size_t
 
__Àn
))

51  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

52 
	}
}

54 
__f‹tify_fun˘i⁄
 *

55 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

57  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

58 
	}
}

60 #ifde‡
__USE_GNU


61 
__f‹tify_fun˘i⁄
 *

62 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

63 
size_t
 
__Àn
))

65  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

66 
	}
}

75 
__f‹tify_fun˘i⁄
 *

76 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

79 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

81 
	`__w¨n_mem£t_zîo_Àn
 ();

82  
__de°
;

84  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

85 
	}
}

87 #ifde‡
__USE_BSD


88 
__f‹tify_fun˘i⁄
 

89 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

91 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

92 
	}
}

94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

101 
__f‹tify_fun˘i⁄
 *

102 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

104  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

105 
	}
}

107 #ifde‡
__USE_GNU


108 
__f‹tify_fun˘i⁄
 *

109 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

111  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

112 
	}
}

116 
__f‹tify_fun˘i⁄
 *

117 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

118 
size_t
 
__Àn
))

120  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

121 
	}
}

124 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

125 
size_t
 
__de°Àn
Ë
__THROW
;

126 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

127 
size_t
 
__n
), 
°≤˝y
);

129 
__f‹tify_fun˘i⁄
 *

130 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

132 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

133 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

134  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

135  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

136 
	}
}

139 
__f‹tify_fun˘i⁄
 *

140 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

142  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

143 
	}
}

146 
__f‹tify_fun˘i⁄
 *

147 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

148 
size_t
 
__Àn
))

150  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

151 
	}
}

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

101 #unde‡
__USE_ISOC11


102 #unde‡
__USE_ISOC99


103 #unde‡
__USE_ISOC95


104 #unde‡
__USE_ISOCXX11


105 #unde‡
__USE_POSIX


106 #unde‡
__USE_POSIX2


107 #unde‡
__USE_POSIX199309


108 #unde‡
__USE_POSIX199506


109 #unde‡
__USE_XOPEN


110 #unde‡
__USE_XOPEN_EXTENDED


111 #unde‡
__USE_UNIX98


112 #unde‡
__USE_XOPEN2K


113 #unde‡
__USE_XOPEN2KXSI


114 #unde‡
__USE_XOPEN2K8


115 #unde‡
__USE_XOPEN2K8XSI


116 #unde‡
__USE_LARGEFILE


117 #unde‡
__USE_LARGEFILE64


118 #unde‡
__USE_FILE_OFFSET64


119 #unde‡
__USE_BSD


120 #unde‡
__USE_SVID


121 #unde‡
__USE_MISC


122 #unde‡
__USE_ATFILE


123 #unde‡
__USE_GNU


124 #unde‡
__USE_REENTRANT


125 #unde‡
__USE_FORTIFY_LEVEL


126 #unde‡
__KERNEL_STRICT_NAMES


130 #i‚de‡
_LOOSE_KERNEL_NAMES


131 
	#__KERNEL_STRICT_NAMES


	)

141 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


142 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

143 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

145 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

150 #ifde‡
_GNU_SOURCE


151 #unde‡
_ISOC95_SOURCE


152 
	#_ISOC95_SOURCE
 1

	)

153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_ISOC11_SOURCE


156 
	#_ISOC11_SOURCE
 1

	)

157 #unde‡
_POSIX_SOURCE


158 
	#_POSIX_SOURCE
 1

	)

159 #unde‡
_POSIX_C_SOURCE


160 
	#_POSIX_C_SOURCE
 200809L

	)

161 #unde‡
_XOPEN_SOURCE


162 
	#_XOPEN_SOURCE
 700

	)

163 #unde‡
_XOPEN_SOURCE_EXTENDED


164 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

165 #unde‡
_LARGEFILE64_SOURCE


166 
	#_LARGEFILE64_SOURCE
 1

	)

167 #unde‡
_DEFAULT_SOURCE


168 
	#_DEFAULT_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
 \

184 && !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
))

185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

187 #unde‡
_BSD_SOURCE


188 
	#_BSD_SOURCE
 1

	)

189 #unde‡
_SVID_SOURCE


190 
	#_SVID_SOURCE
 1

	)

194 #i‡(
deföed
 
_ISOC11_SOURCE
 \

195 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

196 
	#__USE_ISOC11
 1

	)

200 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

201 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

202 
	#__USE_ISOC99
 1

	)

206 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

207 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

208 
	#__USE_ISOC95
 1

	)

215 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

216 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

217 
	#__USE_ISOCXX11
 1

	)

223 #ifde‡
_DEFAULT_SOURCE


224 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


225 
	#__USE_POSIX_IMPLICITLY
 1

	)

227 #unde‡
_POSIX_SOURCE


228 
	#_POSIX_SOURCE
 1

	)

229 #unde‡
_POSIX_C_SOURCE


230 
	#_POSIX_C_SOURCE
 200809L

	)

232 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

233 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

234 
	#_POSIX_SOURCE
 1

	)

235 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

236 
	#_POSIX_C_SOURCE
 2

	)

237 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

238 
	#_POSIX_C_SOURCE
 199506L

	)

239 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

240 
	#_POSIX_C_SOURCE
 200112L

	)

242 
	#_POSIX_C_SOURCE
 200809L

	)

244 
	#__USE_POSIX_IMPLICITLY
 1

	)

247 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


248 
	#__USE_POSIX
 1

	)

251 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


252 
	#__USE_POSIX2
 1

	)

255 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

256 
	#__USE_POSIX199309
 1

	)

259 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

260 
	#__USE_POSIX199506
 1

	)

263 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

264 
	#__USE_XOPEN2K
 1

	)

265 #unde‡
__USE_ISOC95


266 
	#__USE_ISOC95
 1

	)

267 #unde‡
__USE_ISOC99


268 
	#__USE_ISOC99
 1

	)

271 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

272 
	#__USE_XOPEN2K8
 1

	)

273 #unde‡
_ATFILE_SOURCE


274 
	#_ATFILE_SOURCE
 1

	)

277 #ifdef 
_XOPEN_SOURCE


278 
	#__USE_XOPEN
 1

	)

279 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

280 
	#__USE_XOPEN_EXTENDED
 1

	)

281 
	#__USE_UNIX98
 1

	)

282 #unde‡
_LARGEFILE_SOURCE


283 
	#_LARGEFILE_SOURCE
 1

	)

284 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

286 
	#__USE_XOPEN2K8
 1

	)

287 
	#__USE_XOPEN2K8XSI
 1

	)

289 
	#__USE_XOPEN2K
 1

	)

290 
	#__USE_XOPEN2KXSI
 1

	)

291 #unde‡
__USE_ISOC95


292 
	#__USE_ISOC95
 1

	)

293 #unde‡
__USE_ISOC99


294 
	#__USE_ISOC99
 1

	)

297 #ifde‡
_XOPEN_SOURCE_EXTENDED


298 
	#__USE_XOPEN_EXTENDED
 1

	)

303 #ifde‡
_LARGEFILE_SOURCE


304 
	#__USE_LARGEFILE
 1

	)

307 #ifde‡
_LARGEFILE64_SOURCE


308 
	#__USE_LARGEFILE64
 1

	)

311 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

312 
	#__USE_FILE_OFFSET64
 1

	)

315 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


316 
	#__USE_MISC
 1

	)

319 #ifdef 
_BSD_SOURCE


320 
	#__USE_BSD
 1

	)

323 #ifdef 
_SVID_SOURCE


324 
	#__USE_SVID
 1

	)

327 #ifdef 
_ATFILE_SOURCE


328 
	#__USE_ATFILE
 1

	)

331 #ifdef 
_GNU_SOURCE


332 
	#__USE_GNU
 1

	)

335 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


336 
	#__USE_REENTRANT
 1

	)

339 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

340 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

341 #i‡
_FORTIFY_SOURCE
 > 1

342 
	#__USE_FORTIFY_LEVEL
 2

	)

344 
	#__USE_FORTIFY_LEVEL
 1

	)

347 
	#__USE_FORTIFY_LEVEL
 0

	)

352 
	~<°dc-¥edef.h
>

360 #unde‡
__GNU_LIBRARY__


361 
	#__GNU_LIBRARY__
 6

	)

365 
	#__GLIBC__
 2

	)

366 
	#__GLIBC_MINOR__
 19

	)

368 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

369 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

372 #i‚de‡
__ASSEMBLER__


373 #i‚de‡
_SYS_CDEFS_H


374 
	~<sys/cdefs.h
>

379 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


380 
	#__USE_LARGEFILE
 1

	)

381 
	#__USE_LARGEFILE64
 1

	)

387 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

388 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

389 && 
deföed
 
	g__exã∫_ölöe


390 
	#__USE_EXTERN_INLINES
 1

	)

398 
	~<gnu/°ubs.h
>

	@/usr/include/linux/hdlc/ioctl.h

1 #i‚de‡
__HDLC_IOCTL_H__


2 
	#__HDLC_IOCTL_H__


	)

5 
	#GENERIC_HDLC_VERSION
 4

	)

7 
	#CLOCK_DEFAULT
 0

	)

8 
	#CLOCK_EXT
 1

	)

9 
	#CLOCK_INT
 2

	)

10 
	#CLOCK_TXINT
 3

	)

11 
	#CLOCK_TXFROMRX
 4

	)

14 
	#ENCODING_DEFAULT
 0

	)

15 
	#ENCODING_NRZ
 1

	)

16 
	#ENCODING_NRZI
 2

	)

17 
	#ENCODING_FM_MARK
 3

	)

18 
	#ENCODING_FM_SPACE
 4

	)

19 
	#ENCODING_MANCHESTER
 5

	)

22 
	#PARITY_DEFAULT
 0

	)

23 
	#PARITY_NONE
 1

	)

24 
	#PARITY_CRC16_PR0
 2

	)

25 
	#PARITY_CRC16_PR1
 3

	)

26 
	#PARITY_CRC16_PR0_CCITT
 4

	)

27 
	#PARITY_CRC16_PR1_CCITT
 5

	)

28 
	#PARITY_CRC32_PR0_CCITT
 6

	)

29 
	#PARITY_CRC32_PR1_CCITT
 7

	)

31 
	#LMI_DEFAULT
 0

	)

32 
	#LMI_NONE
 1

	)

33 
	#LMI_ANSI
 2

	)

34 
	#LMI_CCITT
 3

	)

35 
	#LMI_CISCO
 4

	)

37 #i‚de‡
__ASSEMBLY__


40 
	m˛ock_øã
;

41 
	m˛ock_ty≥
;

42 
	mlo›back
;

43 } 
	tsync_£rül_£âögs
;

46 
	m˛ock_øã
;

47 
	m˛ock_ty≥
;

48 
	mlo›back
;

49 
	m¶Ÿ_m≠
;

50 } 
	tã1_£âögs
;

53 
	mícodög
;

54 
	m∑rôy
;

55 } 
	tøw_hdlc_¥Ÿo
;

58 
	mt391
;

59 
	mt392
;

60 
	mn391
;

61 
	mn392
;

62 
	mn393
;

63 
	mlmi
;

64 
	md˚
;

65 } 
	t‰_¥Ÿo
;

68 
	mdlci
;

69 } 
	t‰_¥Ÿo_pvc
;

72 
	mdlci
;

73 
	mma°î
[
IFNAMSIZ
];

74 }
	t‰_¥Ÿo_pvc_öfo
;

77 
	möãrvÆ
;

78 
	mtimeout
;

79 } 
	tcisco_¥Ÿo
;

	@/usr/include/linux/stddef.h

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm/posix_types_32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_32_H


2 
	#_ASM_X86_POSIX_TYPES_32_H


	)

10 
	t__kî√l_mode_t
;

11 
	#__kî√l_mode_t
 
__kî√l_mode_t


	)

13 
	t__kî√l_ùc_pid_t
;

14 
	#__kî√l_ùc_pid_t
 
__kî√l_ùc_pid_t


	)

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	#__kî√l_uid_t
 
__kî√l_uid_t


	)

20 
	t__kî√l_ﬁd_dev_t
;

21 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

23 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_64.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_64_H


2 
	#_ASM_X86_POSIX_TYPES_64_H


	)

10 
	t__kî√l_ﬁd_uid_t
;

11 
	t__kî√l_ﬁd_gid_t
;

12 
	#__kî√l_ﬁd_uid_t
 
__kî√l_ﬁd_uid_t


	)

14 
	t__kî√l_ﬁd_dev_t
;

15 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

17 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_x32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_X32_H


2 
	#_ASM_X86_POSIX_TYPES_X32_H


	)

13 
	t__kî√l_l⁄g_t
;

14 
	t__kî√l_ul⁄g_t
;

15 
	#__kî√l_l⁄g_t
 
__kî√l_l⁄g_t


	)

17 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 
	#__STDC_ISO_10646__
 201103L

	)

57 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_BSD


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
) (const *, const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

759 #ifde‡
__USE_EXTERN_INLINES


760 
	~<bôs/°dlib-b£¨ch.h
>

765 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

766 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

767 #ifde‡
__USE_GNU


768 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

769 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

770 
	`__n⁄nuŒ
 ((1, 4));

775 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

777 
__END_NAMESPACE_STD


779 #ifde‡
__USE_ISOC99


780 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

785 
__BEGIN_NAMESPACE_STD


789 
div_t
 
	$div
 (
__numî
, 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

792 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

793 
__END_NAMESPACE_STD


795 #ifde‡
__USE_ISOC99


796 
__BEGIN_NAMESPACE_C99


797 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

798 
__díom
)

799 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

800 
__END_NAMESPACE_C99


804 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

805 || 
deföed
 
__USE_SVID


812 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

813 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

818 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

819 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

824 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

828 #ifde‡
__USE_MISC


830 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

831 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

833 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

834 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

835 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

836 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

837 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

842 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

843 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

844 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

846 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

847 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

853 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

854 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

855 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

856 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

860 
__BEGIN_NAMESPACE_STD


863 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

866 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

867 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

870 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

874 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

875 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

877 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

878 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

879 
__THROW
;

880 
__END_NAMESPACE_STD


883 #ifde‡
__USE_SVID


888 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


899 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

900 *c⁄° *
__ª°ri˘
 
__tokís
,

901 **
__ª°ri˘
 
__vÆuï
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

906 #ifde‡
__USE_XOPEN


908 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

914 #ifde‡
__USE_XOPEN2KXSI


916 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

919 #ifde‡
__USE_XOPEN


924 
	$gø¡±
 (
__fd
Ë
__THROW
;

928 
	$u∆ock±
 (
__fd
Ë
__THROW
;

933 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

936 #ifde‡
__USE_GNU


940 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

941 
__THROW
 
	`__n⁄nuŒ
 ((2));

944 
	`gë±
 ();

947 #ifde‡
__USE_BSD


951 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

955 
	~<bôs/°dlib-Êﬂt.h
>

958 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


959 
	~<bôs/°dlib.h
>

961 #ifde‡
__LDBL_COMPAT


962 
	~<bôs/°dlib-ldbl.h
>

966 #unde‡
__√ed_mÆloc_™d_ˇŒoc


968 
__END_DECLS


	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

134 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

136 #i‡
__GNUC_PREREQ
 (4,3)

137 
	#__w¨nde˛
(
«me
, 
msg
) \

138 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

139 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

140 
	#__îr‹de˛
(
«me
, 
msg
) \

141 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

143 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

144 
	#__w¨«âr
(
msg
)

	)

145 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

149 #i‡
__GNUC_PREREQ
 (2,97)

151 
	#__Êex¨r
 []

	)

153 #ifde‡
__GNUC__


154 
	#__Êex¨r
 [0]

	)

156 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

157 
	#__Êex¨r
 []

	)

160 
	#__Êex¨r
 [1]

	)

176 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

178 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

179 #ifde‡
__˝lu•lus


180 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

181 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

185 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

186 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

187 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

188 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

190 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

191 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

204 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

205 
	#__©åibuã__
(
xyz
Ë

	)

211 #i‡
__GNUC_PREREQ
 (2,96)

212 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

214 
	#__©åibuã_mÆloc__


	)

219 #i‡
__GNUC_PREREQ
 (4, 3)

220 
	#__©åibuã_Æloc_size__
(
∑øms
) \

221 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

223 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

229 #i‡
__GNUC_PREREQ
 (2,96)

230 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

232 
	#__©åibuã_puª__


	)

236 #i‡
__GNUC_PREREQ
 (2,5)

237 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

239 
	#__©åibuã_c⁄°__


	)

245 #i‡
__GNUC_PREREQ
 (3,1)

246 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

247 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

249 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

250 
	#__©åibuã_noölöe__


	)

254 #i‡
__GNUC_PREREQ
 (3,2)

255 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

257 
	#__©åibuã_dïªˇãd__


	)

266 #i‡
__GNUC_PREREQ
 (2,8)

267 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

269 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

276 #i‡
__GNUC_PREREQ
 (2,97)

277 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

278 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

280 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

285 #i‡
__GNUC_PREREQ
 (3,3)

286 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

288 
	#__n⁄nuŒ
(
∑øms
)

	)

293 #i‡
__GNUC_PREREQ
 (3,4)

294 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

295 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

296 #i‡
__USE_FORTIFY_LEVEL
 > 0

297 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

300 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

302 #i‚de‡
__wur


303 
	#__wur


	)

307 #i‡
__GNUC_PREREQ
 (3,2)

308 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

310 
	#__Æways_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

318 
	#__©åibuã_¨tificül__


	)

321 #ifde‡
__GNUC__


326 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__GNUC_GNU_INLINE__


327 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

328 
	#__exã∫_Æways_ölöe
 \

329 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

331 
	#__exã∫_ölöe
 
__ölöe


	)

332 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

335 
	#__exã∫_ölöe


	)

336 
	#__exã∫_Æways_ölöe


	)

341 #i‡
__GNUC_PREREQ
 (4,3)

342 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

343 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

350 #i‡!
__GNUC_PREREQ
 (2,8)

351 
	#__exãnsi⁄__


	)

355 #i‡!
__GNUC_PREREQ
 (2,92)

356 
	#__ª°ri˘


	)

362 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


363 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

365 #ifde‡
__GNUC__


366 
	#__ª°ri˘_¨r


	)

368 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

369 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

372 
	#__ª°ri˘_¨r


	)

377 #i‡
__GNUC__
 >= 3

378 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

379 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

381 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

382 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

385 
	~<bôs/w‹dsize.h
>

387 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


388 
	#__LDBL_COMPAT
 1

	)

389 #ifde‡
__REDIRECT


390 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

391 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

392 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

393 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

394 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

395 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

396 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

397 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

398 
	#__LDBL_REDIR_DECL
(
«me
) \

399 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

400 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

401 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

402 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

403 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

406 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


407 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

408 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

409 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

410 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

411 
	#__LDBL_REDIR_DECL
(
«me
)

	)

412 #ifde‡
__REDIRECT


413 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

414 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

415 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/asm-generic/posix_types.h

1 #i‚de‡
__ASM_GENERIC_POSIX_TYPES_H


2 
	#__ASM_GENERIC_POSIX_TYPES_H


	)

4 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__kî√l_l⁄g_t


14 
	t__kî√l_l⁄g_t
;

15 
	t__kî√l_ul⁄g_t
;

18 #i‚de‡
__kî√l_öo_t


19 
__kî√l_ul⁄g_t
 
	t__kî√l_öo_t
;

22 #i‚de‡
__kî√l_mode_t


23 
	t__kî√l_mode_t
;

26 #i‚de‡
__kî√l_pid_t


27 
	t__kî√l_pid_t
;

30 #i‚de‡
__kî√l_ùc_pid_t


31 
	t__kî√l_ùc_pid_t
;

34 #i‚de‡
__kî√l_uid_t


35 
	t__kî√l_uid_t
;

36 
	t__kî√l_gid_t
;

39 #i‚de‡
__kî√l_su£c⁄ds_t


40 
__kî√l_l⁄g_t
 
	t__kî√l_su£c⁄ds_t
;

43 #i‚de‡
__kî√l_daddr_t


44 
	t__kî√l_daddr_t
;

47 #i‚de‡
__kî√l_uid32_t


48 
	t__kî√l_uid32_t
;

49 
	t__kî√l_gid32_t
;

52 #i‚de‡
__kî√l_ﬁd_uid_t


53 
__kî√l_uid_t
 
	t__kî√l_ﬁd_uid_t
;

54 
__kî√l_gid_t
 
	t__kî√l_ﬁd_gid_t
;

57 #i‚de‡
__kî√l_ﬁd_dev_t


58 
	t__kî√l_ﬁd_dev_t
;

65 #i‚de‡
__kî√l_size_t


66 #i‡
__BITS_PER_LONG
 != 64

67 
	t__kî√l_size_t
;

68 
	t__kî√l_ssize_t
;

69 
	t__kî√l_±rdiff_t
;

71 
__kî√l_ul⁄g_t
 
	t__kî√l_size_t
;

72 
__kî√l_l⁄g_t
 
	t__kî√l_ssize_t
;

73 
__kî√l_l⁄g_t
 
	t__kî√l_±rdiff_t
;

77 #i‚de‡
__kî√l_fsid_t


79 
	mvÆ
[2];

80 } 
	t__kî√l_fsid_t
;

86 
__kî√l_l⁄g_t
 
	t__kî√l_off_t
;

87 
	t__kî√l_loff_t
;

88 
__kî√l_l⁄g_t
 
	t__kî√l_time_t
;

89 
__kî√l_l⁄g_t
 
	t__kî√l_˛ock_t
;

90 
	t__kî√l_timî_t
;

91 
	t__kî√l_˛ockid_t
;

92 * 
	t__kî√l_ˇddr_t
;

93 
	t__kî√l_uid16_t
;

94 
	t__kî√l_gid16_t
;

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #ifde‡
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 #ifde‡
__x86_64__


79 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

82 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

40 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


41 #i‚de‡
__ENUM_IDTYPE_T


42 
	#__ENUM_IDTYPE_T
 1

	)

46 #unde‡
P_ALL


47 #unde‡
P_PID


48 #unde‡
P_PGID


52 
	mP_ALL
,

53 
	mP_PID
,

54 
	mP_PGID


55 } 
	tidty≥_t
;

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_BSD


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-x32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_¸óã_moduÀ


	)

13 
	#__°ub_Áâach


	)

14 
	#__°ub_fchÊags


	)

15 
	#__°ub_fdëach


	)

16 
	#__°ub_gë_kî√l_syms


	)

17 
	#__°ub_gëmsg


	)

18 
	#__°ub_gây


	)

19 
	#__°ub_lchmod


	)

20 
	#__°ub_nfs£rv˘l


	)

21 
	#__°ub_putmsg


	)

22 
	#__°ub_quîy_moduÀ


	)

23 
	#__°ub_ªvoke


	)

24 
	#__°ub_£éogö


	)

25 
	#__°ub_sigªtu∫


	)

26 
	#__°ub_s°k


	)

27 
	#__°ub_°ty


	)

28 
	#__°ub_u£lib


	)

	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_BSD


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_BSD


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_BSD


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

108 
	#__PTHREAD_MUTEX_HAVE_ELISION
 1

	)

110 
	m__nu£rs
;

111 
__exãnsi⁄__
 union

115 
	m__e•ös
;

116 
	m__ñisi⁄
;

117 
	#__•ös
 
d
.
__e•ös


	)

118 
	#__ñisi⁄
 
d
.
__ñisi⁄


	)

119 
	#__PTHREAD_MUTEX_HAVE_ELISION
 2

	)

120 } 
	md
;

121 
__±hªad_¶i°_t
 
	m__li°
;

124 } 
	m__d©a
;

125 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

126 
	m__Æign
;

127 } 
	t±hªad_muãx_t
;

131 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

132 
	m__Æign
;

133 } 
	t±hªad_muãx©å_t
;

142 
	m__lock
;

143 
	m__fuãx
;

144 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

145 
__exãnsi⁄__
 
	m__wakeup_£q
;

146 
__exãnsi⁄__
 
	m__wokí_£q
;

147 *
	m__muãx
;

148 
	m__nwaôîs
;

149 
	m__brﬂdˇ°_£q
;

150 } 
	m__d©a
;

151 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

152 
__exãnsi⁄__
 
	m__Æign
;

153 } 
	t±hªad_c⁄d_t
;

157 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

158 
	m__Æign
;

159 } 
	t±hªad_c⁄d©å_t
;

163 
	t±hªad_key_t
;

167 
	t±hªad_⁄˚_t
;

170 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


175 #ifde‡
__x86_64__


178 
	m__lock
;

179 
	m__ƒ_ªadîs
;

180 
	m__ªadîs_wakeup
;

181 
	m__wrôî_wakeup
;

182 
	m__ƒ_ªadîs_queued
;

183 
	m__ƒ_wrôîs_queued
;

184 
	m__wrôî
;

185 
	m__sh¨ed
;

186 
	m__∑d1
;

187 
	m__∑d2
;

190 
	m__Êags
;

191 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

192 } 
	m__d©a
;

196 
	m__lock
;

197 
	m__ƒ_ªadîs
;

198 
	m__ªadîs_wakeup
;

199 
	m__wrôî_wakeup
;

200 
	m__ƒ_ªadîs_queued
;

201 
	m__ƒ_wrôîs_queued
;

204 
	m__Êags
;

205 
	m__sh¨ed
;

206 
	m__∑d1
;

207 
	m__∑d2
;

208 
	m__wrôî
;

209 } 
	m__d©a
;

211 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

212 
	m__Æign
;

213 } 
	t±hªad_rwlock_t
;

217 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

218 
	m__Æign
;

219 } 
	t±hªad_rwlock©å_t
;

223 #ifde‡
__USE_XOPEN2K


225 vﬁ©ûê
	t±hªad_•ölock_t
;

232 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

233 
	m__Æign
;

234 } 
	t±hªad_b¨rõr_t
;

238 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

239 
	m__Æign
;

240 } 
	t±hªad_b¨rõøâr_t
;

244 #i‚de‡
__x86_64__


246 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 1000000l

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

82 
	#TIMER_ABSTIME
 1

	)

85 #ifde‡
__USE_GNU


86 
	~<bôs/timex.h
>

88 
__BEGIN_DECLS


91 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

93 
__END_DECLS


99 #unde‡
__√ed_timevÆ


	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@
1
.
1
/usr/include
129
3116
bh.c
data_tx.c
drv.c
firmware.c
indications.c
inet.c
init_hw.c
io.c
monitor.c
netdev.c
os.c
putest.c
sdio_emb.c
sdio_events.c
sdio_mmc.c
sdio_stubs.c
sme_blocking.c
sme_csr/csr_wifi_nme_ap_sef.c
sme_csr/csr_wifi_nme_ap_sef.h
sme_csr/csr_wifi_router_ctrl_sef.c
sme_csr/csr_wifi_router_ctrl_sef.h
sme_csr/csr_wifi_router_sef.c
sme_csr/csr_wifi_router_sef.h
sme_csr/csr_wifi_router_transport.c
sme_csr/csr_wifi_sme_sef.c
sme_csr/csr_wifi_sme_sef.h
sme_csr/sme_userspace.c
sme_csr/sme_userspace.h
sme_mgt.c
sme_native/mlme.c
sme_native/sme_native.c
sme_native/unifi_native.h
sme_sys.c
sme_wext.c
ul_int.c
unifi_clients.h
unifi_config.h
unifi_dbg.c
unifi_event.c
unifi_os.h
unifi_pdu_processing.c
unifi_priv.h
unifi_sme.c
unifi_sme.h
unifi_wext.h
unifiio.h
wext_events.c
/usr/include/linux/errno.h
/usr/include/linux/fs.h
/usr/include/linux/if_arp.h
/usr/include/linux/kernel.h
/usr/include/linux/netdevice.h
/usr/include/linux/poll.h
/usr/include/linux/rtnetlink.h
/usr/include/linux/sched.h
/usr/include/linux/string.h
/usr/include/linux/time.h
/usr/include/linux/types.h
/usr/include/linux/version.h
/usr/include/linux/wait.h
/usr/include/linux/wireless.h
/usr/include/asm/errno.h
/usr/include/asm/poll.h
/usr/include/asm/types.h
/usr/include/linux/if.h
/usr/include/linux/if_addr.h
/usr/include/linux/if_ether.h
/usr/include/linux/if_link.h
/usr/include/linux/if_packet.h
/usr/include/linux/ioctl.h
/usr/include/linux/limits.h
/usr/include/linux/neighbour.h
/usr/include/linux/netlink.h
/usr/include/linux/posix_types.h
/usr/include/linux/socket.h
/usr/include/linux/sysinfo.h
/usr/include/string.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/poll.h
/usr/include/asm-generic/types.h
/usr/include/asm/ioctl.h
/usr/include/asm/posix_types.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/features.h
/usr/include/linux/hdlc/ioctl.h
/usr/include/linux/stddef.h
/usr/include/xlocale.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/asm/posix_types_x32.h
/usr/include/bits/types.h
/usr/include/endian.h
/usr/include/gnu/stubs.h
/usr/include/stdc-predef.h
/usr/include/stdlib.h
/usr/include/sys/cdefs.h
/usr/include/alloca.h
/usr/include/asm-generic/posix_types.h
/usr/include/asm/bitsperlong.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/typesizes.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wordsize.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/gnu/stubs-x32.h
/usr/include/sys/types.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/pthreadtypes.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/time.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sigset.h
/usr/include/bits/time.h
/usr/include/bits/timex.h
